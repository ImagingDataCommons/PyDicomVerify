# Automatically generated from template - EDITS WILL BE LOST

# Generated by iodcomp.awk with options  

from module_h import *
from pydicom.dataset import Dataset
def CompositeIOD_CRImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)CRImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CRImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CRImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CRImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CRImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CRImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CRImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CRImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_CRSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CRImage success after verifying CRSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CRImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CRImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CRImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CRImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CRImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CRImage success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CRImage success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CRImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CRImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_CRImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CRImage success after verifying CRImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CRImage success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleModalityLUT(ds,0,ds) :
		partial_success = Module_ModalityLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CRImage success after verifying ModalityLUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CRImage success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CRImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CRImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CRImage success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_CTImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)CTImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CTImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CTImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CTImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CTImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CTImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CTImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CTImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CTImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CTImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CTImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CTImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CTImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePlane_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CTImage success after verifying ImagePlane " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CTImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CTImage success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CTImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CTImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_CTImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CTImage success after verifying CTImage " + ("success" if partial_success else "failure")) 

	if Condition_IsMultienergyCTAcquisition(ds,0,ds) :
		partial_success = Module_MultienergyCTImage_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CTImage success after verifying MultienergyCTImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CTImage success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CTImage success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CTImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CTImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CTImage success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_MRImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)MRImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePlane_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRImage success after verifying ImagePlane " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRImage success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_MRImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRImage success after verifying MRImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRImage success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRImage success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRImage success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_NMImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)NMImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_NMPETPatientOrientation_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying NMPETPatientOrientation " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleAcquisitionContext(ds,0,ds) :
		partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_NMImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying NMImagePixel " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	partial_success = Module_NMMultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying NMMultiFrame " + ("success" if partial_success else "failure")) 

	partial_success = Module_NMImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying NMImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_NMIsotope_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying NMIsotope " + ("success" if partial_success else "failure")) 

	partial_success = Module_NMDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying NMDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleNMTomoAcquisition(ds,0,ds) :
		partial_success = Module_NMTomoAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying NMTomoAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleNMMultiGatedAcquisition(ds,0,ds) :
		partial_success = Module_NMMultiGatedAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying NMMultiGatedAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleNMPhase(ds,0,ds) :
		partial_success = Module_NMPhase_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying NMPhase " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleNMReconstruction(ds,0,ds) :
		partial_success = Module_NMReconstruction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying NMReconstruction " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameOverlay(ds,0,ds) :
		partial_success = Module_MultiFrameOverlay_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying MultiFrameOverlay " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "NMImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "NMImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_USImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)USImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_PhotometricInterpretationIsPaletteColor(ds,0,ds) :
		partial_success = Module_PaletteColorLookupTable_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying PaletteColorLookupTable " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleUSRegionCalibration(ds,0,ds) :
		partial_success = Module_USRegionCalibration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying USRegionCalibration " + ("success" if partial_success else "failure")) 

	partial_success = Module_USImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USImage success after verifying USImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USImage success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_USMultiFrameImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)USMultiFrameImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USMultiFrameImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USMultiFrameImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USMultiFrameImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USMultiFrameImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSynchronizationForIVUS(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USMultiFrameImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USMultiFrameImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USMultiFrameImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_Cine_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USMultiFrameImage success after verifying Cine " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USMultiFrameImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFramePointers(ds,0,ds) :
		partial_success = Module_FramePointers_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying FramePointers " + ("success" if partial_success else "failure")) 

	if Condition_PhotometricInterpretationIsPaletteColor(ds,0,ds) :
		partial_success = Module_PaletteColorLookupTable_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying PaletteColorLookupTable " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleUSRegionCalibration(ds,0,ds) :
		partial_success = Module_USRegionCalibration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying USRegionCalibration " + ("success" if partial_success else "failure")) 

	partial_success = Module_USImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USMultiFrameImage success after verifying USImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "USMultiFrameImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "USMultiFrameImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_SCImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)SCImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SCImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SCImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SCImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SCImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SCImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SCImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SCImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SCImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralEquipment(ds,0,ds) :
		partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SCImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SCImage success after verifying SCEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SCImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SCImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SCImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SCImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SCImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SCImage success after verifying SCImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SCImage success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleModalityLUT(ds,0,ds) :
		partial_success = Module_ModalityLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SCImage success after verifying ModalityLUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SCImage success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SCImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SCImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SCImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SCImage success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_MultiframeSingleBitSCImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)MultiframeSingleBitSCImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeSingleBitSCImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeSingleBitSCImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeSingleBitSCImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeSingleBitSCImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeSingleBitSCImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeSingleBitSCImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeSingleBitSCImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeSingleBitSCImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralEquipment(ds,0,ds) :
		partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeSingleBitSCImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeSingleBitSCImage success after verifying SCEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeSingleBitSCImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeSingleBitSCImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeSingleBitSCImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCineForSC(ds,0,ds) :
		partial_success = Module_Cine_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeSingleBitSCImage success after verifying Cine " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeSingleBitSCImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFramePointers(ds,0,ds) :
		partial_success = Module_FramePointers_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeSingleBitSCImage success after verifying FramePointers " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeSingleBitSCImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeSingleBitSCImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeSingleBitSCImage success after verifying SCImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCMultiFrameImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeSingleBitSCImage success after verifying SCMultiFrameImage " + ("success" if partial_success else "failure")) 

	if Condition_NumberOfFramesGreaterThanOne(ds,0,ds) :
		partial_success = Module_SCMultiFrameVector_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeSingleBitSCImage success after verifying SCMultiFrameVector " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeSingleBitSCImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeSingleBitSCImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeSingleBitSCImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiframeSingleBitSCImagePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeSingleBitSCImage success after verifying MultiframeSingleBitSCImagePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_MultiframeGrayscaleByteSCImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)MultiframeGrayscaleByteSCImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleByteSCImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleByteSCImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleByteSCImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleByteSCImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_PixelMeasuresOrPlanePositionOrPlaneOrientationSequenceIsPresent(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralEquipment(ds,0,ds) :
		partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleByteSCImage success after verifying SCEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleByteSCImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleByteSCImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCineForSC(ds,0,ds) :
		partial_success = Module_Cine_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying Cine " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleByteSCImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFramePointers(ds,0,ds) :
		partial_success = Module_FramePointers_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying FramePointers " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_MultiFrameFunctionalGroupsModuleIsPresent(ds,0,ds) :
		partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	if Condition_MultiFrameFunctionalGroupsModuleIsPresent(ds,0,ds) :
		partial_success = Module_MultiFrameFunctionalGroupsForMFSC_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying MultiFrameFunctionalGroupsForMFSC " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleByteSCImage success after verifying SCImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCMultiFrameImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleByteSCImage success after verifying SCMultiFrameImage " + ("success" if partial_success else "failure")) 

	if Condition_NumberOfFramesGreaterThanOne(ds,0,ds) :
		partial_success = Module_SCMultiFrameVector_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying SCMultiFrameVector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleByteSCImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleByteSCImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiframeGrayscaleByteSCImagePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleByteSCImage success after verifying MultiframeGrayscaleByteSCImagePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_MultiframeGrayscaleWordSCImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)MultiframeGrayscaleWordSCImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleWordSCImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleWordSCImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleWordSCImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleWordSCImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_PixelMeasuresOrPlanePositionOrPlaneOrientationSequenceIsPresent(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralEquipment(ds,0,ds) :
		partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleWordSCImage success after verifying SCEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleWordSCImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleWordSCImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCineForSC(ds,0,ds) :
		partial_success = Module_Cine_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying Cine " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleWordSCImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	partial_success = Module_FramePointers_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleWordSCImage success after verifying FramePointers " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_MultiFrameFunctionalGroupsModuleIsPresent(ds,0,ds) :
		partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	if Condition_MultiFrameFunctionalGroupsModuleIsPresent(ds,0,ds) :
		partial_success = Module_MultiFrameFunctionalGroupsForMFSC_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying MultiFrameFunctionalGroupsForMFSC " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleWordSCImage success after verifying SCImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCMultiFrameImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleWordSCImage success after verifying SCMultiFrameImage " + ("success" if partial_success else "failure")) 

	if Condition_NumberOfFramesGreaterThanOne(ds,0,ds) :
		partial_success = Module_SCMultiFrameVector_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying SCMultiFrameVector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleWordSCImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeGrayscaleWordSCImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiframeGrayscaleWordSCImagePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeGrayscaleWordSCImage success after verifying MultiframeGrayscaleWordSCImagePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_MultiframeTrueColorSCImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)MultiframeTrueColorSCImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeTrueColorSCImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeTrueColorSCImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeTrueColorSCImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeTrueColorSCImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_PixelMeasuresOrPlanePositionOrPlaneOrientationSequenceIsPresent(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralEquipment(ds,0,ds) :
		partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeTrueColorSCImage success after verifying SCEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeTrueColorSCImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeTrueColorSCImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCineForSC(ds,0,ds) :
		partial_success = Module_Cine_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying Cine " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeTrueColorSCImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	partial_success = Module_FramePointers_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeTrueColorSCImage success after verifying FramePointers " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_MultiFrameFunctionalGroupsModuleIsPresent(ds,0,ds) :
		partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	if Condition_MultiFrameFunctionalGroupsModuleIsPresent(ds,0,ds) :
		partial_success = Module_MultiFrameFunctionalGroupsForMFSC_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying MultiFrameFunctionalGroupsForMFSC " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeTrueColorSCImage success after verifying SCImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCMultiFrameImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeTrueColorSCImage success after verifying SCMultiFrameImage " + ("success" if partial_success else "failure")) 

	if Condition_NumberOfFramesGreaterThanOne(ds,0,ds) :
		partial_success = Module_SCMultiFrameVector_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying SCMultiFrameVector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeTrueColorSCImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MultiframeTrueColorSCImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiframeTrueColorSCImagePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MultiframeTrueColorSCImage success after verifying MultiframeTrueColorSCImagePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_StandaloneOverlay_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)StandaloneOverlay")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneOverlay success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneOverlay success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneOverlay success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneOverlay success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneOverlay success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneOverlay success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneOverlay success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneOverlay success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneOverlay success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_OverlayIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneOverlay success after verifying OverlayIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneOverlay success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneOverlay success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_StandaloneCurve_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)StandaloneCurve")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneCurve success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneCurve success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneCurve success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneCurve success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneCurve success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneCurve success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneCurve success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneCurve success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneCurve success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_CurveIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneCurve success after verifying CurveIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_Curve_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneCurve success after verifying Curve " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneCurve success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_StandaloneModalityLUT_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)StandaloneModalityLUT")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneModalityLUT success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneModalityLUT success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneModalityLUT success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneModalityLUT success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneModalityLUT success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneModalityLUT success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneModalityLUT success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneModalityLUT success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneModalityLUT success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ModalityLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneModalityLUT success after verifying ModalityLUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_LUTIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneModalityLUT success after verifying LUTIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneModalityLUT success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_StandaloneVOILUT_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)StandaloneVOILUT")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneVOILUT success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneVOILUT success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneVOILUT success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneVOILUT success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneVOILUT success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneVOILUT success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneVOILUT success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StandaloneVOILUT success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneVOILUT success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneVOILUT success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_LUTIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneVOILUT success after verifying LUTIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StandaloneVOILUT success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_Segmentation_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)Segmentation")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "Segmentation success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "Segmentation success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "Segmentation success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "Segmentation success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_SegmentationSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying SegmentationSeries " + ("success" if partial_success else "failure")) 

	if Condition_DerivationImageFunctionalGroupNotPresentOrFrameOfReferenceUIDPresent(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "Segmentation success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "Segmentation success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	partial_success = Module_SegmentationImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying SegmentationImage " + ("success" if partial_success else "failure")) 

	if Condition_DerivationImageFunctionalGroupPresent(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "Segmentation success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForSegmentation_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying MultiFrameFunctionalGroupsForSegmentation " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "Segmentation success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Segmentation success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "Segmentation success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_SurfaceSegmentation_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)SurfaceSegmentation")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SurfaceSegmentation success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SurfaceSegmentation success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SurfaceSegmentation success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SurfaceSegmentation success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SurfaceSegmentation success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SurfaceSegmentation success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SurfaceSegmentation success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SurfaceSegmentation success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_SegmentationSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SurfaceSegmentation success after verifying SegmentationSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SurfaceSegmentation success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SurfaceSegmentation success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SurfaceSegmentation success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SurfaceSegmentation_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SurfaceSegmentation success after verifying SurfaceSegmentation " + ("success" if partial_success else "failure")) 

	partial_success = Module_SurfaceMesh_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SurfaceSegmentation success after verifying SurfaceMesh " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SurfaceSegmentation success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SurfaceSegmentation success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SurfaceSegmentation success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_SpatialRegistration_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)SpatialRegistration")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SpatialRegistration success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialRegistration success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SpatialRegistration success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialRegistration success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialRegistration success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SpatialRegistration success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialRegistration success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SpatialRegistration success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_SpatialRegistrationSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialRegistration success after verifying SpatialRegistrationSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialRegistration success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialRegistration success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SpatialRegistration_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialRegistration success after verifying SpatialRegistration " + ("success" if partial_success else "failure")) 

	partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialRegistration success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SpatialRegistration success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialRegistration success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_DeformableSpatialRegistration_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)DeformableSpatialRegistration")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DeformableSpatialRegistration success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DeformableSpatialRegistration success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DeformableSpatialRegistration success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DeformableSpatialRegistration success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DeformableSpatialRegistration success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DeformableSpatialRegistration success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DeformableSpatialRegistration success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DeformableSpatialRegistration success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_SpatialRegistrationSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DeformableSpatialRegistration success after verifying SpatialRegistrationSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DeformableSpatialRegistration success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DeformableSpatialRegistration success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DeformableSpatialRegistration success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_DeformableSpatialRegistration_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DeformableSpatialRegistration success after verifying DeformableSpatialRegistration " + ("success" if partial_success else "failure")) 

	partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DeformableSpatialRegistration success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DeformableSpatialRegistration success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DeformableSpatialRegistration success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_SpatialFiducials_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)SpatialFiducials")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SpatialFiducials success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialFiducials success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SpatialFiducials success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialFiducials success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialFiducials success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SpatialFiducials success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialFiducials success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SpatialFiducials success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_SpatialFiducialsSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialFiducials success after verifying SpatialFiducialsSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialFiducials success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SpatialFiducials_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialFiducials success after verifying SpatialFiducials " + ("success" if partial_success else "failure")) 

	partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialFiducials success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SpatialFiducials success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpatialFiducials success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_EncapsulatedPDF_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)EncapsulatedPDF")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EncapsulatedPDF success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedPDF success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EncapsulatedPDF success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedPDF success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedPDF success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EncapsulatedPDF success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_EncapsulatedDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedPDF success after verifying EncapsulatedDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EncapsulatedPDF success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedPDF success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedPDF success after verifying SCEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EncapsulatedDocument_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedPDF success after verifying EncapsulatedDocument " + ("success" if partial_success else "failure")) 

	partial_success = Module_EncapsulatedDocumentPDFPseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedPDF success after verifying EncapsulatedDocumentPDFPseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedPDF success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_EncapsulatedCDA_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)EncapsulatedCDA")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EncapsulatedCDA success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedCDA success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EncapsulatedCDA success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedCDA success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedCDA success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EncapsulatedCDA success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_EncapsulatedDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedCDA success after verifying EncapsulatedDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EncapsulatedCDA success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedCDA success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SCEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedCDA success after verifying SCEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EncapsulatedDocument_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedCDA success after verifying EncapsulatedDocument " + ("success" if partial_success else "failure")) 

	partial_success = Module_EncapsulatedDocumentCDAPseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedCDA success after verifying EncapsulatedDocumentCDAPseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedCDA success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_EncapsulatedSTL_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)EncapsulatedSTL")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EncapsulatedSTL success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedSTL success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EncapsulatedSTL success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedSTL success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedSTL success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EncapsulatedSTL success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_EncapsulatedDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedSTL success after verifying EncapsulatedDocumentSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_EncapsulatedDocumentSTLSeriesPseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedSTL success after verifying EncapsulatedDocumentSTLSeriesPseudo " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EncapsulatedSTL success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedSTL success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedSTL success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedSTL success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EncapsulatedDocument_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedSTL success after verifying EncapsulatedDocument " + ("success" if partial_success else "failure")) 

	partial_success = Module_EncapsulatedDocumentSTLPseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedSTL success after verifying EncapsulatedDocumentSTLPseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_Manufacturing3DModel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedSTL success after verifying Manufacturing3DModel " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EncapsulatedSTL success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EncapsulatedSTL success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_RealWorldValueMapping_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)RealWorldValueMapping")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RealWorldValueMapping success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RealWorldValueMapping success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RealWorldValueMapping success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RealWorldValueMapping success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RealWorldValueMapping success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RealWorldValueMapping success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RealWorldValueMapping success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RealWorldValueMapping success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_RealWorldValueMappingSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RealWorldValueMapping success after verifying RealWorldValueMappingSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RealWorldValueMapping success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_RealWorldValueMapping_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RealWorldValueMapping success after verifying RealWorldValueMapping " + ("success" if partial_success else "failure")) 

	partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RealWorldValueMapping success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RealWorldValueMapping success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_IVOCTImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)IVOCTImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IVOCTImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IVOCTImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IVOCTImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IVOCTImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_IntravascularOCTSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying IntravascularOCTSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IVOCTImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSupplementalPaletteColorLUT(ds,0,ds) :
		partial_success = Module_SupplementalPaletteColorLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IVOCTImage success after verifying SupplementalPaletteColorLUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	if Condition_PresentationIntentTypeIsForPresentation(ds,0,ds) :
		partial_success = Module_MultiFrameFunctionalGroupsForIVOCTImageForPresentation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IVOCTImage success after verifying MultiFrameFunctionalGroupsForIVOCTImageForPresentation " + ("success" if partial_success else "failure")) 

	if Condition_PresentationIntentTypeIsForProcessing(ds,0,ds) :
		partial_success = Module_MultiFrameFunctionalGroupsForIVOCTImageForProcessing_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IVOCTImage success after verifying MultiFrameFunctionalGroupsForIVOCTImageForProcessing " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IVOCTImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_IntravascularOCTImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying IntravascularOCTImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_IntravascularOCTAcquisitionParameters_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying IntravascularOCTAcquisitionParameters " + ("success" if partial_success else "failure")) 

	if Condition_PresentationIntentTypeIsForProcessing(ds,0,ds) :
		partial_success = Module_IntravascularOCTProcessingParameters_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IVOCTImage success after verifying IntravascularOCTProcessingParameters " + ("success" if partial_success else "failure")) 

	partial_success = Module_IntravascularImageAcquisitionParameters_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying IntravascularImageAcquisitionParameters " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IVOCTImage success after verifying Device " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IVOCTImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IVOCTImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_ParametricMap_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)ParametricMap")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_ParametricMapSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying ParametricMapSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	if Condition_PixelDataPresent(ds,0,ds) :
		partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_FloatPixelDataPresent(ds,0,ds) :
		partial_success = Module_FloatingPointImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying FloatingPointImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_DoubleFloatPixelDataPresent(ds,0,ds) :
		partial_success = Module_DoubleFloatingPointImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying DoubleFloatingPointImagePixel " + ("success" if partial_success else "failure")) 

	partial_success = Module_ParametricMapImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying ParametricMapImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForParametricMap_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying MultiFrameFunctionalGroupsForParametricMap " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_PixelPresentationIsColorRangeAndPaletteColorLookupTableUIDAbsent(ds,0,ds) :
		partial_success = Module_PaletteColorLookupTable_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying PaletteColorLookupTable " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleBulkMotion(ds,0,ds) :
		partial_success = Module_BulkMotionSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying BulkMotionSynchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying Specimen " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ParametricMap success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ParametricMap success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_BasicDirectory_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)BasicDirectory")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicDirectory success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_FileSetIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicDirectory success after verifying FileSetIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_DirectoryInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicDirectory success after verifying DirectoryInformation " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_BasicDirectoryDental_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)BasicDirectoryDental")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicDirectoryDental success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_FileSetIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicDirectoryDental success after verifying FileSetIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_DirectoryInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicDirectoryDental success after verifying DirectoryInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_DirectoryInformationDental_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicDirectoryDental success after verifying DirectoryInformationDental " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_XAImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)XAImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XAImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XAImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XAImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XAImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XAImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XAImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XAImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCine(ds,0,ds) :
		partial_success = Module_Cine_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying Cine " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrame(ds,0,ds) :
		partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFramePointers(ds,0,ds) :
		partial_success = Module_FramePointers_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying FramePointers " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMask(ds,0,ds) :
		partial_success = Module_Mask_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying Mask " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_XRayImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XAImage success after verifying XRayImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_XRayAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XAImage success after verifying XRayAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayTable(ds,0,ds) :
		partial_success = Module_XRayTable_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying XRayTable " + ("success" if partial_success else "failure")) 

	partial_success = Module_XAPositioner_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XAImage success after verifying XAPositioner " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXDetector(ds,0,ds) :
		partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameOverlay(ds,0,ds) :
		partial_success = Module_MultiFrameOverlay_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying MultiFrameOverlay " + ("success" if partial_success else "failure")) 

	if Condition_XRayNeedModuleModalityLUT(ds,0,ds) :
		partial_success = Module_ModalityLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying ModalityLUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XAImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XAImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_XRFImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)XRFImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRFImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRFImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRFImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRFImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRFImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRFImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRFImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCine(ds,0,ds) :
		partial_success = Module_Cine_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying Cine " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrame(ds,0,ds) :
		partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFramePointers(ds,0,ds) :
		partial_success = Module_FramePointers_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying FramePointers " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMask(ds,0,ds) :
		partial_success = Module_Mask_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying Mask " + ("success" if partial_success else "failure")) 

	partial_success = Module_XRayImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRFImage success after verifying XRayImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_XRayAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRFImage success after verifying XRayAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayTable(ds,0,ds) :
		partial_success = Module_XRayTable_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying XRayTable " + ("success" if partial_success else "failure")) 

	partial_success = Module_XRFPositioner_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRFImage success after verifying XRFPositioner " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayTomographyAcquisitionBasedOnScanOptions(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXDetector(ds,0,ds) :
		partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameOverlay(ds,0,ds) :
		partial_success = Module_MultiFrameOverlay_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying MultiFrameOverlay " + ("success" if partial_success else "failure")) 

	if Condition_XRayNeedModuleModalityLUT(ds,0,ds) :
		partial_success = Module_ModalityLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying ModalityLUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRFImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRFImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_EnhancedXAImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)EnhancedXAImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXAImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXAImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXAImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXAImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_XAXRFSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXAImage success after verifying XAXRFSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_CArmPositionerTabletopRelationshipIsYes(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_CArmPositionerTabletopRelationshipIsYes(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXAImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXAImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXAImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMask(ds,0,ds) :
		partial_success = Module_Mask_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying Mask " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying Intervention " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXAImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXAImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForEnhancedXAImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXAImage success after verifying MultiFrameFunctionalGroupsForEnhancedXAImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedXAXRFImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXAImage success after verifying EnhancedXAXRFImage " + ("success" if partial_success else "failure")) 

	if Condition_ImageTypeValue1Original(ds,0,ds) :
		partial_success = Module_XAXRFAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying XAXRFAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_XRayReceptorTypeIsImageIntensifier(ds,0,ds) :
		partial_success = Module_XRayImageIntensifier_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying XRayImageIntensifier " + ("success" if partial_success else "failure")) 

	if Condition_XRayReceptorTypeIsDigitalDetector(ds,0,ds) :
		partial_success = Module_XRayDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying XRayDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXAXRFMultiFramePresentation(ds,0,ds) :
		partial_success = Module_XAXRFMultiFramePresentation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying XAXRFMultiFramePresentation " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXAImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXAImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_EnhancedXRFImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)EnhancedXRFImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXRFImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXRFImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXRFImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXRFImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_XAXRFSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXRFImage success after verifying XAXRFSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXRFImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXRFImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXRFImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMask(ds,0,ds) :
		partial_success = Module_Mask_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying Mask " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying Intervention " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXRFImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXRFImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForEnhancedXRFImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXRFImage success after verifying MultiFrameFunctionalGroupsForEnhancedXRFImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleXRayTomographyAcquisition(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedXAXRFImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXRFImage success after verifying EnhancedXAXRFImage " + ("success" if partial_success else "failure")) 

	if Condition_ImageTypeValue1Original(ds,0,ds) :
		partial_success = Module_XAXRFAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying XAXRFAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_XRayReceptorTypeIsImageIntensifier(ds,0,ds) :
		partial_success = Module_XRayImageIntensifier_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying XRayImageIntensifier " + ("success" if partial_success else "failure")) 

	if Condition_XRayReceptorTypeIsDigitalDetector(ds,0,ds) :
		partial_success = Module_XRayDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying XRayDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXAXRFMultiFramePresentation(ds,0,ds) :
		partial_success = Module_XAXRFMultiFramePresentation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying XAXRFMultiFramePresentation " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedXRFImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedXRFImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_XRay3DAngiographicImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)XRay3DAngiographicImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying EnhancedSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying Intervention " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForXRay3DAngiographicImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying MultiFrameFunctionalGroupsForXRay3DAngiographicImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModulePatientOrientation(ds,0,ds) :
		partial_success = Module_PatientOrientation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying PatientOrientation " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageEquipmentCoordinateRelationship(ds,0,ds) :
		partial_success = Module_ImageEquipmentCoordinateRelationship_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying ImageEquipmentCoordinateRelationship " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_XRay3DImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying XRay3DImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRay3DAngiographicImageContributingSources(ds,0,ds) :
		partial_success = Module_XRay3DAngiographicImageContributingSources_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying XRay3DAngiographicImageContributingSources " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRay3DAngiographicAcquisition(ds,0,ds) :
		partial_success = Module_XRay3DAngiographicAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying XRay3DAngiographicAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRay3DReconstruction(ds,0,ds) :
		partial_success = Module_XRay3DReconstruction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying XRay3DReconstruction " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DAngiographicImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DAngiographicImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_XRay3DCraniofacialImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)XRay3DCraniofacialImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying EnhancedSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying Intervention " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForXRay3DCraniofacialImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying MultiFrameFunctionalGroupsForXRay3DCraniofacialImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModulePatientOrientation(ds,0,ds) :
		partial_success = Module_PatientOrientation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying PatientOrientation " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageEquipmentCoordinateRelationship(ds,0,ds) :
		partial_success = Module_ImageEquipmentCoordinateRelationship_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying ImageEquipmentCoordinateRelationship " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_XRay3DImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying XRay3DImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRay3DCraniofacialImageContributingSources(ds,0,ds) :
		partial_success = Module_XRay3DCraniofacialImageContributingSources_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying XRay3DCraniofacialImageContributingSources " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRay3DCraniofacialAcquisition(ds,0,ds) :
		partial_success = Module_XRay3DCraniofacialAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying XRay3DCraniofacialAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRay3DReconstruction(ds,0,ds) :
		partial_success = Module_XRay3DReconstruction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying XRay3DReconstruction " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRay3DCraniofacialImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRay3DCraniofacialImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_PETImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)PETImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PETImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PETImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PETImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PETImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_PETSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying PETSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_PETIsotope_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying PETIsotope " + ("success" if partial_success else "failure")) 

	if Condition_NeedModulePETMultigatedAcquisition(ds,0,ds) :
		partial_success = Module_PETMultigatedAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PETImage success after verifying PETMultigatedAcquisition " + ("success" if partial_success else "failure")) 

	partial_success = Module_NMPETPatientOrientation_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying NMPETPatientOrientation " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PETImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePlane_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying ImagePlane " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PETImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PETImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_PETImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying PETImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PETImage success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PETImage success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleAcquisitionContext(ds,0,ds) :
		partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PETImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PETImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PETImage success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_EnhancedPETImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)EnhancedPETImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedPETImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedPETImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedPETImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedPETImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedPETSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying EnhancedPETSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedPETImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedPETImage success after verifying Intervention " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForEnhancedPETImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying MultiFrameFunctionalGroupsForEnhancedPETImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedPETImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedPETImage success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedPETImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedPETIsotope_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying EnhancedPETIsotope " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedPETAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying EnhancedPETAcquisition " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedPETImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying EnhancedPETImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedPETCorrections_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying EnhancedPETCorrections " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedPETImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedPETImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedPETImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_LegacyConvertedEnhancedPETImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)LegacyConvertedEnhancedPETImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedPETImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedPETImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedPETImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedPETImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedPETImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedPETImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedPETImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedPETImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedPETSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedPETImage success after verifying EnhancedPETSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedPETImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedPETImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedPETImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	if Condition_EnhancedGeneralEquipmentIsPresent(ds,0,ds) :
		partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedPETImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedPETImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedPETImage success after verifying Intervention " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedPETImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedPETImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedPETImage success after verifying MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedPETImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedPETImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedPETImage success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedPETImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedPETImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedPETImage success after verifying EnhancedPETImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedPETImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedPETImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedPETImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedPETImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)PrivatePixelMedLegacyConvertedEnhancedPETImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedPETSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying EnhancedPETSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	if Condition_EnhancedGeneralEquipmentIsPresent(ds,0,ds) :
		partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedPETImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying EnhancedPETImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_RTImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)RTImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTImage success after verifying RTSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCine(ds,0,ds) :
		partial_success = Module_Cine_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying Cine " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrame(ds,0,ds) :
		partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTImage success after verifying RTImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleModalityLUT(ds,0,ds) :
		partial_success = Module_ModalityLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying ModalityLUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleApproval(ds,0,ds) :
		partial_success = Module_Approval_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying Approval " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_RTDose_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)RTDose")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTDose success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTDose success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTDose success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTDose success after verifying RTSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTDose success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTDose success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	if Condition_DoseDataGridbased(ds,0,ds) :
		partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	if Condition_DoseDataGridbased(ds,0,ds) :
		partial_success = Module_ImagePlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying ImagePlane " + ("success" if partial_success else "failure")) 

	if Condition_DoseDataGridbased(ds,0,ds) :
		partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_DoseDataGridbasedAndNeedModuleMultiFrame(ds,0,ds) :
		partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameOverlay(ds,0,ds) :
		partial_success = Module_MultiFrameOverlay_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying MultiFrameOverlay " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleModalityLUT(ds,0,ds) :
		partial_success = Module_ModalityLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying ModalityLUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTDose_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTDose success after verifying RTDose " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTDVH(ds,0,ds) :
		partial_success = Module_RTDVH_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying RTDVH " + ("success" if partial_success else "failure")) 

	if Condition_DoseDataPointsOrCurves(ds,0,ds) :
		partial_success = Module_StructureSet_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying StructureSet " + ("success" if partial_success else "failure")) 

	if Condition_DoseDataPointsOrCurves(ds,0,ds) :
		partial_success = Module_ROIContour_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying ROIContour " + ("success" if partial_success else "failure")) 

	if Condition_DoseDataPointsOrCurves(ds,0,ds) :
		partial_success = Module_RTDoseROI_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying RTDoseROI " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTDose success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTDose success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_RTStructureSet_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)RTStructureSet")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTStructureSet success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTStructureSet success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTStructureSet success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTStructureSet success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTStructureSet success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTStructureSet success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTStructureSet success after verifying RTSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTStructureSet success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTStructureSet success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_StructureSet_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTStructureSet success after verifying StructureSet " + ("success" if partial_success else "failure")) 

	partial_success = Module_ROIContour_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTStructureSet success after verifying ROIContour " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTROIObservations_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTStructureSet success after verifying RTROIObservations " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleApproval(ds,0,ds) :
		partial_success = Module_Approval_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTStructureSet success after verifying Approval " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTStructureSet success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTStructureSet success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTStructureSet success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_RTPlan_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)RTPlan")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTPlan success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTPlan success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTPlan success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTPlan success after verifying RTSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTPlan success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTGeneralPlan_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTPlan success after verifying RTGeneralPlan " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTPrescription(ds,0,ds) :
		partial_success = Module_RTPrescription_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying RTPrescription " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTToleranceTables(ds,0,ds) :
		partial_success = Module_RTToleranceTables_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying RTToleranceTables " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTPatientSetup(ds,0,ds) :
		partial_success = Module_RTPatientSetup_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying RTPatientSetup " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTFractionScheme(ds,0,ds) :
		partial_success = Module_RTFractionScheme_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying RTFractionScheme " + ("success" if partial_success else "failure")) 

	if Condition_NeedRTBeams(ds,0,ds) :
		partial_success = Module_RTBeams_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying RTBeams " + ("success" if partial_success else "failure")) 

	if Condition_NeedRTBrachyApplicationSetups(ds,0,ds) :
		partial_success = Module_RTBrachyApplicationSetups_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying RTBrachyApplicationSetups " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleApproval(ds,0,ds) :
		partial_success = Module_Approval_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying Approval " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTPlan success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTPlan success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_RTBeamsTreatmentRecord_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)RTBeamsTreatmentRecord")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBeamsTreatmentRecord success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBeamsTreatmentRecord success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBeamsTreatmentRecord success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBeamsTreatmentRecord success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBeamsTreatmentRecord success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBeamsTreatmentRecord success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBeamsTreatmentRecord success after verifying RTSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBeamsTreatmentRecord success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBeamsTreatmentRecord success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTGeneralTreatmentRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBeamsTreatmentRecord success after verifying RTGeneralTreatmentRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTPatientSetup(ds,0,ds) :
		partial_success = Module_RTPatientSetup_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBeamsTreatmentRecord success after verifying RTPatientSetup " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTTreatmentMachineRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBeamsTreatmentRecord success after verifying RTTreatmentMachineRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMeasuredDoseReferenceRecord(ds,0,ds) :
		partial_success = Module_MeasuredDoseReferenceRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBeamsTreatmentRecord success after verifying MeasuredDoseReferenceRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCalculatedDoseReferenceRecord(ds,0,ds) :
		partial_success = Module_CalculatedDoseReferenceRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBeamsTreatmentRecord success after verifying CalculatedDoseReferenceRecord " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTBeamsSessionRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBeamsTreatmentRecord success after verifying RTBeamsSessionRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTTreatmentSummaryRecord(ds,0,ds) :
		partial_success = Module_RTTreatmentSummaryRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBeamsTreatmentRecord success after verifying RTTreatmentSummaryRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBeamsTreatmentRecord success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBeamsTreatmentRecord success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBeamsTreatmentRecord success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_RTBrachyTreatmentRecord_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)RTBrachyTreatmentRecord")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBrachyTreatmentRecord success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBrachyTreatmentRecord success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBrachyTreatmentRecord success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBrachyTreatmentRecord success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBrachyTreatmentRecord success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBrachyTreatmentRecord success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBrachyTreatmentRecord success after verifying RTSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBrachyTreatmentRecord success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBrachyTreatmentRecord success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTGeneralTreatmentRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBrachyTreatmentRecord success after verifying RTGeneralTreatmentRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTPatientSetup(ds,0,ds) :
		partial_success = Module_RTPatientSetup_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBrachyTreatmentRecord success after verifying RTPatientSetup " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTTreatmentMachineRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBrachyTreatmentRecord success after verifying RTTreatmentMachineRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMeasuredDoseReferenceRecord(ds,0,ds) :
		partial_success = Module_MeasuredDoseReferenceRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBrachyTreatmentRecord success after verifying MeasuredDoseReferenceRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCalculatedDoseReferenceRecord(ds,0,ds) :
		partial_success = Module_CalculatedDoseReferenceRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBrachyTreatmentRecord success after verifying CalculatedDoseReferenceRecord " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTBrachySessionRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBrachyTreatmentRecord success after verifying RTBrachySessionRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTTreatmentSummaryRecord(ds,0,ds) :
		partial_success = Module_RTTreatmentSummaryRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBrachyTreatmentRecord success after verifying RTTreatmentSummaryRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBrachyTreatmentRecord success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTBrachyTreatmentRecord success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTBrachyTreatmentRecord success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_RTTreatmentSummaryRecord_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)RTTreatmentSummaryRecord")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTTreatmentSummaryRecord success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTTreatmentSummaryRecord success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTTreatmentSummaryRecord success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTTreatmentSummaryRecord success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTTreatmentSummaryRecord success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTTreatmentSummaryRecord success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTTreatmentSummaryRecord success after verifying RTSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTTreatmentSummaryRecord success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTTreatmentSummaryRecord success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTGeneralTreatmentRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTTreatmentSummaryRecord success after verifying RTGeneralTreatmentRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTTreatmentSummaryRecord(ds,0,ds) :
		partial_success = Module_RTTreatmentSummaryRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTTreatmentSummaryRecord success after verifying RTTreatmentSummaryRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTTreatmentSummaryRecord success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTTreatmentSummaryRecord success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTTreatmentSummaryRecord success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_RTIonPlan_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)RTIonPlan")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonPlan success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonPlan success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonPlan success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonPlan success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonPlan success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonPlan success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonPlan success after verifying RTSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonPlan success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonPlan success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonPlan success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTGeneralPlan_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonPlan success after verifying RTGeneralPlan " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTPrescription(ds,0,ds) :
		partial_success = Module_RTPrescription_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonPlan success after verifying RTPrescription " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTIonToleranceTables(ds,0,ds) :
		partial_success = Module_RTIonToleranceTables_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonPlan success after verifying RTIonToleranceTables " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTPatientSetup(ds,0,ds) :
		partial_success = Module_RTPatientSetup_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonPlan success after verifying RTPatientSetup " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTFractionScheme(ds,0,ds) :
		partial_success = Module_RTFractionScheme_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonPlan success after verifying RTFractionScheme " + ("success" if partial_success else "failure")) 

	if Condition_NeedRTIonBeams(ds,0,ds) :
		partial_success = Module_RTIonBeams_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonPlan success after verifying RTIonBeams " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleApproval(ds,0,ds) :
		partial_success = Module_Approval_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonPlan success after verifying Approval " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonPlan success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonPlan success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonPlan success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_RTIonBeamsTreatmentRecord_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)RTIonBeamsTreatmentRecord")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonBeamsTreatmentRecord success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonBeamsTreatmentRecord success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonBeamsTreatmentRecord success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonBeamsTreatmentRecord success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonBeamsTreatmentRecord success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonBeamsTreatmentRecord success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonBeamsTreatmentRecord success after verifying RTSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonBeamsTreatmentRecord success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonBeamsTreatmentRecord success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTGeneralTreatmentRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonBeamsTreatmentRecord success after verifying RTGeneralTreatmentRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTPatientSetup(ds,0,ds) :
		partial_success = Module_RTPatientSetup_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonBeamsTreatmentRecord success after verifying RTPatientSetup " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTTreatmentMachineRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonBeamsTreatmentRecord success after verifying RTTreatmentMachineRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMeasuredDoseReferenceRecord(ds,0,ds) :
		partial_success = Module_MeasuredDoseReferenceRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonBeamsTreatmentRecord success after verifying MeasuredDoseReferenceRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCalculatedDoseReferenceRecord(ds,0,ds) :
		partial_success = Module_CalculatedDoseReferenceRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonBeamsTreatmentRecord success after verifying CalculatedDoseReferenceRecord " + ("success" if partial_success else "failure")) 

	partial_success = Module_RTIonBeamsSessionRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonBeamsTreatmentRecord success after verifying RTIonBeamsSessionRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRTTreatmentSummaryRecord(ds,0,ds) :
		partial_success = Module_RTTreatmentSummaryRecord_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonBeamsTreatmentRecord success after verifying RTTreatmentSummaryRecord " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonBeamsTreatmentRecord success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RTIonBeamsTreatmentRecord success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RTIonBeamsTreatmentRecord success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_DXImageForProcessing_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)DXImageForProcessing")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying DXSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXAnatomyImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying DXAnatomyImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying DXImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXPositioning(ds,0,ds) :
		partial_success = Module_DXPositioning_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying DXPositioning " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleXRayTomographyAcquisition(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayAcquisitionDose(ds,0,ds) :
		partial_success = Module_XRayAcquisitionDose_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying XRayAcquisitionDose " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGeneration(ds,0,ds) :
		partial_success = Module_XRayGeneration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying XRayGeneration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_DXNeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageHistogram(ds,0,ds) :
		partial_success = Module_ImageHistogram_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying ImageHistogram " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForProcessing success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForProcessing success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_DXImageForPresentation_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)DXImageForPresentation")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying DXSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXAnatomyImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying DXAnatomyImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying DXImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXPositioning(ds,0,ds) :
		partial_success = Module_DXPositioning_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying DXPositioning " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleXRayTomographyAcquisition(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayAcquisitionDose(ds,0,ds) :
		partial_success = Module_XRayAcquisitionDose_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying XRayAcquisitionDose " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGeneration(ds,0,ds) :
		partial_success = Module_XRayGeneration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying XRayGeneration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_DXNeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageHistogram(ds,0,ds) :
		partial_success = Module_ImageHistogram_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying ImageHistogram " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentation success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentation success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_MammographyImageForProcessing_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)MammographyImageForProcessing")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying DXSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_MammographySeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying MammographySeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXAnatomyImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying DXAnatomyImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying DXImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXPositioning(ds,0,ds) :
		partial_success = Module_DXPositioning_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying DXPositioning " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleXRayTomographyAcquisition(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayAcquisitionDose(ds,0,ds) :
		partial_success = Module_XRayAcquisitionDose_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying XRayAcquisitionDose " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGeneration(ds,0,ds) :
		partial_success = Module_XRayGeneration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying XRayGeneration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	partial_success = Module_MammographyImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying MammographyImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_DXNeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageHistogram(ds,0,ds) :
		partial_success = Module_ImageHistogram_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying ImageHistogram " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessing success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessing success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_MammographyImageForPresentation_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)MammographyImageForPresentation")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying DXSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_MammographySeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying MammographySeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXAnatomyImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying DXAnatomyImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying DXImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXPositioning(ds,0,ds) :
		partial_success = Module_DXPositioning_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying DXPositioning " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleXRayTomographyAcquisition(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayAcquisitionDose(ds,0,ds) :
		partial_success = Module_XRayAcquisitionDose_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying XRayAcquisitionDose " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGeneration(ds,0,ds) :
		partial_success = Module_XRayGeneration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying XRayGeneration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	partial_success = Module_MammographyImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying MammographyImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_DXNeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageHistogram(ds,0,ds) :
		partial_success = Module_ImageHistogram_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying ImageHistogram " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentation success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentation success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_MammographyImageForProcessingIHEMammo_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)MammographyImageForProcessingIHEMammo")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying DXSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_MammographySeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying MammographySeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXAnatomyImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying DXAnatomyImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying DXImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXPositioning(ds,0,ds) :
		partial_success = Module_DXPositioning_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying DXPositioning " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleXRayTomographyAcquisition(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayAcquisitionDose(ds,0,ds) :
		partial_success = Module_XRayAcquisitionDose_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying XRayAcquisitionDose " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGeneration(ds,0,ds) :
		partial_success = Module_XRayGeneration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying XRayGeneration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	partial_success = Module_MammographyImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying MammographyImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_DXNeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageHistogram(ds,0,ds) :
		partial_success = Module_ImageHistogram_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying ImageHistogram " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammo success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_IHEMammoProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying IHEMammoProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_IHEMammoProfileWithoutPartialViewOption_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammo success after verifying IHEMammoProfileWithoutPartialViewOption " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_MammographyImageForProcessingIHEMammoPartialViewOption_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)MammographyImageForProcessingIHEMammoPartialViewOption")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying DXSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_MammographySeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying MammographySeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXAnatomyImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying DXAnatomyImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying DXImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXPositioning(ds,0,ds) :
		partial_success = Module_DXPositioning_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying DXPositioning " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleXRayTomographyAcquisition(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayAcquisitionDose(ds,0,ds) :
		partial_success = Module_XRayAcquisitionDose_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying XRayAcquisitionDose " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGeneration(ds,0,ds) :
		partial_success = Module_XRayGeneration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying XRayGeneration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	partial_success = Module_MammographyImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying MammographyImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_DXNeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageHistogram(ds,0,ds) :
		partial_success = Module_ImageHistogram_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying ImageHistogram " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_IHEMammoProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying IHEMammoProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_IHEMammoProfileWithPartialViewOption_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForProcessingIHEMammoPartialViewOption success after verifying IHEMammoProfileWithPartialViewOption " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_MammographyImageForPresentationIHEMammo_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)MammographyImageForPresentationIHEMammo")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying DXSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_MammographySeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying MammographySeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXAnatomyImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying DXAnatomyImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying DXImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXPositioning(ds,0,ds) :
		partial_success = Module_DXPositioning_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying DXPositioning " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleXRayTomographyAcquisition(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayAcquisitionDose(ds,0,ds) :
		partial_success = Module_XRayAcquisitionDose_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying XRayAcquisitionDose " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGeneration(ds,0,ds) :
		partial_success = Module_XRayGeneration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying XRayGeneration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	partial_success = Module_MammographyImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying MammographyImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_DXNeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageHistogram(ds,0,ds) :
		partial_success = Module_ImageHistogram_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying ImageHistogram " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammo success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_IHEMammoProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying IHEMammoProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_IHEMammoProfileWithoutPartialViewOption_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying IHEMammoProfileWithoutPartialViewOption " + ("success" if partial_success else "failure")) 

	partial_success = Module_IHEMammoProfileForPresentationOnly_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammo success after verifying IHEMammoProfileForPresentationOnly " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_MammographyImageForPresentationIHEMammoPartialViewOption_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)MammographyImageForPresentationIHEMammoPartialViewOption")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying DXSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_MammographySeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying MammographySeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXAnatomyImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying DXAnatomyImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying DXImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXPositioning(ds,0,ds) :
		partial_success = Module_DXPositioning_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying DXPositioning " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleXRayTomographyAcquisition(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayAcquisitionDose(ds,0,ds) :
		partial_success = Module_XRayAcquisitionDose_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying XRayAcquisitionDose " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGeneration(ds,0,ds) :
		partial_success = Module_XRayGeneration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying XRayGeneration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	partial_success = Module_MammographyImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying MammographyImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_DXNeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageHistogram(ds,0,ds) :
		partial_success = Module_ImageHistogram_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying ImageHistogram " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_IHEMammoProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying IHEMammoProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_IHEMammoProfileWithPartialViewOption_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying IHEMammoProfileWithPartialViewOption " + ("success" if partial_success else "failure")) 

	partial_success = Module_IHEMammoProfileForPresentationOnly_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyImageForPresentationIHEMammoPartialViewOption success after verifying IHEMammoProfileForPresentationOnly " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_IntraoralImageForProcessing_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)IntraoralImageForProcessing")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying DXSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_IntraoralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying IntraoralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXAnatomyImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying DXAnatomyImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying DXImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXPositioning(ds,0,ds) :
		partial_success = Module_DXPositioning_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying DXPositioning " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleXRayTomographyAcquisition(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayAcquisitionDose(ds,0,ds) :
		partial_success = Module_XRayAcquisitionDose_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying XRayAcquisitionDose " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGeneration(ds,0,ds) :
		partial_success = Module_XRayGeneration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying XRayGeneration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	partial_success = Module_IntraoralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying IntraoralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_DXNeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageHistogram(ds,0,ds) :
		partial_success = Module_ImageHistogram_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying ImageHistogram " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForProcessing success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForProcessing success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_IntraoralImageForPresentation_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)IntraoralImageForPresentation")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying DXSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_IntraoralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying IntraoralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXAnatomyImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying DXAnatomyImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying DXImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXPositioning(ds,0,ds) :
		partial_success = Module_DXPositioning_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying DXPositioning " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleXRayTomographyAcquisition(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayAcquisitionDose(ds,0,ds) :
		partial_success = Module_XRayAcquisitionDose_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying XRayAcquisitionDose " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGeneration(ds,0,ds) :
		partial_success = Module_XRayGeneration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying XRayGeneration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	partial_success = Module_IntraoralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying IntraoralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_DXNeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageHistogram(ds,0,ds) :
		partial_success = Module_ImageHistogram_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying ImageHistogram " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentation success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentation success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_IntraoralImageForPresentationDentalMedia_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)IntraoralImageForPresentationDentalMedia")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying DXSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_IntraoralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying IntraoralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXAnatomyImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying DXAnatomyImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying DXImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXPositioning(ds,0,ds) :
		partial_success = Module_DXPositioning_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying DXPositioning " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleXRayTomographyAcquisition(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayAcquisitionDose(ds,0,ds) :
		partial_success = Module_XRayAcquisitionDose_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying XRayAcquisitionDose " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGeneration(ds,0,ds) :
		partial_success = Module_XRayGeneration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying XRayGeneration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	partial_success = Module_IntraoralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying IntraoralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_DXNeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageHistogram(ds,0,ds) :
		partial_success = Module_ImageHistogram_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying ImageHistogram " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraoralImageForPresentationDentalMedia success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_DentalImageOnMediaProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraoralImageForPresentationDentalMedia success after verifying DentalImageOnMediaProfile " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_DXImageForPresentationDentalMedia_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)DXImageForPresentationDentalMedia")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying DXSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying Intervention " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXAnatomyImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying DXAnatomyImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying DXImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXDetector_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying DXDetector " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayCollimator(ds,0,ds) :
		partial_success = Module_XRayCollimator_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying XRayCollimator " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDXPositioning(ds,0,ds) :
		partial_success = Module_DXPositioning_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying DXPositioning " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleXRayTomographyAcquisition(ds,0,ds) :
		partial_success = Module_XRayTomographyAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying XRayTomographyAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayAcquisitionDose(ds,0,ds) :
		partial_success = Module_XRayAcquisitionDose_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying XRayAcquisitionDose " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGeneration(ds,0,ds) :
		partial_success = Module_XRayGeneration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying XRayGeneration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayFiltration(ds,0,ds) :
		partial_success = Module_XRayFiltration_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying XRayFiltration " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRayGrid(ds,0,ds) :
		partial_success = Module_XRayGrid_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying XRayGrid " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_DXNeedModuleVOILUT(ds,0,ds) :
		partial_success = Module_VOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying VOILUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageHistogram(ds,0,ds) :
		partial_success = Module_ImageHistogram_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying ImageHistogram " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "DXImageForPresentationDentalMedia success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_DentalImageOnMediaProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "DXImageForPresentationDentalMedia success after verifying DentalImageOnMediaProfile " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_BreastTomosynthesisImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)BreastTomosynthesisImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedMammographySeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying EnhancedMammographySeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying Intervention " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForBreastTomosynthesisImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying MultiFrameFunctionalGroupsForBreastTomosynthesisImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageEquipmentCoordinateRelationship(ds,0,ds) :
		partial_success = Module_ImageEquipmentCoordinateRelationship_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying ImageEquipmentCoordinateRelationship " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_XRay3DImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying XRay3DImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleBreastTomosynthesisContributingSources(ds,0,ds) :
		partial_success = Module_BreastTomosynthesisContributingSources_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying BreastTomosynthesisContributingSources " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleBreastTomosynthesisAcquisition(ds,0,ds) :
		partial_success = Module_BreastTomosynthesisAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying BreastTomosynthesisAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRay3DReconstruction(ds,0,ds) :
		partial_success = Module_XRay3DReconstruction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying XRay3DReconstruction " + ("success" if partial_success else "failure")) 

	partial_success = Module_BreastView_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying BreastView " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_BreastTomosynthesisImageIHEDBT_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)BreastTomosynthesisImageIHEDBT")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedMammographySeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying EnhancedMammographySeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying Intervention " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForBreastTomosynthesisImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying MultiFrameFunctionalGroupsForBreastTomosynthesisImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleImageEquipmentCoordinateRelationship(ds,0,ds) :
		partial_success = Module_ImageEquipmentCoordinateRelationship_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying ImageEquipmentCoordinateRelationship " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_XRay3DImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying XRay3DImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleBreastTomosynthesisContributingSources(ds,0,ds) :
		partial_success = Module_BreastTomosynthesisContributingSources_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying BreastTomosynthesisContributingSources " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleBreastTomosynthesisAcquisition(ds,0,ds) :
		partial_success = Module_BreastTomosynthesisAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying BreastTomosynthesisAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleXRay3DReconstruction(ds,0,ds) :
		partial_success = Module_XRay3DReconstruction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying XRay3DReconstruction " + ("success" if partial_success else "failure")) 

	partial_success = Module_BreastView_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying BreastView " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastTomosynthesisImageIHEDBT success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	partial_success = Module_IHEDBTProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastTomosynthesisImageIHEDBT success after verifying IHEDBTProfile " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_BreastProjectionXRayImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)BreastProjectionXRayImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastProjectionXRayImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastProjectionXRayImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastProjectionXRayImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastProjectionXRayImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_DXSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying DXSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedMammographySeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying EnhancedMammographySeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastProjectionXRayImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedMammographyImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying EnhancedMammographyImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_BreastView_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying BreastView " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastProjectionXRayImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastProjectionXRayImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleIntervention(ds,0,ds) :
		partial_success = Module_Intervention_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastProjectionXRayImage success after verifying Intervention " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForBreastProjectionXRayImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying MultiFrameFunctionalGroupsForBreastProjectionXRayImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastProjectionXRayImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientOrientation_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying PatientOrientation " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastProjectionXRayImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BreastProjectionXRayImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastProjectionXRayImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BreastProjectionXRayImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_VLEndoscopicImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)VLEndoscopicImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLEndoscopicImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLEndoscopicImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLEndoscopicImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLEndoscopicImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLEndoscopicImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLEndoscopicImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLEndoscopicImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLEndoscopicSeriesPseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLEndoscopicImage success after verifying VLEndoscopicSeriesPseudo " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLEndoscopicImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLEndoscopicImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLEndoscopicImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLEndoscopicImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLEndoscopicImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLEndoscopicImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLEndoscopicImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLEndoscopicImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLEndoscopicImage success after verifying VLImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLEndoscopicImage success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLEndoscopicImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLEndoscopicImage success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLEndoscopicImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLEndoscopicImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_VLMicroscopicImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)VLMicroscopicImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLMicroscopicImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLMicroscopicImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLMicroscopicImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLMicroscopicImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLMicroscopicImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLMicroscopicImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLMicroscopicImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLMicroscopicSeriesPseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLMicroscopicImage success after verifying VLMicroscopicSeriesPseudo " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLMicroscopicImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLMicroscopicImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLMicroscopicImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLMicroscopicImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLMicroscopicImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLMicroscopicImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLMicroscopicImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLMicroscopicImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLMicroscopicImage success after verifying VLImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOpticalPath(ds,0,ds) :
		partial_success = Module_OpticalPath_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLMicroscopicImage success after verifying OpticalPath " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLMicroscopicImage success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLMicroscopicImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLMicroscopicImage success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLMicroscopicImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLMicroscopicImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_VLSlideCoordinatesMicroscopicImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)VLSlideCoordinatesMicroscopicImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLSlideCoordinatesMicroscopicImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLSlideCoordinatesMicroscopicImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLSlideCoordinatesMicroscopicImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLSlideCoordinatesMicroscopicSeriesPseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying VLSlideCoordinatesMicroscopicSeriesPseudo " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLSlideCoordinatesMicroscopicImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLSlideCoordinatesMicroscopicImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLSlideCoordinatesMicroscopicImage success after verifying Device " + ("success" if partial_success else "failure")) 

	partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying VLImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_SlideCoordinates_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying SlideCoordinates " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOpticalPath(ds,0,ds) :
		partial_success = Module_OpticalPath_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLSlideCoordinatesMicroscopicImage success after verifying OpticalPath " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLSlideCoordinatesMicroscopicImage success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLSlideCoordinatesMicroscopicImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLSlideCoordinatesMicroscopicImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLSlideCoordinatesMicroscopicImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_VLPhotographicImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)VLPhotographicImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLPhotographicImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLPhotographicImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLPhotographicImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLPhotographicImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLPhotographicImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLPhotographicImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLPhotographicImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLPhotographicSeriesPseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLPhotographicImage success after verifying VLPhotographicSeriesPseudo " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLPhotographicImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLPhotographicImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLPhotographicImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLPhotographicImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLPhotographicImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLPhotographicImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLPhotographicImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLPhotographicImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLPhotographicImage success after verifying VLImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLPhotographicImage success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLPhotographicImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_CheckSingleFramePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLPhotographicImage success after verifying CheckSingleFramePseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLPhotographicImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLPhotographicImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_VideoEndoscopicImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)VideoEndoscopicImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoEndoscopicImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoEndoscopicImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoEndoscopicImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoEndoscopicImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoEndoscopicImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoEndoscopicImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoEndoscopicImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLEndoscopicSeriesPseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoEndoscopicImage success after verifying VLEndoscopicSeriesPseudo " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoEndoscopicImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoEndoscopicImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoEndoscopicImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoEndoscopicImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_Cine_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoEndoscopicImage success after verifying Cine " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoEndoscopicImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoEndoscopicImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoEndoscopicImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoEndoscopicImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoEndoscopicImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoEndoscopicImage success after verifying VLImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoEndoscopicImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoEndoscopicImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoEndoscopicImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoEndoscopicImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_VideoMicroscopicImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)VideoMicroscopicImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoMicroscopicImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoMicroscopicImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoMicroscopicImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoMicroscopicImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoMicroscopicImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoMicroscopicImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoMicroscopicImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLMicroscopicSeriesPseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoMicroscopicImage success after verifying VLMicroscopicSeriesPseudo " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoMicroscopicImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoMicroscopicImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoMicroscopicImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoMicroscopicImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_Cine_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoMicroscopicImage success after verifying Cine " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoMicroscopicImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoMicroscopicImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoMicroscopicImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoMicroscopicImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoMicroscopicImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoMicroscopicImage success after verifying VLImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoMicroscopicImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoMicroscopicImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoMicroscopicImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoMicroscopicImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_VideoPhotographicImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)VideoPhotographicImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoPhotographicImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoPhotographicImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoPhotographicImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoPhotographicImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoPhotographicImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoPhotographicImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoPhotographicImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLPhotographicSeriesPseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoPhotographicImage success after verifying VLPhotographicSeriesPseudo " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoPhotographicImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoPhotographicImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoPhotographicImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoPhotographicImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_Cine_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoPhotographicImage success after verifying Cine " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoPhotographicImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoPhotographicImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoPhotographicImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoPhotographicImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoPhotographicImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_VLImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoPhotographicImage success after verifying VLImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoPhotographicImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VideoPhotographicImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoPhotographicImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VideoPhotographicImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_OphthalmicPhotography8BitImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)OphthalmicPhotography8BitImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography8BitImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography8BitImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography8BitImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicPhotographySeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying OphthalmicPhotographySeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography8BitImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography8BitImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography8BitImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCine(ds,0,ds) :
		partial_success = Module_Cine_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography8BitImage success after verifying Cine " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleAcquisitionContext(ds,0,ds) :
		partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography8BitImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicPhotographyImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying OphthalmicPhotographyImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicPhotography8BitImagePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying OphthalmicPhotography8BitImagePseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_OcularRegionImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying OcularRegionImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicPhotographyAcquisitionParameters_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying OphthalmicPhotographyAcquisitionParameters " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicPhotographicParameters_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying OphthalmicPhotographicParameters " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography8BitImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography8BitImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography8BitImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography8BitImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_OphthalmicPhotography16BitImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)OphthalmicPhotography16BitImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography16BitImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography16BitImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography16BitImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicPhotographySeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying OphthalmicPhotographySeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography16BitImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography16BitImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography16BitImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCine(ds,0,ds) :
		partial_success = Module_Cine_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography16BitImage success after verifying Cine " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrame_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying MultiFrame " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleAcquisitionContext(ds,0,ds) :
		partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography16BitImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicPhotographyImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying OphthalmicPhotographyImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicPhotography16BitImagePseudo_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying OphthalmicPhotography16BitImagePseudo " + ("success" if partial_success else "failure")) 

	partial_success = Module_OcularRegionImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying OcularRegionImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicPhotographyAcquisitionParameters_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying OphthalmicPhotographyAcquisitionParameters " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicPhotographicParameters_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying OphthalmicPhotographicParameters " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography16BitImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicPhotography16BitImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography16BitImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicPhotography16BitImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_StereometricRelationship_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)StereometricRelationship")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StereometricRelationship success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StereometricRelationship success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StereometricRelationship success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StereometricRelationship success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StereometricRelationship success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StereometricRelationship success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StereometricRelationship success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_StereometricSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StereometricRelationship success after verifying StereometricSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "StereometricRelationship success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StereometricRelationship success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_StereometricRelationship_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StereometricRelationship success after verifying StereometricRelationship " + ("success" if partial_success else "failure")) 

	partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StereometricRelationship success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "StereometricRelationship success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_OphthalmicTomographyImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)OphthalmicTomographyImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicTomographyImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicTomographyImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicTomographyImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicTomographyImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicTomographySeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying OphthalmicTomographySeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicTomographyImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicTomographyImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicTomographyImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForOphthalmicTomography_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying MultiFrameFunctionalGroupsForOphthalmicTomography " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicTomographyImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicTomographyImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying OphthalmicTomographyImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicTomographyAcquisitionParameters_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying OphthalmicTomographyAcquisitionParameters " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicTomographyParameters_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying OphthalmicTomographyParameters " + ("success" if partial_success else "failure")) 

	partial_success = Module_OcularRegionImaged_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying OcularRegionImaged " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicTomographyImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicTomographyImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicTomographyImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_VLWholeSlideMicroscopyImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)VLWholeSlideMicroscopyImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLWholeSlideMicroscopyImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLWholeSlideMicroscopyImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLWholeSlideMicroscopyImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLWholeSlideMicroscopyImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_WholeSlideMicroscopySeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying WholeSlideMicroscopySeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLWholeSlideMicroscopyImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLWholeSlideMicroscopyImage success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForWholeSlideMicroscopy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying MultiFrameFunctionalGroupsForWholeSlideMicroscopy " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_WholeSlideMicroscopyImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying WholeSlideMicroscopyImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_OpticalPath_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying OpticalPath " + ("success" if partial_success else "failure")) 

	if Condition_ImageTypeValue3Localizer(ds,0,ds) :
		partial_success = Module_MultiResolutionNavigation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLWholeSlideMicroscopyImage success after verifying MultiResolutionNavigation " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSlideLabel(ds,0,ds) :
		partial_success = Module_SlideLabel_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLWholeSlideMicroscopyImage success after verifying SlideLabel " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VLWholeSlideMicroscopyImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VLWholeSlideMicroscopyImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_LensometryMeasurements_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)LensometryMeasurements")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LensometryMeasurements success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LensometryMeasurements success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LensometryMeasurements success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LensometryMeasurements success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LensometryMeasurements success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LensometryMeasurements success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LensometryMeasurements success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_LensometryMeasurementsSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LensometryMeasurements success after verifying LensometryMeasurementsSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LensometryMeasurements success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LensometryMeasurements success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LensometryMeasurements success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralOphthalmicRefractiveMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LensometryMeasurements success after verifying GeneralOphthalmicRefractiveMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_LensometryMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LensometryMeasurements success after verifying LensometryMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LensometryMeasurements success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_AutorefractionMeasurements_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)AutorefractionMeasurements")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AutorefractionMeasurements success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AutorefractionMeasurements success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AutorefractionMeasurements success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AutorefractionMeasurements success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AutorefractionMeasurements success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AutorefractionMeasurements success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AutorefractionMeasurements success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_AutorefractionMeasurementsSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AutorefractionMeasurements success after verifying AutorefractionMeasurementsSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AutorefractionMeasurements success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AutorefractionMeasurements success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AutorefractionMeasurements success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralOphthalmicRefractiveMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AutorefractionMeasurements success after verifying GeneralOphthalmicRefractiveMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_AutorefractionMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AutorefractionMeasurements success after verifying AutorefractionMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AutorefractionMeasurements success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_KeratometryMeasurements_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)KeratometryMeasurements")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "KeratometryMeasurements success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeratometryMeasurements success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "KeratometryMeasurements success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeratometryMeasurements success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeratometryMeasurements success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "KeratometryMeasurements success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeratometryMeasurements success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_KeratometryMeasurementsSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeratometryMeasurements success after verifying KeratometryMeasurementsSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "KeratometryMeasurements success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeratometryMeasurements success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeratometryMeasurements success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralOphthalmicRefractiveMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeratometryMeasurements success after verifying GeneralOphthalmicRefractiveMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_KeratometryMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeratometryMeasurements success after verifying KeratometryMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeratometryMeasurements success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_SubjectiveRefractionMeasurements_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)SubjectiveRefractionMeasurements")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SubjectiveRefractionMeasurements success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SubjectiveRefractionMeasurements success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SubjectiveRefractionMeasurements success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SubjectiveRefractionMeasurements success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SubjectiveRefractionMeasurements success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SubjectiveRefractionMeasurements success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SubjectiveRefractionMeasurements success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_SubjectiveRefractionMeasurementsSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SubjectiveRefractionMeasurements success after verifying SubjectiveRefractionMeasurementsSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "SubjectiveRefractionMeasurements success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SubjectiveRefractionMeasurements success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SubjectiveRefractionMeasurements success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralOphthalmicRefractiveMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SubjectiveRefractionMeasurements success after verifying GeneralOphthalmicRefractiveMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_SubjectiveRefractionMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SubjectiveRefractionMeasurements success after verifying SubjectiveRefractionMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SubjectiveRefractionMeasurements success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_VisualAcuityMeasurements_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)VisualAcuityMeasurements")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VisualAcuityMeasurements success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VisualAcuityMeasurements success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VisualAcuityMeasurements success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_VisualAcuityMeasurementsSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying VisualAcuityMeasurementsSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "VisualAcuityMeasurements success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralOphthalmicRefractiveMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying GeneralOphthalmicRefractiveMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_VisualAcuityMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying VisualAcuityMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_OphthalmicAxialMeasurements_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)OphthalmicAxialMeasurements")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicAxialMeasurements success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicAxialMeasurements success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicAxialMeasurements success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicAxialMeasurementsSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying OphthalmicAxialMeasurementsSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicAxialMeasurements success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicAxialMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying OphthalmicAxialMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralOphthalmicRefractiveMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying GeneralOphthalmicRefractiveMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_IntraocularLensCalculations_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)IntraocularLensCalculations")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraocularLensCalculations success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraocularLensCalculations success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraocularLensCalculations success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraocularLensCalculations success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraocularLensCalculations success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraocularLensCalculations success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraocularLensCalculations success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_IntraocularLensCalculationsSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraocularLensCalculations success after verifying IntraocularLensCalculationsSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "IntraocularLensCalculations success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraocularLensCalculations success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraocularLensCalculations success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_IntraocularLensCalculations_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraocularLensCalculations success after verifying IntraocularLensCalculations " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralOphthalmicRefractiveMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraocularLensCalculations success after verifying GeneralOphthalmicRefractiveMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "IntraocularLensCalculations success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_OphthalmicVisualFieldStaticPerimetryMeasurements_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)OphthalmicVisualFieldStaticPerimetryMeasurements")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_VisualFieldStaticPerimetryMeasurementsSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying VisualFieldStaticPerimetryMeasurementsSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_VisualFieldStaticPerimetryTestParameters_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying VisualFieldStaticPerimetryTestParameters " + ("success" if partial_success else "failure")) 

	partial_success = Module_VisualFieldStaticPerimetryTestReliability_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying VisualFieldStaticPerimetryTestReliability " + ("success" if partial_success else "failure")) 

	partial_success = Module_VisualFieldStaticPerimetryTestMeasurements_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying VisualFieldStaticPerimetryTestMeasurements " + ("success" if partial_success else "failure")) 

	partial_success = Module_VisualFieldStaticPerimetryTestResults_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying VisualFieldStaticPerimetryTestResults " + ("success" if partial_success else "failure")) 

	partial_success = Module_OphthalmicPatientClinicalInformationandTestLensParameters_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying OphthalmicPatientClinicalInformationandTestLensParameters " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "OphthalmicVisualFieldStaticPerimetryMeasurements success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_BasicVoice_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)BasicVoice")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicVoice success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicVoice success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicVoice success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicVoice success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicVoice success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicVoice success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicVoice success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicVoice success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicVoice success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicVoice success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_WaveformIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicVoice success after verifying WaveformIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_Waveform_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicVoice success after verifying Waveform " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicVoice success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleWaveformAnnotation(ds,0,ds) :
		partial_success = Module_WaveformAnnotation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicVoice success after verifying WaveformAnnotation " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicVoice success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_TwelveLeadECG_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)TwelveLeadECG")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "TwelveLeadECG success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TwelveLeadECG success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "TwelveLeadECG success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TwelveLeadECG success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TwelveLeadECG success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "TwelveLeadECG success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TwelveLeadECG success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "TwelveLeadECG success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "TwelveLeadECG success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TwelveLeadECG success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_WaveformIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TwelveLeadECG success after verifying WaveformIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_Waveform_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TwelveLeadECG success after verifying Waveform " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TwelveLeadECG success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleWaveformAnnotation(ds,0,ds) :
		partial_success = Module_WaveformAnnotation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "TwelveLeadECG success after verifying WaveformAnnotation " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TwelveLeadECG success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_GeneralECG_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)GeneralECG")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GeneralECG success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GeneralECG success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GeneralECG success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GeneralECG success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GeneralECG success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GeneralECG success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GeneralECG success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GeneralECG success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GeneralECG success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GeneralECG success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_WaveformIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GeneralECG success after verifying WaveformIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_Waveform_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GeneralECG success after verifying Waveform " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GeneralECG success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleWaveformAnnotation(ds,0,ds) :
		partial_success = Module_WaveformAnnotation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GeneralECG success after verifying WaveformAnnotation " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GeneralECG success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_AmbulatoryECG_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)AmbulatoryECG")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AmbulatoryECG success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AmbulatoryECG success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AmbulatoryECG success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AmbulatoryECG success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AmbulatoryECG success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AmbulatoryECG success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AmbulatoryECG success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AmbulatoryECG success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AmbulatoryECG success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AmbulatoryECG success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_WaveformIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AmbulatoryECG success after verifying WaveformIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_Waveform_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AmbulatoryECG success after verifying Waveform " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AmbulatoryECG success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleWaveformAnnotation(ds,0,ds) :
		partial_success = Module_WaveformAnnotation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AmbulatoryECG success after verifying WaveformAnnotation " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AmbulatoryECG success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_HemodynamicWaveform_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)HemodynamicWaveform")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "HemodynamicWaveform success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "HemodynamicWaveform success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "HemodynamicWaveform success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "HemodynamicWaveform success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "HemodynamicWaveform success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "HemodynamicWaveform success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "HemodynamicWaveform success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "HemodynamicWaveform success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_ReallyNeedModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "HemodynamicWaveform success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "HemodynamicWaveform success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_WaveformIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "HemodynamicWaveform success after verifying WaveformIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_Waveform_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "HemodynamicWaveform success after verifying Waveform " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "HemodynamicWaveform success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleWaveformAnnotation(ds,0,ds) :
		partial_success = Module_WaveformAnnotation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "HemodynamicWaveform success after verifying WaveformAnnotation " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "HemodynamicWaveform success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_CardiacElectrophysiologyWaveform_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)CardiacElectrophysiologyWaveform")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CardiacElectrophysiologyWaveform success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CardiacElectrophysiologyWaveform success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CardiacElectrophysiologyWaveform success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CardiacElectrophysiologyWaveform success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CardiacElectrophysiologyWaveform success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CardiacElectrophysiologyWaveform success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CardiacElectrophysiologyWaveform success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CardiacElectrophysiologyWaveform success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_ReallyNeedModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CardiacElectrophysiologyWaveform success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CardiacElectrophysiologyWaveform success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_WaveformIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CardiacElectrophysiologyWaveform success after verifying WaveformIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_Waveform_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CardiacElectrophysiologyWaveform success after verifying Waveform " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CardiacElectrophysiologyWaveform success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleWaveformAnnotation(ds,0,ds) :
		partial_success = Module_WaveformAnnotation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "CardiacElectrophysiologyWaveform success after verifying WaveformAnnotation " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "CardiacElectrophysiologyWaveform success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_BasicTextSR_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)BasicTextSR")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicTextSR success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicTextSR success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicTextSR success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicTextSR success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicTextSR success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicTextSR success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicTextSR success after verifying SRDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicTextSR success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicTextSR success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentGeneral_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicTextSR success after verifying SRDocumentGeneral " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicTextSR success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicTextSR success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_EnhancedSR_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)EnhancedSR")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedSR success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedSR success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedSR success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedSR success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedSR success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedSR success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedSR success after verifying SRDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedSR success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedSR success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentGeneral_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedSR success after verifying SRDocumentGeneral " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedSR success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedSR success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_ComprehensiveSR_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)ComprehensiveSR")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ComprehensiveSR success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ComprehensiveSR success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ComprehensiveSR success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ComprehensiveSR success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ComprehensiveSR success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ComprehensiveSR success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ComprehensiveSR success after verifying SRDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ComprehensiveSR success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ComprehensiveSR success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentGeneral_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ComprehensiveSR success after verifying SRDocumentGeneral " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ComprehensiveSR success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ComprehensiveSR success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_Comprehensive3DSR_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)Comprehensive3DSR")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "Comprehensive3DSR success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Comprehensive3DSR success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "Comprehensive3DSR success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Comprehensive3DSR success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Comprehensive3DSR success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "Comprehensive3DSR success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Comprehensive3DSR success after verifying SRDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "Comprehensive3DSR success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Comprehensive3DSR success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentGeneral_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Comprehensive3DSR success after verifying SRDocumentGeneral " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Comprehensive3DSR success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "Comprehensive3DSR success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_KeyObjectSelectionDocument_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)KeyObjectSelectionDocument")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "KeyObjectSelectionDocument success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocument success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "KeyObjectSelectionDocument success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocument success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocument success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "KeyObjectSelectionDocument success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_KeyObjectDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocument success after verifying KeyObjectDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "KeyObjectSelectionDocument success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocument success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_KeyObjectDocument_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocument success after verifying KeyObjectDocument " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocument success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocument success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_KeyObjectSelectionDocumentIHEXDSIManifest_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)KeyObjectSelectionDocumentIHEXDSIManifest")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "KeyObjectSelectionDocumentIHEXDSIManifest success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocumentIHEXDSIManifest success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "KeyObjectSelectionDocumentIHEXDSIManifest success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocumentIHEXDSIManifest success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocumentIHEXDSIManifest success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "KeyObjectSelectionDocumentIHEXDSIManifest success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_KeyObjectDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocumentIHEXDSIManifest success after verifying KeyObjectDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "KeyObjectSelectionDocumentIHEXDSIManifest success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocumentIHEXDSIManifest success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_KeyObjectDocument_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocumentIHEXDSIManifest success after verifying KeyObjectDocument " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocumentIHEXDSIManifest success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocumentIHEXDSIManifest success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_IHEXDSIManifestProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "KeyObjectSelectionDocumentIHEXDSIManifest success after verifying IHEXDSIManifestProfile " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_MammographyCADSR_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)MammographyCADSR")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyCADSR success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyCADSR success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyCADSR success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyCADSR success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyCADSR success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyCADSR success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyCADSR success after verifying SRDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MammographyCADSR success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyCADSR success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentGeneral_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyCADSR success after verifying SRDocumentGeneral " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyCADSR success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MammographyCADSR success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_ChestCADSR_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)ChestCADSR")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ChestCADSR success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ChestCADSR success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ChestCADSR success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ChestCADSR success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ChestCADSR success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ChestCADSR success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ChestCADSR success after verifying SRDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ChestCADSR success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ChestCADSR success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentGeneral_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ChestCADSR success after verifying SRDocumentGeneral " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ChestCADSR success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ChestCADSR success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_ProcedureLog_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)ProcedureLog")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ProcedureLog success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ProcedureLog success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ProcedureLog success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ProcedureLog success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ProcedureLog success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ProcedureLog success after verifying SRDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ProcedureLog success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ProcedureLog success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ProcedureLog success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentGeneral_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ProcedureLog success after verifying SRDocumentGeneral " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ProcedureLog success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ProcedureLog success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_XRayRadiationDoseSR_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)XRayRadiationDoseSR")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRayRadiationDoseSR success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSR success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRayRadiationDoseSR success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSR success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSR success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRayRadiationDoseSR success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSR success after verifying SRDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRayRadiationDoseSR success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRayRadiationDoseSR success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSR success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentGeneral_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSR success after verifying SRDocumentGeneral " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSR success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSR success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_XRayRadiationDoseSRIHEREM_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)XRayRadiationDoseSRIHEREM")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRayRadiationDoseSRIHEREM success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSRIHEREM success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRayRadiationDoseSRIHEREM success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSRIHEREM success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSRIHEREM success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRayRadiationDoseSRIHEREM success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSRIHEREM success after verifying SRDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRayRadiationDoseSRIHEREM success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "XRayRadiationDoseSRIHEREM success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSRIHEREM success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentGeneral_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSRIHEREM success after verifying SRDocumentGeneral " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSRIHEREM success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSRIHEREM success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_IHEREMProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "XRayRadiationDoseSRIHEREM success after verifying IHEREMProfile " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_RadiopharmaceuticalRadiationDoseSR_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)RadiopharmaceuticalRadiationDoseSR")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RadiopharmaceuticalRadiationDoseSR success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RadiopharmaceuticalRadiationDoseSR success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RadiopharmaceuticalRadiationDoseSR success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RadiopharmaceuticalRadiationDoseSR success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RadiopharmaceuticalRadiationDoseSR success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RadiopharmaceuticalRadiationDoseSR success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RadiopharmaceuticalRadiationDoseSR success after verifying SRDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RadiopharmaceuticalRadiationDoseSR success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RadiopharmaceuticalRadiationDoseSR success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RadiopharmaceuticalRadiationDoseSR success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentGeneral_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RadiopharmaceuticalRadiationDoseSR success after verifying SRDocumentGeneral " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RadiopharmaceuticalRadiationDoseSR success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RadiopharmaceuticalRadiationDoseSR success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_SpectaclePrescriptionReport_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)SpectaclePrescriptionReport")

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpectaclePrescriptionReport success after verifying Patient " + ("success" if partial_success else "failure")) 

	partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpectaclePrescriptionReport success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpectaclePrescriptionReport success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpectaclePrescriptionReport success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpectaclePrescriptionReport success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpectaclePrescriptionReport success after verifying SRDocumentSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpectaclePrescriptionReport success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpectaclePrescriptionReport success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpectaclePrescriptionReport success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentGeneral_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpectaclePrescriptionReport success after verifying SRDocumentGeneral " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpectaclePrescriptionReport success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "SpectaclePrescriptionReport success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_AcquisitionContextSR_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)AcquisitionContextSR")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AcquisitionContextSR success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AcquisitionContextSR success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AcquisitionContextSR success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AcquisitionContextSR success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AcquisitionContextSR success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AcquisitionContextSR success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AcquisitionContextSR success after verifying SRDocumentSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AcquisitionContextSR success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "AcquisitionContextSR success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AcquisitionContextSR success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentGeneral_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AcquisitionContextSR success after verifying SRDocumentGeneral " + ("success" if partial_success else "failure")) 

	partial_success = Module_SRDocumentContent_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AcquisitionContextSR success after verifying SRDocumentContent " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "AcquisitionContextSR success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_GrayscaleSoftcopyPresentationState_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)GrayscaleSoftcopyPresentationState")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GrayscaleSoftcopyPresentationState success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GrayscaleSoftcopyPresentationState success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GrayscaleSoftcopyPresentationState success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GrayscaleSoftcopyPresentationState success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GrayscaleSoftcopyPresentationState success after verifying PresentationSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GrayscaleSoftcopyPresentationState success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationStateIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GrayscaleSoftcopyPresentationState success after verifying PresentationStateIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationStateRelationship_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GrayscaleSoftcopyPresentationState success after verifying PresentationStateRelationship " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationStateShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GrayscaleSoftcopyPresentationState success after verifying PresentationStateShutter " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationStateMask_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GrayscaleSoftcopyPresentationState success after verifying PresentationStateMask " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMask(ds,0,ds) :
		partial_success = Module_Mask_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying Mask " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleBitmapDisplayShutter(ds,0,ds) :
		partial_success = Module_BitmapDisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying BitmapDisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayActivation(ds,0,ds) :
		partial_success = Module_OverlayActivation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying OverlayActivation " + ("success" if partial_success else "failure")) 

	partial_success = Module_DisplayedArea_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GrayscaleSoftcopyPresentationState success after verifying DisplayedArea " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGraphicAnnotation(ds,0,ds) :
		partial_success = Module_GraphicAnnotation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying GraphicAnnotation " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpatialTransformation(ds,0,ds) :
		partial_success = Module_SpatialTransformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying SpatialTransformation " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGraphicLayer(ds,0,ds) :
		partial_success = Module_GraphicLayer_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying GraphicLayer " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleModalityLUT(ds,0,ds) :
		partial_success = Module_ModalityLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying ModalityLUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSoftcopyVOILUT(ds,0,ds) :
		partial_success = Module_SoftcopyVOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "GrayscaleSoftcopyPresentationState success after verifying SoftcopyVOILUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_SoftcopyPresentationLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GrayscaleSoftcopyPresentationState success after verifying SoftcopyPresentationLUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "GrayscaleSoftcopyPresentationState success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_ColorSoftcopyPresentationState_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)ColorSoftcopyPresentationState")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ColorSoftcopyPresentationState success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorSoftcopyPresentationState success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ColorSoftcopyPresentationState success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorSoftcopyPresentationState success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorSoftcopyPresentationState success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ColorSoftcopyPresentationState success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorSoftcopyPresentationState success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ColorSoftcopyPresentationState success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorSoftcopyPresentationState success after verifying PresentationSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorSoftcopyPresentationState success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationStateIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorSoftcopyPresentationState success after verifying PresentationStateIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationStateRelationship_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorSoftcopyPresentationState success after verifying PresentationStateRelationship " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationStateShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorSoftcopyPresentationState success after verifying PresentationStateShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ColorSoftcopyPresentationState success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleBitmapDisplayShutter(ds,0,ds) :
		partial_success = Module_BitmapDisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ColorSoftcopyPresentationState success after verifying BitmapDisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ColorSoftcopyPresentationState success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayActivation(ds,0,ds) :
		partial_success = Module_OverlayActivation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ColorSoftcopyPresentationState success after verifying OverlayActivation " + ("success" if partial_success else "failure")) 

	partial_success = Module_DisplayedArea_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorSoftcopyPresentationState success after verifying DisplayedArea " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGraphicAnnotation(ds,0,ds) :
		partial_success = Module_GraphicAnnotation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ColorSoftcopyPresentationState success after verifying GraphicAnnotation " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpatialTransformation(ds,0,ds) :
		partial_success = Module_SpatialTransformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ColorSoftcopyPresentationState success after verifying SpatialTransformation " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGraphicLayer(ds,0,ds) :
		partial_success = Module_GraphicLayer_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ColorSoftcopyPresentationState success after verifying GraphicLayer " + ("success" if partial_success else "failure")) 

	partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorSoftcopyPresentationState success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorSoftcopyPresentationState success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_PseudoColorSoftcopyPresentationState_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)PseudoColorSoftcopyPresentationState")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying PresentationSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationStateIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying PresentationStateIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationStateRelationship_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying PresentationStateRelationship " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationStateShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying PresentationStateShutter " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationStateMask_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying PresentationStateMask " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMask(ds,0,ds) :
		partial_success = Module_Mask_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying Mask " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDisplayShutter(ds,0,ds) :
		partial_success = Module_DisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying DisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleBitmapDisplayShutter(ds,0,ds) :
		partial_success = Module_BitmapDisplayShutter_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying BitmapDisplayShutter " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayPlane(ds,0,ds) :
		partial_success = Module_OverlayPlane_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying OverlayPlane " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleOverlayActivation(ds,0,ds) :
		partial_success = Module_OverlayActivation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying OverlayActivation " + ("success" if partial_success else "failure")) 

	partial_success = Module_DisplayedArea_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying DisplayedArea " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGraphicAnnotation(ds,0,ds) :
		partial_success = Module_GraphicAnnotation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying GraphicAnnotation " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpatialTransformation(ds,0,ds) :
		partial_success = Module_SpatialTransformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying SpatialTransformation " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGraphicLayer(ds,0,ds) :
		partial_success = Module_GraphicLayer_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying GraphicLayer " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleModalityLUT(ds,0,ds) :
		partial_success = Module_ModalityLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying ModalityLUT " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSoftcopyVOILUT(ds,0,ds) :
		partial_success = Module_SoftcopyVOILUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PseudoColorSoftcopyPresentationState success after verifying SoftcopyVOILUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_PaletteColorLookupTable_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying PaletteColorLookupTable " + ("success" if partial_success else "failure")) 

	partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PseudoColorSoftcopyPresentationState success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_BlendingSoftcopyPresentationState_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)BlendingSoftcopyPresentationState")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BlendingSoftcopyPresentationState success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BlendingSoftcopyPresentationState success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BlendingSoftcopyPresentationState success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BlendingSoftcopyPresentationState success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BlendingSoftcopyPresentationState success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BlendingSoftcopyPresentationState success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BlendingSoftcopyPresentationState success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BlendingSoftcopyPresentationState success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BlendingSoftcopyPresentationState success after verifying PresentationSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BlendingSoftcopyPresentationState success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationStateIdentification_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BlendingSoftcopyPresentationState success after verifying PresentationStateIdentification " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationStateBlending_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BlendingSoftcopyPresentationState success after verifying PresentationStateBlending " + ("success" if partial_success else "failure")) 

	partial_success = Module_DisplayedArea_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BlendingSoftcopyPresentationState success after verifying DisplayedArea " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGraphicAnnotation(ds,0,ds) :
		partial_success = Module_GraphicAnnotation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BlendingSoftcopyPresentationState success after verifying GraphicAnnotation " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpatialTransformation(ds,0,ds) :
		partial_success = Module_SpatialTransformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BlendingSoftcopyPresentationState success after verifying SpatialTransformation " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGraphicLayer(ds,0,ds) :
		partial_success = Module_GraphicLayer_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BlendingSoftcopyPresentationState success after verifying GraphicLayer " + ("success" if partial_success else "failure")) 

	partial_success = Module_PaletteColorLookupTable_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BlendingSoftcopyPresentationState success after verifying PaletteColorLookupTable " + ("success" if partial_success else "failure")) 

	partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BlendingSoftcopyPresentationState success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BlendingSoftcopyPresentationState success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_HangingProtocol_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)HangingProtocol")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "HangingProtocol success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_HangingProtocolDefinition_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "HangingProtocol success after verifying HangingProtocolDefinition " + ("success" if partial_success else "failure")) 

	partial_success = Module_HangingProtocolEnvironment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "HangingProtocol success after verifying HangingProtocolEnvironment " + ("success" if partial_success else "failure")) 

	partial_success = Module_HangingProtocolDisplay_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "HangingProtocol success after verifying HangingProtocolDisplay " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "HangingProtocol success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_ColorPalette_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)ColorPalette")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "ColorPalette success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_ColorPaletteDefinition_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorPalette success after verifying ColorPaletteDefinition " + ("success" if partial_success else "failure")) 

	partial_success = Module_PaletteColorLookupTable_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorPalette success after verifying PaletteColorLookupTable " + ("success" if partial_success else "failure")) 

	partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorPalette success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "ColorPalette success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_BasicStructuredDisplay_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)BasicStructuredDisplay")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicStructuredDisplay success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicStructuredDisplay success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicStructuredDisplay success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicStructuredDisplay success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicStructuredDisplay success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicStructuredDisplay success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicStructuredDisplay success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicStructuredDisplay success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_PresentationSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicStructuredDisplay success after verifying PresentationSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicStructuredDisplay success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	if Condition_EnhancedGeneralEquipmentIsPresent(ds,0,ds) :
		partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicStructuredDisplay success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_StructuredDisplay_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicStructuredDisplay success after verifying StructuredDisplay " + ("success" if partial_success else "failure")) 

	partial_success = Module_StructuredDisplayImageBox_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicStructuredDisplay success after verifying StructuredDisplayImageBox " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleStructuredDisplayAnnotation(ds,0,ds) :
		partial_success = Module_StructuredDisplayAnnotation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "BasicStructuredDisplay success after verifying StructuredDisplayAnnotation " + ("success" if partial_success else "failure")) 

	partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicStructuredDisplay success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "BasicStructuredDisplay success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_EnhancedMRImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)EnhancedMRImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_MRSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying MRSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForEnhancedMRImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying MultiFrameFunctionalGroupsForEnhancedMRImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleBulkMotion(ds,0,ds) :
		partial_success = Module_BulkMotionSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying BulkMotionSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSupplementalPaletteColorLUT(ds,0,ds) :
		partial_success = Module_SupplementalPaletteColorLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying SupplementalPaletteColorLUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedMRImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying EnhancedMRImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMRPulseSequence(ds,0,ds) :
		partial_success = Module_MRPulseSequence_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying MRPulseSequence " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_EnhancedMRColorImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)EnhancedMRColorImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_MRSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying MRSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForEnhancedMRImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying MultiFrameFunctionalGroupsForEnhancedMRImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleBulkMotion(ds,0,ds) :
		partial_success = Module_BulkMotionSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying BulkMotionSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSupplementalPaletteColorLUT(ds,0,ds) :
		partial_success = Module_SupplementalPaletteColorLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying SupplementalPaletteColorLUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedMRImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying EnhancedMRImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMRPulseSequence(ds,0,ds) :
		partial_success = Module_MRPulseSequence_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying MRPulseSequence " + ("success" if partial_success else "failure")) 

	partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedMRColorImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedMRColorImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_MRSpectroscopy_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)MRSpectroscopy")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRSpectroscopy success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRSpectroscopy success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRSpectroscopy success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRSpectroscopy success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_MRSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying MRSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRSpectroscopy success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRSpectroscopy success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForMRSpectroscopy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying MultiFrameFunctionalGroupsForMRSpectroscopy " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRSpectroscopy success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRSpectroscopy success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleBulkMotion(ds,0,ds) :
		partial_success = Module_BulkMotionSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRSpectroscopy success after verifying BulkMotionSynchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRSpectroscopy success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_MRSpectroscopy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying MRSpectroscopy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMRSpectroscopyPulseSequence(ds,0,ds) :
		partial_success = Module_MRSpectroscopyPulseSequence_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRSpectroscopy success after verifying MRSpectroscopyPulseSequence " + ("success" if partial_success else "failure")) 

	partial_success = Module_MRSpectroscopyData_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying MRSpectroscopyData " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "MRSpectroscopy success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "MRSpectroscopy success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_RawData_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)RawData")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RawData success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RawData success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RawData success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RawData success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RawData success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RawData success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RawData success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RawData success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameOfReference(ds,0,ds) :
		partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RawData success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RawData success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RawData success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RawData success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "RawData success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_RawData_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RawData success after verifying RawData " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "RawData success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_LegacyConvertedEnhancedMRImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)LegacyConvertedEnhancedMRImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedMRImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedMRImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedMRImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedMRImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_MRSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedMRImage success after verifying MRSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedMRImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedMRImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	if Condition_EnhancedGeneralEquipmentIsPresent(ds,0,ds) :
		partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedMRImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedMRImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedMRImage success after verifying MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleBulkMotion(ds,0,ds) :
		partial_success = Module_BulkMotionSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying BulkMotionSynchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedMRImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedMRImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedMRImage success after verifying EnhancedMRImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedMRImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedMRImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedMRImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)PrivatePixelMedLegacyConvertedEnhancedMRImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_MRSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying MRSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	if Condition_EnhancedGeneralEquipmentIsPresent(ds,0,ds) :
		partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleBulkMotion(ds,0,ds) :
		partial_success = Module_BulkMotionSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying BulkMotionSynchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedMRImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying EnhancedMRImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_TractographyResults_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)TractographyResults")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "TractographyResults success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TractographyResults success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "TractographyResults success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TractographyResults success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TractographyResults success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "TractographyResults success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TractographyResults success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_TractographyResultsSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TractographyResults success after verifying TractographyResultsSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "TractographyResults success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TractographyResults success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TractographyResults success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TractographyResults success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_TractographyResults_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TractographyResults success after verifying TractographyResults " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "TractographyResults success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TractographyResults success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "TractographyResults success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_EnhancedCTImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)EnhancedCTImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_CTSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying CTSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForEnhancedCTImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying MultiFrameFunctionalGroupsForEnhancedCTImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSupplementalPaletteColorLUT(ds,0,ds) :
		partial_success = Module_SupplementalPaletteColorLUT_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying SupplementalPaletteColorLUT " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedCTImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying EnhancedCTImage " + ("success" if partial_success else "failure")) 

	if Condition_IsMultienergyCTAcquisition(ds,0,ds) :
		partial_success = Module_EnhancedMultienergyCTAcquisition_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying EnhancedMultienergyCTAcquisition " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedCTImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedCTImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_LegacyConvertedEnhancedCTImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)LegacyConvertedEnhancedCTImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedCTImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedCTImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedCTImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedCTImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_CTSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedCTImage success after verifying CTSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedCTImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedCTImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	if Condition_EnhancedGeneralEquipmentIsPresent(ds,0,ds) :
		partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedCTImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedCTImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedCTImage success after verifying MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedCTImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedCTImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedCTImage success after verifying EnhancedCTImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "LegacyConvertedEnhancedCTImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "LegacyConvertedEnhancedCTImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_PrivatePixelMedLegacyConvertedEnhancedCTImage_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)PrivatePixelMedLegacyConvertedEnhancedCTImage")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_CTSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying CTSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedToCheckModuleSynchronization(ds,0,ds) :
		partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	if Condition_EnhancedGeneralEquipmentIsPresent(ds,0,ds) :
		partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleContrastBolus(ds,0,ds) :
		partial_success = Module_ContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying ContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleMultiFrameDimension(ds,0,ds) :
		partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying Device " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying Specimen " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedCTImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying EnhancedCTImage " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "PrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_EnhancedUltrasoundVolume_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)EnhancedUltrasoundVolume")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedUSSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying EnhancedUSSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_UltrasoundFrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying UltrasoundFrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForEnhancedUSVolume_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying MultiFrameFunctionalGroupsForEnhancedUSVolume " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying Device " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying Specimen " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedPaletteColorLookupTable(ds,0,ds) :
		partial_success = Module_EnhancedPaletteColorLookupTable_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying EnhancedPaletteColorLookupTable " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedUSImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying EnhancedUSImage " + ("success" if partial_success else "failure")) 

	if Condition_ModalityIsIVUS(ds,0,ds) :
		partial_success = Module_IVUSImage_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying IVUSImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleExcludedIntervals(ds,0,ds) :
		partial_success = Module_ExcludedIntervals_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying ExcludedIntervals " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolume success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolume success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	return global_success

def CompositeIOD_EnhancedUltrasoundVolumeQTUS_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: 
	global_success = True
	partial_success = True


	if verbose:
		log.append("MMsgDC(Verifying) MMsgDC(CompositeInformationObject)EnhancedUltrasoundVolumeQTUS")

	if Condition_NeedModuleFileMetaInformation(ds,0,ds) :
		partial_success = Module_FileMetaInformation_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying FileMetaInformation " + ("success" if partial_success else "failure")) 

	partial_success = Module_Patient_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying Patient " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSubject(ds,0,ds) :
		partial_success = Module_ClinicalTrialSubject_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying ClinicalTrialSubject " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying GeneralStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_PatientStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying PatientStudy " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialStudy(ds,0,ds) :
		partial_success = Module_ClinicalTrialStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying ClinicalTrialStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_QTUSEnhancedUltrasoundVolumeProfileStudy_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying QTUSEnhancedUltrasoundVolumeProfileStudy " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying GeneralSeries " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleClinicalTrialSeries(ds,0,ds) :
		partial_success = Module_ClinicalTrialSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying ClinicalTrialSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedUSSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying EnhancedUSSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_QTUSEnhancedUltrasoundVolumeProfileSeries_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying QTUSEnhancedUltrasoundVolumeProfileSeries " + ("success" if partial_success else "failure")) 

	partial_success = Module_FrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying FrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_UltrasoundFrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying UltrasoundFrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_Synchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying Synchronization " + ("success" if partial_success else "failure")) 

	partial_success = Module_QTUSEnhancedUltrasoundVolumeProfileFrameOfReference_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying QTUSEnhancedUltrasoundVolumeProfileFrameOfReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying GeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedGeneralEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying EnhancedGeneralEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_QTUSEnhancedUltrasoundVolumeProfileEquipment_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying QTUSEnhancedUltrasoundVolumeProfileEquipment " + ("success" if partial_success else "failure")) 

	partial_success = Module_GeneralImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying GeneralImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleGeneralReference(ds,0,ds) :
		partial_success = Module_GeneralReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying GeneralReference " + ("success" if partial_success else "failure")) 

	partial_success = Module_ImagePixel_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying ImagePixel " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedContrastBolus(ds,0,ds) :
		partial_success = Module_EnhancedContrastBolus_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying EnhancedContrastBolus " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying MultiFrameFunctionalGroupsCommon " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameFunctionalGroupsForEnhancedUSVolume_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying MultiFrameFunctionalGroupsForEnhancedUSVolume " + ("success" if partial_success else "failure")) 

	partial_success = Module_MultiFrameDimension_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying MultiFrameDimension " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCardiacSynchronization(ds,0,ds) :
		partial_success = Module_CardiacSynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying CardiacSynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleRespiratorySynchronization(ds,0,ds) :
		partial_success = Module_RespiratorySynchronization_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying RespiratorySynchronization " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleDevice(ds,0,ds) :
		partial_success = Module_Device_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying Device " + ("success" if partial_success else "failure")) 

	partial_success = Module_AcquisitionContext_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying AcquisitionContext " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleSpecimen(ds,0,ds) :
		partial_success = Module_Specimen_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying Specimen " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleEnhancedPaletteColorLookupTable(ds,0,ds) :
		partial_success = Module_EnhancedPaletteColorLookupTable_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying EnhancedPaletteColorLookupTable " + ("success" if partial_success else "failure")) 

	partial_success = Module_EnhancedUSImage_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying EnhancedUSImage " + ("success" if partial_success else "failure")) 

	if Condition_ModalityIsIVUS(ds,0,ds) :
		partial_success = Module_IVUSImage_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying IVUSImage " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleExcludedIntervals(ds,0,ds) :
		partial_success = Module_ExcludedIntervals_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying ExcludedIntervals " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleICCProfile(ds,0,ds) :
		partial_success = Module_ICCProfile_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying ICCProfile " + ("success" if partial_success else "failure")) 

	partial_success = Module_SOPCommon_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying SOPCommon " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleCommonInstanceReference(ds,0,ds) :
		partial_success = Module_CommonInstanceReference_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying CommonInstanceReference " + ("success" if partial_success else "failure")) 

	if Condition_NeedModuleFrameExtraction(ds,0,ds) :
		partial_success = Module_FrameExtraction_verify(ds, ds, ds, verbose, log, fix_trivials)
		global_success = global_success and partial_success
		if verbose:
			log.append( "EnhancedUltrasoundVolumeQTUS success after verifying FrameExtraction " + ("success" if partial_success else "failure")) 

	partial_success = Module_QTUSEnhancedUltrasoundVolumeProfileInstance_verify(ds, ds, ds, verbose, log, fix_trivials)
	global_success = global_success and partial_success
	if verbose:
		log.append( "EnhancedUltrasoundVolumeQTUS success after verifying QTUSEnhancedUltrasoundVolumeProfileInstance " + ("success" if partial_success else "failure")) 

	return global_success

