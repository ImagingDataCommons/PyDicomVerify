# Automatically generated from template - EDITS WILL BE LOST

# Generated by module.awk 

from pydicom.sequence import Sequence
from pydicom.dataset import Dataset
from strval_h import *
from condn_h import *
from binval_h import *
from tagval_h import *
from module_cc import *
from attrverify_cc import *
from pydicom.datadict import *
from mesgtext_cc import *
def Macro_IconImageSequenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"IconImageSequenceMacro")

	partial_success =  		verifyType1(ds, 
			"IconImageSequenceMacro", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IconImageSequenceMacro", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_IconImagePhotometricInterpretation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IconImageSequenceMacro", "Rows", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying Rows --> "+("success" if partial_success else "failure"))

	if "Rows" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Rows"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"IconImageSequenceMacro", "Columns", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying Columns --> "+("success" if partial_success else "failure"))

	if "Columns" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Columns"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"IconImageSequenceMacro", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre1Or8, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IconImageSequenceMacro", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre1Or8, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IconImageSequenceMacro", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre0Or7, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IconImageSequenceMacro", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IconImageSequenceMacro", "PixelData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying PixelData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IconImageSequenceMacro", "PlanarConfiguration", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying PlanarConfiguration --> "+("success" if partial_success else "failure"))

	if Condition_Never(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_PlanarConfiguration, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"IconImageSequenceMacro", "PixelAspectRatio", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying PixelAspectRatio --> "+("success" if partial_success else "failure"))

	if "PixelAspectRatio" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelAspectRatio"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying binary enumerated values PixelAspectRatio --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"IconImageSequenceMacro", "SmallestImagePixelValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying SmallestImagePixelValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"IconImageSequenceMacro", "LargestImagePixelValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying LargestImagePixelValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IconImageSequenceMacro", "RedPaletteColorLookupTableDescriptor", 
			verbose, log, ElementDictionary, 
			Condition_PhotometricInterpretationNeedsPalette, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying RedPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if "RedPaletteColorLookupTableDescriptor" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["RedPaletteColorLookupTableDescriptor"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying binary enumerated values RedPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IconImageSequenceMacro", "GreenPaletteColorLookupTableDescriptor", 
			verbose, log, ElementDictionary, 
			Condition_PhotometricInterpretationNeedsPalette, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying GreenPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if "GreenPaletteColorLookupTableDescriptor" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["GreenPaletteColorLookupTableDescriptor"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying binary enumerated values GreenPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IconImageSequenceMacro", "BluePaletteColorLookupTableDescriptor", 
			verbose, log, ElementDictionary, 
			Condition_PhotometricInterpretationNeedsPalette, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying BluePaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if "BluePaletteColorLookupTableDescriptor" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BluePaletteColorLookupTableDescriptor"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying binary enumerated values BluePaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IconImageSequenceMacro", "RedPaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			Condition_PhotometricInterpretationNeedsPalette, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying RedPaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IconImageSequenceMacro", "GreenPaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			Condition_PhotometricInterpretationNeedsPalette, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying GreenPaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IconImageSequenceMacro", "BluePaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			Condition_PhotometricInterpretationNeedsPalette, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying BluePaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"IconImageSequenceMacro", "ICCProfile", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying ICCProfile --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"IconImageSequenceMacro", "ColorSpace", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IconImageSequenceMacro success after verifying ColorSpace --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_BasicCodeSequenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"BasicCodeSequenceMacro")

	partial_success =  		verifyType1C(ds, 
			"BasicCodeSequenceMacro", "CodeValue", 
			verbose, log, ElementDictionary, 
			Condition_LongCodeValueAndURNCodeValueAbsent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BasicCodeSequenceMacro success after verifying CodeValue --> "+("success" if partial_success else "failure"))


	if Condition_CodeValueIllegalOrDeprecated(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Code Value is illegal or deprecated - attribute <CodeValue>"+\
				" = <{}>".format( tag_for_keyword("CodeValue")))

	partial_success =  		verifyType1C(ds, 
			"BasicCodeSequenceMacro", "CodingSchemeDesignator", 
			verbose, log, ElementDictionary, 
			Condition_CodeValueOrLongCodeValuePresent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BasicCodeSequenceMacro success after verifying CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

	if Condition_CodeValueOrLongCodeValuePresent(ds, parent_ds, root_ds):
		if "CodingSchemeDesignator" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["CodingSchemeDesignator"], 
				StringValueTable_MiscellaneousCodingSchemeDesignators, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " BasicCodeSequenceMacro success after verifying string defined terms CodingSchemeDesignator --> "+("success" if partial_success else "failure"))


	if Condition_CodingSchemeDesignatorDeprecated(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" Coding Scheme Designator is deprecated - attribute <CodingSchemeDesignator>"+\
				" = <{}>".format( tag_for_keyword("CodingSchemeDesignator")))

	partial_success =  		verifyType1C(ds, 
			"BasicCodeSequenceMacro", "CodingSchemeVersion", 
			verbose, log, ElementDictionary, 
			Condition_CodingSchemeVersionRequired, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BasicCodeSequenceMacro success after verifying CodingSchemeVersion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"BasicCodeSequenceMacro", "CodeMeaning", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BasicCodeSequenceMacro success after verifying CodeMeaning --> "+("success" if partial_success else "failure"))


	if Condition_CodeMeaningIllegalOrDeprecated(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Code Meaning is illegal or deprecated - attribute <CodeMeaning>"+\
				" = <{}>".format( tag_for_keyword("CodeMeaning")))

	partial_success =  		verifyType1C(ds, 
			"BasicCodeSequenceMacro", "LongCodeValue", 
			verbose, log, ElementDictionary, 
			Condition_CodeValueAndURNCodeValueAbsent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BasicCodeSequenceMacro success after verifying LongCodeValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"BasicCodeSequenceMacro", "URNCodeValue", 
			verbose, log, ElementDictionary, 
			Condition_CodeValueAndLongCodeValueAbsent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BasicCodeSequenceMacro success after verifying URNCodeValue --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_EnhancedCodeSequenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"EnhancedCodeSequenceMacro")

	partial_success =  		verifyType3(ds, 
			"EnhancedCodeSequenceMacro", "ContextIdentifier", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCodeSequenceMacro success after verifying ContextIdentifier --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedCodeSequenceMacro", "ContextUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCodeSequenceMacro success after verifying ContextUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedCodeSequenceMacro", "MappingResource", 
			verbose, log, ElementDictionary, 
			Condition_ContextIdentifierIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCodeSequenceMacro success after verifying MappingResource --> "+("success" if partial_success else "failure"))

	if Condition_ContextIdentifierIsPresent(ds, parent_ds, root_ds):
		if "MappingResource" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["MappingResource"], 
				StringValueTable_MappingResources, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCodeSequenceMacro success after verifying string defined terms MappingResource --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedCodeSequenceMacro", "MappingResourceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCodeSequenceMacro success after verifying MappingResourceUID --> "+("success" if partial_success else "failure"))

	if "MappingResourceUID" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["MappingResourceUID"], 
			StringValueTable_MappingResourceUIDs, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCodeSequenceMacro success after verifying string defined terms MappingResourceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedCodeSequenceMacro", "MappingResourceName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCodeSequenceMacro success after verifying MappingResourceName --> "+("success" if partial_success else "failure"))

	if "MappingResourceName" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["MappingResourceName"], 
			StringValueTable_MappingResourceNames, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCodeSequenceMacro success after verifying string defined terms MappingResourceName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedCodeSequenceMacro", "ContextGroupVersion", 
			verbose, log, ElementDictionary, 
			Condition_ContextIdentifierIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCodeSequenceMacro success after verifying ContextGroupVersion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedCodeSequenceMacro", "ContextGroupExtensionFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCodeSequenceMacro success after verifying ContextGroupExtensionFlag --> "+("success" if partial_success else "failure"))

	if "ContextGroupExtensionFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ContextGroupExtensionFlag"], 
			StringValueTable_YesNoLetter, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCodeSequenceMacro success after verifying string enumerated values ContextGroupExtensionFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedCodeSequenceMacro", "ContextGroupLocalVersion", 
			verbose, log, ElementDictionary, 
			Condition_ExtendedCodingScheme, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCodeSequenceMacro success after verifying ContextGroupLocalVersion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedCodeSequenceMacro", "ContextGroupExtensionCreatorUID", 
			verbose, log, ElementDictionary, 
			Condition_ExtendedCodingScheme, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCodeSequenceMacro success after verifying ContextGroupExtensionCreatorUID --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_CodeSequenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CodeSequenceMacro")

	partial_success =  Macro_BasicCodeSequenceMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " CodeSequenceMacro success after verifying BasicCodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"CodeSequenceMacro", 
			"EquivalentCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CodeSequenceMacro success after verifying EquivalentCodeSequence" + ("success" if partial_success else "failure")) 
	if "EquivalentCodeSequence" in ds:
		EquivalentCodeSequence_data = ds.EquivalentCodeSequence
		if type(EquivalentCodeSequence_data) == Sequence:
			for i1 in range(0, len(EquivalentCodeSequence_data)):
				if verbose:
					log.append( " EquivalentCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = EquivalentCodeSequence_data[i1]
				partial_success =  Macro_BasicCodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " CodeSequenceMacro success after verifying BasicCodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_EnhancedCodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " CodeSequenceMacro success after verifying EnhancedCodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_EnhancedCodeSequenceMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " CodeSequenceMacro success after verifying EnhancedCodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_CodeSequenceMeaningOptionalMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CodeSequenceMeaningOptionalMacro")

	partial_success =  		verifyType1(ds, 
			"CodeSequenceMeaningOptionalMacro", "CodeValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequenceMeaningOptionalMacro success after verifying CodeValue --> "+("success" if partial_success else "failure"))


	if Condition_CodeValueIllegalOrDeprecated(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Code Value is illegal or deprecated - attribute <CodeValue>"+\
				" = <{}>".format( tag_for_keyword("CodeValue")))

	partial_success =  		verifyType1(ds, 
			"CodeSequenceMeaningOptionalMacro", "CodingSchemeDesignator", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequenceMeaningOptionalMacro success after verifying CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

	if "CodingSchemeDesignator" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["CodingSchemeDesignator"], 
			StringValueTable_MiscellaneousCodingSchemeDesignators, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequenceMeaningOptionalMacro success after verifying string defined terms CodingSchemeDesignator --> "+("success" if partial_success else "failure"))


	if Condition_CodingSchemeDesignatorDeprecated(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" Coding Scheme Designator is deprecated - attribute <CodingSchemeDesignator>"+\
				" = <{}>".format( tag_for_keyword("CodingSchemeDesignator")))

	partial_success =  		verifyType1C(ds, 
			"CodeSequenceMeaningOptionalMacro", "CodingSchemeVersion", 
			verbose, log, ElementDictionary, 
			Condition_CodingSchemeVersionRequired, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequenceMeaningOptionalMacro success after verifying CodingSchemeVersion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CodeSequenceMeaningOptionalMacro", "CodeMeaning", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequenceMeaningOptionalMacro success after verifying CodeMeaning --> "+("success" if partial_success else "failure"))


	if Condition_CodeMeaningEmptyOrNotPresent(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" Code Meaning is missing or empty, which is legal but undesirable - attribute <CodeMeaning>")

	partial_success =  		verifyType3(ds, 
			"CodeSequenceMeaningOptionalMacro", "ContextIdentifier", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequenceMeaningOptionalMacro success after verifying ContextIdentifier --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CodeSequenceMeaningOptionalMacro", "ContextUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequenceMeaningOptionalMacro success after verifying ContextUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"CodeSequenceMeaningOptionalMacro", "MappingResource", 
			verbose, log, ElementDictionary, 
			Condition_ContextIdentifierIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequenceMeaningOptionalMacro success after verifying MappingResource --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"CodeSequenceMeaningOptionalMacro", "ContextGroupVersion", 
			verbose, log, ElementDictionary, 
			Condition_ContextIdentifierIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequenceMeaningOptionalMacro success after verifying ContextGroupVersion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CodeSequenceMeaningOptionalMacro", "ContextGroupExtensionFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequenceMeaningOptionalMacro success after verifying ContextGroupExtensionFlag --> "+("success" if partial_success else "failure"))

	if "ContextGroupExtensionFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ContextGroupExtensionFlag"], 
			StringValueTable_YesNoLetter, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequenceMeaningOptionalMacro success after verifying string enumerated values ContextGroupExtensionFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"CodeSequenceMeaningOptionalMacro", "ContextGroupLocalVersion", 
			verbose, log, ElementDictionary, 
			Condition_ExtendedCodingScheme, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequenceMeaningOptionalMacro success after verifying ContextGroupLocalVersion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"CodeSequenceMeaningOptionalMacro", "ContextGroupExtensionCreatorUID", 
			verbose, log, ElementDictionary, 
			Condition_ExtendedCodingScheme, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequenceMeaningOptionalMacro success after verifying ContextGroupExtensionCreatorUID --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_CodeSequence99SDMMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CodeSequence99SDMMacro")

	partial_success =  		verifyType1(ds, 
			"CodeSequence99SDMMacro", "CodeValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequence99SDMMacro success after verifying CodeValue --> "+("success" if partial_success else "failure"))


	if Condition_CodeValueIllegalOrDeprecated(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Code Value is illegal or deprecated - attribute <CodeValue>"+\
				" = <{}>".format( tag_for_keyword("CodeValue")))

	partial_success =  		verifyType1(ds, 
			"CodeSequence99SDMMacro", "CodingSchemeDesignator", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequence99SDMMacro success after verifying CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

	if "CodingSchemeDesignator" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CodingSchemeDesignator"], 
			StringValueTable_CodingSchemeDesignatorForSNOMEDDICOMMicroglossary, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequence99SDMMacro success after verifying string enumerated values CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"CodeSequence99SDMMacro", "CodingSchemeVersion", 
			verbose, log, ElementDictionary, 
			Condition_CodingSchemeVersionRequired, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequence99SDMMacro success after verifying CodingSchemeVersion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CodeSequence99SDMMacro", "CodeMeaning", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequence99SDMMacro success after verifying CodeMeaning --> "+("success" if partial_success else "failure"))


	if Condition_CodeMeaningEmptyOrNotPresent(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" Code Meaning is missing or empty, which is legal but undesirable - attribute <CodeMeaning>")

	partial_success =  		verifyType3(ds, 
			"CodeSequence99SDMMacro", "ContextIdentifier", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequence99SDMMacro success after verifying ContextIdentifier --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CodeSequence99SDMMacro", "ContextUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequence99SDMMacro success after verifying ContextUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"CodeSequence99SDMMacro", "MappingResource", 
			verbose, log, ElementDictionary, 
			Condition_ContextIdentifierIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequence99SDMMacro success after verifying MappingResource --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"CodeSequence99SDMMacro", "ContextGroupVersion", 
			verbose, log, ElementDictionary, 
			Condition_ContextIdentifierIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequence99SDMMacro success after verifying ContextGroupVersion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CodeSequence99SDMMacro", "ContextGroupExtensionFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequence99SDMMacro success after verifying ContextGroupExtensionFlag --> "+("success" if partial_success else "failure"))

	if "ContextGroupExtensionFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ContextGroupExtensionFlag"], 
			StringValueTable_YesNoLetter, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequence99SDMMacro success after verifying string enumerated values ContextGroupExtensionFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"CodeSequence99SDMMacro", "ContextGroupLocalVersion", 
			verbose, log, ElementDictionary, 
			Condition_ExtendedCodingScheme, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequence99SDMMacro success after verifying ContextGroupLocalVersion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"CodeSequence99SDMMacro", "ContextGroupExtensionCreatorUID", 
			verbose, log, ElementDictionary, 
			Condition_ExtendedCodingScheme, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CodeSequence99SDMMacro success after verifying ContextGroupExtensionCreatorUID --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PersonIdentificationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PersonIdentificationMacro")

	partial_success = verifyType1(ds, 
			"PersonIdentificationMacro", 
			"PersonIdentificationCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PersonIdentificationMacro success after verifying PersonIdentificationCodeSequence" + ("success" if partial_success else "failure")) 
	if "PersonIdentificationCodeSequence" in ds:
		PersonIdentificationCodeSequence_data = ds.PersonIdentificationCodeSequence
		if type(PersonIdentificationCodeSequence_data) == Sequence:
			for i1 in range(0, len(PersonIdentificationCodeSequence_data)):
				if verbose:
					log.append( " PersonIdentificationCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PersonIdentificationCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PersonIdentificationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"PersonIdentificationMacro", "PersonAddress", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PersonIdentificationMacro success after verifying PersonAddress --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PersonIdentificationMacro", "PersonTelephoneNumbers", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PersonIdentificationMacro success after verifying PersonTelephoneNumbers --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PersonIdentificationMacro", "InstitutionName", 
			verbose, log, ElementDictionary, 
			Condition_InstitutionCodeSequenceNotPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PersonIdentificationMacro success after verifying InstitutionName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PersonIdentificationMacro", "InstitutionAddress", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PersonIdentificationMacro success after verifying InstitutionAddress --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"PersonIdentificationMacro", 
			"InstitutionCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_InstitutionNameNotPresent, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PersonIdentificationMacro success after verifying InstitutionCodeSequence" + ("success" if partial_success else "failure")) 
	if "InstitutionCodeSequence" in ds:
		InstitutionCodeSequence_data = ds.InstitutionCodeSequence
		if type(InstitutionCodeSequence_data) == Sequence:
			for i1 in range(0, len(InstitutionCodeSequence_data)):
				if verbose:
					log.append( " InstitutionCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = InstitutionCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PersonIdentificationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"PersonIdentificationMacro", "InstitutionalDepartmentName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PersonIdentificationMacro success after verifying InstitutionalDepartmentName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"PersonIdentificationMacro", 
			"InstitutionalDepartmentTypeCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PersonIdentificationMacro success after verifying InstitutionalDepartmentTypeCodeSequence" + ("success" if partial_success else "failure")) 
	if "InstitutionalDepartmentTypeCodeSequence" in ds:
		InstitutionalDepartmentTypeCodeSequence_data = ds.InstitutionalDepartmentTypeCodeSequence
		if type(InstitutionalDepartmentTypeCodeSequence_data) == Sequence:
			for i1 in range(0, len(InstitutionalDepartmentTypeCodeSequence_data)):
				if verbose:
					log.append( " InstitutionalDepartmentTypeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = InstitutionalDepartmentTypeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PersonIdentificationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_ContentItemMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ContentItemMacro")

	partial_success =  		verifyType1(ds, 
			"ContentItemMacro", "ValueType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentItemMacro success after verifying ValueType --> "+("success" if partial_success else "failure"))

	if "ValueType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ValueType"], 
			StringValueTable_ContentItemValueTypes, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentItemMacro success after verifying string enumerated values ValueType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ContentItemMacro", "ObservationDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentItemMacro success after verifying ObservationDateTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"ContentItemMacro", 
			"ConceptNameCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ContentItemMacro success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
	if "ConceptNameCodeSequence" in ds:
		ConceptNameCodeSequence_data = ds.ConceptNameCodeSequence
		if type(ConceptNameCodeSequence_data) == Sequence:
			for i1 in range(0, len(ConceptNameCodeSequence_data)):
				if verbose:
					log.append( " ConceptNameCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConceptNameCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ContentItemMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"ContentItemMacro", "DateTime", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsDateTime, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentItemMacro success after verifying DateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ContentItemMacro", "Date", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsDate, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentItemMacro success after verifying Date --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ContentItemMacro", "Time", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsTime, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentItemMacro success after verifying Time --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ContentItemMacro", "PersonName", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsPersonName, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentItemMacro success after verifying PersonName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ContentItemMacro", "UID", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsUID, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentItemMacro success after verifying UID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ContentItemMacro", "TextValue", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsText, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentItemMacro success after verifying TextValue --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"ContentItemMacro", 
			"ConceptCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsCode, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ContentItemMacro success after verifying ConceptCodeSequence" + ("success" if partial_success else "failure")) 
	if "ConceptCodeSequence" in ds:
		ConceptCodeSequence_data = ds.ConceptCodeSequence
		if type(ConceptCodeSequence_data) == Sequence:
			for i1 in range(0, len(ConceptCodeSequence_data)):
				if verbose:
					log.append( " ConceptCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConceptCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ContentItemMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"ContentItemMacro", "NumericValue", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsNumeric, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentItemMacro success after verifying NumericValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ContentItemMacro", "FloatingPointValue", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentItemMacro success after verifying FloatingPointValue --> "+("success" if partial_success else "failure"))


	if Condition_FloatingPointValuePresentButValueTypeIsNotNumeric(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May only be present for NUMERIC ValueType - attribute <FloatingPointValue>")

	partial_success =  		verifyType1C(ds, 
			"ContentItemMacro", "RationalNumeratorValue", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentItemMacro success after verifying RationalNumeratorValue --> "+("success" if partial_success else "failure"))


	if Condition_RationalNumeratorValuePresentButValueTypeIsNotNumeric(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May only be present for NUMERIC ValueType - attribute <RationalNumeratorValue>")

	partial_success =  		verifyType1C(ds, 
			"ContentItemMacro", "RationalDenominatorValue", 
			verbose, log, ElementDictionary, 
			Condition_RationalNumeratorValueIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentItemMacro success after verifying RationalDenominatorValue --> "+("success" if partial_success else "failure"))

	if Condition_RationalNumeratorValueIsPresent(ds, parent_ds, root_ds):
		if "RationalDenominatorValue" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["RationalDenominatorValue"], 
				verbose, log, -1, False)


	if Condition_RationalDenominatorValueButValueTypeIsNotNumeric(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May only be present for NUMERIC ValueType - attribute <RationalDenominatorValue>")

	partial_success = verifyType1C(ds, 
			"ContentItemMacro", 
			"MeasurementUnitsCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsNumeric, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ContentItemMacro success after verifying MeasurementUnitsCodeSequence" + ("success" if partial_success else "failure")) 
	if "MeasurementUnitsCodeSequence" in ds:
		MeasurementUnitsCodeSequence_data = ds.MeasurementUnitsCodeSequence
		if type(MeasurementUnitsCodeSequence_data) == Sequence:
			for i1 in range(0, len(MeasurementUnitsCodeSequence_data)):
				if verbose:
					log.append( " MeasurementUnitsCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MeasurementUnitsCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ContentItemMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"ContentItemMacro", 
			"ReferencedSOPSequence", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsCompositeOrImage, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ContentItemMacro success after verifying ReferencedSOPSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSOPSequence" in ds:
		ReferencedSOPSequence_data = ds.ReferencedSOPSequence
		if type(ReferencedSOPSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSOPSequence_data)):
				if verbose:
					log.append( " ReferencedSOPSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSOPSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ContentItemMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"ContentItemMacro", "ReferencedFrameNumber", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContentItemMacro success after verifying ReferencedFrameNumber --> "+("success" if partial_success else "failure"))

				if "ReferencedFrameNumber" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ReferencedFrameNumber"], 
						verbose, log, -1, False)


				if Condition_ReferencedFrameNumberPresentAndReferencedSOPClassUIDIsNotMultiFrame(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" May not be present for Referenced SOP Class that is not multi-frame - attribute <ReferencedFrameNumber>")

				partial_success =  		verifyType1C(ds1, 
						"ContentItemMacro", "ReferencedSegmentNumber", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContentItemMacro success after verifying ReferencedSegmentNumber --> "+("success" if partial_success else "failure"))

				if "ReferencedSegmentNumber" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ReferencedSegmentNumber"], 
						verbose, log, -1, False)


				if Condition_ReferencedSegmentNumberPresentAndReferencedSOPClassUIDIsNotSegmentationOrSurfaceSegmentation(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" May not be present for Referenced SOP Class that is not segmentation - attribute <ReferencedSegmentNumber>")


				if Condition_ReferencedFrameNumberAndReferencedSegmentNumberPresent(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" May not be present when ReferencedFrameNumber is present - attribute <ReferencedSegmentNumber>")

	return global_success

def Macro_ContentItemWithModifiersMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ContentItemWithModifiersMacro")

	partial_success =  Macro_ContentItemMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " ContentItemWithModifiersMacro success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"ContentItemWithModifiersMacro", 
			"ContentItemModifierSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ContentItemWithModifiersMacro success after verifying ContentItemModifierSequence" + ("success" if partial_success else "failure")) 
	if "ContentItemModifierSequence" in ds:
		ContentItemModifierSequence_data = ds.ContentItemModifierSequence
		if type(ContentItemModifierSequence_data) == Sequence:
			for i1 in range(0, len(ContentItemModifierSequence_data)):
				if verbose:
					log.append( " ContentItemModifierSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContentItemModifierSequence_data[i1]
				partial_success =  Macro_ContentItemMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ContentItemWithModifiersMacro success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_ImageSOPInstanceReferenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ImageSOPInstanceReferenceMacro")

	partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " ImageSOPInstanceReferenceMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"ImageSOPInstanceReferenceMacro", "ReferencedFrameNumber", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImageSOPInstanceReferenceMacro success after verifying ReferencedFrameNumber --> "+("success" if partial_success else "failure"))

	if "ReferencedFrameNumber" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ReferencedFrameNumber"], 
			verbose, log, -1, False)


	if Condition_ReferencedFrameNumberPresentAndReferencedSOPClassUIDIsNotMultiFrame(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present for Referenced SOP Class that is not multi-frame - attribute <ReferencedFrameNumber>")

	partial_success =  		verifyType1C(ds, 
			"ImageSOPInstanceReferenceMacro", "ReferencedSegmentNumber", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImageSOPInstanceReferenceMacro success after verifying ReferencedSegmentNumber --> "+("success" if partial_success else "failure"))

	if "ReferencedSegmentNumber" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ReferencedSegmentNumber"], 
			verbose, log, -1, False)


	if Condition_ReferencedSegmentNumberPresentAndReferencedSOPClassUIDIsNotSegmentationOrSurfaceSegmentation(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present for Referenced SOP Class that is not segmentation - attribute <ReferencedSegmentNumber>")


	if Condition_ReferencedFrameNumberAndReferencedSegmentNumberPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when ReferencedFrameNumber is present - attribute <ReferencedSegmentNumber>")

	return global_success

def Macro_SeriesAndInstanceReferenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SeriesAndInstanceReferenceMacro")

	partial_success = verifyType1(ds, 
			"SeriesAndInstanceReferenceMacro", 
			"ReferencedSeriesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SeriesAndInstanceReferenceMacro success after verifying ReferencedSeriesSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSeriesSequence" in ds:
		ReferencedSeriesSequence_data = ds.ReferencedSeriesSequence
		if type(ReferencedSeriesSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSeriesSequence_data)):
				if verbose:
					log.append( " ReferencedSeriesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSeriesSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SeriesAndInstanceReferenceMacro", "SeriesInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SeriesAndInstanceReferenceMacro success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"SeriesAndInstanceReferenceMacro", 
						"ReferencedInstanceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SeriesAndInstanceReferenceMacro success after verifying ReferencedInstanceSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedInstanceSequence" in ds1:
					ReferencedInstanceSequence_data = ds1.ReferencedInstanceSequence
					if type(ReferencedInstanceSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedInstanceSequence_data)):
							if verbose:
								log.append( " ReferencedInstanceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedInstanceSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SeriesAndInstanceReferenceMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_PrimaryAnatomicStructureMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PrimaryAnatomicStructureMacro")

	partial_success = verifyType3(ds, 
			"PrimaryAnatomicStructureMacro", 
			"PrimaryAnatomicStructureSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PrimaryAnatomicStructureMacro success after verifying PrimaryAnatomicStructureSequence" + ("success" if partial_success else "failure")) 
	if "PrimaryAnatomicStructureSequence" in ds:
		PrimaryAnatomicStructureSequence_data = ds.PrimaryAnatomicStructureSequence
		if type(PrimaryAnatomicStructureSequence_data) == Sequence:
			for i1 in range(0, len(PrimaryAnatomicStructureSequence_data)):
				if verbose:
					log.append( " PrimaryAnatomicStructureSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PrimaryAnatomicStructureSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PrimaryAnatomicStructureMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"PrimaryAnatomicStructureMacro", 
						"PrimaryAnatomicStructureModifierSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "PrimaryAnatomicStructureMacro success after verifying PrimaryAnatomicStructureModifierSequence" + ("success" if partial_success else "failure")) 
				if "PrimaryAnatomicStructureModifierSequence" in ds1:
					PrimaryAnatomicStructureModifierSequence_data = ds1.PrimaryAnatomicStructureModifierSequence
					if type(PrimaryAnatomicStructureModifierSequence_data) == Sequence:
						for i2 in range(0, len(PrimaryAnatomicStructureModifierSequence_data)):
							if verbose:
								log.append( " PrimaryAnatomicStructureModifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PrimaryAnatomicStructureModifierSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " PrimaryAnatomicStructureMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_GeneralAnatomyMandatoryMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"GeneralAnatomyMandatoryMacro")

	partial_success = verifyType1(ds, 
			"GeneralAnatomyMandatoryMacro", 
			"AnatomicRegionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralAnatomyMandatoryMacro success after verifying AnatomicRegionSequence" + ("success" if partial_success else "failure")) 
	if "AnatomicRegionSequence" in ds:
		AnatomicRegionSequence_data = ds.AnatomicRegionSequence
		if type(AnatomicRegionSequence_data) == Sequence:
			for i1 in range(0, len(AnatomicRegionSequence_data)):
				if verbose:
					log.append( " AnatomicRegionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AnatomicRegionSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralAnatomyMandatoryMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"GeneralAnatomyMandatoryMacro", 
						"AnatomicRegionModifierSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "GeneralAnatomyMandatoryMacro success after verifying AnatomicRegionModifierSequence" + ("success" if partial_success else "failure")) 
				if "AnatomicRegionModifierSequence" in ds1:
					AnatomicRegionModifierSequence_data = ds1.AnatomicRegionModifierSequence
					if type(AnatomicRegionModifierSequence_data) == Sequence:
						for i2 in range(0, len(AnatomicRegionModifierSequence_data)):
							if verbose:
								log.append( " AnatomicRegionModifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AnatomicRegionModifierSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " GeneralAnatomyMandatoryMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_PrimaryAnatomicStructureMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " GeneralAnatomyMandatoryMacro success after verifying PrimaryAnatomicStructureMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"GeneralAnatomyMandatoryMacro", 
			"AnatomicRegionModifierSequence", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralAnatomyMandatoryMacro success after verifying AnatomicRegionModifierSequence" + ("success" if partial_success else "failure")) 
	if "AnatomicRegionModifierSequence" in ds:
		AnatomicRegionModifierSequence_data = ds.AnatomicRegionModifierSequence
		if type(AnatomicRegionModifierSequence_data) == Sequence:
			for i1 in range(0, len(AnatomicRegionModifierSequence_data)):
				if verbose:
					log.append( " AnatomicRegionModifierSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AnatomicRegionModifierSequence_data[i1]
	partial_success = verifyType1C(ds, 
			"GeneralAnatomyMandatoryMacro", 
			"PrimaryAnatomicStructureModifierSequence", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralAnatomyMandatoryMacro success after verifying PrimaryAnatomicStructureModifierSequence" + ("success" if partial_success else "failure")) 
	if "PrimaryAnatomicStructureModifierSequence" in ds:
		PrimaryAnatomicStructureModifierSequence_data = ds.PrimaryAnatomicStructureModifierSequence
		if type(PrimaryAnatomicStructureModifierSequence_data) == Sequence:
			for i1 in range(0, len(PrimaryAnatomicStructureModifierSequence_data)):
				if verbose:
					log.append( " PrimaryAnatomicStructureModifierSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PrimaryAnatomicStructureModifierSequence_data[i1]
	return global_success

def Macro_GeneralAnatomyRequiredMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"GeneralAnatomyRequiredMacro")

	partial_success = verifyType2(ds, 
			"GeneralAnatomyRequiredMacro", 
			"AnatomicRegionSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralAnatomyRequiredMacro success after verifying AnatomicRegionSequence" + ("success" if partial_success else "failure")) 
	if "AnatomicRegionSequence" in ds:
		AnatomicRegionSequence_data = ds.AnatomicRegionSequence
		if type(AnatomicRegionSequence_data) == Sequence:
			for i1 in range(0, len(AnatomicRegionSequence_data)):
				if verbose:
					log.append( " AnatomicRegionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AnatomicRegionSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralAnatomyRequiredMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"GeneralAnatomyRequiredMacro", 
						"AnatomicRegionModifierSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "GeneralAnatomyRequiredMacro success after verifying AnatomicRegionModifierSequence" + ("success" if partial_success else "failure")) 
				if "AnatomicRegionModifierSequence" in ds1:
					AnatomicRegionModifierSequence_data = ds1.AnatomicRegionModifierSequence
					if type(AnatomicRegionModifierSequence_data) == Sequence:
						for i2 in range(0, len(AnatomicRegionModifierSequence_data)):
							if verbose:
								log.append( " AnatomicRegionModifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AnatomicRegionModifierSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " GeneralAnatomyRequiredMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))

	if Condition_AnatomicRegionSequencePresentAndEmptyButBodyPartExaminedHasValue(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" AnatomicRegionSequence is only permitted to be empty when actually unknown, but BodyPartExamined has a value, therefore it is known - attribute <AnatomicRegionSequence>")

	partial_success =  Macro_PrimaryAnatomicStructureMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " GeneralAnatomyRequiredMacro success after verifying PrimaryAnatomicStructureMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"GeneralAnatomyRequiredMacro", 
			"AnatomicRegionModifierSequence", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralAnatomyRequiredMacro success after verifying AnatomicRegionModifierSequence" + ("success" if partial_success else "failure")) 
	if "AnatomicRegionModifierSequence" in ds:
		AnatomicRegionModifierSequence_data = ds.AnatomicRegionModifierSequence
		if type(AnatomicRegionModifierSequence_data) == Sequence:
			for i1 in range(0, len(AnatomicRegionModifierSequence_data)):
				if verbose:
					log.append( " AnatomicRegionModifierSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AnatomicRegionModifierSequence_data[i1]
	partial_success = verifyType1C(ds, 
			"GeneralAnatomyRequiredMacro", 
			"PrimaryAnatomicStructureModifierSequence", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralAnatomyRequiredMacro success after verifying PrimaryAnatomicStructureModifierSequence" + ("success" if partial_success else "failure")) 
	if "PrimaryAnatomicStructureModifierSequence" in ds:
		PrimaryAnatomicStructureModifierSequence_data = ds.PrimaryAnatomicStructureModifierSequence
		if type(PrimaryAnatomicStructureModifierSequence_data) == Sequence:
			for i1 in range(0, len(PrimaryAnatomicStructureModifierSequence_data)):
				if verbose:
					log.append( " PrimaryAnatomicStructureModifierSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PrimaryAnatomicStructureModifierSequence_data[i1]
	return global_success

def Macro_GeneralAnatomyOptionalMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"GeneralAnatomyOptionalMacro")

	partial_success = verifyType3(ds, 
			"GeneralAnatomyOptionalMacro", 
			"AnatomicRegionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralAnatomyOptionalMacro success after verifying AnatomicRegionSequence" + ("success" if partial_success else "failure")) 
	if "AnatomicRegionSequence" in ds:
		AnatomicRegionSequence_data = ds.AnatomicRegionSequence
		if type(AnatomicRegionSequence_data) == Sequence:
			for i1 in range(0, len(AnatomicRegionSequence_data)):
				if verbose:
					log.append( " AnatomicRegionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AnatomicRegionSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralAnatomyOptionalMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"GeneralAnatomyOptionalMacro", 
						"AnatomicRegionModifierSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "GeneralAnatomyOptionalMacro success after verifying AnatomicRegionModifierSequence" + ("success" if partial_success else "failure")) 
				if "AnatomicRegionModifierSequence" in ds1:
					AnatomicRegionModifierSequence_data = ds1.AnatomicRegionModifierSequence
					if type(AnatomicRegionModifierSequence_data) == Sequence:
						for i2 in range(0, len(AnatomicRegionModifierSequence_data)):
							if verbose:
								log.append( " AnatomicRegionModifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AnatomicRegionModifierSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " GeneralAnatomyOptionalMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_PrimaryAnatomicStructureMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " GeneralAnatomyOptionalMacro success after verifying PrimaryAnatomicStructureMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"GeneralAnatomyOptionalMacro", 
			"AnatomicRegionModifierSequence", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralAnatomyOptionalMacro success after verifying AnatomicRegionModifierSequence" + ("success" if partial_success else "failure")) 
	if "AnatomicRegionModifierSequence" in ds:
		AnatomicRegionModifierSequence_data = ds.AnatomicRegionModifierSequence
		if type(AnatomicRegionModifierSequence_data) == Sequence:
			for i1 in range(0, len(AnatomicRegionModifierSequence_data)):
				if verbose:
					log.append( " AnatomicRegionModifierSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AnatomicRegionModifierSequence_data[i1]
	partial_success = verifyType1C(ds, 
			"GeneralAnatomyOptionalMacro", 
			"PrimaryAnatomicStructureModifierSequence", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralAnatomyOptionalMacro success after verifying PrimaryAnatomicStructureModifierSequence" + ("success" if partial_success else "failure")) 
	if "PrimaryAnatomicStructureModifierSequence" in ds:
		PrimaryAnatomicStructureModifierSequence_data = ds.PrimaryAnatomicStructureModifierSequence
		if type(PrimaryAnatomicStructureModifierSequence_data) == Sequence:
			for i1 in range(0, len(PrimaryAnatomicStructureModifierSequence_data)):
				if verbose:
					log.append( " PrimaryAnatomicStructureModifierSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PrimaryAnatomicStructureModifierSequence_data[i1]
	return global_success

def Macro_RequestAttributesMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"RequestAttributesMacro")

	partial_success =  		verifyType1C(ds, 
			"RequestAttributesMacro", "RequestedProcedureID", 
			verbose, log, ElementDictionary, 
			0, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RequestAttributesMacro success after verifying RequestedProcedureID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RequestAttributesMacro", "AccessionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RequestAttributesMacro success after verifying AccessionNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RequestAttributesMacro", 
			"IssuerOfAccessionNumberSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RequestAttributesMacro success after verifying IssuerOfAccessionNumberSequence" + ("success" if partial_success else "failure")) 
	if "IssuerOfAccessionNumberSequence" in ds:
		IssuerOfAccessionNumberSequence_data = ds.IssuerOfAccessionNumberSequence
		if type(IssuerOfAccessionNumberSequence_data) == Sequence:
			for i1 in range(0, len(IssuerOfAccessionNumberSequence_data)):
				if verbose:
					log.append( " IssuerOfAccessionNumberSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IssuerOfAccessionNumberSequence_data[i1]
				partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RequestAttributesMacro success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"RequestAttributesMacro", "StudyInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RequestAttributesMacro success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RequestAttributesMacro", 
			"ReferencedStudySequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RequestAttributesMacro success after verifying ReferencedStudySequence" + ("success" if partial_success else "failure")) 
	if "ReferencedStudySequence" in ds:
		ReferencedStudySequence_data = ds.ReferencedStudySequence
		if type(ReferencedStudySequence_data) == Sequence:
			for i1 in range(0, len(ReferencedStudySequence_data)):
				if verbose:
					log.append( " ReferencedStudySequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedStudySequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RequestAttributesMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"RequestAttributesMacro", "RequestedProcedureDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RequestAttributesMacro success after verifying RequestedProcedureDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RequestAttributesMacro", 
			"RequestedProcedureCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RequestAttributesMacro success after verifying RequestedProcedureCodeSequence" + ("success" if partial_success else "failure")) 
	if "RequestedProcedureCodeSequence" in ds:
		RequestedProcedureCodeSequence_data = ds.RequestedProcedureCodeSequence
		if type(RequestedProcedureCodeSequence_data) == Sequence:
			for i1 in range(0, len(RequestedProcedureCodeSequence_data)):
				if verbose:
					log.append( " RequestedProcedureCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RequestedProcedureCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RequestAttributesMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"RequestAttributesMacro", "ReasonForTheRequestedProcedure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RequestAttributesMacro success after verifying ReasonForTheRequestedProcedure --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RequestAttributesMacro", 
			"ReasonForRequestedProcedureCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RequestAttributesMacro success after verifying ReasonForRequestedProcedureCodeSequence" + ("success" if partial_success else "failure")) 
	if "ReasonForRequestedProcedureCodeSequence" in ds:
		ReasonForRequestedProcedureCodeSequence_data = ds.ReasonForRequestedProcedureCodeSequence
		if type(ReasonForRequestedProcedureCodeSequence_data) == Sequence:
			for i1 in range(0, len(ReasonForRequestedProcedureCodeSequence_data)):
				if verbose:
					log.append( " ReasonForRequestedProcedureCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReasonForRequestedProcedureCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RequestAttributesMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"RequestAttributesMacro", "ScheduledProcedureStepID", 
			verbose, log, ElementDictionary, 
			0, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RequestAttributesMacro success after verifying ScheduledProcedureStepID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RequestAttributesMacro", "ScheduledProcedureStepDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RequestAttributesMacro success after verifying ScheduledProcedureStepDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RequestAttributesMacro", 
			"ScheduledProtocolCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RequestAttributesMacro success after verifying ScheduledProtocolCodeSequence" + ("success" if partial_success else "failure")) 
	if "ScheduledProtocolCodeSequence" in ds:
		ScheduledProtocolCodeSequence_data = ds.ScheduledProtocolCodeSequence
		if type(ScheduledProtocolCodeSequence_data) == Sequence:
			for i1 in range(0, len(ScheduledProtocolCodeSequence_data)):
				if verbose:
					log.append( " ScheduledProtocolCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ScheduledProtocolCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RequestAttributesMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"RequestAttributesMacro", 
						"ProtocolContextSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RequestAttributesMacro success after verifying ProtocolContextSequence" + ("success" if partial_success else "failure")) 
				if "ProtocolContextSequence" in ds1:
					ProtocolContextSequence_data = ds1.ProtocolContextSequence
					if type(ProtocolContextSequence_data) == Sequence:
						for i2 in range(0, len(ProtocolContextSequence_data)):
							if verbose:
								log.append( " ProtocolContextSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ProtocolContextSequence_data[i2]
							partial_success =  Macro_ContentItemMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RequestAttributesMacro success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType3(ds2, 
									"RequestAttributesMacro", 
									"ContentItemModifierSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RequestAttributesMacro success after verifying ContentItemModifierSequence" + ("success" if partial_success else "failure")) 
							if "ContentItemModifierSequence" in ds2:
								ContentItemModifierSequence_data = ds2.ContentItemModifierSequence
								if type(ContentItemModifierSequence_data) == Sequence:
									for i3 in range(0, len(ContentItemModifierSequence_data)):
										if verbose:
											log.append( " ContentItemModifierSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ContentItemModifierSequence_data[i3]
										partial_success =  Macro_ContentItemMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " RequestAttributesMacro success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_BasicPixelSpacingCalibrationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"BasicPixelSpacingCalibrationMacro")

	partial_success =  		verifyType1C(ds, 
			"BasicPixelSpacingCalibrationMacro", "PixelSpacing", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BasicPixelSpacingCalibrationMacro success after verifying PixelSpacing --> "+("success" if partial_success else "failure"))

	if "PixelSpacing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["PixelSpacing"], 
			verbose, log, -1, False)

	partial_success =  		verifyType3(ds, 
			"BasicPixelSpacingCalibrationMacro", "PixelSpacingCalibrationType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BasicPixelSpacingCalibrationMacro success after verifying PixelSpacingCalibrationType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"BasicPixelSpacingCalibrationMacro", "PixelSpacingCalibrationDescription", 
			verbose, log, ElementDictionary, 
			Condition_PixelSpacingCalibrationTypeIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BasicPixelSpacingCalibrationMacro success after verifying PixelSpacingCalibrationDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_SOPInstanceReferenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SOPInstanceReferenceMacro")

	partial_success =  		verifyType1(ds, 
			"SOPInstanceReferenceMacro", "ReferencedSOPClassUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPInstanceReferenceMacro success after verifying ReferencedSOPClassUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SOPInstanceReferenceMacro", "ReferencedSOPInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPInstanceReferenceMacro success after verifying ReferencedSOPInstanceUID --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_DisplayShutterMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"DisplayShutterMacro")

	partial_success =  		verifyType1(ds, 
			"DisplayShutterMacro", "ShutterShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DisplayShutterMacro success after verifying ShutterShape --> "+("success" if partial_success else "failure"))

	if "ShutterShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ShutterShape"], 
			StringValueTable_ShutterShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DisplayShutterMacro success after verifying string enumerated values ShutterShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DisplayShutterMacro", "ShutterLeftVerticalEdge", 
			verbose, log, ElementDictionary, 
			Condition_ShutterShapeIsRectangular, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DisplayShutterMacro success after verifying ShutterLeftVerticalEdge --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DisplayShutterMacro", "ShutterRightVerticalEdge", 
			verbose, log, ElementDictionary, 
			Condition_ShutterShapeIsRectangular, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DisplayShutterMacro success after verifying ShutterRightVerticalEdge --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DisplayShutterMacro", "ShutterUpperHorizontalEdge", 
			verbose, log, ElementDictionary, 
			Condition_ShutterShapeIsRectangular, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DisplayShutterMacro success after verifying ShutterUpperHorizontalEdge --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DisplayShutterMacro", "ShutterLowerHorizontalEdge", 
			verbose, log, ElementDictionary, 
			Condition_ShutterShapeIsRectangular, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DisplayShutterMacro success after verifying ShutterLowerHorizontalEdge --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DisplayShutterMacro", "CenterOfCircularShutter", 
			verbose, log, ElementDictionary, 
			Condition_ShutterShapeIsCircular, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DisplayShutterMacro success after verifying CenterOfCircularShutter --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DisplayShutterMacro", "RadiusOfCircularShutter", 
			verbose, log, ElementDictionary, 
			Condition_ShutterShapeIsCircular, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DisplayShutterMacro success after verifying RadiusOfCircularShutter --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DisplayShutterMacro", "VerticesOfThePolygonalShutter", 
			verbose, log, ElementDictionary, 
			Condition_ShutterShapeIsPolygonal, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DisplayShutterMacro success after verifying VerticesOfThePolygonalShutter --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DisplayShutterMacro", "ShutterPresentationValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DisplayShutterMacro success after verifying ShutterPresentationValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DisplayShutterMacro", "ShutterPresentationColorCIELabValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DisplayShutterMacro success after verifying ShutterPresentationColorCIELabValue --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_ContentIdentificationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ContentIdentificationMacro")

	partial_success =  		verifyType1(ds, 
			"ContentIdentificationMacro", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentIdentificationMacro success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ContentIdentificationMacro", "ContentLabel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentIdentificationMacro success after verifying ContentLabel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"ContentIdentificationMacro", "ContentDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentIdentificationMacro success after verifying ContentDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"ContentIdentificationMacro", 
			"ConceptNameCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ContentIdentificationMacro success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
	if "ConceptNameCodeSequence" in ds:
		ConceptNameCodeSequence_data = ds.ConceptNameCodeSequence
		if type(ConceptNameCodeSequence_data) == Sequence:
			for i1 in range(0, len(ConceptNameCodeSequence_data)):
				if verbose:
					log.append( " ConceptNameCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConceptNameCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ContentIdentificationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"ContentIdentificationMacro", 
			"AlternateContentDescriptionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ContentIdentificationMacro success after verifying AlternateContentDescriptionSequence" + ("success" if partial_success else "failure")) 
	if "AlternateContentDescriptionSequence" in ds:
		AlternateContentDescriptionSequence_data = ds.AlternateContentDescriptionSequence
		if type(AlternateContentDescriptionSequence_data) == Sequence:
			for i1 in range(0, len(AlternateContentDescriptionSequence_data)):
				if verbose:
					log.append( " AlternateContentDescriptionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AlternateContentDescriptionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"ContentIdentificationMacro", "ContentDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContentIdentificationMacro success after verifying ContentDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"ContentIdentificationMacro", 
						"LanguageCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "ContentIdentificationMacro success after verifying LanguageCodeSequence" + ("success" if partial_success else "failure")) 
				if "LanguageCodeSequence" in ds1:
					LanguageCodeSequence_data = ds1.LanguageCodeSequence
					if type(LanguageCodeSequence_data) == Sequence:
						for i2 in range(0, len(LanguageCodeSequence_data)):
							if verbose:
								log.append( " LanguageCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = LanguageCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " ContentIdentificationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"ContentIdentificationMacro", 
						"ConceptNameCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "ContentIdentificationMacro success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
				if "ConceptNameCodeSequence" in ds1:
					ConceptNameCodeSequence_data = ds1.ConceptNameCodeSequence
					if type(ConceptNameCodeSequence_data) == Sequence:
						for i2 in range(0, len(ConceptNameCodeSequence_data)):
							if verbose:
								log.append( " ConceptNameCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ConceptNameCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " ContentIdentificationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType2(ds, 
			"ContentIdentificationMacro", "ContentCreatorName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContentIdentificationMacro success after verifying ContentCreatorName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"ContentIdentificationMacro", 
			"ContentCreatorIdentificationCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ContentIdentificationMacro success after verifying ContentCreatorIdentificationCodeSequence" + ("success" if partial_success else "failure")) 
	if "ContentCreatorIdentificationCodeSequence" in ds:
		ContentCreatorIdentificationCodeSequence_data = ds.ContentCreatorIdentificationCodeSequence
		if type(ContentCreatorIdentificationCodeSequence_data) == Sequence:
			for i1 in range(0, len(ContentCreatorIdentificationCodeSequence_data)):
				if verbose:
					log.append( " ContentCreatorIdentificationCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContentCreatorIdentificationCodeSequence_data[i1]
				partial_success =  Macro_PersonIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ContentIdentificationMacro success after verifying PersonIdentificationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_HL7v2HierarchicDesignatorMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"HL7v2HierarchicDesignatorMacro")

	partial_success =  		verifyType1C(ds, 
			"HL7v2HierarchicDesignatorMacro", "LocalNamespaceEntityID", 
			verbose, log, ElementDictionary, 
			Condition_UniversalEntityIDNotPresent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HL7v2HierarchicDesignatorMacro success after verifying LocalNamespaceEntityID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HL7v2HierarchicDesignatorMacro", "UniversalEntityID", 
			verbose, log, ElementDictionary, 
			Condition_LocalNamespaceEntityIDNotPresent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HL7v2HierarchicDesignatorMacro success after verifying UniversalEntityID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HL7v2HierarchicDesignatorMacro", "UniversalEntityIDType", 
			verbose, log, ElementDictionary, 
			Condition_UniversalEntityIDPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HL7v2HierarchicDesignatorMacro success after verifying UniversalEntityIDType --> "+("success" if partial_success else "failure"))

	if Condition_UniversalEntityIDPresent(ds, parent_ds, root_ds):
		if "UniversalEntityIDType" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["UniversalEntityIDType"], 
				StringValueTable_UniversalEntityIDType, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " HL7v2HierarchicDesignatorMacro success after verifying string defined terms UniversalEntityIDType --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_IssuerOfPatientIDMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"IssuerOfPatientIDMacro")

	partial_success =  		verifyType3(ds, 
			"IssuerOfPatientIDMacro", "IssuerOfPatientID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IssuerOfPatientIDMacro success after verifying IssuerOfPatientID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"IssuerOfPatientIDMacro", 
			"IssuerOfPatientIDQualifiersSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IssuerOfPatientIDMacro success after verifying IssuerOfPatientIDQualifiersSequence" + ("success" if partial_success else "failure")) 
	if "IssuerOfPatientIDQualifiersSequence" in ds:
		IssuerOfPatientIDQualifiersSequence_data = ds.IssuerOfPatientIDQualifiersSequence
		if type(IssuerOfPatientIDQualifiersSequence_data) == Sequence:
			for i1 in range(0, len(IssuerOfPatientIDQualifiersSequence_data)):
				if verbose:
					log.append( " IssuerOfPatientIDQualifiersSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IssuerOfPatientIDQualifiersSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"IssuerOfPatientIDMacro", "UniversalEntityID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IssuerOfPatientIDMacro success after verifying UniversalEntityID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"IssuerOfPatientIDMacro", "UniversalEntityIDType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IssuerOfPatientIDMacro success after verifying UniversalEntityIDType --> "+("success" if partial_success else "failure"))

				if "UniversalEntityIDType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["UniversalEntityIDType"], 
						StringValueTable_UniversalEntityIDType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IssuerOfPatientIDMacro success after verifying string defined terms UniversalEntityIDType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"IssuerOfPatientIDMacro", "IdentifierTypeCode", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IssuerOfPatientIDMacro success after verifying IdentifierTypeCode --> "+("success" if partial_success else "failure"))

				if "IdentifierTypeCode" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["IdentifierTypeCode"], 
						StringValueTable_HL7Table0203IdentifierType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IssuerOfPatientIDMacro success after verifying string defined terms IdentifierTypeCode --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"IssuerOfPatientIDMacro", 
						"AssigningFacilitySequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IssuerOfPatientIDMacro success after verifying AssigningFacilitySequence" + ("success" if partial_success else "failure")) 
				if "AssigningFacilitySequence" in ds1:
					AssigningFacilitySequence_data = ds1.AssigningFacilitySequence
					if type(AssigningFacilitySequence_data) == Sequence:
						for i2 in range(0, len(AssigningFacilitySequence_data)):
							if verbose:
								log.append( " AssigningFacilitySequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AssigningFacilitySequence_data[i2]
							partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IssuerOfPatientIDMacro success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"IssuerOfPatientIDMacro", 
						"AssigningJurisdictionCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IssuerOfPatientIDMacro success after verifying AssigningJurisdictionCodeSequence" + ("success" if partial_success else "failure")) 
				if "AssigningJurisdictionCodeSequence" in ds1:
					AssigningJurisdictionCodeSequence_data = ds1.AssigningJurisdictionCodeSequence
					if type(AssigningJurisdictionCodeSequence_data) == Sequence:
						for i2 in range(0, len(AssigningJurisdictionCodeSequence_data)):
							if verbose:
								log.append( " AssigningJurisdictionCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AssigningJurisdictionCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IssuerOfPatientIDMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"IssuerOfPatientIDMacro", 
						"AssigningAgencyOrDepartmentCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IssuerOfPatientIDMacro success after verifying AssigningAgencyOrDepartmentCodeSequence" + ("success" if partial_success else "failure")) 
				if "AssigningAgencyOrDepartmentCodeSequence" in ds1:
					AssigningAgencyOrDepartmentCodeSequence_data = ds1.AssigningAgencyOrDepartmentCodeSequence
					if type(AssigningAgencyOrDepartmentCodeSequence_data) == Sequence:
						for i2 in range(0, len(AssigningAgencyOrDepartmentCodeSequence_data)):
							if verbose:
								log.append( " AssigningAgencyOrDepartmentCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AssigningAgencyOrDepartmentCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IssuerOfPatientIDMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_AlgorithmIdentificationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"AlgorithmIdentificationMacro")

	partial_success = verifyType1(ds, 
			"AlgorithmIdentificationMacro", 
			"AlgorithmFamilyCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "AlgorithmIdentificationMacro success after verifying AlgorithmFamilyCodeSequence" + ("success" if partial_success else "failure")) 
	if "AlgorithmFamilyCodeSequence" in ds:
		AlgorithmFamilyCodeSequence_data = ds.AlgorithmFamilyCodeSequence
		if type(AlgorithmFamilyCodeSequence_data) == Sequence:
			for i1 in range(0, len(AlgorithmFamilyCodeSequence_data)):
				if verbose:
					log.append( " AlgorithmFamilyCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AlgorithmFamilyCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " AlgorithmIdentificationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"AlgorithmIdentificationMacro", 
			"AlgorithmNameCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "AlgorithmIdentificationMacro success after verifying AlgorithmNameCodeSequence" + ("success" if partial_success else "failure")) 
	if "AlgorithmNameCodeSequence" in ds:
		AlgorithmNameCodeSequence_data = ds.AlgorithmNameCodeSequence
		if type(AlgorithmNameCodeSequence_data) == Sequence:
			for i1 in range(0, len(AlgorithmNameCodeSequence_data)):
				if verbose:
					log.append( " AlgorithmNameCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AlgorithmNameCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " AlgorithmIdentificationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"AlgorithmIdentificationMacro", "AlgorithmName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " AlgorithmIdentificationMacro success after verifying AlgorithmName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"AlgorithmIdentificationMacro", "AlgorithmVersion", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " AlgorithmIdentificationMacro success after verifying AlgorithmVersion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"AlgorithmIdentificationMacro", "AlgorithmParameters", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " AlgorithmIdentificationMacro success after verifying AlgorithmParameters --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"AlgorithmIdentificationMacro", "AlgorithmSource", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " AlgorithmIdentificationMacro success after verifying AlgorithmSource --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_SelectorAttributeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SelectorAttributeMacro")

	partial_success =  		verifyType1C(ds, 
			"SelectorAttributeMacro", "SelectorAttribute", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SelectorAttributeMacro success after verifying SelectorAttribute --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SelectorAttributeMacro", "SelectorValueNumber", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SelectorAttributeMacro success after verifying SelectorValueNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SelectorAttributeMacro", "SelectorSequencePointer", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SelectorAttributeMacro success after verifying SelectorSequencePointer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SelectorAttributeMacro", "SelectorSequencePointerPrivateCreator", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SelectorAttributeMacro success after verifying SelectorSequencePointerPrivateCreator --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SelectorAttributeMacro", "SelectorSequencePointerItems", 
			verbose, log, ElementDictionary, 
			Condition_SelectorSequencePointerIsPresent, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SelectorAttributeMacro success after verifying SelectorSequencePointerItems --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SelectorAttributeMacro", "SelectorAttributePrivateCreator", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SelectorAttributeMacro success after verifying SelectorAttributePrivateCreator --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_ExtendedSelectorAttributeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ExtendedSelectorAttributeMacro")

	partial_success =  		verifyType1(ds, 
			"ExtendedSelectorAttributeMacro", "SelectorAttributeName", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ExtendedSelectorAttributeMacro success after verifying SelectorAttributeName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ExtendedSelectorAttributeMacro", "SelectorAttributeKeyword", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ExtendedSelectorAttributeMacro success after verifying SelectorAttributeKeyword --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ExtendedSelectorAttributeMacro", "SelectorAttributeVR", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ExtendedSelectorAttributeMacro success after verifying SelectorAttributeVR --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_SelectorAttributeMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " ExtendedSelectorAttributeMacro success after verifying SelectorAttributeMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_DataSetIdentificationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"DataSetIdentificationMacro")

	partial_success =  		verifyType1(ds, 
			"DataSetIdentificationMacro", "DataSetName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DataSetIdentificationMacro success after verifying DataSetName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DataSetIdentificationMacro", "DataSetVersion", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DataSetIdentificationMacro success after verifying DataSetVersion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DataSetIdentificationMacro", "DataSetSource", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DataSetIdentificationMacro success after verifying DataSetSource --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DataSetIdentificationMacro", "DataSetDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DataSetIdentificationMacro success after verifying DataSetDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_GeneralContributingSourcesMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"GeneralContributingSourcesMacro")

	partial_success = verifyType1C(ds, 
			"GeneralContributingSourcesMacro", 
			"ContributingSOPInstancesReferenceSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralContributingSourcesMacro success after verifying ContributingSOPInstancesReferenceSequence" + ("success" if partial_success else "failure")) 
	if "ContributingSOPInstancesReferenceSequence" in ds:
		ContributingSOPInstancesReferenceSequence_data = ds.ContributingSOPInstancesReferenceSequence
		if type(ContributingSOPInstancesReferenceSequence_data) == Sequence:
			for i1 in range(0, len(ContributingSOPInstancesReferenceSequence_data)):
				if verbose:
					log.append( " ContributingSOPInstancesReferenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContributingSOPInstancesReferenceSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"GeneralContributingSourcesMacro", "StudyInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " GeneralContributingSourcesMacro success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"GeneralContributingSourcesMacro", 
						"ReferencedSeriesSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "GeneralContributingSourcesMacro success after verifying ReferencedSeriesSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedSeriesSequence" in ds1:
					ReferencedSeriesSequence_data = ds1.ReferencedSeriesSequence
					if type(ReferencedSeriesSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedSeriesSequence_data)):
							if verbose:
								log.append( " ReferencedSeriesSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedSeriesSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"GeneralContributingSourcesMacro", "SeriesInstanceUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GeneralContributingSourcesMacro success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"GeneralContributingSourcesMacro", "SeriesNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GeneralContributingSourcesMacro success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1(ds2, 
									"GeneralContributingSourcesMacro", 
									"ReferencedInstanceSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "GeneralContributingSourcesMacro success after verifying ReferencedInstanceSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedInstanceSequence" in ds2:
								ReferencedInstanceSequence_data = ds2.ReferencedInstanceSequence
								if type(ReferencedInstanceSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedInstanceSequence_data)):
										if verbose:
											log.append( " ReferencedInstanceSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedInstanceSequence_data[i3]
										partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " GeneralContributingSourcesMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
										partial_success =  		verifyType2(ds3, 
												"GeneralContributingSourcesMacro", "InstanceNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " GeneralContributingSourcesMacro success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"GeneralContributingSourcesMacro", "Manufacturer", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralContributingSourcesMacro success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"GeneralContributingSourcesMacro", "ManufacturerModelName", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralContributingSourcesMacro success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"GeneralContributingSourcesMacro", "DeviceSerialNumber", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralContributingSourcesMacro success after verifying DeviceSerialNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"GeneralContributingSourcesMacro", "SoftwareVersions", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralContributingSourcesMacro success after verifying SoftwareVersions --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"GeneralContributingSourcesMacro", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralContributingSourcesMacro success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"GeneralContributingSourcesMacro", "StationName", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralContributingSourcesMacro success after verifying StationName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"GeneralContributingSourcesMacro", "OperatorsName", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralContributingSourcesMacro success after verifying OperatorsName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"GeneralContributingSourcesMacro", 
			"OperatorIdentificationSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralContributingSourcesMacro success after verifying OperatorIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "OperatorIdentificationSequence" in ds:
		OperatorIdentificationSequence_data = ds.OperatorIdentificationSequence
		if type(OperatorIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(OperatorIdentificationSequence_data)):
				if verbose:
					log.append( " OperatorIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OperatorIdentificationSequence_data[i1]
				partial_success =  Macro_PersonIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralContributingSourcesMacro success after verifying PersonIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"GeneralContributingSourcesMacro", "ProtocolName", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralContributingSourcesMacro success after verifying ProtocolName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"GeneralContributingSourcesMacro", 
			"PerformedProtocolCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralContributingSourcesMacro success after verifying PerformedProtocolCodeSequence" + ("success" if partial_success else "failure")) 
	if "PerformedProtocolCodeSequence" in ds:
		PerformedProtocolCodeSequence_data = ds.PerformedProtocolCodeSequence
		if type(PerformedProtocolCodeSequence_data) == Sequence:
			for i1 in range(0, len(PerformedProtocolCodeSequence_data)):
				if verbose:
					log.append( " PerformedProtocolCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerformedProtocolCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralContributingSourcesMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"GeneralContributingSourcesMacro", "AcquisitionProtocolName", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralContributingSourcesMacro success after verifying AcquisitionProtocolName --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_ContributingImageSourcesMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ContributingImageSourcesMacro")

	partial_success =  		verifyType1(ds, 
			"ContributingImageSourcesMacro", "Rows", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContributingImageSourcesMacro success after verifying Rows --> "+("success" if partial_success else "failure"))

	if "Rows" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Rows"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"ContributingImageSourcesMacro", "Columns", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContributingImageSourcesMacro success after verifying Columns --> "+("success" if partial_success else "failure"))

	if "Columns" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Columns"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"ContributingImageSourcesMacro", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContributingImageSourcesMacro success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["BitsStored"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"ContributingImageSourcesMacro", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContributingImageSourcesMacro success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContributingImageSourcesMacro success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ContributingImageSourcesMacro", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContributingImageSourcesMacro success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionRatio" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["LossyImageCompressionRatio"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"ContributingImageSourcesMacro", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContributingImageSourcesMacro success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["LossyImageCompressionMethod"], 
				StringValueTable_LossyImageCompressionMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ContributingImageSourcesMacro success after verifying string defined terms LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PatientOrientationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PatientOrientationMacro")

	partial_success = verifyType1(ds, 
			"PatientOrientationMacro", 
			"PatientOrientationCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PatientOrientationMacro success after verifying PatientOrientationCodeSequence" + ("success" if partial_success else "failure")) 
	if "PatientOrientationCodeSequence" in ds:
		PatientOrientationCodeSequence_data = ds.PatientOrientationCodeSequence
		if type(PatientOrientationCodeSequence_data) == Sequence:
			for i1 in range(0, len(PatientOrientationCodeSequence_data)):
				if verbose:
					log.append( " PatientOrientationCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientOrientationCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PatientOrientationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"PatientOrientationMacro", 
						"PatientOrientationModifierCodeSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "PatientOrientationMacro success after verifying PatientOrientationModifierCodeSequence" + ("success" if partial_success else "failure")) 
				if "PatientOrientationModifierCodeSequence" in ds1:
					PatientOrientationModifierCodeSequence_data = ds1.PatientOrientationModifierCodeSequence
					if type(PatientOrientationModifierCodeSequence_data) == Sequence:
						for i2 in range(0, len(PatientOrientationModifierCodeSequence_data)):
							if verbose:
								log.append( " PatientOrientationModifierCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PatientOrientationModifierCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " PatientOrientationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"PatientOrientationMacro", 
			"PatientGantryRelationshipCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PatientOrientationMacro success after verifying PatientGantryRelationshipCodeSequence" + ("success" if partial_success else "failure")) 
	if "PatientGantryRelationshipCodeSequence" in ds:
		PatientGantryRelationshipCodeSequence_data = ds.PatientGantryRelationshipCodeSequence
		if type(PatientGantryRelationshipCodeSequence_data) == Sequence:
			for i1 in range(0, len(PatientGantryRelationshipCodeSequence_data)):
				if verbose:
					log.append( " PatientGantryRelationshipCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientGantryRelationshipCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PatientOrientationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_PerformedProcedureStepSummaryMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PerformedProcedureStepSummaryMacro")

	partial_success =  		verifyType3(ds, 
			"PerformedProcedureStepSummaryMacro", "PerformedProcedureStepID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PerformedProcedureStepSummaryMacro success after verifying PerformedProcedureStepID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PerformedProcedureStepSummaryMacro", "PerformedProcedureStepStartDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PerformedProcedureStepSummaryMacro success after verifying PerformedProcedureStepStartDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PerformedProcedureStepSummaryMacro", "PerformedProcedureStepStartTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PerformedProcedureStepSummaryMacro success after verifying PerformedProcedureStepStartTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PerformedProcedureStepSummaryMacro", "PerformedProcedureStepDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PerformedProcedureStepSummaryMacro success after verifying PerformedProcedureStepDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"PerformedProcedureStepSummaryMacro", 
			"PerformedProtocolCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PerformedProcedureStepSummaryMacro success after verifying PerformedProtocolCodeSequence" + ("success" if partial_success else "failure")) 
	if "PerformedProtocolCodeSequence" in ds:
		PerformedProtocolCodeSequence_data = ds.PerformedProtocolCodeSequence
		if type(PerformedProtocolCodeSequence_data) == Sequence:
			for i1 in range(0, len(PerformedProtocolCodeSequence_data)):
				if verbose:
					log.append( " PerformedProtocolCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerformedProtocolCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PerformedProcedureStepSummaryMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"PerformedProcedureStepSummaryMacro", 
						"ProtocolContextSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "PerformedProcedureStepSummaryMacro success after verifying ProtocolContextSequence" + ("success" if partial_success else "failure")) 
				if "ProtocolContextSequence" in ds1:
					ProtocolContextSequence_data = ds1.ProtocolContextSequence
					if type(ProtocolContextSequence_data) == Sequence:
						for i2 in range(0, len(ProtocolContextSequence_data)):
							if verbose:
								log.append( " ProtocolContextSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ProtocolContextSequence_data[i2]
							partial_success =  Macro_ContentItemMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " PerformedProcedureStepSummaryMacro success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType3(ds2, 
									"PerformedProcedureStepSummaryMacro", 
									"ContentItemModifierSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "PerformedProcedureStepSummaryMacro success after verifying ContentItemModifierSequence" + ("success" if partial_success else "failure")) 
							if "ContentItemModifierSequence" in ds2:
								ContentItemModifierSequence_data = ds2.ContentItemModifierSequence
								if type(ContentItemModifierSequence_data) == Sequence:
									for i3 in range(0, len(ContentItemModifierSequence_data)):
										if verbose:
											log.append( " ContentItemModifierSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ContentItemModifierSequence_data[i3]
										partial_success =  Macro_ContentItemMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " PerformedProcedureStepSummaryMacro success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"PerformedProcedureStepSummaryMacro", "CommentsOnThePerformedProcedureStep", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PerformedProcedureStepSummaryMacro success after verifying CommentsOnThePerformedProcedureStep --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_ExposureIndexMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ExposureIndexMacro")

	partial_success =  		verifyType3(ds, 
			"ExposureIndexMacro", "ExposureIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ExposureIndexMacro success after verifying ExposureIndex --> "+("success" if partial_success else "failure"))

	if "ExposureIndex" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureIndex"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"ExposureIndexMacro", "TargetExposureIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ExposureIndexMacro success after verifying TargetExposureIndex --> "+("success" if partial_success else "failure"))

	if "TargetExposureIndex" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["TargetExposureIndex"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"ExposureIndexMacro", "DeviationIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ExposureIndexMacro success after verifying DeviationIndex --> "+("success" if partial_success else "failure"))

	if "DeviationIndex" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DeviationIndex"], 
			verbose, log, -1, True)

	return global_success

def Macro_MandatoryViewAndSliceProgressionDirectionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MandatoryViewAndSliceProgressionDirectionMacro")

	partial_success = verifyType1(ds, 
			"MandatoryViewAndSliceProgressionDirectionMacro", 
			"ViewCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MandatoryViewAndSliceProgressionDirectionMacro success after verifying ViewCodeSequence" + ("success" if partial_success else "failure")) 
	if "ViewCodeSequence" in ds:
		ViewCodeSequence_data = ds.ViewCodeSequence
		if type(ViewCodeSequence_data) == Sequence:
			for i1 in range(0, len(ViewCodeSequence_data)):
				if verbose:
					log.append( " ViewCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ViewCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MandatoryViewAndSliceProgressionDirectionMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType2C(ds1, 
						"MandatoryViewAndSliceProgressionDirectionMacro", 
						"ViewModifierCodeSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "MandatoryViewAndSliceProgressionDirectionMacro success after verifying ViewModifierCodeSequence" + ("success" if partial_success else "failure")) 
				if "ViewModifierCodeSequence" in ds1:
					ViewModifierCodeSequence_data = ds1.ViewModifierCodeSequence
					if type(ViewModifierCodeSequence_data) == Sequence:
						for i2 in range(0, len(ViewModifierCodeSequence_data)):
							if verbose:
								log.append( " ViewModifierCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ViewModifierCodeSequence_data[i2]
							partial_success =  Macro_ContentItemMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " MandatoryViewAndSliceProgressionDirectionMacro success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"MandatoryViewAndSliceProgressionDirectionMacro", "SliceProgressionDirection", 
			verbose, log, ElementDictionary, 
			Condition_ViewIsCardiacShortOrLongAxis, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MandatoryViewAndSliceProgressionDirectionMacro success after verifying SliceProgressionDirection --> "+("success" if partial_success else "failure"))

	if Condition_ViewIsCardiacShortOrLongAxis(ds, parent_ds, root_ds):
		if "SliceProgressionDirection" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["SliceProgressionDirection"], 
				StringValueTable_CardiacSliceProgressionDirection, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MandatoryViewAndSliceProgressionDirectionMacro success after verifying string enumerated values SliceProgressionDirection --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_OptionalViewAndSliceProgressionDirectionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"OptionalViewAndSliceProgressionDirectionMacro")

	partial_success = verifyType3(ds, 
			"OptionalViewAndSliceProgressionDirectionMacro", 
			"ViewCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OptionalViewAndSliceProgressionDirectionMacro success after verifying ViewCodeSequence" + ("success" if partial_success else "failure")) 
	if "ViewCodeSequence" in ds:
		ViewCodeSequence_data = ds.ViewCodeSequence
		if type(ViewCodeSequence_data) == Sequence:
			for i1 in range(0, len(ViewCodeSequence_data)):
				if verbose:
					log.append( " ViewCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ViewCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OptionalViewAndSliceProgressionDirectionMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"OptionalViewAndSliceProgressionDirectionMacro", 
						"ViewModifierCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OptionalViewAndSliceProgressionDirectionMacro success after verifying ViewModifierCodeSequence" + ("success" if partial_success else "failure")) 
				if "ViewModifierCodeSequence" in ds1:
					ViewModifierCodeSequence_data = ds1.ViewModifierCodeSequence
					if type(ViewModifierCodeSequence_data) == Sequence:
						for i2 in range(0, len(ViewModifierCodeSequence_data)):
							if verbose:
								log.append( " ViewModifierCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ViewModifierCodeSequence_data[i2]
							partial_success =  Macro_ContentItemMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OptionalViewAndSliceProgressionDirectionMacro success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"OptionalViewAndSliceProgressionDirectionMacro", "SliceProgressionDirection", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OptionalViewAndSliceProgressionDirectionMacro success after verifying SliceProgressionDirection --> "+("success" if partial_success else "failure"))

	if "SliceProgressionDirection" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SliceProgressionDirection"], 
			StringValueTable_CardiacSliceProgressionDirection, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OptionalViewAndSliceProgressionDirectionMacro success after verifying string enumerated values SliceProgressionDirection --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_RTEquipmentCorrelationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"RTEquipmentCorrelationMacro")

	partial_success =  		verifyType3(ds, 
			"RTEquipmentCorrelationMacro", "PatientSupportAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTEquipmentCorrelationMacro success after verifying PatientSupportAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTEquipmentCorrelationMacro", "TableTopPitchAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTEquipmentCorrelationMacro success after verifying TableTopPitchAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTEquipmentCorrelationMacro", "TableTopRollAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTEquipmentCorrelationMacro success after verifying TableTopRollAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTEquipmentCorrelationMacro", "TableTopLongitudinalPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTEquipmentCorrelationMacro success after verifying TableTopLongitudinalPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTEquipmentCorrelationMacro", "TableTopLateralPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTEquipmentCorrelationMacro success after verifying TableTopLateralPosition --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PatientGroupMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PatientGroupMacro")

	partial_success = verifyType3(ds, 
			"PatientGroupMacro", 
			"SourcePatientGroupIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PatientGroupMacro success after verifying SourcePatientGroupIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "SourcePatientGroupIdentificationSequence" in ds:
		SourcePatientGroupIdentificationSequence_data = ds.SourcePatientGroupIdentificationSequence
		if type(SourcePatientGroupIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(SourcePatientGroupIdentificationSequence_data)):
				if verbose:
					log.append( " SourcePatientGroupIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourcePatientGroupIdentificationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PatientGroupMacro", "PatientID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PatientGroupMacro success after verifying PatientID --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_IssuerOfPatientIDMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PatientGroupMacro success after verifying IssuerOfPatientIDMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"PatientGroupMacro", 
			"GroupOfPatientsIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PatientGroupMacro success after verifying GroupOfPatientsIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "GroupOfPatientsIdentificationSequence" in ds:
		GroupOfPatientsIdentificationSequence_data = ds.GroupOfPatientsIdentificationSequence
		if type(GroupOfPatientsIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(GroupOfPatientsIdentificationSequence_data)):
				if verbose:
					log.append( " GroupOfPatientsIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = GroupOfPatientsIdentificationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PatientGroupMacro", "PatientID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PatientGroupMacro success after verifying PatientID --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_IssuerOfPatientIDMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PatientGroupMacro success after verifying IssuerOfPatientIDMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"PatientGroupMacro", "SubjectRelativePositionInImage", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PatientGroupMacro success after verifying SubjectRelativePositionInImage --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"PatientGroupMacro", "PatientPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PatientGroupMacro success after verifying PatientPosition --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_UDIMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"UDIMacro")

	partial_success =  		verifyType1(ds, 
			"UDIMacro", "UniqueDeviceIdentifier", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " UDIMacro success after verifying UniqueDeviceIdentifier --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"UDIMacro", "DeviceDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " UDIMacro success after verifying DeviceDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Module_Patient_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"Patient")

	partial_success =  		verifyType2(ds, 
			"Patient", "PatientName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying PatientName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"Patient", "PatientID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying PatientID --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_IssuerOfPatientIDMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " Patient success after verifying IssuerOfPatientIDMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"Patient", "TypeOfPatientID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying TypeOfPatientID --> "+("success" if partial_success else "failure"))

	if "TypeOfPatientID" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["TypeOfPatientID"], 
			StringValueTable_TypeOfPatientID, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying string defined terms TypeOfPatientID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"Patient", "PatientBirthDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying PatientBirthDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"Patient", "PatientSex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying PatientSex --> "+("success" if partial_success else "failure"))

	if "PatientSex" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PatientSex"], 
			StringValueTable_Sex, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying string enumerated values PatientSex --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Patient", "QualityControlSubject", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying QualityControlSubject --> "+("success" if partial_success else "failure"))

	if "QualityControlSubject" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["QualityControlSubject"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying string enumerated values QualityControlSubject --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"Patient", 
			"ReferencedPatientSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Patient success after verifying ReferencedPatientSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPatientSequence" in ds:
		ReferencedPatientSequence_data = ds.ReferencedPatientSequence
		if type(ReferencedPatientSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPatientSequence_data)):
				if verbose:
					log.append( " ReferencedPatientSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPatientSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " Patient success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"Patient", "PatientBirthTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying PatientBirthTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"Patient", 
			"OtherPatientIDsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Patient success after verifying OtherPatientIDsSequence" + ("success" if partial_success else "failure")) 
	if "OtherPatientIDsSequence" in ds:
		OtherPatientIDsSequence_data = ds.OtherPatientIDsSequence
		if type(OtherPatientIDsSequence_data) == Sequence:
			for i1 in range(0, len(OtherPatientIDsSequence_data)):
				if verbose:
					log.append( " OtherPatientIDsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OtherPatientIDsSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"Patient", "PatientID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Patient success after verifying PatientID --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_IssuerOfPatientIDMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " Patient success after verifying IssuerOfPatientIDMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"Patient", "TypeOfPatientID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Patient success after verifying TypeOfPatientID --> "+("success" if partial_success else "failure"))

				if "TypeOfPatientID" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["TypeOfPatientID"], 
						StringValueTable_TypeOfPatientID, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Patient success after verifying string defined terms TypeOfPatientID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Patient", "OtherPatientNames", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying OtherPatientNames --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Patient", "EthnicGroup", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying EthnicGroup --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Patient", "PatientComments", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying PatientComments --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"Patient", "PatientSpeciesDescription", 
			verbose, log, ElementDictionary, 
			Condition_IsAnimalAndPatientSpeciesCodeSequenceAbsent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying PatientSpeciesDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"Patient", 
			"PatientSpeciesCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_IsAnimalAndPatientSpeciesDescriptionAbsent, 
			True, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Patient success after verifying PatientSpeciesCodeSequence" + ("success" if partial_success else "failure")) 
	if "PatientSpeciesCodeSequence" in ds:
		PatientSpeciesCodeSequence_data = ds.PatientSpeciesCodeSequence
		if type(PatientSpeciesCodeSequence_data) == Sequence:
			for i1 in range(0, len(PatientSpeciesCodeSequence_data)):
				if verbose:
					log.append( " PatientSpeciesCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientSpeciesCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " Patient success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType2C(ds, 
			"Patient", "PatientBreedDescription", 
			verbose, log, ElementDictionary, 
			Condition_IsAnimalAndPatientBreedCodeSequenceEmpty, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying PatientBreedDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2C(ds, 
			"Patient", 
			"PatientBreedCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_IsAnimal, 
			False, 
			parent_ds, root_ds, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Patient success after verifying PatientBreedCodeSequence" + ("success" if partial_success else "failure")) 
	if "PatientBreedCodeSequence" in ds:
		PatientBreedCodeSequence_data = ds.PatientBreedCodeSequence
		if type(PatientBreedCodeSequence_data) == Sequence:
			for i1 in range(0, len(PatientBreedCodeSequence_data)):
				if verbose:
					log.append( " PatientBreedCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientBreedCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " Patient success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType2C(ds, 
			"Patient", 
			"BreedRegistrationSequence", 
			verbose, log, ElementDictionary, 
			Condition_IsAnimal, 
			False, 
			parent_ds, root_ds, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Patient success after verifying BreedRegistrationSequence" + ("success" if partial_success else "failure")) 
	if "BreedRegistrationSequence" in ds:
		BreedRegistrationSequence_data = ds.BreedRegistrationSequence
		if type(BreedRegistrationSequence_data) == Sequence:
			for i1 in range(0, len(BreedRegistrationSequence_data)):
				if verbose:
					log.append( " BreedRegistrationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = BreedRegistrationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"Patient", "BreedRegistrationNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Patient success after verifying BreedRegistrationNumber --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"Patient", 
						"BreedRegistryCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "Patient success after verifying BreedRegistryCodeSequence" + ("success" if partial_success else "failure")) 
				if "BreedRegistryCodeSequence" in ds1:
					BreedRegistryCodeSequence_data = ds1.BreedRegistryCodeSequence
					if type(BreedRegistryCodeSequence_data) == Sequence:
						for i2 in range(0, len(BreedRegistryCodeSequence_data)):
							if verbose:
								log.append( " BreedRegistryCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = BreedRegistryCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " Patient success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"Patient", "StrainDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying StrainDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Patient", "StrainNomenclature", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying StrainNomenclature --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"Patient", 
			"StrainCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Patient success after verifying StrainCodeSequence" + ("success" if partial_success else "failure")) 
	if "StrainCodeSequence" in ds:
		StrainCodeSequence_data = ds.StrainCodeSequence
		if type(StrainCodeSequence_data) == Sequence:
			for i1 in range(0, len(StrainCodeSequence_data)):
				if verbose:
					log.append( " StrainCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = StrainCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " Patient success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"Patient", "StrainAdditionalInformation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying StrainAdditionalInformation --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"Patient", 
			"StrainStockSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Patient success after verifying StrainStockSequence" + ("success" if partial_success else "failure")) 
	if "StrainStockSequence" in ds:
		StrainStockSequence_data = ds.StrainStockSequence
		if type(StrainStockSequence_data) == Sequence:
			for i1 in range(0, len(StrainStockSequence_data)):
				if verbose:
					log.append( " StrainStockSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = StrainStockSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"Patient", "StrainStockNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Patient success after verifying StrainStockNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"Patient", "StrainSource", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Patient success after verifying StrainSource --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"Patient", 
						"StrainSourceRegistryCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "Patient success after verifying StrainSourceRegistryCodeSequence" + ("success" if partial_success else "failure")) 
				if "StrainSourceRegistryCodeSequence" in ds1:
					StrainSourceRegistryCodeSequence_data = ds1.StrainSourceRegistryCodeSequence
					if type(StrainSourceRegistryCodeSequence_data) == Sequence:
						for i2 in range(0, len(StrainSourceRegistryCodeSequence_data)):
							if verbose:
								log.append( " StrainSourceRegistryCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = StrainSourceRegistryCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " Patient success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"Patient", 
			"GeneticModificationsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Patient success after verifying GeneticModificationsSequence" + ("success" if partial_success else "failure")) 
	if "GeneticModificationsSequence" in ds:
		GeneticModificationsSequence_data = ds.GeneticModificationsSequence
		if type(GeneticModificationsSequence_data) == Sequence:
			for i1 in range(0, len(GeneticModificationsSequence_data)):
				if verbose:
					log.append( " GeneticModificationsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = GeneticModificationsSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"Patient", "GeneticModificationsDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Patient success after verifying GeneticModificationsDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"Patient", "GeneticModificationsNomenclature", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Patient success after verifying GeneticModificationsNomenclature --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"Patient", 
						"GeneticModificationsCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "Patient success after verifying GeneticModificationsCodeSequence" + ("success" if partial_success else "failure")) 
				if "GeneticModificationsCodeSequence" in ds1:
					GeneticModificationsCodeSequence_data = ds1.GeneticModificationsCodeSequence
					if type(GeneticModificationsCodeSequence_data) == Sequence:
						for i2 in range(0, len(GeneticModificationsCodeSequence_data)):
							if verbose:
								log.append( " GeneticModificationsCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = GeneticModificationsCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " Patient success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType2C(ds, 
			"Patient", "ResponsiblePerson", 
			verbose, log, ElementDictionary, 
			Condition_IsAnimal, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying ResponsiblePerson --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"Patient", "ResponsiblePersonRole", 
			verbose, log, ElementDictionary, 
			Condition_ResponsiblePersonIsPresentWithValue, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying ResponsiblePersonRole --> "+("success" if partial_success else "failure"))

	if Condition_ResponsiblePersonIsPresentWithValue(ds, parent_ds, root_ds):
		if "ResponsiblePersonRole" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["ResponsiblePersonRole"], 
				StringValueTable_ResponsiblePersonRole, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying string defined terms ResponsiblePersonRole --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"Patient", "ResponsibleOrganization", 
			verbose, log, ElementDictionary, 
			Condition_IsAnimal, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying ResponsibleOrganization --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Patient", "PatientIdentityRemoved", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying PatientIdentityRemoved --> "+("success" if partial_success else "failure"))

	if "PatientIdentityRemoved" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PatientIdentityRemoved"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying string enumerated values PatientIdentityRemoved --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"Patient", "DeidentificationMethod", 
			verbose, log, ElementDictionary, 
			Condition_PatientIdentityRemovedAndNotDeidentificationMethodCodeSequence, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Patient success after verifying DeidentificationMethod --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"Patient", 
			"DeidentificationMethodCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_PatientIdentityRemovedAndNotDeidentificationMethod, 
			True, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Patient success after verifying DeidentificationMethodCodeSequence" + ("success" if partial_success else "failure")) 
	if "DeidentificationMethodCodeSequence" in ds:
		DeidentificationMethodCodeSequence_data = ds.DeidentificationMethodCodeSequence
		if type(DeidentificationMethodCodeSequence_data) == Sequence:
			for i1 in range(0, len(DeidentificationMethodCodeSequence_data)):
				if verbose:
					log.append( " DeidentificationMethodCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DeidentificationMethodCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " Patient success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_PatientGroupMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " Patient success after verifying PatientGroupMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_ClinicalTrialSubject_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ClinicalTrialSubject")

	partial_success =  		verifyType1(ds, 
			"ClinicalTrialSubject", "ClinicalTrialSponsorName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialSubject success after verifying ClinicalTrialSponsorName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ClinicalTrialSubject", "ClinicalTrialProtocolID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialSubject success after verifying ClinicalTrialProtocolID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"ClinicalTrialSubject", "ClinicalTrialProtocolName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialSubject success after verifying ClinicalTrialProtocolName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"ClinicalTrialSubject", "ClinicalTrialSiteID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialSubject success after verifying ClinicalTrialSiteID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"ClinicalTrialSubject", "ClinicalTrialSiteName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialSubject success after verifying ClinicalTrialSiteName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ClinicalTrialSubject", "ClinicalTrialSubjectID", 
			verbose, log, ElementDictionary, 
			Condition_ClinicalTrialSubjectReadingIDAbsent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialSubject success after verifying ClinicalTrialSubjectID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ClinicalTrialSubject", "ClinicalTrialSubjectReadingID", 
			verbose, log, ElementDictionary, 
			Condition_ClinicalTrialSubjectIDAbsent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialSubject success after verifying ClinicalTrialSubjectReadingID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ClinicalTrialSubject", "ClinicalTrialProtocolEthicsCommitteeName", 
			verbose, log, ElementDictionary, 
			Condition_ClinicalTrialProtocolEthicsCommitteeApprovalNumberIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialSubject success after verifying ClinicalTrialProtocolEthicsCommitteeName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ClinicalTrialSubject", "ClinicalTrialProtocolEthicsCommitteeApprovalNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialSubject success after verifying ClinicalTrialProtocolEthicsCommitteeApprovalNumber --> "+("success" if partial_success else "failure"))

	return global_success

def Module_GeneralStudy_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"GeneralStudy")

	partial_success =  		verifyType1(ds, 
			"GeneralStudy", "StudyInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralStudy success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"GeneralStudy", "StudyDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralStudy success after verifying StudyDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"GeneralStudy", "StudyTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralStudy success after verifying StudyTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"GeneralStudy", "ReferringPhysicianName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralStudy success after verifying ReferringPhysicianName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"GeneralStudy", 
			"ReferringPhysicianIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralStudy success after verifying ReferringPhysicianIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "ReferringPhysicianIdentificationSequence" in ds:
		ReferringPhysicianIdentificationSequence_data = ds.ReferringPhysicianIdentificationSequence
		if type(ReferringPhysicianIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(ReferringPhysicianIdentificationSequence_data)):
				if verbose:
					log.append( " ReferringPhysicianIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferringPhysicianIdentificationSequence_data[i1]
				partial_success =  Macro_PersonIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralStudy success after verifying PersonIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType2(ds, 
			"GeneralStudy", "StudyID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralStudy success after verifying StudyID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"GeneralStudy", "AccessionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralStudy success after verifying AccessionNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"GeneralStudy", 
			"IssuerOfAccessionNumberSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralStudy success after verifying IssuerOfAccessionNumberSequence" + ("success" if partial_success else "failure")) 
	if "IssuerOfAccessionNumberSequence" in ds:
		IssuerOfAccessionNumberSequence_data = ds.IssuerOfAccessionNumberSequence
		if type(IssuerOfAccessionNumberSequence_data) == Sequence:
			for i1 in range(0, len(IssuerOfAccessionNumberSequence_data)):
				if verbose:
					log.append( " IssuerOfAccessionNumberSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IssuerOfAccessionNumberSequence_data[i1]
				partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralStudy success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"GeneralStudy", "StudyDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralStudy success after verifying StudyDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralStudy", "PhysiciansOfRecord", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralStudy success after verifying PhysiciansOfRecord --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"GeneralStudy", 
			"PhysiciansOfRecordIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralStudy success after verifying PhysiciansOfRecordIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "PhysiciansOfRecordIdentificationSequence" in ds:
		PhysiciansOfRecordIdentificationSequence_data = ds.PhysiciansOfRecordIdentificationSequence
		if type(PhysiciansOfRecordIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(PhysiciansOfRecordIdentificationSequence_data)):
				if verbose:
					log.append( " PhysiciansOfRecordIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PhysiciansOfRecordIdentificationSequence_data[i1]
				partial_success =  Macro_PersonIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralStudy success after verifying PersonIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"GeneralStudy", "NameOfPhysiciansReadingStudy", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralStudy success after verifying NameOfPhysiciansReadingStudy --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"GeneralStudy", 
			"PhysiciansReadingStudyIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralStudy success after verifying PhysiciansReadingStudyIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "PhysiciansReadingStudyIdentificationSequence" in ds:
		PhysiciansReadingStudyIdentificationSequence_data = ds.PhysiciansReadingStudyIdentificationSequence
		if type(PhysiciansReadingStudyIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(PhysiciansReadingStudyIdentificationSequence_data)):
				if verbose:
					log.append( " PhysiciansReadingStudyIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PhysiciansReadingStudyIdentificationSequence_data[i1]
				partial_success =  Macro_PersonIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralStudy success after verifying PersonIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"GeneralStudy", "ConsultingPhysicianName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralStudy success after verifying ConsultingPhysicianName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"GeneralStudy", 
			"ConsultingPhysicianIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralStudy success after verifying ConsultingPhysicianIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "ConsultingPhysicianIdentificationSequence" in ds:
		ConsultingPhysicianIdentificationSequence_data = ds.ConsultingPhysicianIdentificationSequence
		if type(ConsultingPhysicianIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(ConsultingPhysicianIdentificationSequence_data)):
				if verbose:
					log.append( " ConsultingPhysicianIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConsultingPhysicianIdentificationSequence_data[i1]
				partial_success =  Macro_PersonIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralStudy success after verifying PersonIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"GeneralStudy", 
			"RequestingServiceCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralStudy success after verifying RequestingServiceCodeSequence" + ("success" if partial_success else "failure")) 
	if "RequestingServiceCodeSequence" in ds:
		RequestingServiceCodeSequence_data = ds.RequestingServiceCodeSequence
		if type(RequestingServiceCodeSequence_data) == Sequence:
			for i1 in range(0, len(RequestingServiceCodeSequence_data)):
				if verbose:
					log.append( " RequestingServiceCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RequestingServiceCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralStudy success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"GeneralStudy", 
			"ReferencedStudySequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralStudy success after verifying ReferencedStudySequence" + ("success" if partial_success else "failure")) 
	if "ReferencedStudySequence" in ds:
		ReferencedStudySequence_data = ds.ReferencedStudySequence
		if type(ReferencedStudySequence_data) == Sequence:
			for i1 in range(0, len(ReferencedStudySequence_data)):
				if verbose:
					log.append( " ReferencedStudySequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedStudySequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralStudy success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"GeneralStudy", 
			"ProcedureCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralStudy success after verifying ProcedureCodeSequence" + ("success" if partial_success else "failure")) 
	if "ProcedureCodeSequence" in ds:
		ProcedureCodeSequence_data = ds.ProcedureCodeSequence
		if type(ProcedureCodeSequence_data) == Sequence:
			for i1 in range(0, len(ProcedureCodeSequence_data)):
				if verbose:
					log.append( " ProcedureCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ProcedureCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralStudy success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"GeneralStudy", 
			"ReasonForPerformedProcedureCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralStudy success after verifying ReasonForPerformedProcedureCodeSequence" + ("success" if partial_success else "failure")) 
	if "ReasonForPerformedProcedureCodeSequence" in ds:
		ReasonForPerformedProcedureCodeSequence_data = ds.ReasonForPerformedProcedureCodeSequence
		if type(ReasonForPerformedProcedureCodeSequence_data) == Sequence:
			for i1 in range(0, len(ReasonForPerformedProcedureCodeSequence_data)):
				if verbose:
					log.append( " ReasonForPerformedProcedureCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReasonForPerformedProcedureCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralStudy success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_PatientStudy_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"PatientStudy")

	partial_success =  		verifyType3(ds, 
			"PatientStudy", "AdmittingDiagnosesDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientStudy success after verifying AdmittingDiagnosesDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"PatientStudy", 
			"AdmittingDiagnosesCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PatientStudy success after verifying AdmittingDiagnosesCodeSequence" + ("success" if partial_success else "failure")) 
	if "AdmittingDiagnosesCodeSequence" in ds:
		AdmittingDiagnosesCodeSequence_data = ds.AdmittingDiagnosesCodeSequence
		if type(AdmittingDiagnosesCodeSequence_data) == Sequence:
			for i1 in range(0, len(AdmittingDiagnosesCodeSequence_data)):
				if verbose:
					log.append( " AdmittingDiagnosesCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AdmittingDiagnosesCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PatientStudy success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"PatientStudy", "PatientAge", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientStudy success after verifying PatientAge --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PatientStudy", "PatientSize", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientStudy success after verifying PatientSize --> "+("success" if partial_success else "failure"))

	if "PatientSize" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["PatientSize"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"PatientStudy", "PatientWeight", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientStudy success after verifying PatientWeight --> "+("success" if partial_success else "failure"))

	if "PatientWeight" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["PatientWeight"], 
			verbose, log, -1, True)

	partial_success = verifyType3(ds, 
			"PatientStudy", 
			"PatientSizeCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PatientStudy success after verifying PatientSizeCodeSequence" + ("success" if partial_success else "failure")) 
	if "PatientSizeCodeSequence" in ds:
		PatientSizeCodeSequence_data = ds.PatientSizeCodeSequence
		if type(PatientSizeCodeSequence_data) == Sequence:
			for i1 in range(0, len(PatientSizeCodeSequence_data)):
				if verbose:
					log.append( " PatientSizeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientSizeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PatientStudy success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"PatientStudy", "Occupation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientStudy success after verifying Occupation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PatientStudy", "AdditionalPatientHistory", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientStudy success after verifying AdditionalPatientHistory --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PatientStudy", "AdmissionID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientStudy success after verifying AdmissionID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PatientStudy", "IssuerOfAdmissionID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientStudy success after verifying IssuerOfAdmissionID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"PatientStudy", 
			"IssuerOfAdmissionIDSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PatientStudy success after verifying IssuerOfAdmissionIDSequence" + ("success" if partial_success else "failure")) 
	if "IssuerOfAdmissionIDSequence" in ds:
		IssuerOfAdmissionIDSequence_data = ds.IssuerOfAdmissionIDSequence
		if type(IssuerOfAdmissionIDSequence_data) == Sequence:
			for i1 in range(0, len(IssuerOfAdmissionIDSequence_data)):
				if verbose:
					log.append( " IssuerOfAdmissionIDSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IssuerOfAdmissionIDSequence_data[i1]
				partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PatientStudy success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"PatientStudy", "ServiceEpisodeID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientStudy success after verifying ServiceEpisodeID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"PatientStudy", 
			"IssuerOfServiceEpisodeIDSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PatientStudy success after verifying IssuerOfServiceEpisodeIDSequence" + ("success" if partial_success else "failure")) 
	if "IssuerOfServiceEpisodeIDSequence" in ds:
		IssuerOfServiceEpisodeIDSequence_data = ds.IssuerOfServiceEpisodeIDSequence
		if type(IssuerOfServiceEpisodeIDSequence_data) == Sequence:
			for i1 in range(0, len(IssuerOfServiceEpisodeIDSequence_data)):
				if verbose:
					log.append( " IssuerOfServiceEpisodeIDSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IssuerOfServiceEpisodeIDSequence_data[i1]
				partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PatientStudy success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"PatientStudy", "ServiceEpisodeDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientStudy success after verifying ServiceEpisodeDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"PatientStudy", "PatientSexNeutered", 
			verbose, log, ElementDictionary, 
			Condition_IsAnimal, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientStudy success after verifying PatientSexNeutered --> "+("success" if partial_success else "failure"))

	if Condition_IsAnimal(ds, parent_ds, root_ds):
		if "PatientSexNeutered" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PatientSexNeutered"], 
				StringValueTable_PatientSexNeutered, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientStudy success after verifying string enumerated values PatientSexNeutered --> "+("success" if partial_success else "failure"))

	return global_success

def Module_ClinicalTrialStudy_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ClinicalTrialStudy")

	partial_success =  		verifyType2(ds, 
			"ClinicalTrialStudy", "ClinicalTrialTimePointID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialStudy success after verifying ClinicalTrialTimePointID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ClinicalTrialStudy", "ClinicalTrialTimePointDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialStudy success after verifying ClinicalTrialTimePointDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ClinicalTrialStudy", "LongitudinalTemporalOffsetFromEvent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialStudy success after verifying LongitudinalTemporalOffsetFromEvent --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ClinicalTrialStudy", "LongitudinalTemporalEventType", 
			verbose, log, ElementDictionary, 
			Condition_LongitudinalTemporalOffsetFromEventIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialStudy success after verifying LongitudinalTemporalEventType --> "+("success" if partial_success else "failure"))

	if Condition_LongitudinalTemporalOffsetFromEventIsPresent(ds, parent_ds, root_ds):
		if "LongitudinalTemporalEventType" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["LongitudinalTemporalEventType"], 
				StringValueTable_LongitudinalTemporalEventType, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialStudy success after verifying string defined terms LongitudinalTemporalEventType --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"ClinicalTrialStudy", 
			"ConsentForClinicalTrialUseSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ClinicalTrialStudy success after verifying ConsentForClinicalTrialUseSequence" + ("success" if partial_success else "failure")) 
	if "ConsentForClinicalTrialUseSequence" in ds:
		ConsentForClinicalTrialUseSequence_data = ds.ConsentForClinicalTrialUseSequence
		if type(ConsentForClinicalTrialUseSequence_data) == Sequence:
			for i1 in range(0, len(ConsentForClinicalTrialUseSequence_data)):
				if verbose:
					log.append( " ConsentForClinicalTrialUseSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConsentForClinicalTrialUseSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"ClinicalTrialStudy", "DistributionType", 
						verbose, log, ElementDictionary, 
						Condition_ConsentForDistributionFlagIsYesOrWithdrawn, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ClinicalTrialStudy success after verifying DistributionType --> "+("success" if partial_success else "failure"))

				if Condition_ConsentForDistributionFlagIsYesOrWithdrawn(ds1, parent_ds1, root_ds):
					if "DistributionType" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["DistributionType"], 
							StringValueTable_DistributionType, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " ClinicalTrialStudy success after verifying string enumerated values DistributionType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"ClinicalTrialStudy", "ClinicalTrialProtocolID", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ClinicalTrialStudy success after verifying ClinicalTrialProtocolID --> "+("success" if partial_success else "failure"))


				if Condition_DistributionTypeIsNotNamedProtocol(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" Only permitted when DistributionType is NAMED_PROTOCOL - attribute <ClinicalTrialProtocolID>")

				partial_success =  		verifyType1(ds1, 
						"ClinicalTrialStudy", "ConsentForDistributionFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ClinicalTrialStudy success after verifying ConsentForDistributionFlag --> "+("success" if partial_success else "failure"))

				if "ConsentForDistributionFlag" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ConsentForDistributionFlag"], 
						StringValueTable_ConsentForDistributionFlag, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ClinicalTrialStudy success after verifying string enumerated values ConsentForDistributionFlag --> "+("success" if partial_success else "failure"))

	return global_success

def Module_GeneralSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"GeneralSeries")

	partial_success =  		verifyType1C(ds, 
			"GeneralSeries", "Modality", 
			verbose, log, ElementDictionary, 
			Condition_NotSecondaryCaptureSOPClass, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying Modality --> "+("success" if partial_success else "failure"))


	if "Modality" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["Modality"], 
			StringValueTable_Modality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying string defined terms Modality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"GeneralSeries", "SeriesInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"GeneralSeries", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"GeneralSeries", "Laterality", 
			verbose, log, ElementDictionary, 
			Condition_LateralityRequired, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying Laterality --> "+("success" if partial_success else "failure"))

	if Condition_LateralityRequired(ds, parent_ds, root_ds):
		if "Laterality" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["Laterality"], 
				StringValueTable_Laterality, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying string enumerated values Laterality --> "+("success" if partial_success else "failure"))


	if Condition_LateralityHasNoValue(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" is only permitted to be empty when actually unknown; should be absent (not empty) if an unpaired body part, and have a value if a paired body part - attribute <Laterality>")

	partial_success =  		verifyType3(ds, 
			"GeneralSeries", "SeriesDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying SeriesDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralSeries", "SeriesTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying SeriesTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralSeries", "PerformingPhysicianName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying PerformingPhysicianName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"GeneralSeries", 
			"PerformingPhysicianIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralSeries success after verifying PerformingPhysicianIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "PerformingPhysicianIdentificationSequence" in ds:
		PerformingPhysicianIdentificationSequence_data = ds.PerformingPhysicianIdentificationSequence
		if type(PerformingPhysicianIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(PerformingPhysicianIdentificationSequence_data)):
				if verbose:
					log.append( " PerformingPhysicianIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerformingPhysicianIdentificationSequence_data[i1]
				partial_success =  Macro_PersonIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralSeries success after verifying PersonIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"GeneralSeries", "ProtocolName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying ProtocolName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralSeries", "SeriesDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying SeriesDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"GeneralSeries", 
			"SeriesDescriptionCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralSeries success after verifying SeriesDescriptionCodeSequence" + ("success" if partial_success else "failure")) 
	if "SeriesDescriptionCodeSequence" in ds:
		SeriesDescriptionCodeSequence_data = ds.SeriesDescriptionCodeSequence
		if type(SeriesDescriptionCodeSequence_data) == Sequence:
			for i1 in range(0, len(SeriesDescriptionCodeSequence_data)):
				if verbose:
					log.append( " SeriesDescriptionCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SeriesDescriptionCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralSeries success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"GeneralSeries", "OperatorsName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying OperatorsName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"GeneralSeries", 
			"OperatorIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralSeries success after verifying OperatorIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "OperatorIdentificationSequence" in ds:
		OperatorIdentificationSequence_data = ds.OperatorIdentificationSequence
		if type(OperatorIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(OperatorIdentificationSequence_data)):
				if verbose:
					log.append( " OperatorIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OperatorIdentificationSequence_data[i1]
				partial_success =  Macro_PersonIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralSeries success after verifying PersonIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"GeneralSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"GeneralSeries", 
			"RelatedSeriesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralSeries success after verifying RelatedSeriesSequence" + ("success" if partial_success else "failure")) 
	if "RelatedSeriesSequence" in ds:
		RelatedSeriesSequence_data = ds.RelatedSeriesSequence
		if type(RelatedSeriesSequence_data) == Sequence:
			for i1 in range(0, len(RelatedSeriesSequence_data)):
				if verbose:
					log.append( " RelatedSeriesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RelatedSeriesSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"GeneralSeries", "StudyInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " GeneralSeries success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"GeneralSeries", "SeriesInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " GeneralSeries success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"GeneralSeries", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "GeneralSeries success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " GeneralSeries success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"GeneralSeries", "BodyPartExamined", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying BodyPartExamined --> "+("success" if partial_success else "failure"))


	if Condition_IsHuman(ds, parent_ds, root_ds):
		if "BodyPartExamined" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["BodyPartExamined"], 
				StringValueTable_BodyPartExaminedHuman, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying string defined terms BodyPartExamined --> "+("success" if partial_success else "failure"))


	if Condition_IsAnimal(ds, parent_ds, root_ds):
		if "BodyPartExamined" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["BodyPartExamined"], 
				StringValueTable_BodyPartExaminedAnimal, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying string defined terms BodyPartExamined --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"GeneralSeries", "PatientPosition", 
			verbose, log, ElementDictionary, 
			Condition_SOPClassIsCTOrMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying PatientPosition --> "+("success" if partial_success else "failure"))

	if Condition_SOPClassIsCTOrMR(ds, parent_ds, root_ds):
		if "PatientPosition" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["PatientPosition"], 
				StringValueTable_PatientPosition, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying string defined terms PatientPosition --> "+("success" if partial_success else "failure"))


	if Condition_PatientPositionAndPatientOrientationCodeSequencePresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when PatientOrientationCodeSequence is present - attribute <PatientPosition>")

	partial_success =  		verifyType3(ds, 
			"GeneralSeries", "SmallestPixelValueInSeries", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying SmallestPixelValueInSeries --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralSeries", "LargestPixelValueInSeries", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying LargestPixelValueInSeries --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"GeneralSeries", 
			"RequestAttributesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralSeries success after verifying RequestAttributesSequence" + ("success" if partial_success else "failure")) 
	if "RequestAttributesSequence" in ds:
		RequestAttributesSequence_data = ds.RequestAttributesSequence
		if type(RequestAttributesSequence_data) == Sequence:
			for i1 in range(0, len(RequestAttributesSequence_data)):
				if verbose:
					log.append( " RequestAttributesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RequestAttributesSequence_data[i1]
				partial_success =  Macro_RequestAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralSeries success after verifying RequestAttributesMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_PerformedProcedureStepSummaryMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " GeneralSeries success after verifying PerformedProcedureStepSummaryMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"GeneralSeries", "AnatomicalOrientationType", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying AnatomicalOrientationType --> "+("success" if partial_success else "failure"))

	if "AnatomicalOrientationType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["AnatomicalOrientationType"], 
			StringValueTable_AnatomicalOrientationType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralSeries success after verifying string enumerated values AnatomicalOrientationType --> "+("success" if partial_success else "failure"))

	return global_success

def Module_ClinicalTrialSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ClinicalTrialSeries")

	partial_success =  		verifyType2(ds, 
			"ClinicalTrialSeries", "ClinicalTrialCoordinatingCenterName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialSeries success after verifying ClinicalTrialCoordinatingCenterName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ClinicalTrialSeries", "ClinicalTrialSeriesID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialSeries success after verifying ClinicalTrialSeriesID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ClinicalTrialSeries", "ClinicalTrialSeriesDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ClinicalTrialSeries success after verifying ClinicalTrialSeriesDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Module_EnhancedSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedSeries")

	partial_success =  		verifyType1(ds, 
			"EnhancedSeries", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedSeries success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"EnhancedSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_FrameOfReference_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"FrameOfReference")

	partial_success =  		verifyType1(ds, 
			"FrameOfReference", "FrameOfReferenceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FrameOfReference success after verifying FrameOfReferenceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"FrameOfReference", "PositionReferenceIndicator", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FrameOfReference success after verifying PositionReferenceIndicator --> "+("success" if partial_success else "failure"))

	return global_success

def Module_GeneralEquipment_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"GeneralEquipment")

	partial_success =  		verifyType2(ds, 
			"GeneralEquipment", "Manufacturer", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralEquipment success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralEquipment", "InstitutionName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralEquipment success after verifying InstitutionName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralEquipment", "InstitutionAddress", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralEquipment success after verifying InstitutionAddress --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralEquipment", "StationName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralEquipment success after verifying StationName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralEquipment", "InstitutionalDepartmentName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralEquipment success after verifying InstitutionalDepartmentName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"GeneralEquipment", 
			"InstitutionalDepartmentTypeCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralEquipment success after verifying InstitutionalDepartmentTypeCodeSequence" + ("success" if partial_success else "failure")) 
	if "InstitutionalDepartmentTypeCodeSequence" in ds:
		InstitutionalDepartmentTypeCodeSequence_data = ds.InstitutionalDepartmentTypeCodeSequence
		if type(InstitutionalDepartmentTypeCodeSequence_data) == Sequence:
			for i1 in range(0, len(InstitutionalDepartmentTypeCodeSequence_data)):
				if verbose:
					log.append( " InstitutionalDepartmentTypeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = InstitutionalDepartmentTypeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralEquipment success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"GeneralEquipment", "ManufacturerModelName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralEquipment success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralEquipment", "DeviceSerialNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralEquipment success after verifying DeviceSerialNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralEquipment", "SoftwareVersions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralEquipment success after verifying SoftwareVersions --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralEquipment", "GantryID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralEquipment success after verifying GantryID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"GeneralEquipment", 
			"UDISequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralEquipment success after verifying UDISequence" + ("success" if partial_success else "failure")) 
	if "UDISequence" in ds:
		UDISequence_data = ds.UDISequence
		if type(UDISequence_data) == Sequence:
			for i1 in range(0, len(UDISequence_data)):
				if verbose:
					log.append( " UDISequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = UDISequence_data[i1]
				partial_success =  Macro_UDIMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralEquipment success after verifying UDIMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"GeneralEquipment", "SpatialResolution", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralEquipment success after verifying SpatialResolution --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralEquipment", "DateOfLastCalibration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralEquipment success after verifying DateOfLastCalibration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralEquipment", "TimeOfLastCalibration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralEquipment success after verifying TimeOfLastCalibration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"GeneralEquipment", "PixelPaddingValue", 
			verbose, log, ElementDictionary, 
			Condition_PixelPaddingRangeLimitIsPresent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralEquipment success after verifying PixelPaddingValue --> "+("success" if partial_success else "failure"))


	if Condition_PixelPaddingValueIsPresentAndInstanceIsNotAnImage(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when not an integer pixel data image - attribute <PixelPaddingValue>")

	return global_success

def Module_EnhancedGeneralEquipment_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedGeneralEquipment")

	partial_success =  		verifyType1(ds, 
			"EnhancedGeneralEquipment", "Manufacturer", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedGeneralEquipment success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedGeneralEquipment", "ManufacturerModelName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedGeneralEquipment success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedGeneralEquipment", "DeviceSerialNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedGeneralEquipment success after verifying DeviceSerialNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedGeneralEquipment", "SoftwareVersions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedGeneralEquipment success after verifying SoftwareVersions --> "+("success" if partial_success else "failure"))

	return global_success

def Module_GeneralReference_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"GeneralReference")

	partial_success = verifyType3(ds, 
			"GeneralReference", 
			"ReferencedImageSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralReference success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageSequence" in ds:
		ReferencedImageSequence_data = ds.ReferencedImageSequence
		if type(ReferencedImageSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageSequence_data)):
				if verbose:
					log.append( " ReferencedImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralReference success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"GeneralReference", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "GeneralReference success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " GeneralReference success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"GeneralReference", 
			"ReferencedInstanceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralReference success after verifying ReferencedInstanceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedInstanceSequence" in ds:
		ReferencedInstanceSequence_data = ds.ReferencedInstanceSequence
		if type(ReferencedInstanceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedInstanceSequence_data)):
				if verbose:
					log.append( " ReferencedInstanceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedInstanceSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralReference success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"GeneralReference", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "GeneralReference success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " GeneralReference success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"GeneralReference", "DerivationDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralReference success after verifying DerivationDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"GeneralReference", 
			"DerivationCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralReference success after verifying DerivationCodeSequence" + ("success" if partial_success else "failure")) 
	if "DerivationCodeSequence" in ds:
		DerivationCodeSequence_data = ds.DerivationCodeSequence
		if type(DerivationCodeSequence_data) == Sequence:
			for i1 in range(0, len(DerivationCodeSequence_data)):
				if verbose:
					log.append( " DerivationCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DerivationCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralReference success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"GeneralReference", 
			"SourceImageSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralReference success after verifying SourceImageSequence" + ("success" if partial_success else "failure")) 
	if "SourceImageSequence" in ds:
		SourceImageSequence_data = ds.SourceImageSequence
		if type(SourceImageSequence_data) == Sequence:
			for i1 in range(0, len(SourceImageSequence_data)):
				if verbose:
					log.append( " SourceImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceImageSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralReference success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"GeneralReference", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "GeneralReference success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " GeneralReference success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"GeneralReference", "SpatialLocationsPreserved", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " GeneralReference success after verifying SpatialLocationsPreserved --> "+("success" if partial_success else "failure"))

				if "SpatialLocationsPreserved" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["SpatialLocationsPreserved"], 
						StringValueTable_YesNoReorientedOnly, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " GeneralReference success after verifying string enumerated values SpatialLocationsPreserved --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"GeneralReference", "PatientOrientation", 
						verbose, log, ElementDictionary, 
						Condition_SpatialLocationsPreservedReorientedOnly, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " GeneralReference success after verifying PatientOrientation --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"GeneralReference", 
			"SourceInstanceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralReference success after verifying SourceInstanceSequence" + ("success" if partial_success else "failure")) 
	if "SourceInstanceSequence" in ds:
		SourceInstanceSequence_data = ds.SourceInstanceSequence
		if type(SourceInstanceSequence_data) == Sequence:
			for i1 in range(0, len(SourceInstanceSequence_data)):
				if verbose:
					log.append( " SourceInstanceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceInstanceSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralReference success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"GeneralReference", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "GeneralReference success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " GeneralReference success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_GeneralImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"GeneralImage")

	partial_success =  		verifyType2(ds, 
			"GeneralImage", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"GeneralImage", "PatientOrientation", 
			verbose, log, ElementDictionary, 
			Condition_PatientOrientationRequired, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying PatientOrientation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"GeneralImage", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"GeneralImage", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "AcquisitionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying AcquisitionNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "AcquisitionDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying AcquisitionDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "AcquisitionTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying AcquisitionTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "ImagesInAcquisition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying ImagesInAcquisition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "ImageComments", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying ImageComments --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "QualityControlImage", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying QualityControlImage --> "+("success" if partial_success else "failure"))

	if "QualityControlImage" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["QualityControlImage"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying string enumerated values QualityControlImage --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	if "LossyImageCompressionMethod" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["LossyImageCompressionMethod"], 
			StringValueTable_LossyImageCompressionMethod, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying string defined terms LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))


	if Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" method inconsistent with transfer syntax - attribute <LossyImageCompressionMethod>"+\
				" = <{}>".format( tag_for_keyword("LossyImageCompressionMethod")))

	partial_success = verifyType3(ds, 
			"GeneralImage", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralImage success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralImage success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"GeneralImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if "PresentationLUTShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
			StringValueTable_SoftcopyPresentationLUTShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsMonochrome1(ds, parent_ds, root_ds):
		if "PresentationLUTShape" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
				StringValueTable_InversePresentationLUTShape, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsMonochrome2(ds, parent_ds, root_ds):
		if "PresentationLUTShape" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
				StringValueTable_IdentityPresentationLUTShape, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsColor(ds, parent_ds, root_ds):
		if "PresentationLUTShape" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
				StringValueTable_IdentityPresentationLUTShape, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralImage", "IrradiationEventUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying IrradiationEventUID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"GeneralImage", 
			"RealWorldValueMappingSequence", 
			verbose, log, ElementDictionary, 
			Condition_IsMultienergyCTAcquisition, 
			True, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralImage success after verifying RealWorldValueMappingSequence" + ("success" if partial_success else "failure")) 
	if "RealWorldValueMappingSequence" in ds:
		RealWorldValueMappingSequence_data = ds.RealWorldValueMappingSequence
		if type(RealWorldValueMappingSequence_data) == Sequence:
			for i1 in range(0, len(RealWorldValueMappingSequence_data)):
				if verbose:
					log.append( " RealWorldValueMappingSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RealWorldValueMappingSequence_data[i1]
				partial_success =  Macro_RealWorldValueMappingItemMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralImage success after verifying RealWorldValueMappingItemMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"GeneralImage", "ImageLaterality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying ImageLaterality --> "+("success" if partial_success else "failure"))

	if "ImageLaterality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageLaterality"], 
			StringValueTable_ImageLaterality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralImage success after verifying string enumerated values ImageLaterality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2C(ds, 
			"GeneralImage", 
			"AnatomicRegionSequence", 
			verbose, log, ElementDictionary, 
			Condition_NeedAnatomicRegionSequenceInGeneralImageModule, 
			True, 
			parent_ds, root_ds, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralImage success after verifying AnatomicRegionSequence" + ("success" if partial_success else "failure")) 
	if "AnatomicRegionSequence" in ds:
		AnatomicRegionSequence_data = ds.AnatomicRegionSequence
		if type(AnatomicRegionSequence_data) == Sequence:
			for i1 in range(0, len(AnatomicRegionSequence_data)):
				if verbose:
					log.append( " AnatomicRegionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AnatomicRegionSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"GeneralImage", 
						"AnatomicRegionModifierSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "GeneralImage success after verifying AnatomicRegionModifierSequence" + ("success" if partial_success else "failure")) 
				if "AnatomicRegionModifierSequence" in ds1:
					AnatomicRegionModifierSequence_data = ds1.AnatomicRegionModifierSequence
					if type(AnatomicRegionModifierSequence_data) == Sequence:
						for i2 in range(0, len(AnatomicRegionModifierSequence_data)):
							if verbose:
								log.append( " AnatomicRegionModifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AnatomicRegionModifierSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " GeneralImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_PrimaryAnatomicStructureMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " GeneralImage success after verifying PrimaryAnatomicStructureMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"GeneralImage", 
			"AnatomicRegionModifierSequence", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralImage success after verifying AnatomicRegionModifierSequence" + ("success" if partial_success else "failure")) 
	if "AnatomicRegionModifierSequence" in ds:
		AnatomicRegionModifierSequence_data = ds.AnatomicRegionModifierSequence
		if type(AnatomicRegionModifierSequence_data) == Sequence:
			for i1 in range(0, len(AnatomicRegionModifierSequence_data)):
				if verbose:
					log.append( " AnatomicRegionModifierSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AnatomicRegionModifierSequence_data[i1]
	partial_success = verifyType1C(ds, 
			"GeneralImage", 
			"PrimaryAnatomicStructureModifierSequence", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralImage success after verifying PrimaryAnatomicStructureModifierSequence" + ("success" if partial_success else "failure")) 
	if "PrimaryAnatomicStructureModifierSequence" in ds:
		PrimaryAnatomicStructureModifierSequence_data = ds.PrimaryAnatomicStructureModifierSequence
		if type(PrimaryAnatomicStructureModifierSequence_data) == Sequence:
			for i1 in range(0, len(PrimaryAnatomicStructureModifierSequence_data)):
				if verbose:
					log.append( " PrimaryAnatomicStructureModifierSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PrimaryAnatomicStructureModifierSequence_data[i1]
	return global_success

def Module_ImagePlane_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ImagePlane")

	partial_success =  		verifyType1(ds, 
			"ImagePlane", "PixelSpacing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePlane success after verifying PixelSpacing --> "+("success" if partial_success else "failure"))

	if "PixelSpacing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["PixelSpacing"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"ImagePlane", "ImageOrientationPatient", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePlane success after verifying ImageOrientationPatient --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ImagePlane", "ImagePositionPatient", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePlane success after verifying ImagePositionPatient --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"ImagePlane", "SliceThickness", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePlane success after verifying SliceThickness --> "+("success" if partial_success else "failure"))

	if "SliceThickness" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["SliceThickness"], 
			verbose, log, -1, False)

	partial_success =  		verifyType3(ds, 
			"ImagePlane", "SliceLocation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePlane success after verifying SliceLocation --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_ImagePixelMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ImagePixelMacro")

	partial_success =  		verifyType1(ds, 
			"ImagePixelMacro", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationNeedsOneSample(ds, parent_ds, root_ds):
		if "SamplesPerPixel" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
				BinaryValueDescription_One, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationNeedsThreeSamples(ds, parent_ds, root_ds):
		if "SamplesPerPixel" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
				BinaryValueDescription_Three, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))


	if Condition_MPEG2TransferSyntaxAndNotThreeSamples(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May only be 3 for MPEG Transfer Syntax - attribute <SamplesPerPixel>")

	partial_success =  		verifyType1(ds, 
			"ImagePixelMacro", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying string defined terms PhotometricInterpretation --> "+("success" if partial_success else "failure"))


	if Condition_JPEGLossyTransferSyntaxAndThreeSamplesOtherThanWSI(ds, parent_ds, root_ds):
		if "PhotometricInterpretation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
				StringValueTable_PhotometricInterpretationYBRFull422, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))


	if Condition_JPEGLosslessTransferSyntaxAndThreeSamples(ds, parent_ds, root_ds):
		if "PhotometricInterpretation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
				StringValueTable_PhotometricInterpretationYBRFullOrRGBorYBR_RCT, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))


	if Condition_JPEG2000LosslessTransferSyntaxAndThreeSamplesOtherThanWSI(ds, parent_ds, root_ds):
		if "PhotometricInterpretation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
				StringValueTable_PhotometricInterpretationYBRRCT, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))


	if Condition_JPEG2000TransferSyntaxAndThreeSamplesOtherThanWSI(ds, parent_ds, root_ds):
		if "PhotometricInterpretation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
				StringValueTable_PhotometricInterpretationYBRRCTOrICT, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))


	if Condition_MPEG2TransferSyntax(ds, parent_ds, root_ds):
		if "PhotometricInterpretation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
				StringValueTable_PhotometricInterpretationYBRPartial420, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))


	if Condition_RLETransferSyntaxAndThreeSamples(ds, parent_ds, root_ds):
		if "PhotometricInterpretation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
				StringValueTable_PhotometricInterpretationYBRFullOrRGB, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))


	if Condition_UncompressedTransferSyntaxAndThreeSamples(ds, parent_ds, root_ds):
		if "PhotometricInterpretation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
				StringValueTable_PhotometricInterpretationYBRFullOrRGBorYBR_RCTorYBR_ICT, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ImagePixelMacro", "Rows", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying Rows --> "+("success" if partial_success else "failure"))

	if "Rows" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Rows"], 
			verbose, log, -1, False)


	if Condition_MPEG2MPMLTransferSyntaxAndRowsGreaterThan480NTSCOr576PAL(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Must be <= 480 (NTSC) or 576 (PAL) for MPEG MP@MLTransfer Syntax - attribute <Rows>")


	if Condition_MPEG2MPHLTransferSyntaxAndRowsNot720Or1080(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Must be 720 or 1080 for MPEG MP@HLTransfer Syntax - attribute <Rows>")

	partial_success =  		verifyType1(ds, 
			"ImagePixelMacro", "Columns", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying Columns --> "+("success" if partial_success else "failure"))

	if "Columns" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Columns"], 
			verbose, log, -1, False)


	if Condition_MPEG2MPMLTransferSyntaxAndColumnsGreaterThan720(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Must be <= 720 for MPEG MP@MLTransfer Syntax - attribute <Columns>")


	if Condition_MPEG2MPHLTransferSyntaxAndColumnsNot1280Or1920(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Must be 1280 or 1920 for MPEG MP@HLTransfer Syntax - attribute <Columns>")


	if Condition_MPEG2MPHLTransferSyntaxAndColumnsInconsistentWithRows(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Must be 1280 when 720 Rows, or 1920 when 1080 Rows, for MPEG MP@HLTransfer Syntax - attribute <Columns>")

	partial_success =  		verifyType1(ds, 
			"ImagePixelMacro", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["BitsAllocated"], 
			verbose, log, -1, False)


	if Condition_MPEG2TransferSyntaxAndNotBitsAllocated8(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May only be 8 for MPEG Transfer Syntax - attribute <BitsAllocated>")

	partial_success =  		verifyType1(ds, 
			"ImagePixelMacro", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["BitsStored"], 
			verbose, log, -1, False)


	if Condition_MPEG2TransferSyntaxAndNotBitsStored8(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May only be 8 for MPEG Transfer Syntax - attribute <BitsStored>")

	partial_success =  		verifyType1(ds, 
			"ImagePixelMacro", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying HighBit --> "+("success" if partial_success else "failure"))


	if Condition_MPEG2TransferSyntaxAndNotHighBit7(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May only be 7 for MPEG Transfer Syntax - attribute <HighBit>")

	partial_success =  		verifyType1(ds, 
			"ImagePixelMacro", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))


	if Condition_MPEG2TransferSyntaxAndNotPixelRepresentation0(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May only be 0 for MPEG Transfer Syntax - attribute <PixelRepresentation>")

	partial_success =  		verifyType1C(ds, 
			"ImagePixelMacro", "PixelData", 
			verbose, log, ElementDictionary, 
			Condition_PixelDataProviderURLIsAbsent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying PixelData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ImagePixelMacro", "PlanarConfiguration", 
			verbose, log, ElementDictionary, 
			Condition_SamplesPerPixelGreaterThanOne, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying PlanarConfiguration --> "+("success" if partial_success else "failure"))

	if Condition_SamplesPerPixelGreaterThanOne(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_PlanarConfiguration, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))


	if Condition_MPEG2TransferSyntaxAndNotPlanarConfiguration0(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May only be 0 for MPEG Transfer Syntax - attribute <PlanarConfiguration>")

	partial_success =  		verifyType1C(ds, 
			"ImagePixelMacro", "PixelAspectRatio", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying PixelAspectRatio --> "+("success" if partial_success else "failure"))


	if Condition_UnwantedPixelAspectRatioWhenPixelSpacingPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Pixel Spacing is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenImagerPixelSpacingPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Imager Pixel Spacing is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenNominalScannedPixelSpacingPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Nominal Scanned Pixel Spacing is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenSharedPixelMeasuresMacro(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Pixel Measures Macro is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenPerFramePixelMeasuresMacro(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Pixel Measures Macro is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenMPEG2MPHLTransferSyntax(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present for MPEG MP@HLTransfer Syntax - attribute <PixelAspectRatio>")

	partial_success =  		verifyType3(ds, 
			"ImagePixelMacro", "SmallestImagePixelValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying SmallestImagePixelValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ImagePixelMacro", "LargestImagePixelValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying LargestImagePixelValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ImagePixelMacro", "RedPaletteColorLookupTableDescriptor", 
			verbose, log, ElementDictionary, 
			Condition_ImagePixelMacroNeedsPaletteDescriptor, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying RedPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if "RedPaletteColorLookupTableDescriptor" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["RedPaletteColorLookupTableDescriptor"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying binary enumerated values RedPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ImagePixelMacro", "GreenPaletteColorLookupTableDescriptor", 
			verbose, log, ElementDictionary, 
			Condition_ImagePixelMacroNeedsPaletteDescriptor, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying GreenPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if "GreenPaletteColorLookupTableDescriptor" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["GreenPaletteColorLookupTableDescriptor"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying binary enumerated values GreenPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ImagePixelMacro", "BluePaletteColorLookupTableDescriptor", 
			verbose, log, ElementDictionary, 
			Condition_ImagePixelMacroNeedsPaletteDescriptor, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying BluePaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if "BluePaletteColorLookupTableDescriptor" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BluePaletteColorLookupTableDescriptor"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying binary enumerated values BluePaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ImagePixelMacro", "RedPaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			Condition_ImagePixelMacroNeedsPaletteDescriptorAndNotSegmentedLegallyPresentInPaletteColorModule, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying RedPaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ImagePixelMacro", "GreenPaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			Condition_ImagePixelMacroNeedsPaletteDescriptorAndNotSegmentedLegallyPresentInPaletteColorModule, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying GreenPaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ImagePixelMacro", "BluePaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			Condition_ImagePixelMacroNeedsPaletteDescriptorAndNotSegmentedLegallyPresentInPaletteColorModule, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying BluePaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ImagePixelMacro", "ICCProfile", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying ICCProfile --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ImagePixelMacro", "ColorSpace", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixelMacro success after verifying ColorSpace --> "+("success" if partial_success else "failure"))

	return global_success

def Module_FloatingPointImagePixel_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"FloatingPointImagePixel")

	partial_success =  		verifyType1(ds, 
			"FloatingPointImagePixel", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FloatingPointImagePixel success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FloatingPointImagePixel success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"FloatingPointImagePixel", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FloatingPointImagePixel success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FloatingPointImagePixel success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"FloatingPointImagePixel", "Rows", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FloatingPointImagePixel success after verifying Rows --> "+("success" if partial_success else "failure"))

	if "Rows" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Rows"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"FloatingPointImagePixel", "Columns", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FloatingPointImagePixel success after verifying Columns --> "+("success" if partial_success else "failure"))

	if "Columns" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Columns"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"FloatingPointImagePixel", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FloatingPointImagePixel success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre32, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FloatingPointImagePixel success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))


	if Condition_BitsStoredPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present for Float Pixel Data - attribute <BitsStored>")


	if Condition_HighBitPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present for Float Pixel Data - attribute <HighBit>")


	if Condition_PixelRepresentationPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present for Float Pixel Data - attribute <PixelRepresentation>")


	if Condition_PlanarConfigurationPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present for Float Pixel Data - attribute <PlanarConfiguration>")

	partial_success =  		verifyType1(ds, 
			"FloatingPointImagePixel", "FloatPixelData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FloatingPointImagePixel success after verifying FloatPixelData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"FloatingPointImagePixel", "PixelAspectRatio", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FloatingPointImagePixel success after verifying PixelAspectRatio --> "+("success" if partial_success else "failure"))


	if Condition_UnwantedPixelAspectRatioWhenPixelSpacingPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Pixel Spacing is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenImagerPixelSpacingPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Imager Pixel Spacing is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenNominalScannedPixelSpacingPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Nominal Scanned Pixel Spacing is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenSharedPixelMeasuresMacro(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Pixel Measures Macro is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenPerFramePixelMeasuresMacro(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Pixel Measures Macro is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenMPEG2MPHLTransferSyntax(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present for MPEG MP@HLTransfer Syntax - attribute <PixelAspectRatio>")

	partial_success =  		verifyType3(ds, 
			"FloatingPointImagePixel", "FloatPixelPaddingValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FloatingPointImagePixel success after verifying FloatPixelPaddingValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"FloatingPointImagePixel", "FloatPixelPaddingRangeLimit", 
			verbose, log, ElementDictionary, 
			Condition_FloatPixelPaddingValuePresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FloatingPointImagePixel success after verifying FloatPixelPaddingRangeLimit --> "+("success" if partial_success else "failure"))

	return global_success

def Module_DoubleFloatingPointImagePixel_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"DoubleFloatingPointImagePixel")

	partial_success =  		verifyType1(ds, 
			"DoubleFloatingPointImagePixel", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DoubleFloatingPointImagePixel success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DoubleFloatingPointImagePixel success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DoubleFloatingPointImagePixel", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DoubleFloatingPointImagePixel success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DoubleFloatingPointImagePixel success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DoubleFloatingPointImagePixel", "Rows", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DoubleFloatingPointImagePixel success after verifying Rows --> "+("success" if partial_success else "failure"))

	if "Rows" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Rows"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"DoubleFloatingPointImagePixel", "Columns", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DoubleFloatingPointImagePixel success after verifying Columns --> "+("success" if partial_success else "failure"))

	if "Columns" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Columns"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"DoubleFloatingPointImagePixel", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DoubleFloatingPointImagePixel success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre64, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DoubleFloatingPointImagePixel success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))


	if Condition_BitsStoredPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present for Float Pixel Data - attribute <BitsStored>")


	if Condition_HighBitPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present for Float Pixel Data - attribute <HighBit>")


	if Condition_PixelRepresentationPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present for Float Pixel Data - attribute <PixelRepresentation>")


	if Condition_PlanarConfigurationPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present for Float Pixel Data - attribute <PlanarConfiguration>")

	partial_success =  		verifyType1(ds, 
			"DoubleFloatingPointImagePixel", "DoubleFloatPixelData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DoubleFloatingPointImagePixel success after verifying DoubleFloatPixelData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DoubleFloatingPointImagePixel", "PixelAspectRatio", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DoubleFloatingPointImagePixel success after verifying PixelAspectRatio --> "+("success" if partial_success else "failure"))


	if Condition_UnwantedPixelAspectRatioWhenPixelSpacingPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Pixel Spacing is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenImagerPixelSpacingPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Imager Pixel Spacing is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenNominalScannedPixelSpacingPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Nominal Scanned Pixel Spacing is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenSharedPixelMeasuresMacro(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Pixel Measures Macro is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenPerFramePixelMeasuresMacro(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when Pixel Measures Macro is present - attribute <PixelAspectRatio>")


	if Condition_UnwantedPixelAspectRatioWhenMPEG2MPHLTransferSyntax(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present for MPEG MP@HLTransfer Syntax - attribute <PixelAspectRatio>")

	partial_success =  		verifyType3(ds, 
			"DoubleFloatingPointImagePixel", "DoubleFloatPixelPaddingValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DoubleFloatingPointImagePixel success after verifying DoubleFloatPixelPaddingValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DoubleFloatingPointImagePixel", "DoubleFloatPixelPaddingRangeLimit", 
			verbose, log, ElementDictionary, 
			Condition_DoubleFloatPixelPaddingValuePresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DoubleFloatingPointImagePixel success after verifying DoubleFloatPixelPaddingRangeLimit --> "+("success" if partial_success else "failure"))

	return global_success

def Module_ImagePixel_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ImagePixel")

	partial_success =  Macro_ImagePixelMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " ImagePixel success after verifying ImagePixelMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"ImagePixel", "PixelDataProviderURL", 
			verbose, log, ElementDictionary, 
			Condition_TransferSyntaxIsReferencedPixelData, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixel success after verifying PixelDataProviderURL --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ImagePixel", "PixelPaddingRangeLimit", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImagePixel success after verifying PixelPaddingRangeLimit --> "+("success" if partial_success else "failure"))

	return global_success

def Module_ContrastBolus_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ContrastBolus")

	partial_success =  		verifyType2(ds, 
			"ContrastBolus", "ContrastBolusAgent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContrastBolus success after verifying ContrastBolusAgent --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"ContrastBolus", 
			"ContrastBolusAgentSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ContrastBolus success after verifying ContrastBolusAgentSequence" + ("success" if partial_success else "failure")) 
	if "ContrastBolusAgentSequence" in ds:
		ContrastBolusAgentSequence_data = ds.ContrastBolusAgentSequence
		if type(ContrastBolusAgentSequence_data) == Sequence:
			for i1 in range(0, len(ContrastBolusAgentSequence_data)):
				if verbose:
					log.append( " ContrastBolusAgentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContrastBolusAgentSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ContrastBolus success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"ContrastBolus", "ContrastBolusRoute", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContrastBolus success after verifying ContrastBolusRoute --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"ContrastBolus", 
			"ContrastBolusAdministrationRouteSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ContrastBolus success after verifying ContrastBolusAdministrationRouteSequence" + ("success" if partial_success else "failure")) 
	if "ContrastBolusAdministrationRouteSequence" in ds:
		ContrastBolusAdministrationRouteSequence_data = ds.ContrastBolusAdministrationRouteSequence
		if type(ContrastBolusAdministrationRouteSequence_data) == Sequence:
			for i1 in range(0, len(ContrastBolusAdministrationRouteSequence_data)):
				if verbose:
					log.append( " ContrastBolusAdministrationRouteSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContrastBolusAdministrationRouteSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ContrastBolus success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"ContrastBolus", 
						"AdditionalDrugSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "ContrastBolus success after verifying AdditionalDrugSequence" + ("success" if partial_success else "failure")) 
				if "AdditionalDrugSequence" in ds1:
					AdditionalDrugSequence_data = ds1.AdditionalDrugSequence
					if type(AdditionalDrugSequence_data) == Sequence:
						for i2 in range(0, len(AdditionalDrugSequence_data)):
							if verbose:
								log.append( " AdditionalDrugSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AdditionalDrugSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " ContrastBolus success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"ContrastBolus", "ContrastBolusVolume", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContrastBolus success after verifying ContrastBolusVolume --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ContrastBolus", "ContrastBolusStartTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContrastBolus success after verifying ContrastBolusStartTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ContrastBolus", "ContrastBolusStopTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContrastBolus success after verifying ContrastBolusStopTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ContrastBolus", "ContrastBolusTotalDose", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContrastBolus success after verifying ContrastBolusTotalDose --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ContrastBolus", "ContrastFlowRate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContrastBolus success after verifying ContrastFlowRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ContrastBolus", "ContrastFlowDuration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContrastBolus success after verifying ContrastFlowDuration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ContrastBolus", "ContrastBolusIngredient", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContrastBolus success after verifying ContrastBolusIngredient --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ContrastBolus", "ContrastBolusIngredientConcentration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContrastBolus success after verifying ContrastBolusIngredientConcentration --> "+("success" if partial_success else "failure"))

	return global_success

def Module_EnhancedContrastBolus_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedContrastBolus")

	partial_success = verifyType1(ds, 
			"EnhancedContrastBolus", 
			"ContrastBolusAgentSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedContrastBolus success after verifying ContrastBolusAgentSequence" + ("success" if partial_success else "failure")) 
	if "ContrastBolusAgentSequence" in ds:
		ContrastBolusAgentSequence_data = ds.ContrastBolusAgentSequence
		if type(ContrastBolusAgentSequence_data) == Sequence:
			for i1 in range(0, len(ContrastBolusAgentSequence_data)):
				if verbose:
					log.append( " ContrastBolusAgentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContrastBolusAgentSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedContrastBolus success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"EnhancedContrastBolus", "ContrastBolusAgentNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedContrastBolus success after verifying ContrastBolusAgentNumber --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"EnhancedContrastBolus", 
						"ContrastBolusAdministrationRouteSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedContrastBolus success after verifying ContrastBolusAdministrationRouteSequence" + ("success" if partial_success else "failure")) 
				if "ContrastBolusAdministrationRouteSequence" in ds1:
					ContrastBolusAdministrationRouteSequence_data = ds1.ContrastBolusAdministrationRouteSequence
					if type(ContrastBolusAdministrationRouteSequence_data) == Sequence:
						for i2 in range(0, len(ContrastBolusAdministrationRouteSequence_data)):
							if verbose:
								log.append( " ContrastBolusAdministrationRouteSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ContrastBolusAdministrationRouteSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EnhancedContrastBolus success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType2(ds1, 
						"EnhancedContrastBolus", 
						"ContrastBolusIngredientCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedContrastBolus success after verifying ContrastBolusIngredientCodeSequence" + ("success" if partial_success else "failure")) 
				if "ContrastBolusIngredientCodeSequence" in ds1:
					ContrastBolusIngredientCodeSequence_data = ds1.ContrastBolusIngredientCodeSequence
					if type(ContrastBolusIngredientCodeSequence_data) == Sequence:
						for i2 in range(0, len(ContrastBolusIngredientCodeSequence_data)):
							if verbose:
								log.append( " ContrastBolusIngredientCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ContrastBolusIngredientCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EnhancedContrastBolus success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"EnhancedContrastBolus", "ContrastBolusVolume", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedContrastBolus success after verifying ContrastBolusVolume --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"EnhancedContrastBolus", "ContrastBolusIngredientConcentration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedContrastBolus success after verifying ContrastBolusIngredientConcentration --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"EnhancedContrastBolus", "ContrastBolusIngredientPercentByVolume", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedContrastBolus success after verifying ContrastBolusIngredientPercentByVolume --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"EnhancedContrastBolus", "ContrastBolusIngredientOpaque", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedContrastBolus success after verifying ContrastBolusIngredientOpaque --> "+("success" if partial_success else "failure"))

				if "ContrastBolusIngredientOpaque" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ContrastBolusIngredientOpaque"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedContrastBolus success after verifying string enumerated values ContrastBolusIngredientOpaque --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"EnhancedContrastBolus", 
						"ContrastAdministrationProfileSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedContrastBolus success after verifying ContrastAdministrationProfileSequence" + ("success" if partial_success else "failure")) 
				if "ContrastAdministrationProfileSequence" in ds1:
					ContrastAdministrationProfileSequence_data = ds1.ContrastAdministrationProfileSequence
					if type(ContrastAdministrationProfileSequence_data) == Sequence:
						for i2 in range(0, len(ContrastAdministrationProfileSequence_data)):
							if verbose:
								log.append( " ContrastAdministrationProfileSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ContrastAdministrationProfileSequence_data[i2]
							partial_success =  		verifyType2(ds2, 
									"EnhancedContrastBolus", "ContrastBolusVolume", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " EnhancedContrastBolus success after verifying ContrastBolusVolume --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"EnhancedContrastBolus", "ContrastBolusStartTime", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " EnhancedContrastBolus success after verifying ContrastBolusStartTime --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"EnhancedContrastBolus", "ContrastBolusStopTime", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " EnhancedContrastBolus success after verifying ContrastBolusStopTime --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"EnhancedContrastBolus", "ContrastFlowRate", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " EnhancedContrastBolus success after verifying ContrastFlowRate --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"EnhancedContrastBolus", "ContrastFlowDuration", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " EnhancedContrastBolus success after verifying ContrastFlowDuration --> "+("success" if partial_success else "failure"))

	return global_success

def Module_Cine_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"Cine")

	partial_success =  		verifyType3(ds, 
			"Cine", "PreferredPlaybackSequencing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Cine success after verifying PreferredPlaybackSequencing --> "+("success" if partial_success else "failure"))

	if "PreferredPlaybackSequencing" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PreferredPlaybackSequencing"], 
			BinaryValueDescription_PreferredPlaybackSequencing, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Cine success after verifying binary enumerated values PreferredPlaybackSequencing --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"Cine", "FrameTime", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsFrameTime, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Cine success after verifying FrameTime --> "+("success" if partial_success else "failure"))


	if Condition_MPEG2MPMLTransferSyntaxAndFrameTimeNotNTSCOrPAL(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Must be 33.3 (NTSC) or 40 (PAL) for MPEG MP@MLTransfer Syntax - attribute <FrameTime>")


	if Condition_MPEG2MPHLTransferSyntaxAndFrameTimeNotValid(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Must be 16.17, 20, 33.33, or 40 (PAL) for MPEG MP@HLTransfer Syntax - attribute <FrameTime>")

	partial_success =  		verifyType1C(ds, 
			"Cine", "FrameTimeVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsFrameTimeVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Cine success after verifying FrameTimeVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Cine", "StartTrim", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Cine success after verifying StartTrim --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Cine", "StopTrim", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Cine success after verifying StopTrim --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Cine", "RecommendedDisplayFrameRate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Cine success after verifying RecommendedDisplayFrameRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Cine", "CineRate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Cine success after verifying CineRate --> "+("success" if partial_success else "failure"))


	if Condition_MPEG2MPMLTransferSyntaxAndCineRateNotNTSCOrPAL(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Must be 30 (NTSC) or 25 (PAL) for MPEG MP@MLTransfer Syntax - attribute <CineRate>")


	if Condition_MPEG2MPHLTransferSyntaxAndCineRateNotValid(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Must be 25, 30, 50 or 60 for MPEG MP@HLTransfer Syntax - attribute <CineRate>")


	if Condition_MPEG2MPMLTransferSyntaxAndCineRateInconsistentWithFrameTime(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Must be 30 when FrameTime is 33.3 (NTSC) or 25 when FrameTime is 40 (PAL) for MPEG MP@MLTransfer Syntax - attribute <CineRate>")


	if Condition_MPEG2MPHLTransferSyntaxAndCineRateInconsistentWithFrameTime(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Must be 30 when FrameTime is 33.3, 25 when FrameTime is 40, 60 when FrameTime is 16.17, or 50 when FrameTime is 20 for MPEG MP@HLTransfer Syntax - attribute <CineRate>")

	partial_success =  		verifyType3(ds, 
			"Cine", "FrameDelay", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Cine success after verifying FrameDelay --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Cine", "ImageTriggerDelay", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Cine success after verifying ImageTriggerDelay --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Cine", "EffectiveDuration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Cine success after verifying EffectiveDuration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Cine", "ActualFrameDuration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Cine success after verifying ActualFrameDuration --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"Cine", 
			"MultiplexedAudioChannelsDescriptionCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Cine success after verifying MultiplexedAudioChannelsDescriptionCodeSequence" + ("success" if partial_success else "failure")) 
	if "MultiplexedAudioChannelsDescriptionCodeSequence" in ds:
		MultiplexedAudioChannelsDescriptionCodeSequence_data = ds.MultiplexedAudioChannelsDescriptionCodeSequence
		if type(MultiplexedAudioChannelsDescriptionCodeSequence_data) == Sequence:
			for i1 in range(0, len(MultiplexedAudioChannelsDescriptionCodeSequence_data)):
				if verbose:
					log.append( " MultiplexedAudioChannelsDescriptionCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MultiplexedAudioChannelsDescriptionCodeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"Cine", "ChannelIdentificationCode", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Cine success after verifying ChannelIdentificationCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"Cine", "ChannelMode", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Cine success after verifying ChannelMode --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"Cine", 
						"ChannelSourceSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "Cine success after verifying ChannelSourceSequence" + ("success" if partial_success else "failure")) 
				if "ChannelSourceSequence" in ds1:
					ChannelSourceSequence_data = ds1.ChannelSourceSequence
					if type(ChannelSourceSequence_data) == Sequence:
						for i2 in range(0, len(ChannelSourceSequence_data)):
							if verbose:
								log.append( " ChannelSourceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ChannelSourceSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " Cine success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrame_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrame")

	partial_success =  		verifyType1(ds, 
			"MultiFrame", "NumberOfFrames", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrame success after verifying NumberOfFrames --> "+("success" if partial_success else "failure"))

	if "NumberOfFrames" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["NumberOfFrames"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"MultiFrame", "FrameIncrementPointer", 
			verbose, log, ElementDictionary, 
			Condition_NotSCMultiFrameOrNumberOfFramesGreaterThanOne, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrame success after verifying FrameIncrementPointer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MultiFrame", "StereoPairsPresent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrame success after verifying StereoPairsPresent --> "+("success" if partial_success else "failure"))

	if "StereoPairsPresent" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["StereoPairsPresent"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrame success after verifying string enumerated values StereoPairsPresent --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiFrameFunctionalGroupsCommon_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsCommon")

	partial_success =  		verifyType1(ds, 
			"MultiFrameFunctionalGroupsCommon", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameFunctionalGroupsCommon success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiFrameFunctionalGroupsCommon", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameFunctionalGroupsCommon success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiFrameFunctionalGroupsCommon", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameFunctionalGroupsCommon success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiFrameFunctionalGroupsCommon", "NumberOfFrames", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameFunctionalGroupsCommon success after verifying NumberOfFrames --> "+("success" if partial_success else "failure"))

	if "NumberOfFrames" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["NumberOfFrames"], 
			verbose, log, -1, False)

	partial_success =  		verifyType3(ds, 
			"MultiFrameFunctionalGroupsCommon", "StereoPairsPresent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameFunctionalGroupsCommon success after verifying StereoPairsPresent --> "+("success" if partial_success else "failure"))

	if "StereoPairsPresent" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["StereoPairsPresent"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameFunctionalGroupsCommon success after verifying string enumerated values StereoPairsPresent --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MultiFrameFunctionalGroupsCommon", "ConcatenationFrameOffsetNumber", 
			verbose, log, ElementDictionary, 
			Condition_ConcatenationUIDIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameFunctionalGroupsCommon success after verifying ConcatenationFrameOffsetNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MultiFrameFunctionalGroupsCommon", "RepresentativeFrameNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameFunctionalGroupsCommon success after verifying RepresentativeFrameNumber --> "+("success" if partial_success else "failure"))

	if "RepresentativeFrameNumber" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["RepresentativeFrameNumber"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"MultiFrameFunctionalGroupsCommon", "ConcatenationUID", 
			verbose, log, ElementDictionary, 
			Condition_ConcatenationAttributesArePresentAndTotalNumberIfPresentGreaterThanOne, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameFunctionalGroupsCommon success after verifying ConcatenationUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MultiFrameFunctionalGroupsCommon", "SOPInstanceUIDOfConcatenationSource", 
			verbose, log, ElementDictionary, 
			Condition_ConcatenationUIDIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameFunctionalGroupsCommon success after verifying SOPInstanceUIDOfConcatenationSource --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MultiFrameFunctionalGroupsCommon", "InConcatenationNumber", 
			verbose, log, ElementDictionary, 
			Condition_ConcatenationUIDIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameFunctionalGroupsCommon success after verifying InConcatenationNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MultiFrameFunctionalGroupsCommon", "InConcatenationTotalNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameFunctionalGroupsCommon success after verifying InConcatenationTotalNumber --> "+("success" if partial_success else "failure"))


	if Condition_InConcatenationTotalNumberIsLessThanOrEqualToOne(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Cannot be less than or equal to one since then not a Concatenation - attribute <InConcatenationTotalNumber>")

	return global_success

def Macro_PixelMeasuresMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PixelMeasuresMacro")

	partial_success = verifyType1(ds, 
			"PixelMeasuresMacro", 
			"PixelMeasuresSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PixelMeasuresMacro success after verifying PixelMeasuresSequence" + ("success" if partial_success else "failure")) 
	if "PixelMeasuresSequence" in ds:
		PixelMeasuresSequence_data = ds.PixelMeasuresSequence
		if type(PixelMeasuresSequence_data) == Sequence:
			for i1 in range(0, len(PixelMeasuresSequence_data)):
				if verbose:
					log.append( " PixelMeasuresSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PixelMeasuresSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"PixelMeasuresMacro", "PixelSpacing", 
						verbose, log, ElementDictionary, 
						Condition_PixelSpacingRequiredInPixelMeasures, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PixelMeasuresMacro success after verifying PixelSpacing --> "+("success" if partial_success else "failure"))

				if Condition_PixelSpacingRequiredInPixelMeasures(ds1, parent_ds1, root_ds):
					if "PixelSpacing" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["PixelSpacing"], 
							verbose, log, -1, False)

				partial_success =  		verifyType1C(ds1, 
						"PixelMeasuresMacro", "SliceThickness", 
						verbose, log, ElementDictionary, 
						Condition_SliceThicknessRequiredInPixelMeasures, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PixelMeasuresMacro success after verifying SliceThickness --> "+("success" if partial_success else "failure"))

				if Condition_SliceThicknessRequiredInPixelMeasures(ds1, parent_ds1, root_ds):
					if "SliceThickness" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["SliceThickness"], 
							verbose, log, -1, False)

				partial_success =  		verifyType1C(ds1, 
						"PixelMeasuresMacro", "SpacingBetweenSlices", 
						verbose, log, ElementDictionary, 
						Condition_DimensionOrganizationTypeIsTILED_FULLAndTotalPixelMatrixFocalPlanesGreaterThanOne, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PixelMeasuresMacro success after verifying SpacingBetweenSlices --> "+("success" if partial_success else "failure"))

				if Condition_DimensionOrganizationTypeIsTILED_FULLAndTotalPixelMatrixFocalPlanesGreaterThanOne(ds1, parent_ds1, root_ds):
					if "SpacingBetweenSlices" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["SpacingBetweenSlices"], 
							verbose, log, -1, False)

	return global_success

def Macro_FrameContentMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"FrameContentMacro")

	partial_success = verifyType1(ds, 
			"FrameContentMacro", 
			"FrameContentSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "FrameContentMacro success after verifying FrameContentSequence" + ("success" if partial_success else "failure")) 
	if "FrameContentSequence" in ds:
		FrameContentSequence_data = ds.FrameContentSequence
		if type(FrameContentSequence_data) == Sequence:
			for i1 in range(0, len(FrameContentSequence_data)):
				if verbose:
					log.append( " FrameContentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FrameContentSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"FrameContentMacro", "FrameAcquisitionNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying FrameAcquisitionNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"FrameContentMacro", "FrameReferenceDateTime", 
						verbose, log, ElementDictionary, 
						Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedOrWholeSlide, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying FrameReferenceDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"FrameContentMacro", "FrameAcquisitionDateTime", 
						verbose, log, ElementDictionary, 
						Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedOrWholeSlide, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying FrameAcquisitionDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"FrameContentMacro", "FrameAcquisitionDuration", 
						verbose, log, ElementDictionary, 
						Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedOrWholeSlide, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying FrameAcquisitionDuration --> "+("success" if partial_success else "failure"))

				if Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedOrWholeSlide(ds1, parent_ds1, root_ds):
					if "FrameAcquisitionDuration" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["FrameAcquisitionDuration"], 
							verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"FrameContentMacro", "CardiacCyclePosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying CardiacCyclePosition --> "+("success" if partial_success else "failure"))

				if "CardiacCyclePosition" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["CardiacCyclePosition"], 
						StringValueTable_CardiacCyclePosition, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying string defined terms CardiacCyclePosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"FrameContentMacro", "RespiratoryCyclePosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying RespiratoryCyclePosition --> "+("success" if partial_success else "failure"))

				if "RespiratoryCyclePosition" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["RespiratoryCyclePosition"], 
						StringValueTable_RespiratoryCyclePosition, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying string defined terms RespiratoryCyclePosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"FrameContentMacro", "DimensionIndexValues", 
						verbose, log, ElementDictionary, 
						Condition_DimensionIndexSequencePresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying DimensionIndexValues --> "+("success" if partial_success else "failure"))


				if Condition_DimensionIndexValuesContainsZero(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" Must start from one, not zero - attribute <DimensionIndexValues>")

				partial_success =  		verifyType1C(ds1, 
						"FrameContentMacro", "TemporalPositionIndex", 
						verbose, log, ElementDictionary, 
						Condition_EnhancedPETImageInstance, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying TemporalPositionIndex --> "+("success" if partial_success else "failure"))


				if Condition_TemporalPositionIndexIsZero(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" Must start from one, not zero - attribute <TemporalPositionIndex>")

				partial_success =  		verifyType1C(ds1, 
						"FrameContentMacro", "StackID", 
						verbose, log, ElementDictionary, 
						Condition_EnhancedPETImageInstance, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying StackID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"FrameContentMacro", "InStackPositionNumber", 
						verbose, log, ElementDictionary, 
						Condition_StackIDIsPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying InStackPositionNumber --> "+("success" if partial_success else "failure"))


				if Condition_InStackPositionNumberIsZero(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" Must start from one, not zero - attribute <InStackPositionNumber>")

				partial_success =  		verifyType3(ds1, 
						"FrameContentMacro", "FrameComments", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying FrameComments --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"FrameContentMacro", "FrameLabel", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameContentMacro success after verifying FrameLabel --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PlanePositionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PlanePositionMacro")

	partial_success = verifyType1(ds, 
			"PlanePositionMacro", 
			"PlanePositionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PlanePositionMacro success after verifying PlanePositionSequence" + ("success" if partial_success else "failure")) 
	if "PlanePositionSequence" in ds:
		PlanePositionSequence_data = ds.PlanePositionSequence
		if type(PlanePositionSequence_data) == Sequence:
			for i1 in range(0, len(PlanePositionSequence_data)):
				if verbose:
					log.append( " PlanePositionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PlanePositionSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"PlanePositionMacro", "ImagePositionPatient", 
						verbose, log, ElementDictionary, 
						Condition_ImagePositionPatientNotPresentInEitherSharedOrPerFrameFunctionalGroupsAndEitherFrameTypeIsOriginalAndVolumetricPropertiesIsNotDistortedOrSegmentationWithFrameOfReference, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PlanePositionMacro success after verifying ImagePositionPatient --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PlaneOrientationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PlaneOrientationMacro")

	partial_success = verifyType1(ds, 
			"PlaneOrientationMacro", 
			"PlaneOrientationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PlaneOrientationMacro success after verifying PlaneOrientationSequence" + ("success" if partial_success else "failure")) 
	if "PlaneOrientationSequence" in ds:
		PlaneOrientationSequence_data = ds.PlaneOrientationSequence
		if type(PlaneOrientationSequence_data) == Sequence:
			for i1 in range(0, len(PlaneOrientationSequence_data)):
				if verbose:
					log.append( " PlaneOrientationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PlaneOrientationSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"PlaneOrientationMacro", "ImageOrientationPatient", 
						verbose, log, ElementDictionary, 
						Condition_ImageOrientationPatientNotPresentInEitherSharedOrPerFrameFunctionalGroupsAndEitherFrameTypeIsOriginalAndVolumetricPropertiesIsNotDistortedOrSegmentationWithFrameOfReference, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PlaneOrientationMacro success after verifying ImageOrientationPatient --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_ReferencedImageMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ReferencedImageMacro")

	partial_success = verifyType2(ds, 
			"ReferencedImageMacro", 
			"ReferencedImageSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ReferencedImageMacro success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageSequence" in ds:
		ReferencedImageSequence_data = ds.ReferencedImageSequence
		if type(ReferencedImageSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageSequence_data)):
				if verbose:
					log.append( " ReferencedImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ReferencedImageMacro success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"ReferencedImageMacro", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
						Condition_NotLegacyConvertedCTOrMROrPET, 
						True, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "ReferencedImageMacro success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " ReferencedImageMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_DerivationImageMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"DerivationImageMacro")

	partial_success = verifyType2(ds, 
			"DerivationImageMacro", 
			"DerivationImageSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DerivationImageMacro success after verifying DerivationImageSequence" + ("success" if partial_success else "failure")) 
	if "DerivationImageSequence" in ds:
		DerivationImageSequence_data = ds.DerivationImageSequence
		if type(DerivationImageSequence_data) == Sequence:
			for i1 in range(0, len(DerivationImageSequence_data)):
				if verbose:
					log.append( " DerivationImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DerivationImageSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"DerivationImageMacro", "DerivationDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DerivationImageMacro success after verifying DerivationDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"DerivationImageMacro", 
						"DerivationCodeSequence", 
						verbose, log, ElementDictionary, 
						Condition_NotLegacyConvertedCTOrMROrPET, 
						True, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "DerivationImageMacro success after verifying DerivationCodeSequence" + ("success" if partial_success else "failure")) 
				if "DerivationCodeSequence" in ds1:
					DerivationCodeSequence_data = ds1.DerivationCodeSequence
					if type(DerivationCodeSequence_data) == Sequence:
						for i2 in range(0, len(DerivationCodeSequence_data)):
							if verbose:
								log.append( " DerivationCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = DerivationCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " DerivationImageMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType2(ds1, 
						"DerivationImageMacro", 
						"SourceImageSequence", 
						verbose, log, ElementDictionary, 
									0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "DerivationImageMacro success after verifying SourceImageSequence" + ("success" if partial_success else "failure")) 
				if "SourceImageSequence" in ds1:
					SourceImageSequence_data = ds1.SourceImageSequence
					if type(SourceImageSequence_data) == Sequence:
						for i2 in range(0, len(SourceImageSequence_data)):
							if verbose:
								log.append( " SourceImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SourceImageSequence_data[i2]
							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " DerivationImageMacro success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1C(ds2, 
									"DerivationImageMacro", 
									"PurposeOfReferenceCodeSequence", 
									verbose, log, ElementDictionary, 
									Condition_NotLegacyConvertedCTOrMROrPET, 
									True, 
									parent_ds2, root_ds2, 
									1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "DerivationImageMacro success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
							if "PurposeOfReferenceCodeSequence" in ds2:
								PurposeOfReferenceCodeSequence_data = ds2.PurposeOfReferenceCodeSequence
								if type(PurposeOfReferenceCodeSequence_data) == Sequence:
									for i3 in range(0, len(PurposeOfReferenceCodeSequence_data)):
										if verbose:
											log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = PurposeOfReferenceCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " DerivationImageMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_CardiacSynchronizationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CardiacSynchronizationMacro")

	partial_success = verifyType1(ds, 
			"CardiacSynchronizationMacro", 
			"CardiacSynchronizationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CardiacSynchronizationMacro success after verifying CardiacSynchronizationSequence" + ("success" if partial_success else "failure")) 
	if "CardiacSynchronizationSequence" in ds:
		CardiacSynchronizationSequence_data = ds.CardiacSynchronizationSequence
		if type(CardiacSynchronizationSequence_data) == Sequence:
			for i1 in range(0, len(CardiacSynchronizationSequence_data)):
				if verbose:
					log.append( " CardiacSynchronizationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CardiacSynchronizationSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"CardiacSynchronizationMacro", "NominalPercentageOfCardiacPhase", 
						verbose, log, ElementDictionary, 
						0, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CardiacSynchronizationMacro success after verifying NominalPercentageOfCardiacPhase --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"CardiacSynchronizationMacro", "NominalCardiacTriggerDelayTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CardiacSynchronizationMacro success after verifying NominalCardiacTriggerDelayTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CardiacSynchronizationMacro", "ActualCardiacTriggerDelayTime", 
						verbose, log, ElementDictionary, 
						Condition_SingleCardiacIntervalAcquired, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CardiacSynchronizationMacro success after verifying ActualCardiacTriggerDelayTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"CardiacSynchronizationMacro", "IntervalsAcquired", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CardiacSynchronizationMacro success after verifying IntervalsAcquired --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"CardiacSynchronizationMacro", "IntervalsRejected", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CardiacSynchronizationMacro success after verifying IntervalsRejected --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"CardiacSynchronizationMacro", "HeartRate", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CardiacSynchronizationMacro success after verifying HeartRate --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CardiacSynchronizationMacro", "RRIntervalTimeNominal", 
						verbose, log, ElementDictionary, 
						Condition_CardiacSynchronizationTechniqueOtherThanNoneOrRealTime, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CardiacSynchronizationMacro success after verifying RRIntervalTimeNominal --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"CardiacSynchronizationMacro", "LowRRValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CardiacSynchronizationMacro success after verifying LowRRValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"CardiacSynchronizationMacro", "HighRRValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CardiacSynchronizationMacro success after verifying HighRRValue --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_FrameAnatomyMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"FrameAnatomyMacro")

	partial_success = verifyType1(ds, 
			"FrameAnatomyMacro", 
			"FrameAnatomySequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "FrameAnatomyMacro success after verifying FrameAnatomySequence" + ("success" if partial_success else "failure")) 
	if "FrameAnatomySequence" in ds:
		FrameAnatomySequence_data = ds.FrameAnatomySequence
		if type(FrameAnatomySequence_data) == Sequence:
			for i1 in range(0, len(FrameAnatomySequence_data)):
				if verbose:
					log.append( " FrameAnatomySequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FrameAnatomySequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"FrameAnatomyMacro", "FrameLaterality", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameAnatomyMacro success after verifying FrameLaterality --> "+("success" if partial_success else "failure"))

				if "FrameLaterality" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameLaterality"], 
						StringValueTable_ImageLaterality, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameAnatomyMacro success after verifying string enumerated values FrameLaterality --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_GeneralAnatomyMandatoryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " FrameAnatomyMacro success after verifying GeneralAnatomyMandatoryMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_PixelValueTransformationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PixelValueTransformationMacro")

	partial_success = verifyType1(ds, 
			"PixelValueTransformationMacro", 
			"PixelValueTransformationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PixelValueTransformationMacro success after verifying PixelValueTransformationSequence" + ("success" if partial_success else "failure")) 
	if "PixelValueTransformationSequence" in ds:
		PixelValueTransformationSequence_data = ds.PixelValueTransformationSequence
		if type(PixelValueTransformationSequence_data) == Sequence:
			for i1 in range(0, len(PixelValueTransformationSequence_data)):
				if verbose:
					log.append( " PixelValueTransformationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PixelValueTransformationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PixelValueTransformationMacro", "RescaleIntercept", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PixelValueTransformationMacro success after verifying RescaleIntercept --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PixelValueTransformationMacro", "RescaleSlope", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PixelValueTransformationMacro success after verifying RescaleSlope --> "+("success" if partial_success else "failure"))

				if "RescaleSlope" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["RescaleSlope"], 
						verbose, log, -1, False)

				partial_success =  		verifyType1(ds1, 
						"PixelValueTransformationMacro", "RescaleType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PixelValueTransformationMacro success after verifying RescaleType --> "+("success" if partial_success else "failure"))


				if Condition_ModalityIsMROrPET(ds1, parent_ds1, root_ds):
					if "RescaleType" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["RescaleType"], 
							StringValueTable_RescaleTypeUnspecified, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " PixelValueTransformationMacro success after verifying string defined terms RescaleType --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_FrameVOILUTMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"FrameVOILUTMacro")

	partial_success = verifyType1(ds, 
			"FrameVOILUTMacro", 
			"FrameVOILUTSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "FrameVOILUTMacro success after verifying FrameVOILUTSequence" + ("success" if partial_success else "failure")) 
	if "FrameVOILUTSequence" in ds:
		FrameVOILUTSequence_data = ds.FrameVOILUTSequence
		if type(FrameVOILUTSequence_data) == Sequence:
			for i1 in range(0, len(FrameVOILUTSequence_data)):
				if verbose:
					log.append( " FrameVOILUTSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FrameVOILUTSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"FrameVOILUTMacro", "WindowCenter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameVOILUTMacro success after verifying WindowCenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"FrameVOILUTMacro", "WindowWidth", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameVOILUTMacro success after verifying WindowWidth --> "+("success" if partial_success else "failure"))

				if "WindowWidth" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["WindowWidth"], 
						verbose, log, -1, False)


				if Condition_WindowWidthIsNegative(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" Not permitted to be negative - attribute <WindowWidth>"+\
							" = <{}>".format( tag_for_keyword("WindowWidth")))

				partial_success =  		verifyType3(ds1, 
						"FrameVOILUTMacro", "WindowCenterWidthExplanation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameVOILUTMacro success after verifying WindowCenterWidthExplanation --> "+("success" if partial_success else "failure"))


				if Condition_ModalityIsCT(ds1, parent_ds1, root_ds):
					if "WindowCenterWidthExplanation" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["WindowCenterWidthExplanation"], 
							StringValueTable_EnhancedCTWindowCenterWidthExplanation, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameVOILUTMacro success after verifying string defined terms WindowCenterWidthExplanation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"FrameVOILUTMacro", "VOILUTFunction", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameVOILUTMacro success after verifying VOILUTFunction --> "+("success" if partial_success else "failure"))

				if "VOILUTFunction" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["VOILUTFunction"], 
						StringValueTable_VOILUTFunction, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameVOILUTMacro success after verifying string defined terms VOILUTFunction --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_RealWorldValueMappingMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"RealWorldValueMappingMacro")

	partial_success = verifyType1(ds, 
			"RealWorldValueMappingMacro", 
			"RealWorldValueMappingSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RealWorldValueMappingMacro success after verifying RealWorldValueMappingSequence" + ("success" if partial_success else "failure")) 
	if "RealWorldValueMappingSequence" in ds:
		RealWorldValueMappingSequence_data = ds.RealWorldValueMappingSequence
		if type(RealWorldValueMappingSequence_data) == Sequence:
			for i1 in range(0, len(RealWorldValueMappingSequence_data)):
				if verbose:
					log.append( " RealWorldValueMappingSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RealWorldValueMappingSequence_data[i1]
				partial_success =  Macro_RealWorldValueMappingItemMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RealWorldValueMappingMacro success after verifying RealWorldValueMappingItemMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_RealWorldValueMappingItemMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"RealWorldValueMappingItemMacro")

	partial_success =  		verifyType1C(ds, 
			"RealWorldValueMappingItemMacro", "RealWorldValueFirstValueMapped", 
			verbose, log, ElementDictionary, 
			Condition_NeedRealWorldValueFirstValueMapped, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingItemMacro success after verifying RealWorldValueFirstValueMapped --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RealWorldValueMappingItemMacro", "RealWorldValueLastValueMapped", 
			verbose, log, ElementDictionary, 
			Condition_NeedRealWorldValueLastValueMapped, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingItemMacro success after verifying RealWorldValueLastValueMapped --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RealWorldValueMappingItemMacro", "DoubleFloatRealWorldValueFirstValueMapped", 
			verbose, log, ElementDictionary, 
			Condition_NeedDoubleFloatRealWorldValueFirstValueMapped, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingItemMacro success after verifying DoubleFloatRealWorldValueFirstValueMapped --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RealWorldValueMappingItemMacro", "DoubleFloatRealWorldValueLastValueMapped", 
			verbose, log, ElementDictionary, 
			Condition_NeedDoubleFloatRealWorldValueLastValueMapped, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingItemMacro success after verifying DoubleFloatRealWorldValueLastValueMapped --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RealWorldValueMappingItemMacro", "RealWorldValueIntercept", 
			verbose, log, ElementDictionary, 
			Condition_NeedRealWorldValueSlopeAndIntercept, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingItemMacro success after verifying RealWorldValueIntercept --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RealWorldValueMappingItemMacro", "RealWorldValueSlope", 
			verbose, log, ElementDictionary, 
			Condition_NeedRealWorldValueSlopeAndIntercept, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingItemMacro success after verifying RealWorldValueSlope --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RealWorldValueMappingItemMacro", "RealWorldValueLUTData", 
			verbose, log, ElementDictionary, 
			Condition_RealWorldValueInterceptNotPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingItemMacro success after verifying RealWorldValueLUTData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RealWorldValueMappingItemMacro", "LUTExplanation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingItemMacro success after verifying LUTExplanation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RealWorldValueMappingItemMacro", "LUTLabel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingItemMacro success after verifying LUTLabel --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"RealWorldValueMappingItemMacro", 
			"MeasurementUnitsCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RealWorldValueMappingItemMacro success after verifying MeasurementUnitsCodeSequence" + ("success" if partial_success else "failure")) 
	if "MeasurementUnitsCodeSequence" in ds:
		MeasurementUnitsCodeSequence_data = ds.MeasurementUnitsCodeSequence
		if type(MeasurementUnitsCodeSequence_data) == Sequence:
			for i1 in range(0, len(MeasurementUnitsCodeSequence_data)):
				if verbose:
					log.append( " MeasurementUnitsCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MeasurementUnitsCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RealWorldValueMappingItemMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"RealWorldValueMappingItemMacro", 
			"QuantityDefinitionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RealWorldValueMappingItemMacro success after verifying QuantityDefinitionSequence" + ("success" if partial_success else "failure")) 
	if "QuantityDefinitionSequence" in ds:
		QuantityDefinitionSequence_data = ds.QuantityDefinitionSequence
		if type(QuantityDefinitionSequence_data) == Sequence:
			for i1 in range(0, len(QuantityDefinitionSequence_data)):
				if verbose:
					log.append( " QuantityDefinitionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = QuantityDefinitionSequence_data[i1]
				partial_success =  Macro_ContentItemMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RealWorldValueMappingItemMacro success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_ContrastBolusUsageMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ContrastBolusUsageMacro")

	partial_success = verifyType1(ds, 
			"ContrastBolusUsageMacro", 
			"ContrastBolusUsageSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ContrastBolusUsageMacro success after verifying ContrastBolusUsageSequence" + ("success" if partial_success else "failure")) 
	if "ContrastBolusUsageSequence" in ds:
		ContrastBolusUsageSequence_data = ds.ContrastBolusUsageSequence
		if type(ContrastBolusUsageSequence_data) == Sequence:
			for i1 in range(0, len(ContrastBolusUsageSequence_data)):
				if verbose:
					log.append( " ContrastBolusUsageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContrastBolusUsageSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"ContrastBolusUsageMacro", "ContrastBolusAgentNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContrastBolusUsageMacro success after verifying ContrastBolusAgentNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"ContrastBolusUsageMacro", "ContrastBolusAgentAdministered", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContrastBolusUsageMacro success after verifying ContrastBolusAgentAdministered --> "+("success" if partial_success else "failure"))

				if "ContrastBolusAgentAdministered" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ContrastBolusAgentAdministered"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContrastBolusUsageMacro success after verifying string enumerated values ContrastBolusAgentAdministered --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"ContrastBolusUsageMacro", "ContrastBolusAgentDetected", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContrastBolusUsageMacro success after verifying ContrastBolusAgentDetected --> "+("success" if partial_success else "failure"))

				if "ContrastBolusAgentDetected" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ContrastBolusAgentDetected"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContrastBolusUsageMacro success after verifying string enumerated values ContrastBolusAgentDetected --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"ContrastBolusUsageMacro", "ContrastBolusAgentPhase", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContrastBolusUsageMacro success after verifying ContrastBolusAgentPhase --> "+("success" if partial_success else "failure"))

				if "ContrastBolusAgentPhase" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ContrastBolusAgentPhase"], 
						StringValueTable_ContrastBolusAgentPhase, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContrastBolusUsageMacro success after verifying string defined terms ContrastBolusAgentPhase --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PixelIntensityRelationshipLUTMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PixelIntensityRelationshipLUTMacro")

	partial_success = verifyType1(ds, 
			"PixelIntensityRelationshipLUTMacro", 
			"PixelIntensityRelationshipLUTSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PixelIntensityRelationshipLUTMacro success after verifying PixelIntensityRelationshipLUTSequence" + ("success" if partial_success else "failure")) 
	if "PixelIntensityRelationshipLUTSequence" in ds:
		PixelIntensityRelationshipLUTSequence_data = ds.PixelIntensityRelationshipLUTSequence
		if type(PixelIntensityRelationshipLUTSequence_data) == Sequence:
			for i1 in range(0, len(PixelIntensityRelationshipLUTSequence_data)):
				if verbose:
					log.append( " PixelIntensityRelationshipLUTSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PixelIntensityRelationshipLUTSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PixelIntensityRelationshipLUTMacro", "LUTDescriptor", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PixelIntensityRelationshipLUTMacro success after verifying LUTDescriptor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PixelIntensityRelationshipLUTMacro", "LUTData", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PixelIntensityRelationshipLUTMacro success after verifying LUTData --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PixelIntensityRelationshipLUTMacro", "LUTFunction", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PixelIntensityRelationshipLUTMacro success after verifying LUTFunction --> "+("success" if partial_success else "failure"))

				if "LUTFunction" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["LUTFunction"], 
						StringValueTable_PixelIntensityRelationshipLUTFunction, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PixelIntensityRelationshipLUTMacro success after verifying string enumerated values LUTFunction --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_FramePixelShiftMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"FramePixelShiftMacro")

	partial_success = verifyType1(ds, 
			"FramePixelShiftMacro", 
			"FramePixelShiftSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "FramePixelShiftMacro success after verifying FramePixelShiftSequence" + ("success" if partial_success else "failure")) 
	if "FramePixelShiftSequence" in ds:
		FramePixelShiftSequence_data = ds.FramePixelShiftSequence
		if type(FramePixelShiftSequence_data) == Sequence:
			for i1 in range(0, len(FramePixelShiftSequence_data)):
				if verbose:
					log.append( " FramePixelShiftSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FramePixelShiftSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"FramePixelShiftMacro", "SubtractionItemID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FramePixelShiftMacro success after verifying SubtractionItemID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"FramePixelShiftMacro", "MaskSubPixelShift", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FramePixelShiftMacro success after verifying MaskSubPixelShift --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PatientOrientationInFrameMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PatientOrientationInFrameMacro")

	partial_success = verifyType1(ds, 
			"PatientOrientationInFrameMacro", 
			"PatientOrientationInFrameSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PatientOrientationInFrameMacro success after verifying PatientOrientationInFrameSequence" + ("success" if partial_success else "failure")) 
	if "PatientOrientationInFrameSequence" in ds:
		PatientOrientationInFrameSequence_data = ds.PatientOrientationInFrameSequence
		if type(PatientOrientationInFrameSequence_data) == Sequence:
			for i1 in range(0, len(PatientOrientationInFrameSequence_data)):
				if verbose:
					log.append( " PatientOrientationInFrameSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientOrientationInFrameSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PatientOrientationInFrameMacro", "PatientOrientation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PatientOrientationInFrameMacro success after verifying PatientOrientation --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_FrameDisplayShutterMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"FrameDisplayShutterMacro")

	partial_success = verifyType1(ds, 
			"FrameDisplayShutterMacro", 
			"FrameDisplayShutterSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "FrameDisplayShutterMacro success after verifying FrameDisplayShutterSequence" + ("success" if partial_success else "failure")) 
	if "FrameDisplayShutterSequence" in ds:
		FrameDisplayShutterSequence_data = ds.FrameDisplayShutterSequence
		if type(FrameDisplayShutterSequence_data) == Sequence:
			for i1 in range(0, len(FrameDisplayShutterSequence_data)):
				if verbose:
					log.append( " FrameDisplayShutterSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FrameDisplayShutterSequence_data[i1]
				partial_success =  Macro_DisplayShutterMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " FrameDisplayShutterMacro success after verifying DisplayShutterMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_RespiratorySynchronizationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"RespiratorySynchronizationMacro")

	partial_success = verifyType1(ds, 
			"RespiratorySynchronizationMacro", 
			"RespiratorySynchronizationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RespiratorySynchronizationMacro success after verifying RespiratorySynchronizationSequence" + ("success" if partial_success else "failure")) 
	if "RespiratorySynchronizationSequence" in ds:
		RespiratorySynchronizationSequence_data = ds.RespiratorySynchronizationSequence
		if type(RespiratorySynchronizationSequence_data) == Sequence:
			for i1 in range(0, len(RespiratorySynchronizationSequence_data)):
				if verbose:
					log.append( " RespiratorySynchronizationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RespiratorySynchronizationSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"RespiratorySynchronizationMacro", "RespiratoryIntervalTime", 
						verbose, log, ElementDictionary, 
						Condition_NeedRespiratoryIntervalTime, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RespiratorySynchronizationMacro success after verifying RespiratoryIntervalTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RespiratorySynchronizationMacro", "NominalPercentageOfRespiratoryPhase", 
						verbose, log, ElementDictionary, 
						0, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RespiratorySynchronizationMacro success after verifying NominalPercentageOfRespiratoryPhase --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RespiratorySynchronizationMacro", "NominalRespiratoryTriggerDelayTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RespiratorySynchronizationMacro success after verifying NominalRespiratoryTriggerDelayTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RespiratorySynchronizationMacro", "ActualRespiratoryTriggerDelayTime", 
						verbose, log, ElementDictionary, 
						Condition_RespiratoryTriggerTypeTimeOrBoth, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RespiratorySynchronizationMacro success after verifying ActualRespiratoryTriggerDelayTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RespiratorySynchronizationMacro", "StartingRespiratoryAmplitude", 
						verbose, log, ElementDictionary, 
						Condition_RespiratoryTriggerTypeAmplitudeOrBoth, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RespiratorySynchronizationMacro success after verifying StartingRespiratoryAmplitude --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RespiratorySynchronizationMacro", "StartingRespiratoryPhase", 
						verbose, log, ElementDictionary, 
						Condition_StartingRespiratoryAmplitudeIsPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RespiratorySynchronizationMacro success after verifying StartingRespiratoryPhase --> "+("success" if partial_success else "failure"))

				if Condition_StartingRespiratoryAmplitudeIsPresent(ds1, parent_ds1, root_ds):
					if "StartingRespiratoryPhase" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["StartingRespiratoryPhase"], 
							StringValueTable_RespiratoryPhase, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " RespiratorySynchronizationMacro success after verifying string enumerated values StartingRespiratoryPhase --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RespiratorySynchronizationMacro", "EndingRespiratoryAmplitude", 
						verbose, log, ElementDictionary, 
						Condition_RespiratoryTriggerTypeAmplitudeOrBoth, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RespiratorySynchronizationMacro success after verifying EndingRespiratoryAmplitude --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RespiratorySynchronizationMacro", "EndingRespiratoryPhase", 
						verbose, log, ElementDictionary, 
						Condition_EndingRespiratoryAmplitudeIsPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RespiratorySynchronizationMacro success after verifying EndingRespiratoryPhase --> "+("success" if partial_success else "failure"))

				if Condition_EndingRespiratoryAmplitudeIsPresent(ds1, parent_ds1, root_ds):
					if "EndingRespiratoryPhase" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["EndingRespiratoryPhase"], 
							StringValueTable_RespiratoryPhase, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " RespiratorySynchronizationMacro success after verifying string enumerated values EndingRespiratoryPhase --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_IrradiationEventIdentificationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"IrradiationEventIdentificationMacro")

	partial_success = verifyType1(ds, 
			"IrradiationEventIdentificationMacro", 
			"IrradiationEventIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IrradiationEventIdentificationMacro success after verifying IrradiationEventIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "IrradiationEventIdentificationSequence" in ds:
		IrradiationEventIdentificationSequence_data = ds.IrradiationEventIdentificationSequence
		if type(IrradiationEventIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(IrradiationEventIdentificationSequence_data)):
				if verbose:
					log.append( " IrradiationEventIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IrradiationEventIdentificationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IrradiationEventIdentificationMacro", "IrradiationEventUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IrradiationEventIdentificationMacro success after verifying IrradiationEventUID --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_RadiopharmaceuticalUsageMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"RadiopharmaceuticalUsageMacro")

	partial_success = verifyType1(ds, 
			"RadiopharmaceuticalUsageMacro", 
			"RadiopharmaceuticalUsageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RadiopharmaceuticalUsageMacro success after verifying RadiopharmaceuticalUsageSequence" + ("success" if partial_success else "failure")) 
	if "RadiopharmaceuticalUsageSequence" in ds:
		RadiopharmaceuticalUsageSequence_data = ds.RadiopharmaceuticalUsageSequence
		if type(RadiopharmaceuticalUsageSequence_data) == Sequence:
			for i1 in range(0, len(RadiopharmaceuticalUsageSequence_data)):
				if verbose:
					log.append( " RadiopharmaceuticalUsageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RadiopharmaceuticalUsageSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RadiopharmaceuticalUsageMacro", "RadiopharmaceuticalAgentNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RadiopharmaceuticalUsageMacro success after verifying RadiopharmaceuticalAgentNumber --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PatientPhysiologicalStateMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PatientPhysiologicalStateMacro")

	partial_success = verifyType1(ds, 
			"PatientPhysiologicalStateMacro", 
			"PatientPhysiologicalStateSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PatientPhysiologicalStateMacro success after verifying PatientPhysiologicalStateSequence" + ("success" if partial_success else "failure")) 
	if "PatientPhysiologicalStateSequence" in ds:
		PatientPhysiologicalStateSequence_data = ds.PatientPhysiologicalStateSequence
		if type(PatientPhysiologicalStateSequence_data) == Sequence:
			for i1 in range(0, len(PatientPhysiologicalStateSequence_data)):
				if verbose:
					log.append( " PatientPhysiologicalStateSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientPhysiologicalStateSequence_data[i1]
				partial_success = verifyType1(ds1, 
						"PatientPhysiologicalStateMacro", 
						"PatientPhysiologicalStateCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "PatientPhysiologicalStateMacro success after verifying PatientPhysiologicalStateCodeSequence" + ("success" if partial_success else "failure")) 
				if "PatientPhysiologicalStateCodeSequence" in ds1:
					PatientPhysiologicalStateCodeSequence_data = ds1.PatientPhysiologicalStateCodeSequence
					if type(PatientPhysiologicalStateCodeSequence_data) == Sequence:
						for i2 in range(0, len(PatientPhysiologicalStateCodeSequence_data)):
							if verbose:
								log.append( " PatientPhysiologicalStateCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PatientPhysiologicalStateCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " PatientPhysiologicalStateMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameDimension_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameDimension")

	partial_success = verifyType1(ds, 
			"MultiFrameDimension", 
			"DimensionOrganizationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameDimension success after verifying DimensionOrganizationSequence" + ("success" if partial_success else "failure")) 
	if "DimensionOrganizationSequence" in ds:
		DimensionOrganizationSequence_data = ds.DimensionOrganizationSequence
		if type(DimensionOrganizationSequence_data) == Sequence:
			for i1 in range(0, len(DimensionOrganizationSequence_data)):
				if verbose:
					log.append( " DimensionOrganizationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DimensionOrganizationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MultiFrameDimension", "DimensionOrganizationUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiFrameDimension success after verifying DimensionOrganizationUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MultiFrameDimension", "DimensionOrganizationType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameDimension success after verifying DimensionOrganizationType --> "+("success" if partial_success else "failure"))

	if "DimensionOrganizationType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["DimensionOrganizationType"], 
			StringValueTable_DimensionOrganizationType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameDimension success after verifying string defined terms DimensionOrganizationType --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"MultiFrameDimension", 
			"DimensionIndexSequence", 
			verbose, log, ElementDictionary, 
			Condition_DimensionOrganizationTypeIsNotTILED_FULL, 
			True, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameDimension success after verifying DimensionIndexSequence" + ("success" if partial_success else "failure")) 
	if "DimensionIndexSequence" in ds:
		DimensionIndexSequence_data = ds.DimensionIndexSequence
		if type(DimensionIndexSequence_data) == Sequence:
			for i1 in range(0, len(DimensionIndexSequence_data)):
				if verbose:
					log.append( " DimensionIndexSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DimensionIndexSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MultiFrameDimension", "DimensionIndexPointer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiFrameDimension success after verifying DimensionIndexPointer --> "+("success" if partial_success else "failure"))


				if Condition_DimensionIndexPointerIsFrameContentSequence(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" May not be FrameContentSequence - attribute <DimensionIndexPointer>")


				if Condition_DimensionIndexPointerIsDimensionIndexValues(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" May not be DimensionIndexValues - attribute <DimensionIndexPointer>")

				partial_success =  		verifyType1C(ds1, 
						"MultiFrameDimension", "DimensionIndexPrivateCreator", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiFrameDimension success after verifying DimensionIndexPrivateCreator --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MultiFrameDimension", "FunctionalGroupPointer", 
						verbose, log, ElementDictionary, 
						Condition_DimensionIndexPointerIsNotFunctionalGroup, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiFrameDimension success after verifying FunctionalGroupPointer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MultiFrameDimension", "FunctionalGroupPrivateCreator", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiFrameDimension success after verifying FunctionalGroupPrivateCreator --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MultiFrameDimension", "DimensionOrganizationUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiFrameDimension success after verifying DimensionOrganizationUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"MultiFrameDimension", "DimensionDescriptionLabel", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiFrameDimension success after verifying DimensionDescriptionLabel --> "+("success" if partial_success else "failure"))

	return global_success

def Module_CardiacSynchronization_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"CardiacSynchronization")

	partial_success =  		verifyType1C(ds, 
			"CardiacSynchronization", "CardiacSynchronizationTechnique", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying CardiacSynchronizationTechnique --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "CardiacSynchronizationTechnique" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["CardiacSynchronizationTechnique"], 
				StringValueTable_CardiacSynchronizationTechnique, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying string enumerated values CardiacSynchronizationTechnique --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"CardiacSynchronization", "CardiacSignalSource", 
			verbose, log, ElementDictionary, 
			Condition_CardiacSynchronizationTechniqueNotNoneAndOriginalOrMixed, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying CardiacSignalSource --> "+("success" if partial_success else "failure"))

	if Condition_CardiacSynchronizationTechniqueNotNoneAndOriginalOrMixed(ds, parent_ds, root_ds):
		if "CardiacSignalSource" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["CardiacSignalSource"], 
				StringValueTable_CardiacSignalSource, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying string defined terms CardiacSignalSource --> "+("success" if partial_success else "failure"))


	if Condition_CardiacSignalSourcePresentAndCardiacSynchronizationTechniqueIsNone(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when CardiacSynchronizationTechnique is NONE - attribute <CardiacSignalSource>")

	partial_success =  		verifyType1C(ds, 
			"CardiacSynchronization", "CardiacRRIntervalSpecified", 
			verbose, log, ElementDictionary, 
			Condition_CardiacSynchronizationTechniqueNotNoneAndOriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying CardiacRRIntervalSpecified --> "+("success" if partial_success else "failure"))


	if Condition_CardiacRRIntervalSpecifiedPresentAndCardiacSynchronizationTechniqueIsNone(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when CardiacSynchronizationTechnique is NONE - attribute <CardiacRRIntervalSpecified>")

	partial_success =  		verifyType1C(ds, 
			"CardiacSynchronization", "CardiacBeatRejectionTechnique", 
			verbose, log, ElementDictionary, 
			Condition_CardiacSynchronizationTechniqueProspectiveOrRetrospective, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying CardiacBeatRejectionTechnique --> "+("success" if partial_success else "failure"))

	if Condition_CardiacSynchronizationTechniqueProspectiveOrRetrospective(ds, parent_ds, root_ds):
		if "CardiacBeatRejectionTechnique" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["CardiacBeatRejectionTechnique"], 
				StringValueTable_CardiacBeatRejectionTechnique, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying string defined terms CardiacBeatRejectionTechnique --> "+("success" if partial_success else "failure"))


	if Condition_CardiacBeatRejectionTechniquePresentAndCardiacSynchronizationTechniqueIsNotProspectiveOrRetrospective(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when CardiacSynchronizationTechnique is not PROSPECTIVE or RETROSPECTIVE - attribute <CardiacBeatRejectionTechnique>")

	partial_success =  		verifyType2C(ds, 
			"CardiacSynchronization", "LowRRValue", 
			verbose, log, ElementDictionary, 
			Condition_CardiacSynchronizationTechniqueProspectiveOrRetrospective, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying LowRRValue --> "+("success" if partial_success else "failure"))


	if Condition_LowRRValuePresentAndCardiacSynchronizationTechniqueIsNotProspectiveOrRetrospective(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when CardiacSynchronizationTechnique is not PROSPECTIVE or RETROSPECTIVE - attribute <LowRRValue>")

	partial_success =  		verifyType2C(ds, 
			"CardiacSynchronization", "HighRRValue", 
			verbose, log, ElementDictionary, 
			Condition_CardiacSynchronizationTechniqueProspectiveOrRetrospective, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying HighRRValue --> "+("success" if partial_success else "failure"))


	if Condition_HighRRValuePresentAndCardiacSynchronizationTechniqueIsNotProspectiveOrRetrospective(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when CardiacSynchronizationTechnique is not PROSPECTIVE or RETROSPECTIVE - attribute <HighRRValue>")

	partial_success =  		verifyType2C(ds, 
			"CardiacSynchronization", "IntervalsAcquired", 
			verbose, log, ElementDictionary, 
			Condition_CardiacSynchronizationTechniqueNotNoneAndOriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying IntervalsAcquired --> "+("success" if partial_success else "failure"))


	if Condition_IntervalsAcquiredPresentAndCardiacSynchronizationTechniqueIsNone(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when CardiacSynchronizationTechnique is NONE - attribute <IntervalsAcquired>")

	partial_success =  		verifyType2C(ds, 
			"CardiacSynchronization", "IntervalsRejected", 
			verbose, log, ElementDictionary, 
			Condition_CardiacSynchronizationTechniqueNotNoneAndOriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying IntervalsRejected --> "+("success" if partial_success else "failure"))


	if Condition_IntervalsRejectedPresentAndCardiacSynchronizationTechniqueIsNone(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when CardiacSynchronizationTechnique is NONE - attribute <IntervalsRejected>")

	partial_success =  		verifyType3(ds, 
			"CardiacSynchronization", "SkipBeats", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying SkipBeats --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"CardiacSynchronization", "CardiacFramingType", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying CardiacFramingType --> "+("success" if partial_success else "failure"))

	if "CardiacFramingType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["CardiacFramingType"], 
			StringValueTable_CardiacFramingType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CardiacSynchronization success after verifying string defined terms CardiacFramingType --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RespiratorySynchronization_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RespiratorySynchronization")

	partial_success =  		verifyType1C(ds, 
			"RespiratorySynchronization", "RespiratoryMotionCompensationTechnique", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RespiratorySynchronization success after verifying RespiratoryMotionCompensationTechnique --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "RespiratoryMotionCompensationTechnique" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["RespiratoryMotionCompensationTechnique"], 
				StringValueTable_RespiratoryMotionCompensationTechnique, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " RespiratorySynchronization success after verifying string defined terms RespiratoryMotionCompensationTechnique --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RespiratorySynchronization", "RespiratorySignalSource", 
			verbose, log, ElementDictionary, 
			Condition_RespiratoryMotionCompensationTechniqueNotNone, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RespiratorySynchronization success after verifying RespiratorySignalSource --> "+("success" if partial_success else "failure"))

	if Condition_RespiratoryMotionCompensationTechniqueNotNone(ds, parent_ds, root_ds):
		if "RespiratorySignalSource" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["RespiratorySignalSource"], 
				StringValueTable_RespiratorySignalSource, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " RespiratorySynchronization success after verifying string defined terms RespiratorySignalSource --> "+("success" if partial_success else "failure"))


	if Condition_RespiratorySignalSourcePresentAndRespiratoryMotionCompensationTechniqueIsNone(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when RespiratoryMotionCompensationTechnique is NONE - attribute <RespiratorySignalSource>")

	partial_success =  		verifyType1C(ds, 
			"RespiratorySynchronization", "RespiratoryTriggerDelayThreshold", 
			verbose, log, ElementDictionary, 
			Condition_RespiratoryMotionCompensationTechniqueNotNoneOrRealTimeOrBreathHoldAndOriginalOrMixed, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RespiratorySynchronization success after verifying RespiratoryTriggerDelayThreshold --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RespiratorySynchronization", "RespiratoryTriggerType", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RespiratorySynchronization success after verifying RespiratoryTriggerType --> "+("success" if partial_success else "failure"))

	if "RespiratoryTriggerType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["RespiratoryTriggerType"], 
			StringValueTable_RespiratoryTriggerType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RespiratorySynchronization success after verifying string defined terms RespiratoryTriggerType --> "+("success" if partial_success else "failure"))

	return global_success

def Module_BulkMotionSynchronization_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"BulkMotionSynchronization")

	partial_success =  		verifyType1C(ds, 
			"BulkMotionSynchronization", "BulkMotionCompensationTechnique", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BulkMotionSynchronization success after verifying BulkMotionCompensationTechnique --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "BulkMotionCompensationTechnique" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["BulkMotionCompensationTechnique"], 
				StringValueTable_BulkMotionCompensationTechnique, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " BulkMotionSynchronization success after verifying string defined terms BulkMotionCompensationTechnique --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"BulkMotionSynchronization", "BulkMotionSignalSource", 
			verbose, log, ElementDictionary, 
			Condition_BulkMotionCompensationTechniqueNotNoneAndOriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BulkMotionSynchronization success after verifying BulkMotionSignalSource --> "+("success" if partial_success else "failure"))

	if Condition_BulkMotionCompensationTechniqueNotNoneAndOriginalOrMixed(ds, parent_ds, root_ds):
		if "BulkMotionSignalSource" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["BulkMotionSignalSource"], 
				StringValueTable_BulkMotionSignalSource, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " BulkMotionSynchronization success after verifying string defined terms BulkMotionSignalSource --> "+("success" if partial_success else "failure"))


	if Condition_BulkMotionSignalSourcePresentAndBulkMotionCompensationTechniqueIsNone(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present when BulkMotionCompensationTechnique is NONE - attribute <BulkMotionSignalSource>")

	return global_success

def Module_SupplementalPaletteColorLUT_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SupplementalPaletteColorLUT")

	partial_success =  		verifyType1(ds, 
			"SupplementalPaletteColorLUT", "RedPaletteColorLookupTableDescriptor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SupplementalPaletteColorLUT success after verifying RedPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if "RedPaletteColorLookupTableDescriptor" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["RedPaletteColorLookupTableDescriptor"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SupplementalPaletteColorLUT success after verifying binary enumerated values RedPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SupplementalPaletteColorLUT", "GreenPaletteColorLookupTableDescriptor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SupplementalPaletteColorLUT success after verifying GreenPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if "GreenPaletteColorLookupTableDescriptor" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["GreenPaletteColorLookupTableDescriptor"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SupplementalPaletteColorLUT success after verifying binary enumerated values GreenPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SupplementalPaletteColorLUT", "BluePaletteColorLookupTableDescriptor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SupplementalPaletteColorLUT success after verifying BluePaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if "BluePaletteColorLookupTableDescriptor" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BluePaletteColorLookupTableDescriptor"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SupplementalPaletteColorLUT success after verifying binary enumerated values BluePaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SupplementalPaletteColorLUT", "RedPaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SupplementalPaletteColorLUT success after verifying RedPaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SupplementalPaletteColorLUT", "GreenPaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SupplementalPaletteColorLUT success after verifying GreenPaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SupplementalPaletteColorLUT", "BluePaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SupplementalPaletteColorLUT success after verifying BluePaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PaletteColorLookupTableMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PaletteColorLookupTableMacro")

	partial_success =  		verifyType1(ds, 
			"PaletteColorLookupTableMacro", "RedPaletteColorLookupTableDescriptor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying RedPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if Condition_NotColorPaletteInstance(ds, parent_ds, root_ds):
		if "RedPaletteColorLookupTableDescriptor" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["RedPaletteColorLookupTableDescriptor"], 
				BinaryValueDescription_BitsAre16, 
				verbose, log, 2)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying binary enumerated values RedPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if Condition_ColorPaletteInstance(ds, parent_ds, root_ds):
		if "RedPaletteColorLookupTableDescriptor" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["RedPaletteColorLookupTableDescriptor"], 
				BinaryValueDescription_BitsAre8, 
				verbose, log, 2)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying binary enumerated values RedPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PaletteColorLookupTableMacro", "GreenPaletteColorLookupTableDescriptor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying GreenPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if Condition_NotColorPaletteInstance(ds, parent_ds, root_ds):
		if "GreenPaletteColorLookupTableDescriptor" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["GreenPaletteColorLookupTableDescriptor"], 
				BinaryValueDescription_BitsAre16, 
				verbose, log, 2)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying binary enumerated values GreenPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if Condition_ColorPaletteInstance(ds, parent_ds, root_ds):
		if "GreenPaletteColorLookupTableDescriptor" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["GreenPaletteColorLookupTableDescriptor"], 
				BinaryValueDescription_BitsAre8, 
				verbose, log, 2)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying binary enumerated values GreenPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PaletteColorLookupTableMacro", "BluePaletteColorLookupTableDescriptor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying BluePaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if Condition_NotColorPaletteInstance(ds, parent_ds, root_ds):
		if "BluePaletteColorLookupTableDescriptor" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BluePaletteColorLookupTableDescriptor"], 
				BinaryValueDescription_BitsAre16, 
				verbose, log, 2)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying binary enumerated values BluePaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


	if Condition_ColorPaletteInstance(ds, parent_ds, root_ds):
		if "BluePaletteColorLookupTableDescriptor" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BluePaletteColorLookupTableDescriptor"], 
				BinaryValueDescription_BitsAre8, 
				verbose, log, 2)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying binary enumerated values BluePaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PaletteColorLookupTableMacro", "PaletteColorLookupTableUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying PaletteColorLookupTableUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PaletteColorLookupTableMacro", "RedPaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			Condition_NeedsNonSegmentedLookupTableData, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying RedPaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PaletteColorLookupTableMacro", "GreenPaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			Condition_NeedsNonSegmentedLookupTableData, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying GreenPaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PaletteColorLookupTableMacro", "BluePaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			Condition_NeedsNonSegmentedLookupTableData, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying BluePaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PaletteColorLookupTableMacro", "SegmentedRedPaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			Condition_NeedsSegmentedLookupTableData, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying SegmentedRedPaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PaletteColorLookupTableMacro", "SegmentedGreenPaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			Condition_NeedsSegmentedLookupTableData, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying SegmentedGreenPaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PaletteColorLookupTableMacro", "SegmentedBluePaletteColorLookupTableData", 
			verbose, log, ElementDictionary, 
			Condition_NeedsSegmentedLookupTableData, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PaletteColorLookupTableMacro success after verifying SegmentedBluePaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	return global_success

def Module_PaletteColorLookupTable_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"PaletteColorLookupTable")

	partial_success =  Macro_PaletteColorLookupTableMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " PaletteColorLookupTable success after verifying PaletteColorLookupTableMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_PatientOrientation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"PatientOrientation")

	partial_success =  Macro_PatientOrientationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " PatientOrientation success after verifying PatientOrientationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_ImageEquipmentCoordinateRelationship_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ImageEquipmentCoordinateRelationship")

	partial_success =  		verifyType1(ds, 
			"ImageEquipmentCoordinateRelationship", "ImageToEquipmentMappingMatrix", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImageEquipmentCoordinateRelationship success after verifying ImageToEquipmentMappingMatrix --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ImageEquipmentCoordinateRelationship", "EquipmentCoordinateSystemIdentification", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImageEquipmentCoordinateRelationship success after verifying EquipmentCoordinateSystemIdentification --> "+("success" if partial_success else "failure"))

	if "EquipmentCoordinateSystemIdentification" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["EquipmentCoordinateSystemIdentification"], 
			StringValueTable_EquipmentCoordinateSystemIdentification, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImageEquipmentCoordinateRelationship success after verifying string enumerated values EquipmentCoordinateSystemIdentification --> "+("success" if partial_success else "failure"))

	return global_success

def Module_CRSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"CRSeries")

	partial_success =  		verifyType2(ds, 
			"CRSeries", "BodyPartExamined", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRSeries success after verifying BodyPartExamined --> "+("success" if partial_success else "failure"))


	if Condition_IsHuman(ds, parent_ds, root_ds):
		if "BodyPartExamined" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["BodyPartExamined"], 
				StringValueTable_BodyPartExaminedHuman, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " CRSeries success after verifying string defined terms BodyPartExamined --> "+("success" if partial_success else "failure"))


	if Condition_IsAnimal(ds, parent_ds, root_ds):
		if "BodyPartExamined" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["BodyPartExamined"], 
				StringValueTable_BodyPartExaminedAnimal, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " CRSeries success after verifying string defined terms BodyPartExamined --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"CRSeries", "ViewPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRSeries success after verifying ViewPosition --> "+("success" if partial_success else "failure"))


	if Condition_IsHuman(ds, parent_ds, root_ds):
		if "ViewPosition" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["ViewPosition"], 
				StringValueTable_ViewPositionHuman, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " CRSeries success after verifying string defined terms ViewPosition --> "+("success" if partial_success else "failure"))


	if Condition_IsAnimal(ds, parent_ds, root_ds):
		if "ViewPosition" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["ViewPosition"], 
				StringValueTable_ViewPositionAnimal, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " CRSeries success after verifying string defined terms ViewPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CRSeries", "FilterType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRSeries success after verifying FilterType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CRSeries", "CollimatorGridName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRSeries success after verifying CollimatorGridName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CRSeries", "FocalSpots", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRSeries success after verifying FocalSpots --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CRSeries", "PlateType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRSeries success after verifying PlateType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CRSeries", "PhosphorType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRSeries success after verifying PhosphorType --> "+("success" if partial_success else "failure"))

	return global_success

def Module_CRImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"CRImage")

	partial_success =  		verifyType1(ds, 
			"CRImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CRImage", "KVP", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying KVP --> "+("success" if partial_success else "failure"))

	if "KVP" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["KVP"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CRImage", "PlateID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying PlateID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CRImage", "DistanceSourceToDetector", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CRImage", "DistanceSourceToPatient", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying DistanceSourceToPatient --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CRImage", "ExposureTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying ExposureTime --> "+("success" if partial_success else "failure"))

	if "ExposureTime" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureTime"], 
			verbose, log, -1, True)


	if Condition_ExposureTimeInmsIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <CRImage> - use ExposureTime instead of - attribute <ExposureTimeInms>")

	partial_success =  		verifyType3(ds, 
			"CRImage", "XRayTubeCurrent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying XRayTubeCurrent --> "+("success" if partial_success else "failure"))

	if "XRayTubeCurrent" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["XRayTubeCurrent"], 
			verbose, log, -1, True)


	if Condition_XRayTubeCurrentInmAIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <CRImage> - use XRayTubeCurrent instead of - attribute <XRayTubeCurrentInmA>")

	partial_success =  		verifyType3(ds, 
			"CRImage", "Exposure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying Exposure --> "+("success" if partial_success else "failure"))

	if "Exposure" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Exposure"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CRImage", "ExposureInuAs", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying ExposureInuAs --> "+("success" if partial_success else "failure"))

	if "ExposureInuAs" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureInuAs"], 
			verbose, log, -1, True)


	if Condition_ExposureInmAsIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <CRImage> - use Exposure and/or ExposureInuAs instead of - attribute <ExposureInmAs>")

	partial_success =  		verifyType3(ds, 
			"CRImage", "ImagerPixelSpacing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying ImagerPixelSpacing --> "+("success" if partial_success else "failure"))

	if "ImagerPixelSpacing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ImagerPixelSpacing"], 
			verbose, log, -1, False)

	partial_success =  Macro_BasicPixelSpacingCalibrationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " CRImage success after verifying BasicPixelSpacingCalibrationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"CRImage", "GeneratorPower", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying GeneratorPower --> "+("success" if partial_success else "failure"))

	if "GeneratorPower" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["GeneratorPower"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CRImage", "AcquisitionDeviceProcessingDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying AcquisitionDeviceProcessingDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CRImage", "AcquisitionDeviceProcessingCode", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying AcquisitionDeviceProcessingCode --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CRImage", "CassetteOrientation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying CassetteOrientation --> "+("success" if partial_success else "failure"))

	if "CassetteOrientation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CassetteOrientation"], 
			StringValueTable_Orientation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying string enumerated values CassetteOrientation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CRImage", "CassetteSize", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying CassetteSize --> "+("success" if partial_success else "failure"))

	if "CassetteSize" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["CassetteSize"], 
			StringValueTable_CassetteSize, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying string defined terms CassetteSize --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CRImage", "ExposuresOnPlate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying ExposuresOnPlate --> "+("success" if partial_success else "failure"))

	if "ExposuresOnPlate" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposuresOnPlate"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CRImage", "RelativeXRayExposure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying RelativeXRayExposure --> "+("success" if partial_success else "failure"))

	if "RelativeXRayExposure" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["RelativeXRayExposure"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CRImage", "Sensitivity", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CRImage success after verifying Sensitivity --> "+("success" if partial_success else "failure"))

	if "Sensitivity" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Sensitivity"], 
			verbose, log, -1, True)

	partial_success =  Macro_GeneralAnatomyOptionalMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " CRImage success after verifying GeneralAnatomyOptionalMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_ExposureIndexMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " CRImage success after verifying ExposureIndexMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_CTImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"CTImage")

	partial_success =  		verifyType1(ds, 
			"CTImage", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_CTImageType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_CTImageType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3MissingOrEmpty(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" A value is required for value 3 in CT Images - attribute <ImageType>")


	if Condition_ImageTypeValue4MissingOrEmptyForMultienergy(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" A value is required for value 4 in multi-energy acquisition CT Images - attribute <ImageType>")

	partial_success =  		verifyType3(ds, 
			"CTImage", "MultienergyCTAcquisition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying MultienergyCTAcquisition --> "+("success" if partial_success else "failure"))

	if "MultienergyCTAcquisition" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["MultienergyCTAcquisition"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying string enumerated values MultienergyCTAcquisition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CTImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CTImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CTImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CTImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre12To16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CTImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre11To15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CTImage", "RescaleIntercept", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying RescaleIntercept --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CTImage", "RescaleSlope", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying RescaleSlope --> "+("success" if partial_success else "failure"))

	if "RescaleSlope" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["RescaleSlope"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"CTImage", "RescaleType", 
			verbose, log, ElementDictionary, 
			Condition_MultienergyAcquisitionOrRescaleTypeIsPresentAndNotHU, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying RescaleType --> "+("success" if partial_success else "failure"))

	if Condition_MultienergyAcquisitionOrRescaleTypeIsPresentAndNotHU(ds, parent_ds, root_ds):
		if "RescaleType" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["RescaleType"], 
				StringValueTable_RescaleTypeHounsfieldUnits, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying string defined terms RescaleType --> "+("success" if partial_success else "failure"))


	if Condition_RescaleTypeIsPresentAndNotHUAndImageIsOriginalNotLocalizerAndNotMultienergyAcquisition(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" If RescaleType is present and not multi-energy acquisition, must be HU for ORIGINAL non-LOCALIZER images - attribute <RescaleType>")


	if Condition_RescaleTypeIsPresentAndIsHUAndImageIsOriginalLocalizerAndNotMultienergyAcquisition(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" If RescaleType is present and not multi-energy acquisition, should not be HU for ORIGINAL LOCALIZER images - attribute <RescaleType>")

	partial_success =  		verifyType2(ds, 
			"CTImage", "KVP", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying KVP --> "+("success" if partial_success else "failure"))

	if "KVP" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["KVP"], 
			verbose, log, -1, True)


	if Condition_KVPNotEmptyWhenAlsoPresentInMultienergyCTAcquisitionSequence(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute shall be empty within Module <CTImage> when also present in MultienergyCTAcquisitionSequence - attribute <KVP>")

	partial_success =  		verifyType2(ds, 
			"CTImage", "AcquisitionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying AcquisitionNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CTImage", "ScanOptions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying ScanOptions --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CTImage", "DataCollectionDiameter", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying DataCollectionDiameter --> "+("success" if partial_success else "failure"))

	if "DataCollectionDiameter" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DataCollectionDiameter"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "DataCollectionCenterPatient", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying DataCollectionCenterPatient --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CTImage", "ReconstructionDiameter", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying ReconstructionDiameter --> "+("success" if partial_success else "failure"))

	if "ReconstructionDiameter" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ReconstructionDiameter"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "ReconstructionTargetCenterPatient", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying ReconstructionTargetCenterPatient --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CTImage", "DistanceSourceToDetector", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

	if "DistanceSourceToDetector" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceSourceToDetector"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "DistanceSourceToPatient", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying DistanceSourceToPatient --> "+("success" if partial_success else "failure"))

	if "DistanceSourceToPatient" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceSourceToPatient"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "GantryDetectorTilt", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying GantryDetectorTilt --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CTImage", "TableHeight", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying TableHeight --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CTImage", "RotationDirection", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying RotationDirection --> "+("success" if partial_success else "failure"))

	if "RotationDirection" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RotationDirection"], 
			StringValueTable_RotationDirection, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying string enumerated values RotationDirection --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CTImage", "ExposureTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying ExposureTime --> "+("success" if partial_success else "failure"))

	if "ExposureTime" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureTime"], 
			verbose, log, -1, True)


	if Condition_ExposureTimeInmsIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <CTImage> - use ExposureTime instead of - attribute <ExposureTimeInms>")

	partial_success =  		verifyType3(ds, 
			"CTImage", "XRayTubeCurrent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying XRayTubeCurrent --> "+("success" if partial_success else "failure"))

	if "XRayTubeCurrent" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["XRayTubeCurrent"], 
			verbose, log, -1, True)


	if Condition_XRayTubeCurrentInmAIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <CTImage> - use XRayTubeCurrent instead of - attribute <XRayTubeCurrentInmA>")

	partial_success =  		verifyType3(ds, 
			"CTImage", "Exposure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying Exposure --> "+("success" if partial_success else "failure"))

	if "Exposure" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Exposure"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "ExposureInuAs", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying ExposureInuAs --> "+("success" if partial_success else "failure"))

	if "ExposureInuAs" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureInuAs"], 
			verbose, log, -1, True)


	if Condition_ExposureInmAsIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <CTImage> - use Exposure and/or ExposureInuAs instead of - attribute <ExposureInmAs>")

	partial_success =  		verifyType3(ds, 
			"CTImage", "FilterType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying FilterType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CTImage", "GeneratorPower", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying GeneratorPower --> "+("success" if partial_success else "failure"))

	if "GeneratorPower" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["GeneratorPower"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "FocalSpots", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying FocalSpots --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CTImage", "ConvolutionKernel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying ConvolutionKernel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CTImage", "RevolutionTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying RevolutionTime --> "+("success" if partial_success else "failure"))

	if "RevolutionTime" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["RevolutionTime"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "SingleCollimationWidth", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying SingleCollimationWidth --> "+("success" if partial_success else "failure"))

	if "SingleCollimationWidth" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["SingleCollimationWidth"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "TotalCollimationWidth", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying TotalCollimationWidth --> "+("success" if partial_success else "failure"))

	if "TotalCollimationWidth" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["TotalCollimationWidth"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "TableSpeed", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying TableSpeed --> "+("success" if partial_success else "failure"))

	if "TableSpeed" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["TableSpeed"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "TableFeedPerRotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying TableFeedPerRotation --> "+("success" if partial_success else "failure"))

	if "TableFeedPerRotation" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["TableFeedPerRotation"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "SpiralPitchFactor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying SpiralPitchFactor --> "+("success" if partial_success else "failure"))

	if "SpiralPitchFactor" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["SpiralPitchFactor"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "ExposureModulationType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying ExposureModulationType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CTImage", "EstimatedDoseSaving", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying EstimatedDoseSaving --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CTImage", "CTDIvol", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying CTDIvol --> "+("success" if partial_success else "failure"))

	if "CTDIvol" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["CTDIvol"], 
			verbose, log, -1, True)


	if Condition_CTDIvolIsPresentButCTDIPhantomTypeCodeSequenceIsNot(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" CTDIvol is present but it is uninterpretable without CTDIPhantomTypeCodeSequence, which is absent - attribute <CTDIvol>")

	partial_success = verifyType3(ds, 
			"CTImage", 
			"CTDIPhantomTypeCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTImage success after verifying CTDIPhantomTypeCodeSequence" + ("success" if partial_success else "failure")) 
	if "CTDIPhantomTypeCodeSequence" in ds:
		CTDIPhantomTypeCodeSequence_data = ds.CTDIPhantomTypeCodeSequence
		if type(CTDIPhantomTypeCodeSequence_data) == Sequence:
			for i1 in range(0, len(CTDIPhantomTypeCodeSequence_data)):
				if verbose:
					log.append( " CTDIPhantomTypeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CTDIPhantomTypeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " CTImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"CTImage", "WaterEquivalentDiameter", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying WaterEquivalentDiameter --> "+("success" if partial_success else "failure"))

	if "WaterEquivalentDiameter" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["WaterEquivalentDiameter"], 
			verbose, log, -1, True)

	partial_success = verifyType1C(ds, 
			"CTImage", 
			"WaterEquivalentDiameterCalculationMethodCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_WaterEquivalentDiameterIsPresent, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTImage success after verifying WaterEquivalentDiameterCalculationMethodCodeSequence" + ("success" if partial_success else "failure")) 
	if "WaterEquivalentDiameterCalculationMethodCodeSequence" in ds:
		WaterEquivalentDiameterCalculationMethodCodeSequence_data = ds.WaterEquivalentDiameterCalculationMethodCodeSequence
		if type(WaterEquivalentDiameterCalculationMethodCodeSequence_data) == Sequence:
			for i1 in range(0, len(WaterEquivalentDiameterCalculationMethodCodeSequence_data)):
				if verbose:
					log.append( " WaterEquivalentDiameterCalculationMethodCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = WaterEquivalentDiameterCalculationMethodCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " CTImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"CTImage", "ImageAndFluoroscopyAreaDoseProduct", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying ImageAndFluoroscopyAreaDoseProduct --> "+("success" if partial_success else "failure"))

	if "ImageAndFluoroscopyAreaDoseProduct" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ImageAndFluoroscopyAreaDoseProduct"], 
			verbose, log, -1, True)

	partial_success =  Macro_GeneralAnatomyOptionalMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " CTImage success after verifying GeneralAnatomyOptionalMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_OptionalViewAndSliceProgressionDirectionMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " CTImage success after verifying OptionalViewAndSliceProgressionDirectionMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"CTImage", "CalciumScoringMassFactorPatient", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying CalciumScoringMassFactorPatient --> "+("success" if partial_success else "failure"))

	if "CalciumScoringMassFactorPatient" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["CalciumScoringMassFactorPatient"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "CalciumScoringMassFactorDevice", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying CalciumScoringMassFactorDevice --> "+("success" if partial_success else "failure"))

	if "CalciumScoringMassFactorDevice" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["CalciumScoringMassFactorDevice"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1C(ds, 
			"CTImage", "EnergyWeightingFactor", 
			verbose, log, ElementDictionary, 
			Condition_MultiEnergyProportionalWeighting, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying EnergyWeightingFactor --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"CTImage", 
			"CTAdditionalXRaySourceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTImage success after verifying CTAdditionalXRaySourceSequence" + ("success" if partial_success else "failure")) 
	if "CTAdditionalXRaySourceSequence" in ds:
		CTAdditionalXRaySourceSequence_data = ds.CTAdditionalXRaySourceSequence
		if type(CTAdditionalXRaySourceSequence_data) == Sequence:
			for i1 in range(0, len(CTAdditionalXRaySourceSequence_data)):
				if verbose:
					log.append( " CTAdditionalXRaySourceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CTAdditionalXRaySourceSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"CTImage", "KVP", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTImage success after verifying KVP --> "+("success" if partial_success else "failure"))

				if "KVP" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["KVP"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"CTImage", "XRayTubeCurrentInmA", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTImage success after verifying XRayTubeCurrentInmA --> "+("success" if partial_success else "failure"))

				if "XRayTubeCurrentInmA" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["XRayTubeCurrentInmA"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"CTImage", "DataCollectionDiameter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTImage success after verifying DataCollectionDiameter --> "+("success" if partial_success else "failure"))

				if "DataCollectionDiameter" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["DataCollectionDiameter"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"CTImage", "FocalSpots", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTImage success after verifying FocalSpots --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"CTImage", "FilterType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTImage success after verifying FilterType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"CTImage", "FilterMaterial", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTImage success after verifying FilterMaterial --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"CTImage", "ExposureInmAs", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTImage success after verifying ExposureInmAs --> "+("success" if partial_success else "failure"))

				if "ExposureInmAs" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ExposureInmAs"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTImage", "EnergyWeightingFactor", 
						verbose, log, ElementDictionary, 
						Condition_EnergyWeightingFactorPresentInRoot, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTImage success after verifying EnergyWeightingFactor --> "+("success" if partial_success else "failure"))

				if Condition_EnergyWeightingFactorPresentInRoot(ds1, parent_ds1, root_ds):
					if "EnergyWeightingFactor" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["EnergyWeightingFactor"], 
							verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"CTImage", "IsocenterPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTImage success after verifying IsocenterPosition --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_RTEquipmentCorrelationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " CTImage success after verifying RTEquipmentCorrelationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MRImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MRImage")

	partial_success =  		verifyType1(ds, 
			"MRImage", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_MRImageType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3MissingOrEmpty(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" A value is required for value 3 in MR Images - attribute <ImageType>")

	partial_success =  		verifyType1(ds, 
			"MRImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MRImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MRImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MRImage", "ScanningSequence", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying ScanningSequence --> "+("success" if partial_success else "failure"))

	if "ScanningSequence" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ScanningSequence"], 
			StringValueTable_ScanningSequence, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying string enumerated values ScanningSequence --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MRImage", "SequenceVariant", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying SequenceVariant --> "+("success" if partial_success else "failure"))

	if "SequenceVariant" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SequenceVariant"], 
			StringValueTable_SequenceVariant, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying string defined terms SequenceVariant --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"MRImage", "ScanOptions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying ScanOptions --> "+("success" if partial_success else "failure"))

	if "ScanOptions" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ScanOptions"], 
			StringValueTable_ScanOptions, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying string defined terms ScanOptions --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"MRImage", "MRAcquisitionType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying MRAcquisitionType --> "+("success" if partial_success else "failure"))

	if "MRAcquisitionType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["MRAcquisitionType"], 
			StringValueTable_MRAcquisitionType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying string enumerated values MRAcquisitionType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"MRImage", "RepetitionTime", 
			verbose, log, ElementDictionary, 
			Condition_MRIsNotEchoPlanarOrIsSegmentedKSpace, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying RepetitionTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"MRImage", "EchoTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying EchoTime --> "+("success" if partial_success else "failure"))

	if "EchoTime" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["EchoTime"], 
			verbose, log, -1, True)

	partial_success =  		verifyType2(ds, 
			"MRImage", "EchoTrainLength", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying EchoTrainLength --> "+("success" if partial_success else "failure"))

	if "EchoTrainLength" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["EchoTrainLength"], 
			verbose, log, -1, True)

	partial_success =  		verifyType2C(ds, 
			"MRImage", "InversionTime", 
			verbose, log, ElementDictionary, 
			Condition_MRIsInversionRecovery, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying InversionTime --> "+("success" if partial_success else "failure"))

	if Condition_MRIsInversionRecovery(ds, parent_ds, root_ds):
		if "InversionTime" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["InversionTime"], 
				verbose, log, -1, True)

	partial_success =  		verifyType2C(ds, 
			"MRImage", "TriggerTime", 
			verbose, log, ElementDictionary, 
			Condition_MRIsCardiacOrPulseGated, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying TriggerTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "SequenceName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying SequenceName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "AngioFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying AngioFlag --> "+("success" if partial_success else "failure"))

	if "AngioFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["AngioFlag"], 
			StringValueTable_AngioFlag, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying string enumerated values AngioFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "NumberOfAverages", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying NumberOfAverages --> "+("success" if partial_success else "failure"))

	if "NumberOfAverages" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["NumberOfAverages"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"MRImage", "ImagingFrequency", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying ImagingFrequency --> "+("success" if partial_success else "failure"))

	if "ImagingFrequency" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ImagingFrequency"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"MRImage", "ImagedNucleus", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying ImagedNucleus --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "EchoNumbers", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying EchoNumbers --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "MagneticFieldStrength", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying MagneticFieldStrength --> "+("success" if partial_success else "failure"))

	if "MagneticFieldStrength" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["MagneticFieldStrength"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"MRImage", "SpacingBetweenSlices", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying SpacingBetweenSlices --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "NumberOfPhaseEncodingSteps", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying NumberOfPhaseEncodingSteps --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "PercentSampling", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying PercentSampling --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "PercentPhaseFieldOfView", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying PercentPhaseFieldOfView --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "PixelBandwidth", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying PixelBandwidth --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "NominalInterval", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying NominalInterval --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "BeatRejectionFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying BeatRejectionFlag --> "+("success" if partial_success else "failure"))

	if "BeatRejectionFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BeatRejectionFlag"], 
			StringValueTable_YesNoLetter, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying string enumerated values BeatRejectionFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "LowRRValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying LowRRValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "HighRRValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying HighRRValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "IntervalsAcquired", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying IntervalsAcquired --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "IntervalsRejected", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying IntervalsRejected --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "PVCRejection", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying PVCRejection --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "SkipBeats", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying SkipBeats --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "HeartRate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying HeartRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "CardiacNumberOfImages", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying CardiacNumberOfImages --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "TriggerWindow", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying TriggerWindow --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "ReconstructionDiameter", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying ReconstructionDiameter --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "ReceiveCoilName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying ReceiveCoilName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "TransmitCoilName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying TransmitCoilName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "AcquisitionMatrix", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying AcquisitionMatrix --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "InPlanePhaseEncodingDirection", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying InPlanePhaseEncodingDirection --> "+("success" if partial_success else "failure"))

	if "InPlanePhaseEncodingDirection" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["InPlanePhaseEncodingDirection"], 
			StringValueTable_PhaseEncodingDirection, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying string enumerated values InPlanePhaseEncodingDirection --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "FlipAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying FlipAngle --> "+("success" if partial_success else "failure"))

	if "FlipAngle" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["FlipAngle"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"MRImage", "SAR", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying SAR --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "VariableFlipAngleFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying VariableFlipAngleFlag --> "+("success" if partial_success else "failure"))

	if "VariableFlipAngleFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VariableFlipAngleFlag"], 
			StringValueTable_YesNoLetter, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying string enumerated values VariableFlipAngleFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "dBdt", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying dBdt --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "TemporalPositionIdentifier", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying TemporalPositionIdentifier --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "NumberOfTemporalPositions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying NumberOfTemporalPositions --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "TemporalResolution", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying TemporalResolution --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_GeneralAnatomyOptionalMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " MRImage success after verifying GeneralAnatomyOptionalMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_OptionalViewAndSliceProgressionDirectionMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " MRImage success after verifying OptionalViewAndSliceProgressionDirectionMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"MRImage", "IsocenterPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying IsocenterPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImage", "B1rms", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImage success after verifying B1rms --> "+("success" if partial_success else "failure"))


	if Condition_RescaleInterceptPresentAndNotIdentity(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" Non-identity Modality LUT not expected to be present in standard MR IOD - may cause windowing problems - attribute <RescaleIntercept>"+\
				" = <{}>".format( tag_for_keyword("RescaleIntercept")))


	if Condition_RescaleSlopePresentAndNotIdentity(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" Non-identity Modality LUT not expected to be present in standard MR IOD - may cause windowing problems - attribute <RescaleSlope>"+\
				" = <{}>".format( tag_for_keyword("RescaleSlope")))

	return global_success

def Module_NMPETPatientOrientation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"NMPETPatientOrientation")

	partial_success = verifyType2(ds, 
			"NMPETPatientOrientation", 
			"PatientOrientationCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "NMPETPatientOrientation success after verifying PatientOrientationCodeSequence" + ("success" if partial_success else "failure")) 
	if "PatientOrientationCodeSequence" in ds:
		PatientOrientationCodeSequence_data = ds.PatientOrientationCodeSequence
		if type(PatientOrientationCodeSequence_data) == Sequence:
			for i1 in range(0, len(PatientOrientationCodeSequence_data)):
				if verbose:
					log.append( " PatientOrientationCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientOrientationCodeSequence_data[i1]
				partial_success =  Macro_CodeSequence99SDMMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " NMPETPatientOrientation success after verifying CodeSequence99SDMMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType2C(ds1, 
						"NMPETPatientOrientation", 
						"PatientOrientationModifierCodeSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "NMPETPatientOrientation success after verifying PatientOrientationModifierCodeSequence" + ("success" if partial_success else "failure")) 
				if "PatientOrientationModifierCodeSequence" in ds1:
					PatientOrientationModifierCodeSequence_data = ds1.PatientOrientationModifierCodeSequence
					if type(PatientOrientationModifierCodeSequence_data) == Sequence:
						for i2 in range(0, len(PatientOrientationModifierCodeSequence_data)):
							if verbose:
								log.append( " PatientOrientationModifierCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PatientOrientationModifierCodeSequence_data[i2]
							partial_success =  Macro_CodeSequence99SDMMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " NMPETPatientOrientation success after verifying CodeSequence99SDMMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType2(ds, 
			"NMPETPatientOrientation", 
			"PatientGantryRelationshipCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "NMPETPatientOrientation success after verifying PatientGantryRelationshipCodeSequence" + ("success" if partial_success else "failure")) 
	if "PatientGantryRelationshipCodeSequence" in ds:
		PatientGantryRelationshipCodeSequence_data = ds.PatientGantryRelationshipCodeSequence
		if type(PatientGantryRelationshipCodeSequence_data) == Sequence:
			for i1 in range(0, len(PatientGantryRelationshipCodeSequence_data)):
				if verbose:
					log.append( " PatientGantryRelationshipCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientGantryRelationshipCodeSequence_data[i1]
				partial_success =  Macro_CodeSequence99SDMMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " NMPETPatientOrientation success after verifying CodeSequence99SDMMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_NMImagePixel_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"NMImagePixel")

	partial_success =  		verifyType1(ds, 
			"NMImagePixel", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImagePixel success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImagePixel success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"NMImagePixel", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImagePixel success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_NMPhotometricInterpretation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImagePixel success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"NMImagePixel", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImagePixel success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImagePixel success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"NMImagePixel", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImagePixel success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImagePixel success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"NMImagePixel", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImagePixel success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7Or15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImagePixel success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"NMImagePixel", "PixelSpacing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImagePixel success after verifying PixelSpacing --> "+("success" if partial_success else "failure"))

	if "PixelSpacing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["PixelSpacing"], 
			verbose, log, -1, False)

	return global_success

def Module_NMMultiFrame_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"NMMultiFrame")

	partial_success =  		verifyType1(ds, 
			"NMMultiFrame", "FrameIncrementPointer", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying FrameIncrementPointer --> "+("success" if partial_success else "failure"))

	if "FrameIncrementPointer" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
			TagValueDescription_NMFrameIncrementPointerValues, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3WholeBodyOrStatic(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsEnergyWindowVector, 
				verbose, log, 0)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3WholeBodyOrStatic(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsDetectorVector, 
				verbose, log, 1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3Dynamic(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsEnergyWindowVector, 
				verbose, log, 0)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3Dynamic(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsDetectorVector, 
				verbose, log, 1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3Dynamic(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsPhaseVector, 
				verbose, log, 2)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3Dynamic(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsTimeSliceVector, 
				verbose, log, 3)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3Gated(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsEnergyWindowVector, 
				verbose, log, 0)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3Gated(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsDetectorVector, 
				verbose, log, 1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3Gated(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsRRIntervalVector, 
				verbose, log, 2)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3Gated(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsTimeSlotVector, 
				verbose, log, 3)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3Tomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsEnergyWindowVector, 
				verbose, log, 0)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3Tomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsDetectorVector, 
				verbose, log, 1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3Tomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsRotationVector, 
				verbose, log, 2)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3Tomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsAngularViewVector, 
				verbose, log, 3)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3GatedTomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsEnergyWindowVector, 
				verbose, log, 0)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3GatedTomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsDetectorVector, 
				verbose, log, 1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3GatedTomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsRotationVector, 
				verbose, log, 2)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3GatedTomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsRRIntervalVector, 
				verbose, log, 3)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3GatedTomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsTimeSlotVector, 
				verbose, log, 4)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3GatedTomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsAngularViewVector, 
				verbose, log, 5)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3ReconTomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsSliceVector, 
				verbose, log, 0)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3ReconGatedTomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsRRIntervalVector, 
				verbose, log, 0)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3ReconGatedTomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsTimeSlotVector, 
				verbose, log, 1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3ReconGatedTomo(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_FrameIncrementPointerIsSliceVector, 
				verbose, log, 2)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "EnergyWindowVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsEnergyWindowVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying EnergyWindowVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"NMMultiFrame", "NumberOfEnergyWindows", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying NumberOfEnergyWindows --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "DetectorVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsDetectorVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying DetectorVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"NMMultiFrame", "NumberOfDetectors", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying NumberOfDetectors --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "PhaseVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsPhaseVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying PhaseVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "NumberOfPhases", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsPhaseVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying NumberOfPhases --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "RotationVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsRotationVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying RotationVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "NumberOfRotations", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue3TomoFamily, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying NumberOfRotations --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "RRIntervalVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsRRIntervalVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying RRIntervalVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "NumberOfRRIntervals", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsRRIntervalVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying NumberOfRRIntervals --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "TimeSlotVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsTimeSlotVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying TimeSlotVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "NumberOfTimeSlots", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsTimeSlotVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying NumberOfTimeSlots --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "SliceVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsSliceVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying SliceVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "NumberOfSlices", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsSliceVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying NumberOfSlices --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "AngularViewVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsAngularViewVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying AngularViewVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMMultiFrame", "TimeSliceVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsTimeSliceVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiFrame success after verifying TimeSliceVector --> "+("success" if partial_success else "failure"))

	return global_success

def Module_NMImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"NMImage")

	partial_success =  		verifyType1(ds, 
			"NMImage", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_NMImageTypeValue2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_NMImageTypeValue3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_NMImageTypeValue4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3MissingOrEmpty(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" A value is required for value 3 in NM Images - attribute <ImageType>")


	if Condition_ImageTypeValue4MissingOrEmpty(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" A value is required for value 4 in NM Images - attribute <ImageType>")

	partial_success =  		verifyType3(ds, 
			"NMImage", "ImageID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying ImageID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"NMImage", "CountsAccumulated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying CountsAccumulated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMImage", "AcquisitionTerminationCondition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying AcquisitionTerminationCondition --> "+("success" if partial_success else "failure"))

	if "AcquisitionTerminationCondition" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["AcquisitionTerminationCondition"], 
			StringValueTable_NMAcquisitionTerminationCondition, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying string defined terms AcquisitionTerminationCondition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMImage", "TableHeight", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying TableHeight --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMImage", "TableTraverse", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying TableTraverse --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"NMImage", "ActualFrameDuration", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue3WholeBodyOrStatic, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying ActualFrameDuration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMImage", "CountRate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying CountRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMImage", "ProcessingFunction", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying ProcessingFunction --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMImage", "CorrectedImage", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying CorrectedImage --> "+("success" if partial_success else "failure"))

	if "CorrectedImage" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["CorrectedImage"], 
			StringValueTable_NMCorrectedImage, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying string defined terms CorrectedImage --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMImage", "WholeBodyTechnique", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying WholeBodyTechnique --> "+("success" if partial_success else "failure"))

	if "WholeBodyTechnique" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["WholeBodyTechnique"], 
			StringValueTable_NMWholeBodyTechnique, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying string enumerated values WholeBodyTechnique --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"NMImage", "ScanVelocity", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue3WholeBody, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying ScanVelocity --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"NMImage", "ScanLength", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue3WholeBody, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying ScanLength --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMImage", "TriggerSourceOrType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying TriggerSourceOrType --> "+("success" if partial_success else "failure"))

	if "TriggerSourceOrType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["TriggerSourceOrType"], 
			StringValueTable_EKG, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMImage success after verifying string defined terms TriggerSourceOrType --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_GeneralAnatomyOptionalMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " NMImage success after verifying GeneralAnatomyOptionalMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"NMImage", 
			"RealWorldValueMappingSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "NMImage success after verifying RealWorldValueMappingSequence" + ("success" if partial_success else "failure")) 
	if "RealWorldValueMappingSequence" in ds:
		RealWorldValueMappingSequence_data = ds.RealWorldValueMappingSequence
		if type(RealWorldValueMappingSequence_data) == Sequence:
			for i1 in range(0, len(RealWorldValueMappingSequence_data)):
				if verbose:
					log.append( " RealWorldValueMappingSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RealWorldValueMappingSequence_data[i1]
				partial_success =  Macro_RealWorldValueMappingItemMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " NMImage success after verifying RealWorldValueMappingItemMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_NMIsotope_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"NMIsotope")

	partial_success = verifyType2(ds, 
			"NMIsotope", 
			"EnergyWindowInformationSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "NMIsotope success after verifying EnergyWindowInformationSequence" + ("success" if partial_success else "failure")) 
	if "EnergyWindowInformationSequence" in ds:
		EnergyWindowInformationSequence_data = ds.EnergyWindowInformationSequence
		if type(EnergyWindowInformationSequence_data) == Sequence:
			for i1 in range(0, len(EnergyWindowInformationSequence_data)):
				if verbose:
					log.append( " EnergyWindowInformationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = EnergyWindowInformationSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"NMIsotope", "EnergyWindowName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMIsotope success after verifying EnergyWindowName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"NMIsotope", 
						"EnergyWindowRangeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "NMIsotope success after verifying EnergyWindowRangeSequence" + ("success" if partial_success else "failure")) 
				if "EnergyWindowRangeSequence" in ds1:
					EnergyWindowRangeSequence_data = ds1.EnergyWindowRangeSequence
					if type(EnergyWindowRangeSequence_data) == Sequence:
						for i2 in range(0, len(EnergyWindowRangeSequence_data)):
							if verbose:
								log.append( " EnergyWindowRangeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = EnergyWindowRangeSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"NMIsotope", "EnergyWindowLowerLimit", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " NMIsotope success after verifying EnergyWindowLowerLimit --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"NMIsotope", "EnergyWindowUpperLimit", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " NMIsotope success after verifying EnergyWindowUpperLimit --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"NMIsotope", 
			"RadiopharmaceuticalInformationSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "NMIsotope success after verifying RadiopharmaceuticalInformationSequence" + ("success" if partial_success else "failure")) 
	if "RadiopharmaceuticalInformationSequence" in ds:
		RadiopharmaceuticalInformationSequence_data = ds.RadiopharmaceuticalInformationSequence
		if type(RadiopharmaceuticalInformationSequence_data) == Sequence:
			for i1 in range(0, len(RadiopharmaceuticalInformationSequence_data)):
				if verbose:
					log.append( " RadiopharmaceuticalInformationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RadiopharmaceuticalInformationSequence_data[i1]
				partial_success = verifyType2(ds1, 
						"NMIsotope", 
						"RadionuclideCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "NMIsotope success after verifying RadionuclideCodeSequence" + ("success" if partial_success else "failure")) 
				if "RadionuclideCodeSequence" in ds1:
					RadionuclideCodeSequence_data = ds1.RadionuclideCodeSequence
					if type(RadionuclideCodeSequence_data) == Sequence:
						for i2 in range(0, len(RadionuclideCodeSequence_data)):
							if verbose:
								log.append( " RadionuclideCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RadionuclideCodeSequence_data[i2]
							partial_success =  Macro_CodeSequence99SDMMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " NMIsotope success after verifying CodeSequence99SDMMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"NMIsotope", "RadiopharmaceuticalRoute", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMIsotope success after verifying RadiopharmaceuticalRoute --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"NMIsotope", 
						"AdministrationRouteCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "NMIsotope success after verifying AdministrationRouteCodeSequence" + ("success" if partial_success else "failure")) 
				if "AdministrationRouteCodeSequence" in ds1:
					AdministrationRouteCodeSequence_data = ds1.AdministrationRouteCodeSequence
					if type(AdministrationRouteCodeSequence_data) == Sequence:
						for i2 in range(0, len(AdministrationRouteCodeSequence_data)):
							if verbose:
								log.append( " AdministrationRouteCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AdministrationRouteCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMeaningOptionalMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " NMIsotope success after verifying CodeSequenceMeaningOptionalMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"NMIsotope", "RadiopharmaceuticalVolume", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMIsotope success after verifying RadiopharmaceuticalVolume --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMIsotope", "RadiopharmaceuticalStartTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMIsotope success after verifying RadiopharmaceuticalStartTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMIsotope", "RadiopharmaceuticalStopTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMIsotope success after verifying RadiopharmaceuticalStopTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMIsotope", "RadionuclideTotalDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMIsotope success after verifying RadionuclideTotalDose --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"NMIsotope", 
						"CalibrationDataSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "NMIsotope success after verifying CalibrationDataSequence" + ("success" if partial_success else "failure")) 
				if "CalibrationDataSequence" in ds1:
					CalibrationDataSequence_data = ds1.CalibrationDataSequence
					if type(CalibrationDataSequence_data) == Sequence:
						for i2 in range(0, len(CalibrationDataSequence_data)):
							if verbose:
								log.append( " CalibrationDataSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = CalibrationDataSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"NMIsotope", "EnergyWindowNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " NMIsotope success after verifying EnergyWindowNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"NMIsotope", "SyringeCounts", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " NMIsotope success after verifying SyringeCounts --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"NMIsotope", "ResidualSyringeCounts", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " NMIsotope success after verifying ResidualSyringeCounts --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMIsotope", "Radiopharmaceutical", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMIsotope success after verifying Radiopharmaceutical --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"NMIsotope", 
						"RadiopharmaceuticalCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "NMIsotope success after verifying RadiopharmaceuticalCodeSequence" + ("success" if partial_success else "failure")) 
				if "RadiopharmaceuticalCodeSequence" in ds1:
					RadiopharmaceuticalCodeSequence_data = ds1.RadiopharmaceuticalCodeSequence
					if type(RadiopharmaceuticalCodeSequence_data) == Sequence:
						for i2 in range(0, len(RadiopharmaceuticalCodeSequence_data)):
							if verbose:
								log.append( " RadiopharmaceuticalCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RadiopharmaceuticalCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMeaningOptionalMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " NMIsotope success after verifying CodeSequenceMeaningOptionalMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"NMIsotope", 
			"InterventionDrugInformationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "NMIsotope success after verifying InterventionDrugInformationSequence" + ("success" if partial_success else "failure")) 
	if "InterventionDrugInformationSequence" in ds:
		InterventionDrugInformationSequence_data = ds.InterventionDrugInformationSequence
		if type(InterventionDrugInformationSequence_data) == Sequence:
			for i1 in range(0, len(InterventionDrugInformationSequence_data)):
				if verbose:
					log.append( " InterventionDrugInformationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = InterventionDrugInformationSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"NMIsotope", "InterventionDrugName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMIsotope success after verifying InterventionDrugName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"NMIsotope", 
						"InterventionDrugCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "NMIsotope success after verifying InterventionDrugCodeSequence" + ("success" if partial_success else "failure")) 
				if "InterventionDrugCodeSequence" in ds1:
					InterventionDrugCodeSequence_data = ds1.InterventionDrugCodeSequence
					if type(InterventionDrugCodeSequence_data) == Sequence:
						for i2 in range(0, len(InterventionDrugCodeSequence_data)):
							if verbose:
								log.append( " InterventionDrugCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = InterventionDrugCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMeaningOptionalMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " NMIsotope success after verifying CodeSequenceMeaningOptionalMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"NMIsotope", 
						"AdministrationRouteCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "NMIsotope success after verifying AdministrationRouteCodeSequence" + ("success" if partial_success else "failure")) 
				if "AdministrationRouteCodeSequence" in ds1:
					AdministrationRouteCodeSequence_data = ds1.AdministrationRouteCodeSequence
					if type(AdministrationRouteCodeSequence_data) == Sequence:
						for i2 in range(0, len(AdministrationRouteCodeSequence_data)):
							if verbose:
								log.append( " AdministrationRouteCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AdministrationRouteCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMeaningOptionalMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " NMIsotope success after verifying CodeSequenceMeaningOptionalMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"NMIsotope", "InterventionDrugStartTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMIsotope success after verifying InterventionDrugStartTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMIsotope", "InterventionDrugStopTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMIsotope success after verifying InterventionDrugStopTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMIsotope", "InterventionDrugDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMIsotope success after verifying InterventionDrugDose --> "+("success" if partial_success else "failure"))

	return global_success

def Module_NMDetector_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"NMDetector")

	partial_success = verifyType2(ds, 
			"NMDetector", 
			"DetectorInformationSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "NMDetector success after verifying DetectorInformationSequence" + ("success" if partial_success else "failure")) 
	if "DetectorInformationSequence" in ds:
		DetectorInformationSequence_data = ds.DetectorInformationSequence
		if type(DetectorInformationSequence_data) == Sequence:
			for i1 in range(0, len(DetectorInformationSequence_data)):
				if verbose:
					log.append( " DetectorInformationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DetectorInformationSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"NMDetector", "CollimatorGridName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying CollimatorGridName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"NMDetector", "CollimatorType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying CollimatorType --> "+("success" if partial_success else "failure"))

				if "CollimatorType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["CollimatorType"], 
						StringValueTable_NMCollimatorType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying string defined terms CollimatorType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMDetector", "FieldOfViewShape", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying FieldOfViewShape --> "+("success" if partial_success else "failure"))

				if "FieldOfViewShape" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FieldOfViewShape"], 
						StringValueTable_NMFieldOfViewShape, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying string defined terms FieldOfViewShape --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMDetector", "FieldOfViewDimensions", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying FieldOfViewDimensions --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMDetector", "FocalDistance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying FocalDistance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMDetector", "XFocusCenter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying XFocusCenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMDetector", "YFocusCenter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying YFocusCenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMDetector", "ZoomCenter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying ZoomCenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMDetector", "ZoomFactor", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying ZoomFactor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMDetector", "CenterOfRotationOffset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying CenterOfRotationOffset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMDetector", "GantryDetectorTilt", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying GantryDetectorTilt --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"NMDetector", "DistanceSourceToDetector", 
						verbose, log, ElementDictionary, 
						Condition_ImageTypeValue4TransmissionAndNotTomo, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMDetector", "StartAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying StartAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMDetector", "RadialPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying RadialPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"NMDetector", "ImageOrientationPatient", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying ImageOrientationPatient --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"NMDetector", "ImagePositionPatient", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMDetector success after verifying ImagePositionPatient --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"NMDetector", 
						"ViewCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "NMDetector success after verifying ViewCodeSequence" + ("success" if partial_success else "failure")) 
				if "ViewCodeSequence" in ds1:
					ViewCodeSequence_data = ds1.ViewCodeSequence
					if type(ViewCodeSequence_data) == Sequence:
						for i2 in range(0, len(ViewCodeSequence_data)):
							if verbose:
								log.append( " ViewCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ViewCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMeaningOptionalMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " NMDetector success after verifying CodeSequenceMeaningOptionalMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType2C(ds2, 
									"NMDetector", 
									"ViewModifierCodeSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									0, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "NMDetector success after verifying ViewModifierCodeSequence" + ("success" if partial_success else "failure")) 
							if "ViewModifierCodeSequence" in ds2:
								ViewModifierCodeSequence_data = ds2.ViewModifierCodeSequence
								if type(ViewModifierCodeSequence_data) == Sequence:
									for i3 in range(0, len(ViewModifierCodeSequence_data)):
										if verbose:
											log.append( " ViewModifierCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ViewModifierCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMeaningOptionalMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " NMDetector success after verifying CodeSequenceMeaningOptionalMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_NMTomoAcquisition_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"NMTomoAcquisition")

	partial_success = verifyType2(ds, 
			"NMTomoAcquisition", 
			"RotationInformationSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "NMTomoAcquisition success after verifying RotationInformationSequence" + ("success" if partial_success else "failure")) 
	if "RotationInformationSequence" in ds:
		RotationInformationSequence_data = ds.RotationInformationSequence
		if type(RotationInformationSequence_data) == Sequence:
			for i1 in range(0, len(RotationInformationSequence_data)):
				if verbose:
					log.append( " RotationInformationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RotationInformationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"NMTomoAcquisition", "StartAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMTomoAcquisition success after verifying StartAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"NMTomoAcquisition", "AngularStep", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMTomoAcquisition success after verifying AngularStep --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"NMTomoAcquisition", "RotationDirection", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMTomoAcquisition success after verifying RotationDirection --> "+("success" if partial_success else "failure"))

				if "RotationDirection" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["RotationDirection"], 
						StringValueTable_RotationDirection, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMTomoAcquisition success after verifying string enumerated values RotationDirection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"NMTomoAcquisition", "ScanArc", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMTomoAcquisition success after verifying ScanArc --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"NMTomoAcquisition", "ActualFrameDuration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMTomoAcquisition success after verifying ActualFrameDuration --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMTomoAcquisition", "RadialPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMTomoAcquisition success after verifying RadialPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"NMTomoAcquisition", "DistanceSourceToDetector", 
						verbose, log, ElementDictionary, 
						Condition_ImageTypeValue4Transmission, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMTomoAcquisition success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"NMTomoAcquisition", "NumberOfFramesInRotation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMTomoAcquisition success after verifying NumberOfFramesInRotation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMTomoAcquisition", "TableTraverse", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMTomoAcquisition success after verifying TableTraverse --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMTomoAcquisition", "TableHeight", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMTomoAcquisition success after verifying TableHeight --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMTomoAcquisition", "TypeOfDetectorMotion", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMTomoAcquisition success after verifying TypeOfDetectorMotion --> "+("success" if partial_success else "failure"))

	if "TypeOfDetectorMotion" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["TypeOfDetectorMotion"], 
			StringValueTable_NMTypeOfDetectorMotion, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMTomoAcquisition success after verifying string enumerated values TypeOfDetectorMotion --> "+("success" if partial_success else "failure"))

	return global_success

def Module_NMMultiGatedAcquisition_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"NMMultiGatedAcquisition")

	partial_success =  		verifyType3(ds, 
			"NMMultiGatedAcquisition", "BeatRejectionFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiGatedAcquisition success after verifying BeatRejectionFlag --> "+("success" if partial_success else "failure"))

	if "BeatRejectionFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BeatRejectionFlag"], 
			StringValueTable_YesNoLetter, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiGatedAcquisition success after verifying string enumerated values BeatRejectionFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMMultiGatedAcquisition", "PVCRejection", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiGatedAcquisition success after verifying PVCRejection --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMMultiGatedAcquisition", "SkipBeats", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiGatedAcquisition success after verifying SkipBeats --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMMultiGatedAcquisition", "HeartRate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMMultiGatedAcquisition success after verifying HeartRate --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2C(ds, 
			"NMMultiGatedAcquisition", 
			"GatedInformationSequence", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsRRIntervalVector, 
			False, 
			parent_ds, root_ds, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "NMMultiGatedAcquisition success after verifying GatedInformationSequence" + ("success" if partial_success else "failure")) 
	if "GatedInformationSequence" in ds:
		GatedInformationSequence_data = ds.GatedInformationSequence
		if type(GatedInformationSequence_data) == Sequence:
			for i1 in range(0, len(GatedInformationSequence_data)):
				if verbose:
					log.append( " GatedInformationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = GatedInformationSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"NMMultiGatedAcquisition", "TriggerTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMMultiGatedAcquisition success after verifying TriggerTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMMultiGatedAcquisition", "CardiacFramingType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMMultiGatedAcquisition success after verifying CardiacFramingType --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"NMMultiGatedAcquisition", 
						"DataInformationSequence", 
						verbose, log, ElementDictionary, 
									0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "NMMultiGatedAcquisition success after verifying DataInformationSequence" + ("success" if partial_success else "failure")) 
				if "DataInformationSequence" in ds1:
					DataInformationSequence_data = ds1.DataInformationSequence
					if type(DataInformationSequence_data) == Sequence:
						for i2 in range(0, len(DataInformationSequence_data)):
							if verbose:
								log.append( " DataInformationSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = DataInformationSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"NMMultiGatedAcquisition", "FrameTime", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " NMMultiGatedAcquisition success after verifying FrameTime --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"NMMultiGatedAcquisition", "NominalInterval", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " NMMultiGatedAcquisition success after verifying NominalInterval --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"NMMultiGatedAcquisition", "LowRRValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " NMMultiGatedAcquisition success after verifying LowRRValue --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"NMMultiGatedAcquisition", "HighRRValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " NMMultiGatedAcquisition success after verifying HighRRValue --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"NMMultiGatedAcquisition", "IntervalsAcquired", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " NMMultiGatedAcquisition success after verifying IntervalsAcquired --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"NMMultiGatedAcquisition", "IntervalsRejected", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " NMMultiGatedAcquisition success after verifying IntervalsRejected --> "+("success" if partial_success else "failure"))

							partial_success = verifyType2C(ds2, 
									"NMMultiGatedAcquisition", 
									"TimeSlotInformationSequence", 
									verbose, log, ElementDictionary, 
									Condition_FrameIncrementPointerContainsTimeSlotVector, 
									False, 
									parent_ds2, root_ds2, 
									0, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "NMMultiGatedAcquisition success after verifying TimeSlotInformationSequence" + ("success" if partial_success else "failure")) 
							if "TimeSlotInformationSequence" in ds2:
								TimeSlotInformationSequence_data = ds2.TimeSlotInformationSequence
								if type(TimeSlotInformationSequence_data) == Sequence:
									for i3 in range(0, len(TimeSlotInformationSequence_data)):
										if verbose:
											log.append( " TimeSlotInformationSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = TimeSlotInformationSequence_data[i3]
										partial_success =  		verifyType3(ds3, 
												"NMMultiGatedAcquisition", "TimeSlotTime", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " NMMultiGatedAcquisition success after verifying TimeSlotTime --> "+("success" if partial_success else "failure"))

	return global_success

def Module_NMPhase_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"NMPhase")

	partial_success = verifyType2C(ds, 
			"NMPhase", 
			"PhaseInformationSequence", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsPhaseVector, 
			False, 
			parent_ds, root_ds, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "NMPhase success after verifying PhaseInformationSequence" + ("success" if partial_success else "failure")) 
	if "PhaseInformationSequence" in ds:
		PhaseInformationSequence_data = ds.PhaseInformationSequence
		if type(PhaseInformationSequence_data) == Sequence:
			for i1 in range(0, len(PhaseInformationSequence_data)):
				if verbose:
					log.append( " PhaseInformationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PhaseInformationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"NMPhase", "PhaseDelay", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMPhase success after verifying PhaseDelay --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"NMPhase", "ActualFrameDuration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMPhase success after verifying ActualFrameDuration --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"NMPhase", "PauseBetweenFrames", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMPhase success after verifying PauseBetweenFrames --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"NMPhase", "NumberOfFramesInPhase", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMPhase success after verifying NumberOfFramesInPhase --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMPhase", "TriggerVector", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMPhase success after verifying TriggerVector --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"NMPhase", "NumberOfTriggersInPhase", 
						verbose, log, ElementDictionary, 
						Condition_TriggerVectorIsPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMPhase success after verifying NumberOfTriggersInPhase --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"NMPhase", "PhaseDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMPhase success after verifying PhaseDescription --> "+("success" if partial_success else "failure"))

				if "PhaseDescription" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["PhaseDescription"], 
						StringValueTable_NMPhaseDescription, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NMPhase success after verifying string defined terms PhaseDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Module_NMReconstruction_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"NMReconstruction")

	partial_success =  		verifyType2(ds, 
			"NMReconstruction", "SpacingBetweenSlices", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMReconstruction success after verifying SpacingBetweenSlices --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMReconstruction", "ReconstructionDiameter", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMReconstruction success after verifying ReconstructionDiameter --> "+("success" if partial_success else "failure"))

	if "ReconstructionDiameter" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ReconstructionDiameter"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"NMReconstruction", "ConvolutionKernel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMReconstruction success after verifying ConvolutionKernel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"NMReconstruction", "SliceThickness", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMReconstruction success after verifying SliceThickness --> "+("success" if partial_success else "failure"))

	if "SliceThickness" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["SliceThickness"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"NMReconstruction", "SliceLocation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMReconstruction success after verifying SliceLocation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"NMReconstruction", "SliceProgressionDirection", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMReconstruction success after verifying SliceProgressionDirection --> "+("success" if partial_success else "failure"))

	if "SliceProgressionDirection" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SliceProgressionDirection"], 
			StringValueTable_CardiacSliceProgressionDirection, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " NMReconstruction success after verifying string enumerated values SliceProgressionDirection --> "+("success" if partial_success else "failure"))

	return global_success

def Module_USRegionCalibration_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"USRegionCalibration")

	partial_success = verifyType1(ds, 
			"USRegionCalibration", 
			"SequenceOfUltrasoundRegions", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "USRegionCalibration success after verifying SequenceOfUltrasoundRegions" + ("success" if partial_success else "failure")) 
	if "SequenceOfUltrasoundRegions" in ds:
		SequenceOfUltrasoundRegions_data = ds.SequenceOfUltrasoundRegions
		if type(SequenceOfUltrasoundRegions_data) == Sequence:
			for i1 in range(0, len(SequenceOfUltrasoundRegions_data)):
				if verbose:
					log.append( " SequenceOfUltrasoundRegions item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SequenceOfUltrasoundRegions_data[i1]
				partial_success =  		verifyType1(ds1, 
						"USRegionCalibration", "RegionLocationMinX0", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying RegionLocationMinX0 --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"USRegionCalibration", "RegionLocationMinY0", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying RegionLocationMinY0 --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"USRegionCalibration", "RegionLocationMaxX1", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying RegionLocationMaxX1 --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"USRegionCalibration", "RegionLocationMaxY1", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying RegionLocationMaxY1 --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"USRegionCalibration", "PhysicalUnitsXDirection", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying PhysicalUnitsXDirection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"USRegionCalibration", "PhysicalUnitsYDirection", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying PhysicalUnitsYDirection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"USRegionCalibration", "PhysicalDeltaX", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying PhysicalDeltaX --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"USRegionCalibration", "PhysicalDeltaY", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying PhysicalDeltaY --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "ReferencePixelX0", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying ReferencePixelX0 --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "ReferencePixelY0", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying ReferencePixelY0 --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "ReferencePixelPhysicalValueX", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying ReferencePixelPhysicalValueX --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "ReferencePixelPhysicalValueY", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying ReferencePixelPhysicalValueY --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"USRegionCalibration", "RegionSpatialFormat", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying RegionSpatialFormat --> "+("success" if partial_success else "failure"))

				if "RegionSpatialFormat" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["RegionSpatialFormat"], 
						BinaryValueDescription_RegionSpatialFormat, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying binary enumerated values RegionSpatialFormat --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"USRegionCalibration", "RegionDataType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying RegionDataType --> "+("success" if partial_success else "failure"))

				if "RegionDataType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["RegionDataType"], 
						BinaryValueDescription_RegionDataType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying binary enumerated values RegionDataType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"USRegionCalibration", "RegionFlags", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying RegionFlags --> "+("success" if partial_success else "failure"))

				if "RegionFlags" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["RegionFlags"], 
						BinaryBitMapDescription_RegionFlags, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying BitMap enumerated values RegionFlags --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"USRegionCalibration", "PixelComponentOrganization", 
						verbose, log, ElementDictionary, 
						Condition_NeedPixelComponentOrganization, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying PixelComponentOrganization --> "+("success" if partial_success else "failure"))

				if Condition_NeedPixelComponentOrganization(ds1, parent_ds1, root_ds):
					if "PixelComponentOrganization" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues_uint16(ds1["PixelComponentOrganization"], 
							BinaryValueDescription_PixelComponentOrganization, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying binary enumerated values PixelComponentOrganization --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"USRegionCalibration", "PixelComponentMask", 
						verbose, log, ElementDictionary, 
						Condition_PixelComponentOrganizationIs0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying PixelComponentMask --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"USRegionCalibration", "PixelComponentRangeStart", 
						verbose, log, ElementDictionary, 
						Condition_PixelComponentOrganizationIs1, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying PixelComponentRangeStart --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"USRegionCalibration", "PixelComponentRangeStop", 
						verbose, log, ElementDictionary, 
						Condition_PixelComponentOrganizationIs1, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying PixelComponentRangeStop --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"USRegionCalibration", "PixelComponentPhysicalUnits", 
						verbose, log, ElementDictionary, 
						Condition_PixelComponentOrganizationPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying PixelComponentPhysicalUnits --> "+("success" if partial_success else "failure"))

				if Condition_PixelComponentOrganizationPresent(ds1, parent_ds1, root_ds):
					if "PixelComponentPhysicalUnits" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues_uint16(ds1["PixelComponentPhysicalUnits"], 
							BinaryValueDescription_PixelComponentPhysicalUnits, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying binary enumerated values PixelComponentPhysicalUnits --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"USRegionCalibration", "PixelComponentDataType", 
						verbose, log, ElementDictionary, 
						Condition_PixelComponentOrganizationPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying PixelComponentDataType --> "+("success" if partial_success else "failure"))

				if Condition_PixelComponentOrganizationPresent(ds1, parent_ds1, root_ds):
					if "PixelComponentDataType" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues_uint16(ds1["PixelComponentDataType"], 
							BinaryValueDescription_PixelComponentDataType, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying binary enumerated values PixelComponentDataType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"USRegionCalibration", "NumberOfTableBreakPoints", 
						verbose, log, ElementDictionary, 
						Condition_PixelComponentOrganizationIs0Or1, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying NumberOfTableBreakPoints --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"USRegionCalibration", "TableOfXBreakPoints", 
						verbose, log, ElementDictionary, 
						Condition_PixelComponentOrganizationIs0Or1, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying TableOfXBreakPoints --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"USRegionCalibration", "TableOfYBreakPoints", 
						verbose, log, ElementDictionary, 
						Condition_PixelComponentOrganizationIs0Or1, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying TableOfYBreakPoints --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"USRegionCalibration", "NumberOfTableEntries", 
						verbose, log, ElementDictionary, 
						Condition_PixelComponentOrganizationIs2Or3, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying NumberOfTableEntries --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"USRegionCalibration", "TableOfPixelValues", 
						verbose, log, ElementDictionary, 
						Condition_PixelComponentOrganizationIs2, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying TableOfPixelValues --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"USRegionCalibration", "TableOfParameterValues", 
						verbose, log, ElementDictionary, 
						Condition_PixelComponentOrganizationIs2, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying TableOfParameterValues --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"USRegionCalibration", 
						"PixelValueMappingCodeSequence", 
						verbose, log, ElementDictionary, 
						Condition_PixelComponentOrganizationIs3, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "USRegionCalibration success after verifying PixelValueMappingCodeSequence" + ("success" if partial_success else "failure")) 
				if "PixelValueMappingCodeSequence" in ds1:
					PixelValueMappingCodeSequence_data = ds1.PixelValueMappingCodeSequence
					if type(PixelValueMappingCodeSequence_data) == Sequence:
						for i2 in range(0, len(PixelValueMappingCodeSequence_data)):
							if verbose:
								log.append( " PixelValueMappingCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PixelValueMappingCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " USRegionCalibration success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "TransducerFrequency", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying TransducerFrequency --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "PulseRepetitionFrequency", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying PulseRepetitionFrequency --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "DopplerCorrectionAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying DopplerCorrectionAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "SteeringAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying SteeringAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "DopplerSampleVolumeXPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying DopplerSampleVolumeXPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "DopplerSampleVolumeYPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying DopplerSampleVolumeYPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "TMLinePositionX0", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying TMLinePositionX0 --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "TMLinePositionY0", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying TMLinePositionY0 --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "TMLinePositionX1", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying TMLinePositionX1 --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"USRegionCalibration", "TMLinePositionY1", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USRegionCalibration success after verifying TMLinePositionY1 --> "+("success" if partial_success else "failure"))

	return global_success

def Module_USImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"USImage")

	partial_success =  		verifyType1(ds, 
			"USImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["SamplesPerPixel"], 
			verbose, log, -1, False)


	if Condition_PhotometricInterpretationNeedsOneSample(ds, parent_ds, root_ds):
		if "SamplesPerPixel" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
				BinaryValueDescription_SamplesPerPixelIsOne, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationNeedsThreeSamples(ds, parent_ds, root_ds):
		if "SamplesPerPixel" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
				BinaryValueDescription_SamplesPerPixelIsThree, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"USImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["PhotometricInterpretation"], 
			StringValueTable_USPhotometricInterpretation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying string defined terms PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"USImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["BitsAllocated"], 
			verbose, log, -1, False)


	if Condition_US8BitSamples(ds, parent_ds, root_ds):
		if "BitsAllocated" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
				BinaryValueDescription_BitsAre8, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))


	if Condition_US8Or16BitSamples(ds, parent_ds, root_ds):
		if "BitsAllocated" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
				BinaryValueDescription_BitsAre8Or16, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"USImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["BitsStored"], 
			verbose, log, -1, False)


	if Condition_US8BitSamples(ds, parent_ds, root_ds):
		if "BitsStored" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
				BinaryValueDescription_BitsAre8, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))


	if Condition_US8Or16BitSamples(ds, parent_ds, root_ds):
		if "BitsStored" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
				BinaryValueDescription_BitsAre8Or16, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"USImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying HighBit --> "+("success" if partial_success else "failure"))


	if Condition_US8BitSamples(ds, parent_ds, root_ds):
		if "HighBit" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["HighBit"], 
				BinaryValueDescription_BitsAre7, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))


	if Condition_US8Or16BitSamples(ds, parent_ds, root_ds):
		if "HighBit" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["HighBit"], 
				BinaryValueDescription_BitsAre7Or15, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"USImage", "PlanarConfiguration", 
			verbose, log, ElementDictionary, 
			Condition_SamplesPerPixelGreaterThanOne, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying PlanarConfiguration --> "+("success" if partial_success else "failure"))

	if Condition_SamplesPerPixelGreaterThanOne(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_USPlanarConfiguration, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))


	if Condition_USNeedsColorByPlaneOrPixel(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_PlanarConfigurationIsColorByPlaneOrPixel, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))


	if Condition_USNeedsColorByPixel(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_PlanarConfigurationIsColorByPixel, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))


	if Condition_USNeedsColorByPlane(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_PlanarConfigurationIsColorByPlane, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"USImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"USImage", "FrameIncrementPointer", 
			verbose, log, ElementDictionary, 
			Condition_NumberOfFramesPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying FrameIncrementPointer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"USImage", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_USImageType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_USImageType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"USImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"USImage", "NumberOfStages", 
			verbose, log, ElementDictionary, 
			Condition_IsUltrasoundStageProtocol, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying NumberOfStages --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"USImage", "NumberOfViewsInStage", 
			verbose, log, ElementDictionary, 
			Condition_IsUltrasoundStageProtocol, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying NumberOfViewsInStage --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "RWaveTimeVector", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying RWaveTimeVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "UltrasoundColorDataPresent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying UltrasoundColorDataPresent --> "+("success" if partial_success else "failure"))

	if "UltrasoundColorDataPresent" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["UltrasoundColorDataPresent"], 
			BinaryValueDescription_UltrasoundColorDataPresent, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying binary enumerated values UltrasoundColorDataPresent --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "StageName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying StageName --> "+("success" if partial_success else "failure"))

	if "StageName" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["StageName"], 
			StringValueTable_USStageName, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying string defined terms StageName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"USImage", 
			"StageCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "USImage success after verifying StageCodeSequence" + ("success" if partial_success else "failure")) 
	if "StageCodeSequence" in ds:
		StageCodeSequence_data = ds.StageCodeSequence
		if type(StageCodeSequence_data) == Sequence:
			for i1 in range(0, len(StageCodeSequence_data)):
				if verbose:
					log.append( " StageCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = StageCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " USImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"USImage", "StageNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying StageNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "ViewName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying ViewName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "ViewNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying ViewNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "NumberOfEventTimers", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying NumberOfEventTimers --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "EventElapsedTimes", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying EventElapsedTimes --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "EventTimerNames", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying EventTimerNames --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_GeneralAnatomyOptionalMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " USImage success after verifying GeneralAnatomyOptionalMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_OptionalViewAndSliceProgressionDirectionMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " USImage success after verifying OptionalViewAndSliceProgressionDirectionMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"USImage", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			Condition_ModalityIsIVUS, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "TriggerTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying TriggerTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "NominalInterval", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying NominalInterval --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "BeatRejectionFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying BeatRejectionFlag --> "+("success" if partial_success else "failure"))

	if "BeatRejectionFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BeatRejectionFlag"], 
			StringValueTable_YesNoLetter, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying string enumerated values BeatRejectionFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "LowRRValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying LowRRValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "HighRRValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying HighRRValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "HeartRate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying HeartRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"USImage", "IVUSAcquisition", 
			verbose, log, ElementDictionary, 
			Condition_ModalityIsIVUS, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying IVUSAcquisition --> "+("success" if partial_success else "failure"))

	if Condition_ModalityIsIVUS(ds, parent_ds, root_ds):
		if "IVUSAcquisition" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["IVUSAcquisition"], 
				StringValueTable_IVUSAcquisition, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying string defined terms IVUSAcquisition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"USImage", "IVUSPullbackRate", 
			verbose, log, ElementDictionary, 
			Condition_IVUSAcquisitionIsMotor, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying IVUSPullbackRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"USImage", "IVUSGatedRate", 
			verbose, log, ElementDictionary, 
			Condition_IVUSAcquisitionIsGated, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying IVUSGatedRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"USImage", "IVUSPullbackStartFrameNumber", 
			verbose, log, ElementDictionary, 
			Condition_IVUSAcquisitionIsMotorOrGated, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying IVUSPullbackStartFrameNumber --> "+("success" if partial_success else "failure"))

	if Condition_IVUSAcquisitionIsMotorOrGated(ds, parent_ds, root_ds):
		if "IVUSPullbackStartFrameNumber" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["IVUSPullbackStartFrameNumber"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"USImage", "IVUSPullbackStopFrameNumber", 
			verbose, log, ElementDictionary, 
			Condition_IVUSAcquisitionIsMotorOrGated, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying IVUSPullbackStopFrameNumber --> "+("success" if partial_success else "failure"))

	if Condition_IVUSAcquisitionIsMotorOrGated(ds, parent_ds, root_ds):
		if "IVUSPullbackStopFrameNumber" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["IVUSPullbackStopFrameNumber"], 
				verbose, log, -1, False)

	partial_success =  		verifyType3(ds, 
			"USImage", "LesionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying LesionNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "OutputPower", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying OutputPower --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "TransducerData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying TransducerData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "TransducerType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying TransducerType --> "+("success" if partial_success else "failure"))

	if "TransducerType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["TransducerType"], 
			StringValueTable_USTransducerType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying string defined terms TransducerType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "FocusDepth", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying FocusDepth --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "ProcessingFunction", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying ProcessingFunction --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "MechanicalIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying MechanicalIndex --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "BoneThermalIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying BoneThermalIndex --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "CranialThermalIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying CranialThermalIndex --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "SoftTissueThermalIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying SoftTissueThermalIndex --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "SoftTissueFocusThermalIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying SoftTissueFocusThermalIndex --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "SoftTissueSurfaceThermalIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying SoftTissueSurfaceThermalIndex --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "DepthOfScanField", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying DepthOfScanField --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"USImage", "OverlaySubtype", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying OverlaySubtype --> "+("success" if partial_success else "failure"))

	if "OverlaySubtype" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["OverlaySubtype"], 
			StringValueTable_OverlaySubtypeUS, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " USImage success after verifying string defined terms OverlaySubtype --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SCEquipment_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SCEquipment")

	partial_success =  		verifyType1(ds, 
			"SCEquipment", "ConversionType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCEquipment success after verifying ConversionType --> "+("success" if partial_success else "failure"))

	if "ConversionType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ConversionType"], 
			StringValueTable_ConversionType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCEquipment success after verifying string defined terms ConversionType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SCEquipment", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCEquipment success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["Modality"], 
			StringValueTable_Modality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCEquipment success after verifying string defined terms Modality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SCEquipment", "SecondaryCaptureDeviceID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCEquipment success after verifying SecondaryCaptureDeviceID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SCEquipment", "SecondaryCaptureDeviceManufacturer", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCEquipment success after verifying SecondaryCaptureDeviceManufacturer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SCEquipment", "SecondaryCaptureDeviceManufacturerModelName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCEquipment success after verifying SecondaryCaptureDeviceManufacturerModelName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SCEquipment", "SecondaryCaptureDeviceSoftwareVersions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCEquipment success after verifying SecondaryCaptureDeviceSoftwareVersions --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SCEquipment", "VideoImageFormatAcquired", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCEquipment success after verifying VideoImageFormatAcquired --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SCEquipment", "DigitalImageFormatAcquired", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCEquipment success after verifying DigitalImageFormatAcquired --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SCImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SCImage")

	partial_success =  		verifyType3(ds, 
			"SCImage", "DateOfSecondaryCapture", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCImage success after verifying DateOfSecondaryCapture --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SCImage", "TimeOfSecondaryCapture", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCImage success after verifying TimeOfSecondaryCapture --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SCImage", "NominalScannedPixelSpacing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCImage success after verifying NominalScannedPixelSpacing --> "+("success" if partial_success else "failure"))

	if "NominalScannedPixelSpacing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["NominalScannedPixelSpacing"], 
			verbose, log, -1, False)

	partial_success =  Macro_BasicPixelSpacingCalibrationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SCImage success after verifying BasicPixelSpacingCalibrationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_OptionalViewAndSliceProgressionDirectionMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SCImage success after verifying OptionalViewAndSliceProgressionDirectionMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_SCMultiFrameImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SCMultiFrameImage")

	partial_success =  		verifyType1(ds, 
			"SCMultiFrameImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SCMultiFrameImage", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SCMultiFrameImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			Condition_MonochromeNotBitmapPhotometricInterpretation, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if Condition_MonochromeNotBitmapPhotometricInterpretation(ds, parent_ds, root_ds):
		if "PresentationLUTShape" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
				StringValueTable_SecondaryCapturePresentationLUTShape, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SCMultiFrameImage", "Illumination", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying Illumination --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SCMultiFrameImage", "ReflectedAmbientLight", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying ReflectedAmbientLight --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SCMultiFrameImage", "RescaleIntercept", 
			verbose, log, ElementDictionary, 
			Condition_MonochromeNotBitmapPhotometricInterpretation, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying RescaleIntercept --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SCMultiFrameImage", "RescaleSlope", 
			verbose, log, ElementDictionary, 
			Condition_MonochromeNotBitmapPhotometricInterpretation, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying RescaleSlope --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SCMultiFrameImage", "RescaleType", 
			verbose, log, ElementDictionary, 
			Condition_MonochromeNotBitmapPhotometricInterpretation, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying RescaleType --> "+("success" if partial_success else "failure"))

	if Condition_MonochromeNotBitmapPhotometricInterpretation(ds, parent_ds, root_ds):
		if "RescaleType" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["RescaleType"], 
				StringValueTable_RescaleTypeUnspecified, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying string defined terms RescaleType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SCMultiFrameImage", "FrameIncrementPointer", 
			verbose, log, ElementDictionary, 
			Condition_NumberOfFramesGreaterThanOne, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying FrameIncrementPointer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SCMultiFrameImage", "NominalScannedPixelSpacing", 
			verbose, log, ElementDictionary, 
			Condition_ConversionTypeDigitizedFilm, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying NominalScannedPixelSpacing --> "+("success" if partial_success else "failure"))

	if Condition_ConversionTypeDigitizedFilm(ds, parent_ds, root_ds):
		if "NominalScannedPixelSpacing" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["NominalScannedPixelSpacing"], 
				verbose, log, -1, False)


	if Condition_NominalScannedPixelSpacingPresentAndConversionTypeNotDigitizedFilmScannedDocumentScannedImage(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May not be present unless ConversionType is DF, SD or SI - attribute <NominalScannedPixelSpacing>")

	partial_success =  Macro_BasicPixelSpacingCalibrationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SCMultiFrameImage success after verifying BasicPixelSpacingCalibrationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"SCMultiFrameImage", "DigitizingDeviceTransportDirection", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying DigitizingDeviceTransportDirection --> "+("success" if partial_success else "failure"))

	if "DigitizingDeviceTransportDirection" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["DigitizingDeviceTransportDirection"], 
			StringValueTable_TransportDirection, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying string enumerated values DigitizingDeviceTransportDirection --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SCMultiFrameImage", "RotationOfScannedFilm", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameImage success after verifying RotationOfScannedFilm --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SCMultiFrameVector_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SCMultiFrameVector")

	partial_success =  		verifyType1C(ds, 
			"SCMultiFrameVector", "FrameTimeVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsFrameTimeVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameVector success after verifying FrameTimeVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SCMultiFrameVector", "PageNumberVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsPageNumberVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameVector success after verifying PageNumberVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SCMultiFrameVector", "FrameLabelVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsFrameLabelVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameVector success after verifying FrameLabelVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SCMultiFrameVector", "FramePrimaryAngleVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsFramePrimaryAngleVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameVector success after verifying FramePrimaryAngleVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SCMultiFrameVector", "FrameSecondaryAngleVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsFrameSecondaryAngleVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameVector success after verifying FrameSecondaryAngleVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SCMultiFrameVector", "SliceLocationVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsSliceLocationVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameVector success after verifying SliceLocationVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SCMultiFrameVector", "DisplayWindowLabelVector", 
			verbose, log, ElementDictionary, 
			Condition_FrameIncrementPointerContainsDisplayWindowLabelVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SCMultiFrameVector success after verifying DisplayWindowLabelVector --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiFrameFunctionalGroupsForMFSC_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForMFSC")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForMFSC", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForMFSC success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequenceAndPlanePositionSequenceOrPlaneOrientationSequencePresent(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMFSC success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequenceAndPixelMeasuresSequenceOrPlaneOrientationSequencePresent(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMFSC success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequenceAndPixelMeasuresSequenceOrPlanePositionSequencePresent(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMFSC success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForMFSC", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForMFSC success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequenceAndPlanePositionSequenceOrPlaneOrientationSequencePresent(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMFSC success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequenceAndPixelMeasuresSequenceOrPlaneOrientationSequencePresent(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMFSC success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequenceAndPixelMeasuresSequenceOrPlanePositionSequencePresent(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMFSC success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_OverlayIdentification_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OverlayIdentification")

	partial_success =  		verifyType2(ds, 
			"OverlayIdentification", "OverlayNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayIdentification success after verifying OverlayNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OverlayIdentification", "OverlayDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayIdentification success after verifying OverlayDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OverlayIdentification", "OverlayTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayIdentification success after verifying OverlayTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"OverlayIdentification", 
			"ReferencedImageSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OverlayIdentification success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageSequence" in ds:
		ReferencedImageSequence_data = ds.ReferencedImageSequence
		if type(ReferencedImageSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageSequence_data)):
				if verbose:
					log.append( " ReferencedImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"OverlayIdentification", "ReferencedSOPClassUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OverlayIdentification success after verifying ReferencedSOPClassUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"OverlayIdentification", "ReferencedSOPInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OverlayIdentification success after verifying ReferencedSOPInstanceUID --> "+("success" if partial_success else "failure"))

	return global_success

def Module_OverlayPlane_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OverlayPlane")

	partial_success =  		verifyType1(ds, 
			"OverlayPlane", "OverlayRows", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying OverlayRows --> "+("success" if partial_success else "failure"))

	if "OverlayRows" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["OverlayRows"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"OverlayPlane", "OverlayColumns", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying OverlayColumns --> "+("success" if partial_success else "failure"))

	if "OverlayColumns" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["OverlayColumns"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"OverlayPlane", "OverlayType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying OverlayType --> "+("success" if partial_success else "failure"))

	if "OverlayType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["OverlayType"], 
			StringValueTable_OverlayType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying string enumerated values OverlayType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OverlayPlane", "OverlayOrigin", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying OverlayOrigin --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OverlayPlane", "OverlayBitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying OverlayBitsAllocated --> "+("success" if partial_success else "failure"))

	if "OverlayBitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["OverlayBitsAllocated"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying binary enumerated values OverlayBitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OverlayPlane", "OverlayBitPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying OverlayBitPosition --> "+("success" if partial_success else "failure"))

	if "OverlayBitPosition" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["OverlayBitPosition"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying binary enumerated values OverlayBitPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OverlayPlane", "OverlayData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying OverlayData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OverlayPlane", "OverlayDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying OverlayDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OverlayPlane", "OverlaySubtype", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying OverlaySubtype --> "+("success" if partial_success else "failure"))

	if "OverlaySubtype" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["OverlaySubtype"], 
			StringValueTable_OverlaySubtype, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying string defined terms OverlaySubtype --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OverlayPlane", "OverlayLabel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying OverlayLabel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OverlayPlane", "ROIArea", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying ROIArea --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OverlayPlane", "ROIMean", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying ROIMean --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OverlayPlane", "ROIStandardDeviation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayPlane success after verifying ROIStandardDeviation --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiFrameOverlay_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameOverlay")

	partial_success =  		verifyType1(ds, 
			"MultiFrameOverlay", "NumberOfFramesInOverlay", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameOverlay success after verifying NumberOfFramesInOverlay --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MultiFrameOverlay", "ImageFrameOrigin", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiFrameOverlay success after verifying ImageFrameOrigin --> "+("success" if partial_success else "failure"))

	return global_success

def Module_CurveIdentification_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"CurveIdentification")

	partial_success =  		verifyType2(ds, 
			"CurveIdentification", "CurveNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CurveIdentification success after verifying CurveNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CurveIdentification", "CurveDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CurveIdentification success after verifying CurveDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"CurveIdentification", "CurveTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CurveIdentification success after verifying CurveTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"CurveIdentification", 
			"ReferencedImageSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CurveIdentification success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageSequence" in ds:
		ReferencedImageSequence_data = ds.ReferencedImageSequence
		if type(ReferencedImageSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageSequence_data)):
				if verbose:
					log.append( " ReferencedImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"CurveIdentification", "ReferencedSOPClassUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CurveIdentification success after verifying ReferencedSOPClassUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"CurveIdentification", "ReferencedSOPInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CurveIdentification success after verifying ReferencedSOPInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"CurveIdentification", 
			"ReferencedOverlaySequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CurveIdentification success after verifying ReferencedOverlaySequence" + ("success" if partial_success else "failure")) 
	if "ReferencedOverlaySequence" in ds:
		ReferencedOverlaySequence_data = ds.ReferencedOverlaySequence
		if type(ReferencedOverlaySequence_data) == Sequence:
			for i1 in range(0, len(ReferencedOverlaySequence_data)):
				if verbose:
					log.append( " ReferencedOverlaySequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedOverlaySequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"CurveIdentification", "ReferencedSOPClassUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CurveIdentification success after verifying ReferencedSOPClassUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"CurveIdentification", "ReferencedSOPInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CurveIdentification success after verifying ReferencedSOPInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"CurveIdentification", 
			"ReferencedCurveSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CurveIdentification success after verifying ReferencedCurveSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedCurveSequence" in ds:
		ReferencedCurveSequence_data = ds.ReferencedCurveSequence
		if type(ReferencedCurveSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedCurveSequence_data)):
				if verbose:
					log.append( " ReferencedCurveSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedCurveSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"CurveIdentification", "ReferencedSOPClassUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CurveIdentification success after verifying ReferencedSOPClassUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"CurveIdentification", "ReferencedSOPInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CurveIdentification success after verifying ReferencedSOPInstanceUID --> "+("success" if partial_success else "failure"))

	return global_success

def Module_Curve_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"Curve")

	partial_success =  		verifyType1(ds, 
			"Curve", "CurveDimensions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying CurveDimensions --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"Curve", "NumberOfPoints", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying NumberOfPoints --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"Curve", "TypeOfData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying TypeOfData --> "+("success" if partial_success else "failure"))

	if "TypeOfData" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["TypeOfData"], 
			StringValueTable_CurveTypeOfData, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying string defined terms TypeOfData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"Curve", "DataValueRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying DataValueRepresentation --> "+("success" if partial_success else "failure"))

	if "DataValueRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["DataValueRepresentation"], 
			BinaryValueDescription_CurveDataValueRepresentation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying binary enumerated values DataValueRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"Curve", "CurveData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying CurveData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Curve", "CurveDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying CurveDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Curve", "AxisUnits", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying AxisUnits --> "+("success" if partial_success else "failure"))

	if "AxisUnits" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["AxisUnits"], 
			StringValueTable_CurveAxisUnits, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying string defined terms AxisUnits --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Curve", "AxisLabels", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying AxisLabels --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Curve", "MinimumCoordinateValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying MinimumCoordinateValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Curve", "MaximumCoordinateValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying MaximumCoordinateValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Curve", "CurveRange", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying CurveRange --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"Curve", "CurveDataDescriptor", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying CurveDataDescriptor --> "+("success" if partial_success else "failure"))

	if Condition_Never(ds, parent_ds, root_ds):
		if "CurveDataDescriptor" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["CurveDataDescriptor"], 
				BinaryValueDescription_CurveDataDescriptor, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying binary enumerated values CurveDataDescriptor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"Curve", "CoordinateStartValue", 
			verbose, log, ElementDictionary, 
			Condition_CurveDataDescriptorPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying CoordinateStartValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"Curve", "CoordinateStepValue", 
			verbose, log, ElementDictionary, 
			Condition_CurveDataDescriptorPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying CoordinateStepValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Curve", "CurveLabel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Curve success after verifying CurveLabel --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"Curve", 
			"ReferencedOverlaySequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Curve success after verifying ReferencedOverlaySequence" + ("success" if partial_success else "failure")) 
	if "ReferencedOverlaySequence" in ds:
		ReferencedOverlaySequence_data = ds.ReferencedOverlaySequence
		if type(ReferencedOverlaySequence_data) == Sequence:
			for i1 in range(0, len(ReferencedOverlaySequence_data)):
				if verbose:
					log.append( " ReferencedOverlaySequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedOverlaySequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"Curve", "ReferencedSOPClassUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Curve success after verifying ReferencedSOPClassUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"Curve", "ReferencedSOPInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Curve success after verifying ReferencedSOPInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"Curve", "CurveReferencedOverlayGroup", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Curve success after verifying CurveReferencedOverlayGroup --> "+("success" if partial_success else "failure"))

	return global_success

def Module_Audio_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"Audio")

	partial_success =  		verifyType1(ds, 
			"Audio", "AudioType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Audio success after verifying AudioType --> "+("success" if partial_success else "failure"))

	if "AudioType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["AudioType"], 
			BinaryValueDescription_AudioType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Audio success after verifying binary enumerated values AudioType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"Audio", "AudioSampleFormat", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Audio success after verifying AudioSampleFormat --> "+("success" if partial_success else "failure"))

	if "AudioSampleFormat" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["AudioSampleFormat"], 
			BinaryValueDescription_AudioSampleFormat, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Audio success after verifying binary enumerated values AudioSampleFormat --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"Audio", "NumberOfChannels", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Audio success after verifying NumberOfChannels --> "+("success" if partial_success else "failure"))

	if "NumberOfChannels" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["NumberOfChannels"], 
			BinaryValueDescription_NumberOfChannels, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Audio success after verifying binary enumerated values NumberOfChannels --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"Audio", "NumberOfSamples", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Audio success after verifying NumberOfSamples --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"Audio", "SampleRate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Audio success after verifying SampleRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"Audio", "TotalTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Audio success after verifying TotalTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"Audio", "AudioSampleData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Audio success after verifying AudioSampleData --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"Audio", 
			"ReferencedImageSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Audio success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageSequence" in ds:
		ReferencedImageSequence_data = ds.ReferencedImageSequence
		if type(ReferencedImageSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageSequence_data)):
				if verbose:
					log.append( " ReferencedImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"Audio", "ReferencedSOPClassUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Audio success after verifying ReferencedSOPClassUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"Audio", "ReferencedSOPInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Audio success after verifying ReferencedSOPInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyRequired(ds , 
			"Audio", "AudioComments", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Audio success after verifying AudioComments --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_ModalityLUTMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ModalityLUTMacro")

	partial_success = verifyType1C(ds, 
			"ModalityLUTMacro", 
			"ModalityLUTSequence", 
			verbose, log, ElementDictionary, 
			Condition_RescaleInterceptNotPresent, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ModalityLUTMacro success after verifying ModalityLUTSequence" + ("success" if partial_success else "failure")) 
	if "ModalityLUTSequence" in ds:
		ModalityLUTSequence_data = ds.ModalityLUTSequence
		if type(ModalityLUTSequence_data) == Sequence:
			for i1 in range(0, len(ModalityLUTSequence_data)):
				if verbose:
					log.append( " ModalityLUTSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ModalityLUTSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"ModalityLUTMacro", "LUTDescriptor", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ModalityLUTMacro success after verifying LUTDescriptor --> "+("success" if partial_success else "failure"))


				if "LUTDescriptor" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["LUTDescriptor"], 
						BinaryValueDescription_BitsAre8Or16, 
						verbose, log, 2)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ModalityLUTMacro success after verifying binary enumerated values LUTDescriptor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"ModalityLUTMacro", "LUTExplanation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ModalityLUTMacro success after verifying LUTExplanation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"ModalityLUTMacro", "ModalityLUTType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ModalityLUTMacro success after verifying ModalityLUTType --> "+("success" if partial_success else "failure"))

				if "ModalityLUTType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ModalityLUTType"], 
						StringValueTable_ModalityLUTType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ModalityLUTMacro success after verifying string defined terms ModalityLUTType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"ModalityLUTMacro", "LUTData", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ModalityLUTMacro success after verifying LUTData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ModalityLUTMacro", "RescaleIntercept", 
			verbose, log, ElementDictionary, 
			Condition_ModalityLUTSequenceNotPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ModalityLUTMacro success after verifying RescaleIntercept --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ModalityLUTMacro", "RescaleSlope", 
			verbose, log, ElementDictionary, 
			Condition_RescaleInterceptPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ModalityLUTMacro success after verifying RescaleSlope --> "+("success" if partial_success else "failure"))

	if Condition_RescaleInterceptPresent(ds, parent_ds, root_ds):
		if "RescaleSlope" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["RescaleSlope"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"ModalityLUTMacro", "RescaleType", 
			verbose, log, ElementDictionary, 
			Condition_RescaleInterceptPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ModalityLUTMacro success after verifying RescaleType --> "+("success" if partial_success else "failure"))

	if Condition_RescaleInterceptPresent(ds, parent_ds, root_ds):
		if "RescaleType" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["RescaleType"], 
				StringValueTable_ModalityLUTType, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ModalityLUTMacro success after verifying string defined terms RescaleType --> "+("success" if partial_success else "failure"))


	if  not Condition_PhotometricInterpretationIsGrayscaleOrAbsent(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" Modality LUT Module (Rescale Slope and Intercept) not appropriate for non-grayscale images - attribute <PhotometricInterpretation>"+\
				" = <{}>".format( tag_for_keyword("PhotometricInterpretation")))

	return global_success

def Module_ModalityLUT_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ModalityLUT")

	partial_success =  Macro_ModalityLUTMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " ModalityLUT success after verifying ModalityLUTMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_VOILUTMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"VOILUTMacro")

	partial_success = verifyType1C(ds, 
			"VOILUTMacro", 
			"VOILUTSequence", 
			verbose, log, ElementDictionary, 
			Condition_MonochromeAndWindowCenterNotPresent, 
			True, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VOILUTMacro success after verifying VOILUTSequence" + ("success" if partial_success else "failure")) 
	if "VOILUTSequence" in ds:
		VOILUTSequence_data = ds.VOILUTSequence
		if type(VOILUTSequence_data) == Sequence:
			for i1 in range(0, len(VOILUTSequence_data)):
				if verbose:
					log.append( " VOILUTSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VOILUTSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"VOILUTMacro", "LUTDescriptor", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VOILUTMacro success after verifying LUTDescriptor --> "+("success" if partial_success else "failure"))


				if Condition_VOILUTSequenceLUTDescriptorRequiredToBe8Or16(ds1, parent_ds1, root_ds):
					if "LUTDescriptor" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues_uint16(ds1["LUTDescriptor"], 
							BinaryValueDescription_BitsAre8Or16, 
							verbose, log, 2)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " VOILUTMacro success after verifying binary enumerated values LUTDescriptor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"VOILUTMacro", "LUTExplanation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VOILUTMacro success after verifying LUTExplanation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"VOILUTMacro", "LUTData", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VOILUTMacro success after verifying LUTData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VOILUTMacro", "WindowCenter", 
			verbose, log, ElementDictionary, 
			Condition_MonochromeAndVOILUTSequenceNotPresent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VOILUTMacro success after verifying WindowCenter --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VOILUTMacro", "WindowWidth", 
			verbose, log, ElementDictionary, 
			Condition_WindowCenterPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VOILUTMacro success after verifying WindowWidth --> "+("success" if partial_success else "failure"))

	if Condition_WindowCenterPresent(ds, parent_ds, root_ds):
		if "WindowWidth" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["WindowWidth"], 
				verbose, log, -1, False)


	if Condition_WindowWidthIsNegative(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Not permitted to be negative - attribute <WindowWidth>"+\
				" = <{}>".format( tag_for_keyword("WindowWidth")))


	if Condition_WindowWidthIsLessThanOneAndNotExact(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Not permitted to be < 1 unless VOI LUT Function is LINEAR_EXACT or SIGMOID - attribute <WindowWidth>"+\
				" = <{}>".format( tag_for_keyword("WindowWidth")))


	if Condition_WindowWidthIsZeroAndSigmoid(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Not permitted to be 0 when VOI LUT Function is SIGMOID - attribute <WindowWidth>"+\
				" = <{}>".format( tag_for_keyword("WindowWidth")))

	partial_success =  		verifyType3(ds, 
			"VOILUTMacro", "WindowCenterWidthExplanation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VOILUTMacro success after verifying WindowCenterWidthExplanation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"VOILUTMacro", "VOILUTFunction", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VOILUTMacro success after verifying VOILUTFunction --> "+("success" if partial_success else "failure"))

	if "VOILUTFunction" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["VOILUTFunction"], 
			StringValueTable_VOILUTFunction, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VOILUTMacro success after verifying string defined terms VOILUTFunction --> "+("success" if partial_success else "failure"))


	if  not Condition_PhotometricInterpretationIsGrayscaleOrAbsent(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" VOI LUT Module (Window Center and Width) not appropriate for non-grayscale images - attribute <PhotometricInterpretation>"+\
				" = <{}>".format( tag_for_keyword("PhotometricInterpretation")))

	return global_success

def Module_VOILUT_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"VOILUT")

	partial_success =  Macro_VOILUTMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " VOILUT success after verifying VOILUTMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_LUTIdentification_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"LUTIdentification")

	partial_success =  		verifyType2(ds, 
			"LUTIdentification", "LUTNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " LUTIdentification success after verifying LUTNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"LUTIdentification", 
			"ReferencedImageSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "LUTIdentification success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageSequence" in ds:
		ReferencedImageSequence_data = ds.ReferencedImageSequence
		if type(ReferencedImageSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageSequence_data)):
				if verbose:
					log.append( " ReferencedImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"LUTIdentification", "ReferencedSOPClassUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " LUTIdentification success after verifying ReferencedSOPClassUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"LUTIdentification", "ReferencedSOPInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " LUTIdentification success after verifying ReferencedSOPInstanceUID --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_DigitalSignaturesMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"DigitalSignaturesMacro")

	partial_success = verifyType3(ds, 
			"DigitalSignaturesMacro", 
			"MACParametersSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DigitalSignaturesMacro success after verifying MACParametersSequence" + ("success" if partial_success else "failure")) 
	if "MACParametersSequence" in ds:
		MACParametersSequence_data = ds.MACParametersSequence
		if type(MACParametersSequence_data) == Sequence:
			for i1 in range(0, len(MACParametersSequence_data)):
				if verbose:
					log.append( " MACParametersSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MACParametersSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"DigitalSignaturesMacro", "MACIDNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying MACIDNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DigitalSignaturesMacro", "MACCalculationTransferSyntaxUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying MACCalculationTransferSyntaxUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DigitalSignaturesMacro", "MACAlgorithm", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying MACAlgorithm --> "+("success" if partial_success else "failure"))

				if "MACAlgorithm" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["MACAlgorithm"], 
						StringValueTable_MACAlgorithm, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying string defined terms MACAlgorithm --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DigitalSignaturesMacro", "DataElementsSigned", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying DataElementsSigned --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"DigitalSignaturesMacro", 
			"DigitalSignaturesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DigitalSignaturesMacro success after verifying DigitalSignaturesSequence" + ("success" if partial_success else "failure")) 
	if "DigitalSignaturesSequence" in ds:
		DigitalSignaturesSequence_data = ds.DigitalSignaturesSequence
		if type(DigitalSignaturesSequence_data) == Sequence:
			for i1 in range(0, len(DigitalSignaturesSequence_data)):
				if verbose:
					log.append( " DigitalSignaturesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DigitalSignaturesSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"DigitalSignaturesMacro", "MACIDNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying MACIDNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DigitalSignaturesMacro", "DigitalSignatureUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying DigitalSignatureUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DigitalSignaturesMacro", "DigitalSignatureDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying DigitalSignatureDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DigitalSignaturesMacro", "CertificateType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying CertificateType --> "+("success" if partial_success else "failure"))

				if "CertificateType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["CertificateType"], 
						StringValueTable_CertificateType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying string defined terms CertificateType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DigitalSignaturesMacro", "CertificateOfSigner", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying CertificateOfSigner --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DigitalSignaturesMacro", "Signature", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying Signature --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"DigitalSignaturesMacro", "CertifiedTimestampType", 
						verbose, log, ElementDictionary, 
						Condition_CertifiedTimestampIsPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying CertifiedTimestampType --> "+("success" if partial_success else "failure"))

				if Condition_CertifiedTimestampIsPresent(ds1, parent_ds1, root_ds):
					if "CertifiedTimestampType" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["CertifiedTimestampType"], 
							StringValueTable_CertifiedTimestampType, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying string defined terms CertifiedTimestampType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"DigitalSignaturesMacro", "CertifiedTimestamp", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DigitalSignaturesMacro success after verifying CertifiedTimestamp --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"DigitalSignaturesMacro", 
						"DigitalSignaturePurposeCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "DigitalSignaturesMacro success after verifying DigitalSignaturePurposeCodeSequence" + ("success" if partial_success else "failure")) 
				if "DigitalSignaturePurposeCodeSequence" in ds1:
					DigitalSignaturePurposeCodeSequence_data = ds1.DigitalSignaturePurposeCodeSequence
					if type(DigitalSignaturePurposeCodeSequence_data) == Sequence:
						for i2 in range(0, len(DigitalSignaturePurposeCodeSequence_data)):
							if verbose:
								log.append( " DigitalSignaturePurposeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = DigitalSignaturePurposeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " DigitalSignaturesMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_SOPCommon_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SOPCommon")

	partial_success =  		verifyType1(ds, 
			"SOPCommon", "SOPClassUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying SOPClassUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SOPCommon", "SOPInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying SOPInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SOPCommon", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "InstanceCreationDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying InstanceCreationDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "InstanceCreationTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying InstanceCreationTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "InstanceCoercionDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying InstanceCoercionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "InstanceCreatorUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying InstanceCreatorUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "RelatedGeneralSOPClassUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying RelatedGeneralSOPClassUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "OriginalSpecializedSOPClassUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying OriginalSpecializedSOPClassUID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"SOPCommon", 
			"CodingSchemeIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SOPCommon success after verifying CodingSchemeIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "CodingSchemeIdentificationSequence" in ds:
		CodingSchemeIdentificationSequence_data = ds.CodingSchemeIdentificationSequence
		if type(CodingSchemeIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(CodingSchemeIdentificationSequence_data)):
				if verbose:
					log.append( " CodingSchemeIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CodingSchemeIdentificationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "CodingSchemeDesignator", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				if "CodingSchemeDesignator" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["CodingSchemeDesignator"], 
						StringValueTable_MiscellaneousCodingSchemeDesignators, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string defined terms CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"SOPCommon", "CodingSchemeRegistry", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying CodingSchemeRegistry --> "+("success" if partial_success else "failure"))

				if "CodingSchemeRegistry" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["CodingSchemeRegistry"], 
						StringValueTable_CodingSchemeRegistries, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string defined terms CodingSchemeRegistry --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"SOPCommon", "CodingSchemeUID", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying CodingSchemeUID --> "+("success" if partial_success else "failure"))

				if "CodingSchemeUID" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["CodingSchemeUID"], 
						StringValueTable_MiscellaneousCodingSchemeUIDs, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string defined terms CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsACR(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForACR, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsASTMSigpurpose(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForASTMSigpurpose, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsC4(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForC4, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsC5(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForC5, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsCD2(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForCD2, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsCTV3(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForCTV3, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsDCM(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForDCM, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsDCMUID(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForDCMUID, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsHPC(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForHPC, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsI10(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForI10, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsI10P(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForI10P, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsI9(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForI9, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsI9C(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForI9C, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsISO3166_1(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForISO3166_1, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsISO639_1(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForISO639_1, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsISO639_2(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForISO639_2, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsLN(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForLN, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsPOS(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForPOS, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsRFC3066(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForRFC3066, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsSNM3(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForSNM3, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsSCT(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForSCT, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsSRT(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForSRT, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsUCUM(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForUCUM, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsUMLS(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForUMLS, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))


				if Condition_CodingSchemeDesignatorIsUPC(ds1, parent_ds1, root_ds):
					if "CodingSchemeUID" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodingSchemeUID"], 
							StringValueTable_CodingSchemeUIDForUPC, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values CodingSchemeUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"SOPCommon", "CodingSchemeExternalID", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying CodingSchemeExternalID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "CodingSchemeName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying CodingSchemeName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "CodingSchemeVersion", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying CodingSchemeVersion --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "CodingSchemeResponsibleOrganization", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying CodingSchemeResponsibleOrganization --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SOPCommon", 
						"CodingSchemeResourcesSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SOPCommon success after verifying CodingSchemeResourcesSequence" + ("success" if partial_success else "failure")) 
				if "CodingSchemeResourcesSequence" in ds1:
					CodingSchemeResourcesSequence_data = ds1.CodingSchemeResourcesSequence
					if type(CodingSchemeResourcesSequence_data) == Sequence:
						for i2 in range(0, len(CodingSchemeResourcesSequence_data)):
							if verbose:
								log.append( " CodingSchemeResourcesSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = CodingSchemeResourcesSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"SOPCommon", "CodingSchemeURLType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying CodingSchemeURLType --> "+("success" if partial_success else "failure"))

							if "CodingSchemeURLType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["CodingSchemeURLType"], 
									StringValueTable_CodingSchemeURLType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying string defined terms CodingSchemeURLType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"SOPCommon", "CodingSchemeURL", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying CodingSchemeURL --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"SOPCommon", 
			"ContextGroupIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SOPCommon success after verifying ContextGroupIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "ContextGroupIdentificationSequence" in ds:
		ContextGroupIdentificationSequence_data = ds.ContextGroupIdentificationSequence
		if type(ContextGroupIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(ContextGroupIdentificationSequence_data)):
				if verbose:
					log.append( " ContextGroupIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContextGroupIdentificationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "ContextIdentifier", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying ContextIdentifier --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "ContextUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying ContextUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "MappingResource", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying MappingResource --> "+("success" if partial_success else "failure"))

				if "MappingResource" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["MappingResource"], 
						StringValueTable_MappingResources, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string defined terms MappingResource --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "ContextGroupVersion", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying ContextGroupVersion --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"SOPCommon", 
			"MappingResourceIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SOPCommon success after verifying MappingResourceIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "MappingResourceIdentificationSequence" in ds:
		MappingResourceIdentificationSequence_data = ds.MappingResourceIdentificationSequence
		if type(MappingResourceIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(MappingResourceIdentificationSequence_data)):
				if verbose:
					log.append( " MappingResourceIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MappingResourceIdentificationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "MappingResource", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying MappingResource --> "+("success" if partial_success else "failure"))

				if "MappingResource" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["MappingResource"], 
						StringValueTable_MappingResources, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string defined terms MappingResource --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "MappingResourceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying MappingResourceUID --> "+("success" if partial_success else "failure"))

				if "MappingResourceUID" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["MappingResourceUID"], 
						StringValueTable_MappingResourceUIDs, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string defined terms MappingResourceUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "MappingResourceName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying MappingResourceName --> "+("success" if partial_success else "failure"))

				if "MappingResourceName" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["MappingResourceName"], 
						StringValueTable_MappingResourceNames, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string defined terms MappingResourceName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "TimezoneOffsetFromUTC", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying TimezoneOffsetFromUTC --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"SOPCommon", 
			"ContributingEquipmentSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SOPCommon success after verifying ContributingEquipmentSequence" + ("success" if partial_success else "failure")) 
	if "ContributingEquipmentSequence" in ds:
		ContributingEquipmentSequence_data = ds.ContributingEquipmentSequence
		if type(ContributingEquipmentSequence_data) == Sequence:
			for i1 in range(0, len(ContributingEquipmentSequence_data)):
				if verbose:
					log.append( " ContributingEquipmentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContributingEquipmentSequence_data[i1]
				partial_success = verifyType1(ds1, 
						"SOPCommon", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SOPCommon success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SOPCommon success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "Manufacturer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "InstitutionName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying InstitutionName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "InstitutionAddress", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying InstitutionAddress --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "StationName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying StationName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "InstitutionalDepartmentName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying InstitutionalDepartmentName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SOPCommon", 
						"InstitutionalDepartmentTypeCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SOPCommon success after verifying InstitutionalDepartmentTypeCodeSequence" + ("success" if partial_success else "failure")) 
				if "InstitutionalDepartmentTypeCodeSequence" in ds1:
					InstitutionalDepartmentTypeCodeSequence_data = ds1.InstitutionalDepartmentTypeCodeSequence
					if type(InstitutionalDepartmentTypeCodeSequence_data) == Sequence:
						for i2 in range(0, len(InstitutionalDepartmentTypeCodeSequence_data)):
							if verbose:
								log.append( " InstitutionalDepartmentTypeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = InstitutionalDepartmentTypeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SOPCommon success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "OperatorsName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying OperatorsName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SOPCommon", 
						"OperatorIdentificationSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SOPCommon success after verifying OperatorIdentificationSequence" + ("success" if partial_success else "failure")) 
				if "OperatorIdentificationSequence" in ds1:
					OperatorIdentificationSequence_data = ds1.OperatorIdentificationSequence
					if type(OperatorIdentificationSequence_data) == Sequence:
						for i2 in range(0, len(OperatorIdentificationSequence_data)):
							if verbose:
								log.append( " OperatorIdentificationSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OperatorIdentificationSequence_data[i2]
							partial_success =  Macro_PersonIdentificationMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SOPCommon success after verifying PersonIdentificationMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "ManufacturerModelName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "DeviceSerialNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying DeviceSerialNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "SoftwareVersions", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying SoftwareVersions --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "SpatialResolution", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying SpatialResolution --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "DateOfLastCalibration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying DateOfLastCalibration --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "TimeOfLastCalibration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying TimeOfLastCalibration --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "ContributionDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying ContributionDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SOPCommon", "ContributionDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying ContributionDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "SOPInstanceStatus", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying SOPInstanceStatus --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "SOPAuthorizationDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying SOPAuthorizationDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "SOPAuthorizationComment", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying SOPAuthorizationComment --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "AuthorizationEquipmentCertificationNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying AuthorizationEquipmentCertificationNumber --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_DigitalSignaturesMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SOPCommon success after verifying DigitalSignaturesMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"SOPCommon", 
			"EncryptedAttributesSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SOPCommon success after verifying EncryptedAttributesSequence" + ("success" if partial_success else "failure")) 
	if "EncryptedAttributesSequence" in ds:
		EncryptedAttributesSequence_data = ds.EncryptedAttributesSequence
		if type(EncryptedAttributesSequence_data) == Sequence:
			for i1 in range(0, len(EncryptedAttributesSequence_data)):
				if verbose:
					log.append( " EncryptedAttributesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = EncryptedAttributesSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "EncryptedContentTransferSyntaxUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying EncryptedContentTransferSyntaxUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "EncryptedContent", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying EncryptedContent --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"SOPCommon", 
			"OriginalAttributesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SOPCommon success after verifying OriginalAttributesSequence" + ("success" if partial_success else "failure")) 
	if "OriginalAttributesSequence" in ds:
		OriginalAttributesSequence_data = ds.OriginalAttributesSequence
		if type(OriginalAttributesSequence_data) == Sequence:
			for i1 in range(0, len(OriginalAttributesSequence_data)):
				if verbose:
					log.append( " OriginalAttributesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OriginalAttributesSequence_data[i1]
				partial_success =  		verifyType2(ds1, 
						"SOPCommon", "SourceOfPreviousValues", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying SourceOfPreviousValues --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "AttributeModificationDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying AttributeModificationDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "ModifyingSystem", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying ModifyingSystem --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "ReasonForTheAttributeModification", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying ReasonForTheAttributeModification --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"SOPCommon", 
						"ModifiedAttributesSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SOPCommon success after verifying ModifiedAttributesSequence" + ("success" if partial_success else "failure")) 
				if "ModifiedAttributesSequence" in ds1:
					ModifiedAttributesSequence_data = ds1.ModifiedAttributesSequence
					if type(ModifiedAttributesSequence_data) == Sequence:
						for i2 in range(0, len(ModifiedAttributesSequence_data)):
							if verbose:
								log.append( " ModifiedAttributesSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ModifiedAttributesSequence_data[i2]
				partial_success = verifyType3(ds1, 
						"SOPCommon", 
						"NonconformingModifiedAttributesSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SOPCommon success after verifying NonconformingModifiedAttributesSequence" + ("success" if partial_success else "failure")) 
				if "NonconformingModifiedAttributesSequence" in ds1:
					NonconformingModifiedAttributesSequence_data = ds1.NonconformingModifiedAttributesSequence
					if type(NonconformingModifiedAttributesSequence_data) == Sequence:
						for i2 in range(0, len(NonconformingModifiedAttributesSequence_data)):
							if verbose:
								log.append( " NonconformingModifiedAttributesSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = NonconformingModifiedAttributesSequence_data[i2]
							partial_success =  Macro_SelectorAttributeMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SOPCommon success after verifying SelectorAttributeMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1(ds2, 
									"SOPCommon", "NonconformingDataElementValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying NonconformingDataElementValue --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"SOPCommon", 
			"HL7StructuredDocumentReferenceSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SOPCommon success after verifying HL7StructuredDocumentReferenceSequence" + ("success" if partial_success else "failure")) 
	if "HL7StructuredDocumentReferenceSequence" in ds:
		HL7StructuredDocumentReferenceSequence_data = ds.HL7StructuredDocumentReferenceSequence
		if type(HL7StructuredDocumentReferenceSequence_data) == Sequence:
			for i1 in range(0, len(HL7StructuredDocumentReferenceSequence_data)):
				if verbose:
					log.append( " HL7StructuredDocumentReferenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = HL7StructuredDocumentReferenceSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "ReferencedSOPClassUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying ReferencedSOPClassUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "ReferencedSOPInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying ReferencedSOPInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "HL7InstanceIdentifier", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying HL7InstanceIdentifier --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "RetrieveURI", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying RetrieveURI --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "LongitudinalTemporalInformationModified", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying LongitudinalTemporalInformationModified --> "+("success" if partial_success else "failure"))

	if "LongitudinalTemporalInformationModified" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LongitudinalTemporalInformationModified"], 
			StringValueTable_LongitudinalTemporalInformationModified, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying string enumerated values LongitudinalTemporalInformationModified --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SOPCommon", "QueryRetrieveView", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying QueryRetrieveView --> "+("success" if partial_success else "failure"))

	if "QueryRetrieveView" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["QueryRetrieveView"], 
			StringValueTable_QueryRetrieveView, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying string enumerated values QueryRetrieveView --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"SOPCommon", 
			"ConversionSourceAttributesSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SOPCommon success after verifying ConversionSourceAttributesSequence" + ("success" if partial_success else "failure")) 
	if "ConversionSourceAttributesSequence" in ds:
		ConversionSourceAttributesSequence_data = ds.ConversionSourceAttributesSequence
		if type(ConversionSourceAttributesSequence_data) == Sequence:
			for i1 in range(0, len(ConversionSourceAttributesSequence_data)):
				if verbose:
					log.append( " ConversionSourceAttributesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConversionSourceAttributesSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SOPCommon success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"SOPCommon", "ContentQualification", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying ContentQualification --> "+("success" if partial_success else "failure"))

	if "ContentQualification" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ContentQualification"], 
			StringValueTable_ContentQualification, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying string enumerated values ContentQualification --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"SOPCommon", 
			"PrivateDataElementCharacteristicsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SOPCommon success after verifying PrivateDataElementCharacteristicsSequence" + ("success" if partial_success else "failure")) 
	if "PrivateDataElementCharacteristicsSequence" in ds:
		PrivateDataElementCharacteristicsSequence_data = ds.PrivateDataElementCharacteristicsSequence
		if type(PrivateDataElementCharacteristicsSequence_data) == Sequence:
			for i1 in range(0, len(PrivateDataElementCharacteristicsSequence_data)):
				if verbose:
					log.append( " PrivateDataElementCharacteristicsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PrivateDataElementCharacteristicsSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "PrivateGroupReference", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying PrivateGroupReference --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "PrivateCreatorReference", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying PrivateCreatorReference --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SOPCommon", 
						"PrivateDataElementDefinitionSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SOPCommon success after verifying PrivateDataElementDefinitionSequence" + ("success" if partial_success else "failure")) 
				if "PrivateDataElementDefinitionSequence" in ds1:
					PrivateDataElementDefinitionSequence_data = ds1.PrivateDataElementDefinitionSequence
					if type(PrivateDataElementDefinitionSequence_data) == Sequence:
						for i2 in range(0, len(PrivateDataElementDefinitionSequence_data)):
							if verbose:
								log.append( " PrivateDataElementDefinitionSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PrivateDataElementDefinitionSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"SOPCommon", "PrivateDataElement", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying PrivateDataElement --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"SOPCommon", "PrivateDataElementValueMultiplicity", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying PrivateDataElementValueMultiplicity --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"SOPCommon", "PrivateDataElementValueRepresentation", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying PrivateDataElementValueRepresentation --> "+("success" if partial_success else "failure"))

							if "PrivateDataElementValueRepresentation" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["PrivateDataElementValueRepresentation"], 
									StringValueTable_ValueRepresentations, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying string enumerated values PrivateDataElementValueRepresentation --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"SOPCommon", "PrivateDataElementNumberOfItems", 
									verbose, log, ElementDictionary, 
									Condition_PrivateDataElementValueRepresentationIsSequence, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying PrivateDataElementNumberOfItems --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"SOPCommon", "PrivateDataElementKeyword", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying PrivateDataElementKeyword --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"SOPCommon", "PrivateDataElementName", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying PrivateDataElementName --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"SOPCommon", "PrivateDataElementDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying PrivateDataElementDescription --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"SOPCommon", "PrivateDataElementEncoding", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying PrivateDataElementEncoding --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"SOPCommon", "RetrieveURI", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying RetrieveURI --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SOPCommon", "BlockIdentifyingInformationStatus", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying BlockIdentifyingInformationStatus --> "+("success" if partial_success else "failure"))

				if "BlockIdentifyingInformationStatus" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["BlockIdentifyingInformationStatus"], 
						StringValueTable_BlockIdentifyingInformationStatus, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying string enumerated values BlockIdentifyingInformationStatus --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"SOPCommon", "NonidentifyingPrivateElements", 
						verbose, log, ElementDictionary, 
						Condition_BlockIdentifyingInformationStatusIsMIXED, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SOPCommon success after verifying NonidentifyingPrivateElements --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SOPCommon", 
						"DeidentificationActionSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SOPCommon success after verifying DeidentificationActionSequence" + ("success" if partial_success else "failure")) 
				if "DeidentificationActionSequence" in ds1:
					DeidentificationActionSequence_data = ds1.DeidentificationActionSequence
					if type(DeidentificationActionSequence_data) == Sequence:
						for i2 in range(0, len(DeidentificationActionSequence_data)):
							if verbose:
								log.append( " DeidentificationActionSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = DeidentificationActionSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"SOPCommon", "IdentifyingPrivateElements", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying IdentifyingPrivateElements --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"SOPCommon", "DeidentificationAction", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying DeidentificationAction --> "+("success" if partial_success else "failure"))

							if "DeidentificationAction" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["DeidentificationAction"], 
									StringValueTable_DeidentificationAction, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SOPCommon success after verifying string enumerated values DeidentificationAction --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "InstanceOriginStatus", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying InstanceOriginStatus --> "+("success" if partial_success else "failure"))

	if "InstanceOriginStatus" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["InstanceOriginStatus"], 
			StringValueTable_InstanceOriginStatus, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying string enumerated values InstanceOriginStatus --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SOPCommon", "BarcodeValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SOPCommon success after verifying BarcodeValue --> "+("success" if partial_success else "failure"))

	return global_success

def Module_FrameExtraction_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"FrameExtraction")

	partial_success = verifyType1(ds, 
			"FrameExtraction", 
			"FrameExtractionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "FrameExtraction success after verifying FrameExtractionSequence" + ("success" if partial_success else "failure")) 
	if "FrameExtractionSequence" in ds:
		FrameExtractionSequence_data = ds.FrameExtractionSequence
		if type(FrameExtractionSequence_data) == Sequence:
			for i1 in range(0, len(FrameExtractionSequence_data)):
				if verbose:
					log.append( " FrameExtractionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FrameExtractionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"FrameExtraction", "MultiFrameSourceSOPInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameExtraction success after verifying MultiFrameSourceSOPInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"FrameExtraction", "SimpleFrameList", 
						verbose, log, ElementDictionary, 
						Condition_NeedSimpleFrameListInFrameExtractionModule, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameExtraction success after verifying SimpleFrameList --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"FrameExtraction", "CalculatedFrameList", 
						verbose, log, ElementDictionary, 
						Condition_NeedCalculatedFrameListInFrameExtractionModule, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameExtraction success after verifying CalculatedFrameList --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"FrameExtraction", "TimeRange", 
						verbose, log, ElementDictionary, 
						Condition_NeedTimeRangeInFrameExtractionModule, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " FrameExtraction success after verifying TimeRange --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiframeSingleBitSCImagePseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiframeSingleBitSCImagePseudo")

	partial_success =  		verifyType1(ds, 
			"MultiframeSingleBitSCImagePseudo", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeSingleBitSCImagePseudo", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeSingleBitSCImagePseudo", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeSingleBitSCImagePseudo", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeSingleBitSCImagePseudo", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeSingleBitSCImagePseudo", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MultiframeSingleBitSCImagePseudo", "PlanarConfiguration", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying PlanarConfiguration --> "+("success" if partial_success else "failure"))

	if Condition_Never(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_PlanarConfiguration, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeSingleBitSCImagePseudo success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiframeGrayscaleByteSCImagePseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiframeGrayscaleByteSCImagePseudo")

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleByteSCImagePseudo", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleByteSCImagePseudo", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleByteSCImagePseudo", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleByteSCImagePseudo", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleByteSCImagePseudo", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleByteSCImagePseudo", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MultiframeGrayscaleByteSCImagePseudo", "PlanarConfiguration", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying PlanarConfiguration --> "+("success" if partial_success else "failure"))

	if Condition_Never(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_PlanarConfiguration, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleByteSCImagePseudo", "RescaleIntercept", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying RescaleIntercept --> "+("success" if partial_success else "failure"))

	if "RescaleIntercept" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["RescaleIntercept"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying binary enumerated values RescaleIntercept --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleByteSCImagePseudo", "RescaleSlope", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying RescaleSlope --> "+("success" if partial_success else "failure"))

	if "RescaleSlope" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["RescaleSlope"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying binary enumerated values RescaleSlope --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleByteSCImagePseudo", "RescaleType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying RescaleType --> "+("success" if partial_success else "failure"))

	if "RescaleType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RescaleType"], 
			StringValueTable_RescaleTypeUnspecified, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleByteSCImagePseudo success after verifying string enumerated values RescaleType --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiframeGrayscaleWordSCImagePseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiframeGrayscaleWordSCImagePseudo")

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleWordSCImagePseudo", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleWordSCImagePseudo", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleWordSCImagePseudo", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleWordSCImagePseudo", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre9To16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleWordSCImagePseudo", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre8To15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeGrayscaleWordSCImagePseudo", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MultiframeGrayscaleWordSCImagePseudo", "PlanarConfiguration", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying PlanarConfiguration --> "+("success" if partial_success else "failure"))

	if Condition_Never(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_PlanarConfiguration, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeGrayscaleWordSCImagePseudo success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiframeTrueColorSCImagePseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiframeTrueColorSCImagePseudo")

	partial_success =  		verifyType1(ds, 
			"MultiframeTrueColorSCImagePseudo", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_Three, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeTrueColorSCImagePseudo", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2OrRGBorYBR_FULL_422orYBR_RCTorYBR_ICTorYBR_PARTIAL_420, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))


	if Condition_JPEGTransferSyntaxButNotYBR_FULL_422(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" JPEG transfer syntax is required to have Photometric Interpretation of YBR_FULL422 - attribute <PhotometricInterpretation>"+\
				" = <{}>".format( tag_for_keyword("PhotometricInterpretation")))


	if Condition_JPEG2000LosslessTransferSyntaxButNotYBR_RCT(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" JPEG 2000 reversible transfer syntax is required to have Photometric Interpretation of YBR_RCT - attribute <PhotometricInterpretation>"+\
				" = <{}>".format( tag_for_keyword("PhotometricInterpretation")))


	if Condition_JPEG2000TransferSyntaxButNotYBR_RCTorYBR_ICT(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" JPEG 2000 transfer syntax is required to have Photometric Interpretation of YBR_RCT or YBR_ICT - attribute <PhotometricInterpretation>"+\
				" = <{}>".format( tag_for_keyword("PhotometricInterpretation")))

	partial_success =  		verifyType1(ds, 
			"MultiframeTrueColorSCImagePseudo", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeTrueColorSCImagePseudo", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeTrueColorSCImagePseudo", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeTrueColorSCImagePseudo", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MultiframeTrueColorSCImagePseudo", "PlanarConfiguration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying PlanarConfiguration --> "+("success" if partial_success else "failure"))

	if "PlanarConfiguration" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultiframeTrueColorSCImagePseudo success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))

	return global_success

def Module_CommonInstanceReference_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"CommonInstanceReference")

	partial_success = verifyType1C(ds, 
			"CommonInstanceReference", 
			"ReferencedSeriesSequence", 
			verbose, log, ElementDictionary, 
			Condition_InstancesAreReferencedAndStudiesContainingOtherReferencedInstancesSequenceAbsent, 
			True, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CommonInstanceReference success after verifying ReferencedSeriesSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSeriesSequence" in ds:
		ReferencedSeriesSequence_data = ds.ReferencedSeriesSequence
		if type(ReferencedSeriesSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSeriesSequence_data)):
				if verbose:
					log.append( " ReferencedSeriesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSeriesSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"CommonInstanceReference", "SeriesInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CommonInstanceReference success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))


				if Condition_StudyInstanceUIDIsPresent(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" StudyInstanceUID should not be present in ReferencedSeriesSequence in CommonInstanceReference Module - use StudiesContainingOtherReferencedInstancesSequence if not the same Study - attribute <StudyInstanceUID>")

				partial_success = verifyType1(ds1, 
						"CommonInstanceReference", 
						"ReferencedInstanceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "CommonInstanceReference success after verifying ReferencedInstanceSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedInstanceSequence" in ds1:
					ReferencedInstanceSequence_data = ds1.ReferencedInstanceSequence
					if type(ReferencedInstanceSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedInstanceSequence_data)):
							if verbose:
								log.append( " ReferencedInstanceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedInstanceSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " CommonInstanceReference success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"CommonInstanceReference", 
			"StudiesContainingOtherReferencedInstancesSequence", 
			verbose, log, ElementDictionary, 
			Condition_InstancesAreReferencedAndReferencedSeriesSequenceAbsent, 
			True, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CommonInstanceReference success after verifying StudiesContainingOtherReferencedInstancesSequence" + ("success" if partial_success else "failure")) 
	if "StudiesContainingOtherReferencedInstancesSequence" in ds:
		StudiesContainingOtherReferencedInstancesSequence_data = ds.StudiesContainingOtherReferencedInstancesSequence
		if type(StudiesContainingOtherReferencedInstancesSequence_data) == Sequence:
			for i1 in range(0, len(StudiesContainingOtherReferencedInstancesSequence_data)):
				if verbose:
					log.append( " StudiesContainingOtherReferencedInstancesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = StudiesContainingOtherReferencedInstancesSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"CommonInstanceReference", "StudyInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CommonInstanceReference success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_SeriesAndInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " CommonInstanceReference success after verifying SeriesAndInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_SegmentationSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SegmentationSeries")

	partial_success =  		verifyType1(ds, 
			"SegmentationSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_SEGModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SegmentationSeries", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationSeries success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"SegmentationSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SegmentationSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SegmentationSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_SegmentationImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SegmentationImage")

	partial_success =  		verifyType1(ds, 
			"SegmentationImage", "ImageType", 
			verbose, log, ElementDictionary, 
			2, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType1DerivedOnly, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType2PrimaryOnly, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SegmentationImage success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"SegmentationImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SegmentationImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SegmentationImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SegmentationImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))


	if Condition_SegmentationTypeIsBinary(ds, parent_ds, root_ds):
		if "BitsAllocated" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
				BinaryValueDescription_One, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))


	if Condition_SegmentationTypeIsNotBinary(ds, parent_ds, root_ds):
		if "BitsAllocated" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
				BinaryValueDescription_BitsAre8, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SegmentationImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))


	if Condition_SegmentationTypeIsBinary(ds, parent_ds, root_ds):
		if "BitsStored" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
				BinaryValueDescription_One, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))


	if Condition_SegmentationTypeIsNotBinary(ds, parent_ds, root_ds):
		if "BitsStored" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
				BinaryValueDescription_BitsAre8, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SegmentationImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying HighBit --> "+("success" if partial_success else "failure"))


	if Condition_SegmentationTypeIsBinary(ds, parent_ds, root_ds):
		if "HighBit" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["HighBit"], 
				BinaryValueDescription_Zero, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))


	if Condition_SegmentationTypeIsNotBinary(ds, parent_ds, root_ds):
		if "HighBit" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["HighBit"], 
				BinaryValueDescription_BitsAre7, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SegmentationImage", "PlanarConfiguration", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying PlanarConfiguration --> "+("success" if partial_success else "failure"))

	if Condition_Never(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_PlanarConfiguration, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SegmentationImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SegmentationImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SegmentationImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))


	if Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" method inconsistent with transfer syntax - attribute <LossyImageCompressionMethod>"+\
				" = <{}>".format( tag_for_keyword("LossyImageCompressionMethod")))

	partial_success =  		verifyType1(ds, 
			"SegmentationImage", "SegmentationType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying SegmentationType --> "+("success" if partial_success else "failure"))

	if "SegmentationType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SegmentationType"], 
			StringValueTable_SegmentationType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying string enumerated values SegmentationType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SegmentationImage", "SegmentationFractionalType", 
			verbose, log, ElementDictionary, 
			Condition_SegmentationTypeIsFractional, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying SegmentationFractionalType --> "+("success" if partial_success else "failure"))

	if Condition_SegmentationTypeIsFractional(ds, parent_ds, root_ds):
		if "SegmentationFractionalType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["SegmentationFractionalType"], 
				StringValueTable_SegmentationFractionalType, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying string enumerated values SegmentationFractionalType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SegmentationImage", "MaximumFractionalValue", 
			verbose, log, ElementDictionary, 
			Condition_SegmentationTypeIsFractional, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying MaximumFractionalValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SegmentationImage", "SegmentsOverlap", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying SegmentsOverlap --> "+("success" if partial_success else "failure"))

	if "SegmentsOverlap" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SegmentsOverlap"], 
			StringValueTable_YesNoFullUndefined, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentationImage success after verifying string enumerated values SegmentsOverlap --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"SegmentationImage", 
			"SegmentSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SegmentationImage success after verifying SegmentSequence" + ("success" if partial_success else "failure")) 
	if "SegmentSequence" in ds:
		SegmentSequence_data = ds.SegmentSequence
		if type(SegmentSequence_data) == Sequence:
			for i1 in range(0, len(SegmentSequence_data)):
				if verbose:
					log.append( " SegmentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SegmentSequence_data[i1]
				partial_success =  Macro_SegmentDescriptionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SegmentationImage success after verifying SegmentDescriptionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"SegmentationImage", "SegmentAlgorithmName", 
						verbose, log, ElementDictionary, 
						Condition_SegmentAlgorithmTypeIsNotManual, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SegmentationImage success after verifying SegmentAlgorithmName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SegmentationImage", 
						"SegmentationAlgorithmIdentificationSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SegmentationImage success after verifying SegmentationAlgorithmIdentificationSequence" + ("success" if partial_success else "failure")) 
				if "SegmentationAlgorithmIdentificationSequence" in ds1:
					SegmentationAlgorithmIdentificationSequence_data = ds1.SegmentationAlgorithmIdentificationSequence
					if type(SegmentationAlgorithmIdentificationSequence_data) == Sequence:
						for i2 in range(0, len(SegmentationAlgorithmIdentificationSequence_data)):
							if verbose:
								log.append( " SegmentationAlgorithmIdentificationSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SegmentationAlgorithmIdentificationSequence_data[i2]
							partial_success =  Macro_AlgorithmIdentificationMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SegmentationImage success after verifying AlgorithmIdentificationMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"SegmentationImage", "RecommendedDisplayGrayscaleValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SegmentationImage success after verifying RecommendedDisplayGrayscaleValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SegmentationImage", "RecommendedDisplayCIELabValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SegmentationImage success after verifying RecommendedDisplayCIELabValue --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_SegmentDescriptionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SegmentDescriptionMacro")

	partial_success =  		verifyType1(ds, 
			"SegmentDescriptionMacro", "SegmentNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentDescriptionMacro success after verifying SegmentNumber --> "+("success" if partial_success else "failure"))

	if "SegmentNumber" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["SegmentNumber"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"SegmentDescriptionMacro", "SegmentLabel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentDescriptionMacro success after verifying SegmentLabel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SegmentDescriptionMacro", "SegmentDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentDescriptionMacro success after verifying SegmentDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SegmentDescriptionMacro", "SegmentAlgorithmType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentDescriptionMacro success after verifying SegmentAlgorithmType --> "+("success" if partial_success else "failure"))

	if "SegmentAlgorithmType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SegmentAlgorithmType"], 
			StringValueTable_SegmentAlgorithmType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentDescriptionMacro success after verifying string enumerated values SegmentAlgorithmType --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_GeneralAnatomyOptionalMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SegmentDescriptionMacro success after verifying GeneralAnatomyOptionalMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"SegmentDescriptionMacro", 
			"SegmentedPropertyCategoryCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SegmentDescriptionMacro success after verifying SegmentedPropertyCategoryCodeSequence" + ("success" if partial_success else "failure")) 
	if "SegmentedPropertyCategoryCodeSequence" in ds:
		SegmentedPropertyCategoryCodeSequence_data = ds.SegmentedPropertyCategoryCodeSequence
		if type(SegmentedPropertyCategoryCodeSequence_data) == Sequence:
			for i1 in range(0, len(SegmentedPropertyCategoryCodeSequence_data)):
				if verbose:
					log.append( " SegmentedPropertyCategoryCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SegmentedPropertyCategoryCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SegmentDescriptionMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"SegmentDescriptionMacro", 
			"SegmentedPropertyTypeCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SegmentDescriptionMacro success after verifying SegmentedPropertyTypeCodeSequence" + ("success" if partial_success else "failure")) 
	if "SegmentedPropertyTypeCodeSequence" in ds:
		SegmentedPropertyTypeCodeSequence_data = ds.SegmentedPropertyTypeCodeSequence
		if type(SegmentedPropertyTypeCodeSequence_data) == Sequence:
			for i1 in range(0, len(SegmentedPropertyTypeCodeSequence_data)):
				if verbose:
					log.append( " SegmentedPropertyTypeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SegmentedPropertyTypeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SegmentDescriptionMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"SegmentDescriptionMacro", 
						"SegmentedPropertyTypeModifierCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SegmentDescriptionMacro success after verifying SegmentedPropertyTypeModifierCodeSequence" + ("success" if partial_success else "failure")) 
				if "SegmentedPropertyTypeModifierCodeSequence" in ds1:
					SegmentedPropertyTypeModifierCodeSequence_data = ds1.SegmentedPropertyTypeModifierCodeSequence
					if type(SegmentedPropertyTypeModifierCodeSequence_data) == Sequence:
						for i2 in range(0, len(SegmentedPropertyTypeModifierCodeSequence_data)):
							if verbose:
								log.append( " SegmentedPropertyTypeModifierCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SegmentedPropertyTypeModifierCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SegmentDescriptionMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"SegmentDescriptionMacro", "TrackingID", 
			verbose, log, ElementDictionary, 
			Condition_TrackingUIDIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentDescriptionMacro success after verifying TrackingID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SegmentDescriptionMacro", "TrackingUID", 
			verbose, log, ElementDictionary, 
			Condition_TrackingIDIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SegmentDescriptionMacro success after verifying TrackingUID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"SegmentDescriptionMacro", 
			"DefinitionSourceSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SegmentDescriptionMacro success after verifying DefinitionSourceSequence" + ("success" if partial_success else "failure")) 
	if "DefinitionSourceSequence" in ds:
		DefinitionSourceSequence_data = ds.DefinitionSourceSequence
		if type(DefinitionSourceSequence_data) == Sequence:
			for i1 in range(0, len(DefinitionSourceSequence_data)):
				if verbose:
					log.append( " DefinitionSourceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DefinitionSourceSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SegmentDescriptionMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"SegmentDescriptionMacro", "ReferencedROINumber", 
						verbose, log, ElementDictionary, 
						Condition_ReferencedSOPClassUIDIsRTStructureSetStorage, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SegmentDescriptionMacro success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_SegmentationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SegmentationMacro")

	partial_success = verifyType1(ds, 
			"SegmentationMacro", 
			"SegmentIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SegmentationMacro success after verifying SegmentIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "SegmentIdentificationSequence" in ds:
		SegmentIdentificationSequence_data = ds.SegmentIdentificationSequence
		if type(SegmentIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(SegmentIdentificationSequence_data)):
				if verbose:
					log.append( " SegmentIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SegmentIdentificationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SegmentationMacro", "ReferencedSegmentNumber", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SegmentationMacro success after verifying ReferencedSegmentNumber --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SurfaceSegmentation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SurfaceSegmentation")

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SurfaceSegmentation success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"SurfaceSegmentation", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SurfaceSegmentation success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SurfaceSegmentation", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SurfaceSegmentation success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"SurfaceSegmentation", 
			"SegmentSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SurfaceSegmentation success after verifying SegmentSequence" + ("success" if partial_success else "failure")) 
	if "SegmentSequence" in ds:
		SegmentSequence_data = ds.SegmentSequence
		if type(SegmentSequence_data) == Sequence:
			for i1 in range(0, len(SegmentSequence_data)):
				if verbose:
					log.append( " SegmentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SegmentSequence_data[i1]
				partial_success =  Macro_SegmentDescriptionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SurfaceSegmentation success after verifying SegmentDescriptionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"SurfaceSegmentation", "SurfaceCount", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceSegmentation success after verifying SurfaceCount --> "+("success" if partial_success else "failure"))

				if "SurfaceCount" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["SurfaceCount"], 
						verbose, log, -1, False)

				partial_success = verifyType1(ds1, 
						"SurfaceSegmentation", 
						"ReferencedSurfaceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SurfaceSegmentation success after verifying ReferencedSurfaceSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedSurfaceSequence" in ds1:
					ReferencedSurfaceSequence_data = ds1.ReferencedSurfaceSequence
					if type(ReferencedSurfaceSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedSurfaceSequence_data)):
							if verbose:
								log.append( " ReferencedSurfaceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedSurfaceSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"SurfaceSegmentation", "ReferencedSurfaceNumber", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SurfaceSegmentation success after verifying ReferencedSurfaceNumber --> "+("success" if partial_success else "failure"))

							if "ReferencedSurfaceNumber" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyNotZero(ds2["ReferencedSurfaceNumber"], 
									verbose, log, -1, False)

							partial_success = verifyType1(ds2, 
									"SurfaceSegmentation", 
									"SegmentSurfaceGenerationAlgorithmIdentificationSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "SurfaceSegmentation success after verifying SegmentSurfaceGenerationAlgorithmIdentificationSequence" + ("success" if partial_success else "failure")) 
							if "SegmentSurfaceGenerationAlgorithmIdentificationSequence" in ds2:
								SegmentSurfaceGenerationAlgorithmIdentificationSequence_data = ds2.SegmentSurfaceGenerationAlgorithmIdentificationSequence
								if type(SegmentSurfaceGenerationAlgorithmIdentificationSequence_data) == Sequence:
									for i3 in range(0, len(SegmentSurfaceGenerationAlgorithmIdentificationSequence_data)):
										if verbose:
											log.append( " SegmentSurfaceGenerationAlgorithmIdentificationSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = SegmentSurfaceGenerationAlgorithmIdentificationSequence_data[i3]
										partial_success =  Macro_AlgorithmIdentificationMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " SurfaceSegmentation success after verifying AlgorithmIdentificationMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType2(ds2, 
									"SurfaceSegmentation", 
									"SegmentSurfaceSourceInstanceSequence", 
									verbose, log, ElementDictionary, 
															0, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "SurfaceSegmentation success after verifying SegmentSurfaceSourceInstanceSequence" + ("success" if partial_success else "failure")) 
							if "SegmentSurfaceSourceInstanceSequence" in ds2:
								SegmentSurfaceSourceInstanceSequence_data = ds2.SegmentSurfaceSourceInstanceSequence
								if type(SegmentSurfaceSourceInstanceSequence_data) == Sequence:
									for i3 in range(0, len(SegmentSurfaceSourceInstanceSequence_data)):
										if verbose:
											log.append( " SegmentSurfaceSourceInstanceSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = SegmentSurfaceSourceInstanceSequence_data[i3]
										partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " SurfaceSegmentation success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_PointsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PointsMacro")

	partial_success =  		verifyType1(ds, 
			"PointsMacro", "NumberOfSurfacePoints", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PointsMacro success after verifying NumberOfSurfacePoints --> "+("success" if partial_success else "failure"))

	if "NumberOfSurfacePoints" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["NumberOfSurfacePoints"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"PointsMacro", "PointCoordinatesData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PointsMacro success after verifying PointCoordinatesData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PointsMacro", "PointPositionAccuracy", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PointsMacro success after verifying PointPositionAccuracy --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PointsMacro", "MeanPointDistance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PointsMacro success after verifying MeanPointDistance --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PointsMacro", "MaximumPointDistance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PointsMacro success after verifying MaximumPointDistance --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PointsMacro", "PointsBoundingBoxCoordinates", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PointsMacro success after verifying PointsBoundingBoxCoordinates --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PointsMacro", "AxisOfRotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PointsMacro success after verifying AxisOfRotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PointsMacro", "CenterOfRotation", 
			verbose, log, ElementDictionary, 
			Condition_AxisOfRotationIsPresent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PointsMacro success after verifying CenterOfRotation --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_VectorsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"VectorsMacro")

	partial_success =  		verifyType1(ds, 
			"VectorsMacro", "NumberOfVectors", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VectorsMacro success after verifying NumberOfVectors --> "+("success" if partial_success else "failure"))

	if "NumberOfVectors" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["NumberOfVectors"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"VectorsMacro", "VectorDimensionality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VectorsMacro success after verifying VectorDimensionality --> "+("success" if partial_success else "failure"))

	if "VectorDimensionality" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["VectorDimensionality"], 
			verbose, log, -1, False)

	partial_success =  		verifyType3(ds, 
			"VectorsMacro", "VectorAccuracy", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VectorsMacro success after verifying VectorAccuracy --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VectorsMacro", "VectorCoordinateData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VectorsMacro success after verifying VectorCoordinateData --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_SurfaceMeshPrimitivesMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SurfaceMeshPrimitivesMacro")

	partial_success =  		verifyType2(ds, 
			"SurfaceMeshPrimitivesMacro", "LongVertexPointIndexList", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SurfaceMeshPrimitivesMacro success after verifying LongVertexPointIndexList --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"SurfaceMeshPrimitivesMacro", "LongEdgePointIndexList", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SurfaceMeshPrimitivesMacro success after verifying LongEdgePointIndexList --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"SurfaceMeshPrimitivesMacro", "LongTrianglePointIndexList", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SurfaceMeshPrimitivesMacro success after verifying LongTrianglePointIndexList --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"SurfaceMeshPrimitivesMacro", 
			"TriangleStripSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SurfaceMeshPrimitivesMacro success after verifying TriangleStripSequence" + ("success" if partial_success else "failure")) 
	if "TriangleStripSequence" in ds:
		TriangleStripSequence_data = ds.TriangleStripSequence
		if type(TriangleStripSequence_data) == Sequence:
			for i1 in range(0, len(TriangleStripSequence_data)):
				if verbose:
					log.append( " TriangleStripSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TriangleStripSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SurfaceMeshPrimitivesMacro", "LongPrimitivePointIndexList", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMeshPrimitivesMacro success after verifying LongPrimitivePointIndexList --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"SurfaceMeshPrimitivesMacro", 
			"TriangleFanSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SurfaceMeshPrimitivesMacro success after verifying TriangleFanSequence" + ("success" if partial_success else "failure")) 
	if "TriangleFanSequence" in ds:
		TriangleFanSequence_data = ds.TriangleFanSequence
		if type(TriangleFanSequence_data) == Sequence:
			for i1 in range(0, len(TriangleFanSequence_data)):
				if verbose:
					log.append( " TriangleFanSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TriangleFanSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SurfaceMeshPrimitivesMacro", "LongPrimitivePointIndexList", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMeshPrimitivesMacro success after verifying LongPrimitivePointIndexList --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"SurfaceMeshPrimitivesMacro", 
			"LineSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SurfaceMeshPrimitivesMacro success after verifying LineSequence" + ("success" if partial_success else "failure")) 
	if "LineSequence" in ds:
		LineSequence_data = ds.LineSequence
		if type(LineSequence_data) == Sequence:
			for i1 in range(0, len(LineSequence_data)):
				if verbose:
					log.append( " LineSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = LineSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SurfaceMeshPrimitivesMacro", "LongPrimitivePointIndexList", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMeshPrimitivesMacro success after verifying LongPrimitivePointIndexList --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"SurfaceMeshPrimitivesMacro", 
			"FacetSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SurfaceMeshPrimitivesMacro success after verifying FacetSequence" + ("success" if partial_success else "failure")) 
	if "FacetSequence" in ds:
		FacetSequence_data = ds.FacetSequence
		if type(FacetSequence_data) == Sequence:
			for i1 in range(0, len(FacetSequence_data)):
				if verbose:
					log.append( " FacetSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FacetSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SurfaceMeshPrimitivesMacro", "LongPrimitivePointIndexList", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMeshPrimitivesMacro success after verifying LongPrimitivePointIndexList --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SurfaceMesh_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SurfaceMesh")

	partial_success =  		verifyType1(ds, 
			"SurfaceMesh", "NumberOfSurfaces", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SurfaceMesh success after verifying NumberOfSurfaces --> "+("success" if partial_success else "failure"))

	if "NumberOfSurfaces" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["NumberOfSurfaces"], 
			verbose, log, -1, False)

	partial_success = verifyType1(ds, 
			"SurfaceMesh", 
			"SurfaceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SurfaceMesh success after verifying SurfaceSequence" + ("success" if partial_success else "failure")) 
	if "SurfaceSequence" in ds:
		SurfaceSequence_data = ds.SurfaceSequence
		if type(SurfaceSequence_data) == Sequence:
			for i1 in range(0, len(SurfaceSequence_data)):
				if verbose:
					log.append( " SurfaceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SurfaceSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SurfaceMesh", "SurfaceNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying SurfaceNumber --> "+("success" if partial_success else "failure"))

				if "SurfaceNumber" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["SurfaceNumber"], 
						verbose, log, -1, False)

				partial_success =  		verifyType3(ds1, 
						"SurfaceMesh", "SurfaceComments", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying SurfaceComments --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SurfaceMesh", 
						"SegmentedPropertyCategoryCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SurfaceMesh success after verifying SegmentedPropertyCategoryCodeSequence" + ("success" if partial_success else "failure")) 
				if "SegmentedPropertyCategoryCodeSequence" in ds1:
					SegmentedPropertyCategoryCodeSequence_data = ds1.SegmentedPropertyCategoryCodeSequence
					if type(SegmentedPropertyCategoryCodeSequence_data) == Sequence:
						for i2 in range(0, len(SegmentedPropertyCategoryCodeSequence_data)):
							if verbose:
								log.append( " SegmentedPropertyCategoryCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SegmentedPropertyCategoryCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SurfaceMesh success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"SurfaceMesh", 
						"SegmentedPropertyTypeCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SurfaceMesh success after verifying SegmentedPropertyTypeCodeSequence" + ("success" if partial_success else "failure")) 
				if "SegmentedPropertyTypeCodeSequence" in ds1:
					SegmentedPropertyTypeCodeSequence_data = ds1.SegmentedPropertyTypeCodeSequence
					if type(SegmentedPropertyTypeCodeSequence_data) == Sequence:
						for i2 in range(0, len(SegmentedPropertyTypeCodeSequence_data)):
							if verbose:
								log.append( " SegmentedPropertyTypeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SegmentedPropertyTypeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SurfaceMesh success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"SurfaceMesh", "SurfaceProcessing", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying SurfaceProcessing --> "+("success" if partial_success else "failure"))

				if "SurfaceProcessing" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["SurfaceProcessing"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying string enumerated values SurfaceProcessing --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"SurfaceMesh", "SurfaceProcessingRatio", 
						verbose, log, ElementDictionary, 
						Condition_SurfaceProcessingIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying SurfaceProcessingRatio --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SurfaceMesh", "SurfaceProcessingDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying SurfaceProcessingDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2C(ds1, 
						"SurfaceMesh", 
						"SurfaceProcessingAlgorithmIdentificationSequence", 
						verbose, log, ElementDictionary, 
						Condition_SurfaceProcessingIsYes, 
						False, 
						parent_ds1, root_ds1, 
						0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SurfaceMesh success after verifying SurfaceProcessingAlgorithmIdentificationSequence" + ("success" if partial_success else "failure")) 
				if "SurfaceProcessingAlgorithmIdentificationSequence" in ds1:
					SurfaceProcessingAlgorithmIdentificationSequence_data = ds1.SurfaceProcessingAlgorithmIdentificationSequence
					if type(SurfaceProcessingAlgorithmIdentificationSequence_data) == Sequence:
						for i2 in range(0, len(SurfaceProcessingAlgorithmIdentificationSequence_data)):
							if verbose:
								log.append( " SurfaceProcessingAlgorithmIdentificationSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SurfaceProcessingAlgorithmIdentificationSequence_data[i2]
							partial_success =  Macro_AlgorithmIdentificationMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SurfaceMesh success after verifying AlgorithmIdentificationMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"SurfaceMesh", "RecommendedDisplayGrayscaleValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying RecommendedDisplayGrayscaleValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SurfaceMesh", "RecommendedDisplayCIELabValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying RecommendedDisplayCIELabValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SurfaceMesh", "RecommendedPresentationOpacity", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying RecommendedPresentationOpacity --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SurfaceMesh", "RecommendedPresentationType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying RecommendedPresentationType --> "+("success" if partial_success else "failure"))

				if "RecommendedPresentationType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["RecommendedPresentationType"], 
						StringValueTable_RecommendedPresentationType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying string defined terms RecommendedPresentationType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SurfaceMesh", "RecommendedPointRadius", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying RecommendedPointRadius --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SurfaceMesh", "RecommendedLineThickness", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying RecommendedLineThickness --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SurfaceMesh", "FiniteVolume", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying FiniteVolume --> "+("success" if partial_success else "failure"))

				if "FiniteVolume" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FiniteVolume"], 
						StringValueTable_YesNoFullUnknown, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying string enumerated values FiniteVolume --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SurfaceMesh", "Manifold", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying Manifold --> "+("success" if partial_success else "failure"))

				if "Manifold" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["Manifold"], 
						StringValueTable_YesNoFullUnknown, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SurfaceMesh success after verifying string enumerated values Manifold --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"SurfaceMesh", 
						"SurfacePointsSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SurfaceMesh success after verifying SurfacePointsSequence" + ("success" if partial_success else "failure")) 
				if "SurfacePointsSequence" in ds1:
					SurfacePointsSequence_data = ds1.SurfacePointsSequence
					if type(SurfacePointsSequence_data) == Sequence:
						for i2 in range(0, len(SurfacePointsSequence_data)):
							if verbose:
								log.append( " SurfacePointsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SurfacePointsSequence_data[i2]
							partial_success =  Macro_PointsMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SurfaceMesh success after verifying PointsMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType2(ds1, 
						"SurfaceMesh", 
						"SurfacePointsNormalsSequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SurfaceMesh success after verifying SurfacePointsNormalsSequence" + ("success" if partial_success else "failure")) 
				if "SurfacePointsNormalsSequence" in ds1:
					SurfacePointsNormalsSequence_data = ds1.SurfacePointsNormalsSequence
					if type(SurfacePointsNormalsSequence_data) == Sequence:
						for i2 in range(0, len(SurfacePointsNormalsSequence_data)):
							if verbose:
								log.append( " SurfacePointsNormalsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SurfacePointsNormalsSequence_data[i2]
							partial_success =  Macro_VectorsMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SurfaceMesh success after verifying VectorsMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"SurfaceMesh", 
						"SurfaceMeshPrimitivesSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SurfaceMesh success after verifying SurfaceMeshPrimitivesSequence" + ("success" if partial_success else "failure")) 
				if "SurfaceMeshPrimitivesSequence" in ds1:
					SurfaceMeshPrimitivesSequence_data = ds1.SurfaceMeshPrimitivesSequence
					if type(SurfaceMeshPrimitivesSequence_data) == Sequence:
						for i2 in range(0, len(SurfaceMeshPrimitivesSequence_data)):
							if verbose:
								log.append( " SurfaceMeshPrimitivesSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SurfaceMeshPrimitivesSequence_data[i2]
							partial_success =  Macro_SurfaceMeshPrimitivesMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SurfaceMesh success after verifying SurfaceMeshPrimitivesMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameFunctionalGroupsForSegmentation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForSegmentation")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForSegmentation", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForSegmentation success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequenceAndDerivationImageMacroNotPresentInEitherMBPO(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForSegmentation success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequenceAndDerivationImageMacroNotPresentInEitherMBPO(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForSegmentation success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequenceAndDerivationImageMacroNotPresentInEitherMBPO(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForSegmentation success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageSequenceNotInPerFrameFunctionalGroupSequenceAndPixelMeasuresPlanePositionPlaneOrientationNotPresentInEitherMBPO(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForSegmentation success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_SegmentIdentificationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_SegmentationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForSegmentation success after verifying SegmentationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForSegmentation", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForSegmentation success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequenceAndDerivationImageMacroNotPresentInEitherMBPO(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForSegmentation success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForSegmentation success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequenceAndDerivationImageMacroNotPresentInEitherMBPO(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForSegmentation success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequenceAndDerivationImageMacroNotPresentInEitherMBPO(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForSegmentation success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageSequenceNotInSharedFunctionalGroupSequenceAndPixelMeasuresPlanePositionPlaneOrientationNotPresentInEitherMBPO(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForSegmentation success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_SegmentIdentificationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_SegmentationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForSegmentation success after verifying SegmentationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_SpatialRegistrationSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SpatialRegistrationSeries")

	partial_success =  		verifyType1(ds, 
			"SpatialRegistrationSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialRegistrationSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_REGModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialRegistrationSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SpatialRegistration_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SpatialRegistration")

	partial_success =  		verifyType1(ds, 
			"SpatialRegistration", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialRegistration success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SpatialRegistration", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialRegistration success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SpatialRegistration success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"SpatialRegistration", 
			"RegistrationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SpatialRegistration success after verifying RegistrationSequence" + ("success" if partial_success else "failure")) 
	if "RegistrationSequence" in ds:
		RegistrationSequence_data = ds.RegistrationSequence
		if type(RegistrationSequence_data) == Sequence:
			for i1 in range(0, len(RegistrationSequence_data)):
				if verbose:
					log.append( " RegistrationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RegistrationSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"SpatialRegistration", "FrameOfReferenceUID", 
						verbose, log, ElementDictionary, 
						Condition_ReferencedImageSequenceNotPresent, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpatialRegistration success after verifying FrameOfReferenceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"SpatialRegistration", 
						"ReferencedImageSequence", 
						verbose, log, ElementDictionary, 
						Condition_FrameOfReferenceUIDNotPresent, 
						True, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SpatialRegistration success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedImageSequence" in ds1:
					ReferencedImageSequence_data = ds1.ReferencedImageSequence
					if type(ReferencedImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedImageSequence_data)):
							if verbose:
								log.append( " ReferencedImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedImageSequence_data[i2]
							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SpatialRegistration success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"SpatialRegistration", 
						"MatrixRegistrationSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SpatialRegistration success after verifying MatrixRegistrationSequence" + ("success" if partial_success else "failure")) 
				if "MatrixRegistrationSequence" in ds1:
					MatrixRegistrationSequence_data = ds1.MatrixRegistrationSequence
					if type(MatrixRegistrationSequence_data) == Sequence:
						for i2 in range(0, len(MatrixRegistrationSequence_data)):
							if verbose:
								log.append( " MatrixRegistrationSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MatrixRegistrationSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"SpatialRegistration", "FrameOfReferenceTransformationComment", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SpatialRegistration success after verifying FrameOfReferenceTransformationComment --> "+("success" if partial_success else "failure"))

							partial_success = verifyType2(ds2, 
									"SpatialRegistration", 
									"RegistrationTypeCodeSequence", 
									verbose, log, ElementDictionary, 
															0, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "SpatialRegistration success after verifying RegistrationTypeCodeSequence" + ("success" if partial_success else "failure")) 
							if "RegistrationTypeCodeSequence" in ds2:
								RegistrationTypeCodeSequence_data = ds2.RegistrationTypeCodeSequence
								if type(RegistrationTypeCodeSequence_data) == Sequence:
									for i3 in range(0, len(RegistrationTypeCodeSequence_data)):
										if verbose:
											log.append( " RegistrationTypeCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = RegistrationTypeCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " SpatialRegistration success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1(ds2, 
									"SpatialRegistration", 
									"MatrixSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "SpatialRegistration success after verifying MatrixSequence" + ("success" if partial_success else "failure")) 
							if "MatrixSequence" in ds2:
								MatrixSequence_data = ds2.MatrixSequence
								if type(MatrixSequence_data) == Sequence:
									for i3 in range(0, len(MatrixSequence_data)):
										if verbose:
											log.append( " MatrixSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = MatrixSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"SpatialRegistration", "FrameOfReferenceTransformationMatrix", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " SpatialRegistration success after verifying FrameOfReferenceTransformationMatrix --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"SpatialRegistration", "FrameOfReferenceTransformationMatrixType", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " SpatialRegistration success after verifying FrameOfReferenceTransformationMatrixType --> "+("success" if partial_success else "failure"))

										if "FrameOfReferenceTransformationMatrixType" not in ds3: 
											partial_success = False 
										else:
											partial_success = verifyEnumValues(ds3["FrameOfReferenceTransformationMatrixType"], 
												StringValueTable_FrameOfReferenceTransformationMatrixType, 
												verbose, log, -1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " SpatialRegistration success after verifying string enumerated values FrameOfReferenceTransformationMatrixType --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SpatialRegistration", 
						"UsedFiducialsSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SpatialRegistration success after verifying UsedFiducialsSequence" + ("success" if partial_success else "failure")) 
				if "UsedFiducialsSequence" in ds1:
					UsedFiducialsSequence_data = ds1.UsedFiducialsSequence
					if type(UsedFiducialsSequence_data) == Sequence:
						for i2 in range(0, len(UsedFiducialsSequence_data)):
							if verbose:
								log.append( " UsedFiducialsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = UsedFiducialsSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SpatialRegistration success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1(ds2, 
									"SpatialRegistration", "FiducialUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SpatialRegistration success after verifying FiducialUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SpatialRegistration", 
						"UsedSegmentsSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SpatialRegistration success after verifying UsedSegmentsSequence" + ("success" if partial_success else "failure")) 
				if "UsedSegmentsSequence" in ds1:
					UsedSegmentsSequence_data = ds1.UsedSegmentsSequence
					if type(UsedSegmentsSequence_data) == Sequence:
						for i2 in range(0, len(UsedSegmentsSequence_data)):
							if verbose:
								log.append( " UsedSegmentsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = UsedSegmentsSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SpatialRegistration success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1(ds2, 
									"SpatialRegistration", "ReferencedSegmentNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SpatialRegistration success after verifying ReferencedSegmentNumber --> "+("success" if partial_success else "failure"))

	return global_success

def Module_DeformableSpatialRegistration_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"DeformableSpatialRegistration")

	partial_success =  		verifyType1(ds, 
			"DeformableSpatialRegistration", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DeformableSpatialRegistration success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DeformableSpatialRegistration", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DeformableSpatialRegistration success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DeformableSpatialRegistration success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"DeformableSpatialRegistration", 
			"DeformableRegistrationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DeformableSpatialRegistration success after verifying DeformableRegistrationSequence" + ("success" if partial_success else "failure")) 
	if "DeformableRegistrationSequence" in ds:
		DeformableRegistrationSequence_data = ds.DeformableRegistrationSequence
		if type(DeformableRegistrationSequence_data) == Sequence:
			for i1 in range(0, len(DeformableRegistrationSequence_data)):
				if verbose:
					log.append( " DeformableRegistrationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DeformableRegistrationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"DeformableSpatialRegistration", "SourceFrameOfReferenceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DeformableSpatialRegistration success after verifying SourceFrameOfReferenceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"DeformableSpatialRegistration", 
						"ReferencedImageSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "DeformableSpatialRegistration success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedImageSequence" in ds1:
					ReferencedImageSequence_data = ds1.ReferencedImageSequence
					if type(ReferencedImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedImageSequence_data)):
							if verbose:
								log.append( " ReferencedImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedImageSequence_data[i2]
							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"DeformableSpatialRegistration", "FrameOfReferenceTransformationComment", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DeformableSpatialRegistration success after verifying FrameOfReferenceTransformationComment --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"DeformableSpatialRegistration", 
						"RegistrationTypeCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "DeformableSpatialRegistration success after verifying RegistrationTypeCodeSequence" + ("success" if partial_success else "failure")) 
				if "RegistrationTypeCodeSequence" in ds1:
					RegistrationTypeCodeSequence_data = ds1.RegistrationTypeCodeSequence
					if type(RegistrationTypeCodeSequence_data) == Sequence:
						for i2 in range(0, len(RegistrationTypeCodeSequence_data)):
							if verbose:
								log.append( " RegistrationTypeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RegistrationTypeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"DeformableSpatialRegistration", 
						"PreDeformationMatrixRegistrationSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "DeformableSpatialRegistration success after verifying PreDeformationMatrixRegistrationSequence" + ("success" if partial_success else "failure")) 
				if "PreDeformationMatrixRegistrationSequence" in ds1:
					PreDeformationMatrixRegistrationSequence_data = ds1.PreDeformationMatrixRegistrationSequence
					if type(PreDeformationMatrixRegistrationSequence_data) == Sequence:
						for i2 in range(0, len(PreDeformationMatrixRegistrationSequence_data)):
							if verbose:
								log.append( " PreDeformationMatrixRegistrationSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PreDeformationMatrixRegistrationSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"DeformableSpatialRegistration", "FrameOfReferenceTransformationMatrix", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying FrameOfReferenceTransformationMatrix --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"DeformableSpatialRegistration", "FrameOfReferenceTransformationMatrixType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying FrameOfReferenceTransformationMatrixType --> "+("success" if partial_success else "failure"))

							if "FrameOfReferenceTransformationMatrixType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["FrameOfReferenceTransformationMatrixType"], 
									StringValueTable_FrameOfReferenceTransformationMatrixType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying string enumerated values FrameOfReferenceTransformationMatrixType --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"DeformableSpatialRegistration", 
						"PostDeformationMatrixRegistrationSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "DeformableSpatialRegistration success after verifying PostDeformationMatrixRegistrationSequence" + ("success" if partial_success else "failure")) 
				if "PostDeformationMatrixRegistrationSequence" in ds1:
					PostDeformationMatrixRegistrationSequence_data = ds1.PostDeformationMatrixRegistrationSequence
					if type(PostDeformationMatrixRegistrationSequence_data) == Sequence:
						for i2 in range(0, len(PostDeformationMatrixRegistrationSequence_data)):
							if verbose:
								log.append( " PostDeformationMatrixRegistrationSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PostDeformationMatrixRegistrationSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"DeformableSpatialRegistration", "FrameOfReferenceTransformationMatrix", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying FrameOfReferenceTransformationMatrix --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"DeformableSpatialRegistration", "FrameOfReferenceTransformationMatrixType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying FrameOfReferenceTransformationMatrixType --> "+("success" if partial_success else "failure"))

							if "FrameOfReferenceTransformationMatrixType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["FrameOfReferenceTransformationMatrixType"], 
									StringValueTable_FrameOfReferenceTransformationMatrixType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying string defined terms FrameOfReferenceTransformationMatrixType --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"DeformableSpatialRegistration", 
						"DeformableRegistrationGridSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "DeformableSpatialRegistration success after verifying DeformableRegistrationGridSequence" + ("success" if partial_success else "failure")) 
				if "DeformableRegistrationGridSequence" in ds1:
					DeformableRegistrationGridSequence_data = ds1.DeformableRegistrationGridSequence
					if type(DeformableRegistrationGridSequence_data) == Sequence:
						for i2 in range(0, len(DeformableRegistrationGridSequence_data)):
							if verbose:
								log.append( " DeformableRegistrationGridSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = DeformableRegistrationGridSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"DeformableSpatialRegistration", "ImageOrientationPatient", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying ImageOrientationPatient --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"DeformableSpatialRegistration", "ImagePositionPatient", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying ImagePositionPatient --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"DeformableSpatialRegistration", "GridDimensions", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying GridDimensions --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"DeformableSpatialRegistration", "GridResolution", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying GridResolution --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"DeformableSpatialRegistration", "VectorGridData", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying VectorGridData --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"DeformableSpatialRegistration", 
						"UsedFiducialsSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "DeformableSpatialRegistration success after verifying UsedFiducialsSequence" + ("success" if partial_success else "failure")) 
				if "UsedFiducialsSequence" in ds1:
					UsedFiducialsSequence_data = ds1.UsedFiducialsSequence
					if type(UsedFiducialsSequence_data) == Sequence:
						for i2 in range(0, len(UsedFiducialsSequence_data)):
							if verbose:
								log.append( " UsedFiducialsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = UsedFiducialsSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1(ds2, 
									"DeformableSpatialRegistration", "FiducialUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " DeformableSpatialRegistration success after verifying FiducialUID --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SpatialFiducialsSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SpatialFiducialsSeries")

	partial_success =  		verifyType1(ds, 
			"SpatialFiducialsSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialFiducialsSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_FIDModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialFiducialsSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SpatialFiducials_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SpatialFiducials")

	partial_success =  		verifyType1(ds, 
			"SpatialFiducials", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialFiducials success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SpatialFiducials", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialFiducials success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SpatialFiducials success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"SpatialFiducials", 
			"FiducialSetSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SpatialFiducials success after verifying FiducialSetSequence" + ("success" if partial_success else "failure")) 
	if "FiducialSetSequence" in ds:
		FiducialSetSequence_data = ds.FiducialSetSequence
		if type(FiducialSetSequence_data) == Sequence:
			for i1 in range(0, len(FiducialSetSequence_data)):
				if verbose:
					log.append( " FiducialSetSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FiducialSetSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"SpatialFiducials", "FrameOfReferenceUID", 
						verbose, log, ElementDictionary, 
						Condition_ReferencedImageSequenceNotPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpatialFiducials success after verifying FrameOfReferenceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"SpatialFiducials", 
						"ReferencedImageSequence", 
						verbose, log, ElementDictionary, 
						Condition_FrameOfReferenceUIDNotPresent, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SpatialFiducials success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedImageSequence" in ds1:
					ReferencedImageSequence_data = ds1.ReferencedImageSequence
					if type(ReferencedImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedImageSequence_data)):
							if verbose:
								log.append( " ReferencedImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedImageSequence_data[i2]
							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SpatialFiducials success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"SpatialFiducials", 
						"FiducialSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SpatialFiducials success after verifying FiducialSequence" + ("success" if partial_success else "failure")) 
				if "FiducialSequence" in ds1:
					FiducialSequence_data = ds1.FiducialSequence
					if type(FiducialSequence_data) == Sequence:
						for i2 in range(0, len(FiducialSequence_data)):
							if verbose:
								log.append( " FiducialSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = FiducialSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"SpatialFiducials", "FiducialIdentifier", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SpatialFiducials success after verifying FiducialIdentifier --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"SpatialFiducials", 
									"FiducialsPropertyCategoryCodeSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "SpatialFiducials success after verifying FiducialsPropertyCategoryCodeSequence" + ("success" if partial_success else "failure")) 
							if "FiducialsPropertyCategoryCodeSequence" in ds2:
								FiducialsPropertyCategoryCodeSequence_data = ds2.FiducialsPropertyCategoryCodeSequence
								if type(FiducialsPropertyCategoryCodeSequence_data) == Sequence:
									for i3 in range(0, len(FiducialsPropertyCategoryCodeSequence_data)):
										if verbose:
											log.append( " FiducialsPropertyCategoryCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = FiducialsPropertyCategoryCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " SpatialFiducials success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1C(ds2, 
									"SpatialFiducials", 
									"FiducialIdentifierCodeSequence", 
									verbose, log, ElementDictionary, 
									Condition_FiducialIdentifierNotPresent, 
									False, 
									parent_ds2, root_ds2, 
									1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "SpatialFiducials success after verifying FiducialIdentifierCodeSequence" + ("success" if partial_success else "failure")) 
							if "FiducialIdentifierCodeSequence" in ds2:
								FiducialIdentifierCodeSequence_data = ds2.FiducialIdentifierCodeSequence
								if type(FiducialIdentifierCodeSequence_data) == Sequence:
									for i3 in range(0, len(FiducialIdentifierCodeSequence_data)):
										if verbose:
											log.append( " FiducialIdentifierCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = FiducialIdentifierCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " SpatialFiducials success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType3(ds2, 
									"SpatialFiducials", "FiducialUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SpatialFiducials success after verifying FiducialUID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"SpatialFiducials", "FiducialDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SpatialFiducials success after verifying FiducialDescription --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"SpatialFiducials", "ShapeType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SpatialFiducials success after verifying ShapeType --> "+("success" if partial_success else "failure"))

							if "ShapeType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["ShapeType"], 
									StringValueTable_FiducialShapeType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SpatialFiducials success after verifying string defined terms ShapeType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"SpatialFiducials", "NumberOfContourPoints", 
									verbose, log, ElementDictionary, 
									Condition_ContourDataIsPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SpatialFiducials success after verifying NumberOfContourPoints --> "+("success" if partial_success else "failure"))

							if Condition_ContourDataIsPresent(ds2, parent_ds2, root_ds):
								if "NumberOfContourPoints" not in ds2: 
									partial_success = False 
								else: 
									partial_success = verifyNotZero(ds2["NumberOfContourPoints"], 
										verbose, log, -1, False)

							partial_success =  		verifyType1C(ds2, 
									"SpatialFiducials", "ContourData", 
									verbose, log, ElementDictionary, 
									Condition_FrameOfReferenceUIDIsPresentInParent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SpatialFiducials success after verifying ContourData --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"SpatialFiducials", "ContourUncertaintyRadius", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " SpatialFiducials success after verifying ContourUncertaintyRadius --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"SpatialFiducials", 
									"GraphicCoordinatesDataSequence", 
									verbose, log, ElementDictionary, 
									Condition_ContourDataNotPresent, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "SpatialFiducials success after verifying GraphicCoordinatesDataSequence" + ("success" if partial_success else "failure")) 
							if "GraphicCoordinatesDataSequence" in ds2:
								GraphicCoordinatesDataSequence_data = ds2.GraphicCoordinatesDataSequence
								if type(GraphicCoordinatesDataSequence_data) == Sequence:
									for i3 in range(0, len(GraphicCoordinatesDataSequence_data)):
										if verbose:
											log.append( " GraphicCoordinatesDataSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = GraphicCoordinatesDataSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"SpatialFiducials", "GraphicData", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " SpatialFiducials success after verifying GraphicData --> "+("success" if partial_success else "failure"))

										partial_success = verifyType1(ds3, 
												"SpatialFiducials", 
												"ReferencedImageSequence", 
												verbose, log, ElementDictionary, 
																					1, 1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( "SpatialFiducials success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
										if "ReferencedImageSequence" in ds3:
											ReferencedImageSequence_data = ds3.ReferencedImageSequence
											if type(ReferencedImageSequence_data) == Sequence:
												for i4 in range(0, len(ReferencedImageSequence_data)):
													if verbose:
														log.append( " ReferencedImageSequence item [{}]".format(i4+1))
													parent_ds4 = ds3
													ds4 = ReferencedImageSequence_data[i4]
													partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds4, parent_ds4, root_ds, verbose, log, ElementDictionary)

													if verbose:
														log.append( " SpatialFiducials success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType3(ds2, 
									"SpatialFiducials", 
									"DefinitionSourceSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "SpatialFiducials success after verifying DefinitionSourceSequence" + ("success" if partial_success else "failure")) 
							if "DefinitionSourceSequence" in ds2:
								DefinitionSourceSequence_data = ds2.DefinitionSourceSequence
								if type(DefinitionSourceSequence_data) == Sequence:
									for i3 in range(0, len(DefinitionSourceSequence_data)):
										if verbose:
											log.append( " DefinitionSourceSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = DefinitionSourceSequence_data[i3]
										partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " SpatialFiducials success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
										partial_success =  		verifyType1C(ds3, 
												"SpatialFiducials", "ReferencedROINumber", 
												verbose, log, ElementDictionary, 
												Condition_ReferencedSOPClassUIDIsRTStructureSetStorage, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " SpatialFiducials success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

	return global_success

def Module_EncapsulatedDocumentSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EncapsulatedDocumentSeries")

	partial_success =  		verifyType1(ds, 
			"EncapsulatedDocumentSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["Modality"], 
			StringValueTable_Modality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentSeries success after verifying string defined terms Modality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EncapsulatedDocumentSeries", "SeriesInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentSeries success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EncapsulatedDocumentSeries", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentSeries success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"EncapsulatedDocumentSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EncapsulatedDocumentSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EncapsulatedDocumentSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"EncapsulatedDocumentSeries", "ProtocolName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentSeries success after verifying ProtocolName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EncapsulatedDocumentSeries", "SeriesDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentSeries success after verifying SeriesDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"EncapsulatedDocumentSeries", 
			"SeriesDescriptionCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EncapsulatedDocumentSeries success after verifying SeriesDescriptionCodeSequence" + ("success" if partial_success else "failure")) 
	if "SeriesDescriptionCodeSequence" in ds:
		SeriesDescriptionCodeSequence_data = ds.SeriesDescriptionCodeSequence
		if type(SeriesDescriptionCodeSequence_data) == Sequence:
			for i1 in range(0, len(SeriesDescriptionCodeSequence_data)):
				if verbose:
					log.append( " SeriesDescriptionCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SeriesDescriptionCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EncapsulatedDocumentSeries success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"EncapsulatedDocumentSeries", 
			"RequestAttributesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EncapsulatedDocumentSeries success after verifying RequestAttributesSequence" + ("success" if partial_success else "failure")) 
	if "RequestAttributesSequence" in ds:
		RequestAttributesSequence_data = ds.RequestAttributesSequence
		if type(RequestAttributesSequence_data) == Sequence:
			for i1 in range(0, len(RequestAttributesSequence_data)):
				if verbose:
					log.append( " RequestAttributesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RequestAttributesSequence_data[i1]
				partial_success =  Macro_RequestAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EncapsulatedDocumentSeries success after verifying RequestAttributesMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_PerformedProcedureStepSummaryMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EncapsulatedDocumentSeries success after verifying PerformedProcedureStepSummaryMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_EncapsulatedDocument_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EncapsulatedDocument")

	partial_success =  		verifyType1(ds, 
			"EncapsulatedDocument", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"EncapsulatedDocument", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"EncapsulatedDocument", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"EncapsulatedDocument", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EncapsulatedDocument", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EncapsulatedDocument", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"EncapsulatedDocument", 
			"SourceInstanceSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EncapsulatedDocument success after verifying SourceInstanceSequence" + ("success" if partial_success else "failure")) 
	if "SourceInstanceSequence" in ds:
		SourceInstanceSequence_data = ds.SourceInstanceSequence
		if type(SourceInstanceSequence_data) == Sequence:
			for i1 in range(0, len(SourceInstanceSequence_data)):
				if verbose:
					log.append( " SourceInstanceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceInstanceSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EncapsulatedDocument success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"EncapsulatedDocument", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EncapsulatedDocument success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EncapsulatedDocument success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType2(ds, 
			"EncapsulatedDocument", "DocumentTitle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying DocumentTitle --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"EncapsulatedDocument", 
			"ConceptNameCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EncapsulatedDocument success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
	if "ConceptNameCodeSequence" in ds:
		ConceptNameCodeSequence_data = ds.ConceptNameCodeSequence
		if type(ConceptNameCodeSequence_data) == Sequence:
			for i1 in range(0, len(ConceptNameCodeSequence_data)):
				if verbose:
					log.append( " ConceptNameCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConceptNameCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EncapsulatedDocument success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"EncapsulatedDocument", "VerificationFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying VerificationFlag --> "+("success" if partial_success else "failure"))

	if "VerificationFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VerificationFlag"], 
			StringValueTable_VerificationFlag, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying string enumerated values VerificationFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EncapsulatedDocument", "HL7InstanceIdentifier", 
			verbose, log, ElementDictionary, 
			Condition_EncapsulatedCDAInstance, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying HL7InstanceIdentifier --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"EncapsulatedDocument", 
			"PredecessorDocumentsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EncapsulatedDocument success after verifying PredecessorDocumentsSequence" + ("success" if partial_success else "failure")) 
	if "PredecessorDocumentsSequence" in ds:
		PredecessorDocumentsSequence_data = ds.PredecessorDocumentsSequence
		if type(PredecessorDocumentsSequence_data) == Sequence:
			for i1 in range(0, len(PredecessorDocumentsSequence_data)):
				if verbose:
					log.append( " PredecessorDocumentsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PredecessorDocumentsSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EncapsulatedDocument success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"EncapsulatedDocument", 
			"IdenticalDocumentsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EncapsulatedDocument success after verifying IdenticalDocumentsSequence" + ("success" if partial_success else "failure")) 
	if "IdenticalDocumentsSequence" in ds:
		IdenticalDocumentsSequence_data = ds.IdenticalDocumentsSequence
		if type(IdenticalDocumentsSequence_data) == Sequence:
			for i1 in range(0, len(IdenticalDocumentsSequence_data)):
				if verbose:
					log.append( " IdenticalDocumentsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IdenticalDocumentsSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EncapsulatedDocument success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"EncapsulatedDocument", "MIMETypeOfEncapsulatedDocument", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying MIMETypeOfEncapsulatedDocument --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EncapsulatedDocument", "ListOfMIMETypes", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying ListOfMIMETypes --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EncapsulatedDocument", "ImageLaterality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying ImageLaterality --> "+("success" if partial_success else "failure"))

	if "ImageLaterality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageLaterality"], 
			StringValueTable_ImageLaterality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying string enumerated values ImageLaterality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EncapsulatedDocument", "EncapsulatedDocument", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying EncapsulatedDocument --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EncapsulatedDocument", "EncapsulatedDocumentLength", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocument success after verifying EncapsulatedDocumentLength --> "+("success" if partial_success else "failure"))

	return global_success

def Module_EncapsulatedDocumentPDFPseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EncapsulatedDocumentPDFPseudo")

	partial_success =  		verifyType1(ds, 
			"EncapsulatedDocumentPDFPseudo", "MIMETypeOfEncapsulatedDocument", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentPDFPseudo success after verifying MIMETypeOfEncapsulatedDocument --> "+("success" if partial_success else "failure"))

	if "MIMETypeOfEncapsulatedDocument" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["MIMETypeOfEncapsulatedDocument"], 
			StringValueTable_MIMETypeApplicationPDF, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentPDFPseudo success after verifying string enumerated values MIMETypeOfEncapsulatedDocument --> "+("success" if partial_success else "failure"))

	return global_success

def Module_EncapsulatedDocumentCDAPseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EncapsulatedDocumentCDAPseudo")

	partial_success =  		verifyType1(ds, 
			"EncapsulatedDocumentCDAPseudo", "MIMETypeOfEncapsulatedDocument", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentCDAPseudo success after verifying MIMETypeOfEncapsulatedDocument --> "+("success" if partial_success else "failure"))

	if "MIMETypeOfEncapsulatedDocument" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["MIMETypeOfEncapsulatedDocument"], 
			StringValueTable_MIMETypeApplicationCDA, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentCDAPseudo success after verifying string enumerated values MIMETypeOfEncapsulatedDocument --> "+("success" if partial_success else "failure"))

	return global_success

def Module_EncapsulatedDocumentSTLPseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EncapsulatedDocumentSTLPseudo")

	partial_success =  		verifyType1(ds, 
			"EncapsulatedDocumentSTLPseudo", "MIMETypeOfEncapsulatedDocument", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentSTLPseudo success after verifying MIMETypeOfEncapsulatedDocument --> "+("success" if partial_success else "failure"))

	if "MIMETypeOfEncapsulatedDocument" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["MIMETypeOfEncapsulatedDocument"], 
			StringValueTable_MIMETypeApplicationSTL, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentSTLPseudo success after verifying string enumerated values MIMETypeOfEncapsulatedDocument --> "+("success" if partial_success else "failure"))

	return global_success

def Module_EncapsulatedDocumentSTLSeriesPseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EncapsulatedDocumentSTLSeriesPseudo")

	partial_success =  		verifyType1(ds, 
			"EncapsulatedDocumentSTLSeriesPseudo", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentSTLSeriesPseudo success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_M3DModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentSTLSeriesPseudo success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	return global_success

def Module_CheckSingleFramePseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"CheckSingleFramePseudo")

	partial_success =  		verifyType3(ds, 
			"CheckSingleFramePseudo", "NumberOfFrames", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CheckSingleFramePseudo success after verifying NumberOfFrames --> "+("success" if partial_success else "failure"))

	if "NumberOfFrames" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["NumberOfFrames"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CheckSingleFramePseudo success after verifying binary enumerated values NumberOfFrames --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RealWorldValueMappingSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RealWorldValueMappingSeries")

	partial_success =  		verifyType1(ds, 
			"RealWorldValueMappingSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["Modality"], 
			StringValueTable_RealWorldValueMappingModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingSeries success after verifying string defined terms Modality --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RealWorldValueMapping_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RealWorldValueMapping")

	partial_success =  		verifyType1(ds, 
			"RealWorldValueMapping", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMapping success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RealWorldValueMapping", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMapping success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " RealWorldValueMapping success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"RealWorldValueMapping", 
			"ReferencedImageRealWorldValueMappingSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RealWorldValueMapping success after verifying ReferencedImageRealWorldValueMappingSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageRealWorldValueMappingSequence" in ds:
		ReferencedImageRealWorldValueMappingSequence_data = ds.ReferencedImageRealWorldValueMappingSequence
		if type(ReferencedImageRealWorldValueMappingSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageRealWorldValueMappingSequence_data)):
				if verbose:
					log.append( " ReferencedImageRealWorldValueMappingSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageRealWorldValueMappingSequence_data[i1]
				partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RealWorldValueMapping success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"RealWorldValueMapping", 
						"ReferencedImageSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RealWorldValueMapping success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedImageSequence" in ds1:
					ReferencedImageSequence_data = ds1.ReferencedImageSequence
					if type(ReferencedImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedImageSequence_data)):
							if verbose:
								log.append( " ReferencedImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedImageSequence_data[i2]
							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RealWorldValueMapping success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_IntravascularOCTSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IntravascularOCTSeries")

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_IVOCTModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTSeries", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTSeries success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"IntravascularOCTSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntravascularOCTSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IntravascularOCTSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"IntravascularOCTSeries", "PresentationIntentType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTSeries success after verifying PresentationIntentType --> "+("success" if partial_success else "failure"))

	if "PresentationIntentType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationIntentType"], 
			StringValueTable_PresentationIntentType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTSeries success after verifying string enumerated values PresentationIntentType --> "+("success" if partial_success else "failure"))


	if Condition_IsForProcessingSOPClass(ds, parent_ds, root_ds):
		if "PresentationIntentType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationIntentType"], 
				StringValueTable_ForProcessing, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTSeries success after verifying string enumerated values PresentationIntentType --> "+("success" if partial_success else "failure"))


	if Condition_IsForPresentationSOPClass(ds, parent_ds, root_ds):
		if "PresentationIntentType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationIntentType"], 
				StringValueTable_ForPresentation, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTSeries success after verifying string enumerated values PresentationIntentType --> "+("success" if partial_success else "failure"))

	return global_success

def Module_IntravascularOCTImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IntravascularOCTImage")

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "ImageType", 
			verbose, log, ElementDictionary, 
			4, 4)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageAndFrameType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_IVOCTImageAndFrameTypeValue3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "VolumetricProperties", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying VolumetricProperties --> "+("success" if partial_success else "failure"))

	if "VolumetricProperties" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VolumetricProperties"], 
			StringValueTable_IVOCTVolumetricProperties, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string enumerated values VolumetricProperties --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "PixelPresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying PixelPresentation --> "+("success" if partial_success else "failure"))

	if "PixelPresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PixelPresentation"], 
			StringValueTable_IVOCTPixelPresentationImageLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string enumerated values PixelPresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IntravascularOCTImage", "AcquisitionDuration", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Original, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying AcquisitionDuration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "AcquisitionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying AcquisitionNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8Or12Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8Or12Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7Or11Or15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IntravascularOCTImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			Condition_PresentationIntentTypeIsForPresentation, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if Condition_PresentationIntentTypeIsForPresentation(ds, parent_ds, root_ds):
		if "PresentationLUTShape" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
				StringValueTable_IdentityPresentationLUTShape, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IntravascularOCTImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IntravascularOCTImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["LossyImageCompressionMethod"], 
				StringValueTable_LossyImageCompressionMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string defined terms LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_NoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTImage", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_NoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"IntravascularOCTImage", 
			"ReferencedInstanceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntravascularOCTImage success after verifying ReferencedInstanceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedInstanceSequence" in ds:
		ReferencedInstanceSequence_data = ds.ReferencedInstanceSequence
		if type(ReferencedInstanceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedInstanceSequence_data)):
				if verbose:
					log.append( " ReferencedInstanceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedInstanceSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IntravascularOCTImage success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"IntravascularOCTImage", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IntravascularOCTImage success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IntravascularOCTImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"IntravascularOCTImage", "ImageComments", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying ImageComments --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"IntravascularOCTImage", "RecommendedDisplayFrameRate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying RecommendedDisplayFrameRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IntravascularOCTImage", "InterpolationType", 
			verbose, log, ElementDictionary, 
			Condition_PresentationIntentTypeIsForPresentation, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying InterpolationType --> "+("success" if partial_success else "failure"))

	if Condition_PresentationIntentTypeIsForPresentation(ds, parent_ds, root_ds):
		if "InterpolationType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["InterpolationType"], 
				StringValueTable_IVOCTInterpolationType, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string enumerated values InterpolationType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IntravascularOCTImage", "ReferencedColorPaletteInstanceUID", 
			verbose, log, ElementDictionary, 
			Condition_PixelPresentationIsColorRef, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying ReferencedColorPaletteInstanceUID --> "+("success" if partial_success else "failure"))

	if Condition_PixelPresentationIsColorRef(ds, parent_ds, root_ds):
		if "ReferencedColorPaletteInstanceUID" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["ReferencedColorPaletteInstanceUID"], 
				StringValueTable_WellKnownColorPaletteInstanceUIDs, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTImage success after verifying string defined terms ReferencedColorPaletteInstanceUID --> "+("success" if partial_success else "failure"))

	return global_success

def Module_IntravascularOCTAcquisitionParameters_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IntravascularOCTAcquisitionParameters")

	partial_success =  		verifyType2(ds, 
			"IntravascularOCTAcquisitionParameters", "OCTFocalDistance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTAcquisitionParameters success after verifying OCTFocalDistance --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"IntravascularOCTAcquisitionParameters", "BeamSpotSize", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTAcquisitionParameters success after verifying BeamSpotSize --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"IntravascularOCTAcquisitionParameters", "EffectiveRefractiveIndex", 
			verbose, log, ElementDictionary, 
			Condition_PresentationIntentTypeIsForProcessing, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTAcquisitionParameters success after verifying EffectiveRefractiveIndex --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTAcquisitionParameters", "OCTAcquisitionDomain", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTAcquisitionParameters success after verifying OCTAcquisitionDomain --> "+("success" if partial_success else "failure"))

	if "OCTAcquisitionDomain" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["OCTAcquisitionDomain"], 
			StringValueTable_OCTAcquisitionDomain, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTAcquisitionParameters success after verifying string defined terms OCTAcquisitionDomain --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"IntravascularOCTAcquisitionParameters", "OCTOpticalCenterWavelength", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTAcquisitionParameters success after verifying OCTOpticalCenterWavelength --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"IntravascularOCTAcquisitionParameters", "AxialResolution", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTAcquisitionParameters success after verifying AxialResolution --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTAcquisitionParameters", "RangingDepth", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTAcquisitionParameters success after verifying RangingDepth --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTAcquisitionParameters", "ALineRate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTAcquisitionParameters success after verifying ALineRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTAcquisitionParameters", "ALinesPerFrame", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTAcquisitionParameters success after verifying ALinesPerFrame --> "+("success" if partial_success else "failure"))

	return global_success

def Module_IntravascularImageAcquisitionParameters_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IntravascularImageAcquisitionParameters")

	partial_success =  		verifyType1(ds, 
			"IntravascularImageAcquisitionParameters", "IVUSAcquisition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularImageAcquisitionParameters success after verifying IVUSAcquisition --> "+("success" if partial_success else "failure"))

	if "IVUSAcquisition" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["IVUSAcquisition"], 
			StringValueTable_IVOCTIVUSAcquisition, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularImageAcquisitionParameters success after verifying string enumerated values IVUSAcquisition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IntravascularImageAcquisitionParameters", "IVUSPullbackRate", 
			verbose, log, ElementDictionary, 
			Condition_IVUSAcquisitionIsMotorized, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularImageAcquisitionParameters success after verifying IVUSPullbackRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IntravascularImageAcquisitionParameters", "IVUSPullbackStartFrameNumber", 
			verbose, log, ElementDictionary, 
			Condition_IVUSAcquisitionIsMotorized, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularImageAcquisitionParameters success after verifying IVUSPullbackStartFrameNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IntravascularImageAcquisitionParameters", "IVUSPullbackStopFrameNumber", 
			verbose, log, ElementDictionary, 
			Condition_IVUSAcquisitionIsMotorized, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularImageAcquisitionParameters success after verifying IVUSPullbackStopFrameNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IntravascularImageAcquisitionParameters", "CatheterDirectionOfRotation", 
			verbose, log, ElementDictionary, 
			Condition_RotationalCatheterInformationIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularImageAcquisitionParameters success after verifying CatheterDirectionOfRotation --> "+("success" if partial_success else "failure"))

	if Condition_RotationalCatheterInformationIsPresent(ds, parent_ds, root_ds):
		if "CatheterDirectionOfRotation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["CatheterDirectionOfRotation"], 
				StringValueTable_CatheterDirectionOfRotation, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularImageAcquisitionParameters success after verifying string enumerated values CatheterDirectionOfRotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IntravascularImageAcquisitionParameters", "CatheterRotationalRate", 
			verbose, log, ElementDictionary, 
			Condition_RotationalCatheterInformationIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularImageAcquisitionParameters success after verifying CatheterRotationalRate --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"IntravascularImageAcquisitionParameters", 
			"ModeOfPercutaneousAccessSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntravascularImageAcquisitionParameters success after verifying ModeOfPercutaneousAccessSequence" + ("success" if partial_success else "failure")) 
	if "ModeOfPercutaneousAccessSequence" in ds:
		ModeOfPercutaneousAccessSequence_data = ds.ModeOfPercutaneousAccessSequence
		if type(ModeOfPercutaneousAccessSequence_data) == Sequence:
			for i1 in range(0, len(ModeOfPercutaneousAccessSequence_data)):
				if verbose:
					log.append( " ModeOfPercutaneousAccessSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ModeOfPercutaneousAccessSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IntravascularImageAcquisitionParameters success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_IntravascularOCTProcessingParameters_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IntravascularOCTProcessingParameters")

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTProcessingParameters", "OCTZOffsetApplied", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTProcessingParameters success after verifying OCTZOffsetApplied --> "+("success" if partial_success else "failure"))

	if "OCTZOffsetApplied" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["OCTZOffsetApplied"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTProcessingParameters success after verifying string enumerated values OCTZOffsetApplied --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTProcessingParameters", "RefractiveIndexApplied", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTProcessingParameters success after verifying RefractiveIndexApplied --> "+("success" if partial_success else "failure"))

	if "RefractiveIndexApplied" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RefractiveIndexApplied"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTProcessingParameters success after verifying string enumerated values RefractiveIndexApplied --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTProcessingParameters", "ALinePixelSpacing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTProcessingParameters success after verifying ALinePixelSpacing --> "+("success" if partial_success else "failure"))

	if "ALinePixelSpacing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ALinePixelSpacing"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTProcessingParameters", "PixelIntensityRelationship", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTProcessingParameters success after verifying PixelIntensityRelationship --> "+("success" if partial_success else "failure"))

	if "PixelIntensityRelationship" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PixelIntensityRelationship"], 
			StringValueTable_IVOCTPixelIntensityRelationship, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTProcessingParameters success after verifying string enumerated values PixelIntensityRelationship --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntravascularOCTProcessingParameters", "FirstALineLocation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntravascularOCTProcessingParameters success after verifying FirstALineLocation --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_IntravascularOCTFrameTypeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"IntravascularOCTFrameTypeMacro")

	partial_success = verifyType1(ds, 
			"IntravascularOCTFrameTypeMacro", 
			"IntravascularOCTFrameTypeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntravascularOCTFrameTypeMacro success after verifying IntravascularOCTFrameTypeSequence" + ("success" if partial_success else "failure")) 
	if "IntravascularOCTFrameTypeSequence" in ds:
		IntravascularOCTFrameTypeSequence_data = ds.IntravascularOCTFrameTypeSequence
		if type(IntravascularOCTFrameTypeSequence_data) == Sequence:
			for i1 in range(0, len(IntravascularOCTFrameTypeSequence_data)):
				if verbose:
					log.append( " IntravascularOCTFrameTypeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IntravascularOCTFrameTypeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IntravascularOCTFrameTypeMacro", "FrameType", 
						verbose, log, ElementDictionary, 
									4, 4)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntravascularOCTFrameTypeMacro success after verifying FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageType1, 
						verbose, log, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntravascularOCTFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageAndFrameType2, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntravascularOCTFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_IVOCTImageAndFrameTypeValue3, 
						verbose, log, 2)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntravascularOCTFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageType4, 
						verbose, log, 3)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntravascularOCTFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_IntravascularFrameContentMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"IntravascularFrameContentMacro")

	partial_success = verifyType1(ds, 
			"IntravascularFrameContentMacro", 
			"IntravascularFrameContentSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntravascularFrameContentMacro success after verifying IntravascularFrameContentSequence" + ("success" if partial_success else "failure")) 
	if "IntravascularFrameContentSequence" in ds:
		IntravascularFrameContentSequence_data = ds.IntravascularFrameContentSequence
		if type(IntravascularFrameContentSequence_data) == Sequence:
			for i1 in range(0, len(IntravascularFrameContentSequence_data)):
				if verbose:
					log.append( " IntravascularFrameContentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IntravascularFrameContentSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"IntravascularFrameContentMacro", "IntravascularLongitudinalDistance", 
						verbose, log, ElementDictionary, 
						Condition_IVUSAcquisitionIsMeasured, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntravascularFrameContentMacro success after verifying IntravascularLongitudinalDistance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"IntravascularFrameContentMacro", "SeamLineLocation", 
						verbose, log, ElementDictionary, 
						Condition_PresentationIntentTypeIsForPresentation, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntravascularFrameContentMacro success after verifying SeamLineLocation --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_IntravascularOCTFrameContentMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"IntravascularOCTFrameContentMacro")

	partial_success = verifyType1(ds, 
			"IntravascularOCTFrameContentMacro", 
			"IntravascularOCTFrameContentSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntravascularOCTFrameContentMacro success after verifying IntravascularOCTFrameContentSequence" + ("success" if partial_success else "failure")) 
	if "IntravascularOCTFrameContentSequence" in ds:
		IntravascularOCTFrameContentSequence_data = ds.IntravascularOCTFrameContentSequence
		if type(IntravascularOCTFrameContentSequence_data) == Sequence:
			for i1 in range(0, len(IntravascularOCTFrameContentSequence_data)):
				if verbose:
					log.append( " IntravascularOCTFrameContentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IntravascularOCTFrameContentSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IntravascularOCTFrameContentMacro", "OCTZOffsetCorrection", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntravascularOCTFrameContentMacro success after verifying OCTZOffsetCorrection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"IntravascularOCTFrameContentMacro", "SeamLineIndex", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntravascularOCTFrameContentMacro success after verifying SeamLineIndex --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"IntravascularOCTFrameContentMacro", "NumberOfPaddedALines", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntravascularOCTFrameContentMacro success after verifying NumberOfPaddedALines --> "+("success" if partial_success else "failure"))


				if Condition_PresentationIntentTypeIsForPresentation(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" Only permitted for FOR PROCESSING images - attribute <NumberOfPaddedALines>")

	return global_success

def Module_MultiFrameFunctionalGroupsForIVOCTImageForPresentation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForIVOCTImageForPresentation")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForIVOCTImageForPresentation", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPixelIntensityRelationshipLUTMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelIntensityRelationshipLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying PixelIntensityRelationshipLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IntravascularOCTFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IntravascularOCTFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying IntravascularOCTFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IntravascularFrameContentSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IntravascularFrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying IntravascularFrameContentMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForIVOCTImageForPresentation", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPixelIntensityRelationshipLUTMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelIntensityRelationshipLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying PixelIntensityRelationshipLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IntravascularOCTFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IntravascularOCTFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying IntravascularOCTFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IntravascularFrameContentSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IntravascularFrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForPresentation success after verifying IntravascularFrameContentMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameFunctionalGroupsForIVOCTImageForProcessing_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForIVOCTImageForProcessing")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForIVOCTImageForProcessing", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPixelIntensityRelationshipLUTMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelIntensityRelationshipLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying PixelIntensityRelationshipLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IntravascularOCTFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IntravascularOCTFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying IntravascularOCTFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IntravascularFrameContentSequenceNotInPerFrameFunctionalGroupSequenceAndAcquisitionIsMeasured(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IntravascularFrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying IntravascularFrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IntravascularOCTFrameContentSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IntravascularOCTFrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying IntravascularOCTFrameContentMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForIVOCTImageForProcessing", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPixelIntensityRelationshipLUTMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelIntensityRelationshipLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying PixelIntensityRelationshipLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IntravascularOCTFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IntravascularOCTFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying IntravascularOCTFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IntravascularFrameContentSequenceNotInSharedFunctionalGroupSequenceAndAcquisitionIsMeasured(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IntravascularFrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying IntravascularFrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IntravascularOCTFrameContentSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IntravascularOCTFrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForIVOCTImageForProcessing success after verifying IntravascularOCTFrameContentMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_ParametricMapSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ParametricMapSeries")

	partial_success =  		verifyType1(ds, 
			"ParametricMapSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ParametricMapSeries", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapSeries success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"ParametricMapSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ParametricMapSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ParametricMapSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_ParametricMapImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ParametricMapImage")

	partial_success =  		verifyType1(ds, 
			"ParametricMapImage", "ImageType", 
			verbose, log, ElementDictionary, 
			4, 4)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ParametricMapImageAndFrameType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageAndFrameType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageAndFrameType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_EnhancedMRImageType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " ParametricMapImage success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"ParametricMapImage", "PixelPresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying PixelPresentation --> "+("success" if partial_success else "failure"))

	if "PixelPresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PixelPresentation"], 
			StringValueTable_ParametricMapImagePixelPresentation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying string enumerated values PixelPresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ParametricMapImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ParametricMapImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ParametricMapImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))


	if Condition_PixelDataPresent(ds, parent_ds, root_ds):
		if "BitsAllocated" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
				BinaryValueDescription_BitsAre16, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))


	if Condition_FloatPixelDataPresent(ds, parent_ds, root_ds):
		if "BitsAllocated" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
				BinaryValueDescription_BitsAre32, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))


	if Condition_DoubleFloatPixelDataPresent(ds, parent_ds, root_ds):
		if "BitsAllocated" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
				BinaryValueDescription_BitsAre64, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ParametricMapImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			Condition_PixelDataPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if Condition_PixelDataPresent(ds, parent_ds, root_ds):
		if "BitsStored" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
				BinaryValueDescription_BitsAre16, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ParametricMapImage", "HighBit", 
			verbose, log, ElementDictionary, 
			Condition_PixelDataPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if Condition_PixelDataPresent(ds, parent_ds, root_ds):
		if "HighBit" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["HighBit"], 
				BinaryValueDescription_BitsAre15, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ParametricMapImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if "PresentationLUTShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
			StringValueTable_IdentityPresentationLUTShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ParametricMapImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ParametricMapImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ParametricMapImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))


	if Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" method inconsistent with transfer syntax - attribute <LossyImageCompressionMethod>"+\
				" = <{}>".format( tag_for_keyword("LossyImageCompressionMethod")))

	partial_success =  		verifyType1(ds, 
			"ParametricMapImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_NoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ParametricMapImage", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ParametricMapImage", "ContentQualification", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying ContentQualification --> "+("success" if partial_success else "failure"))

	if "ContentQualification" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ContentQualification"], 
			StringValueTable_ContentQualification, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying string enumerated values ContentQualification --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ParametricMapImage", "PaletteColorLookupTableUID", 
			verbose, log, ElementDictionary, 
			Condition_PixelPresentationIsColorRangeAndPaletteColorLookupTableModuleAbsent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying PaletteColorLookupTableUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ParametricMapImage", "ICCProfile", 
			verbose, log, ElementDictionary, 
			Condition_PixelPresentationIsColorRange, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying ICCProfile --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ParametricMapImage", "ColorSpace", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ParametricMapImage success after verifying ColorSpace --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiFrameFunctionalGroupsForParametricMap_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForParametricMap")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForParametricMap", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForParametricMap success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IdentityPixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying IdentityPixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTWithLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying FrameVOILUTWithLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ParametricMapFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ParametricMapFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying ParametricMapFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_StoredValueColorRangeSequenceNotInPerFrameFunctionalGroupSequenceAndPixelPresentationIsColorRange(ds1, parent_ds1, root_ds):
					partial_success =  Macro_StoredValueColorRangeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying StoredValueColorRangeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_UnassignedSharedConvertedAttributesMacroPresentInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_UnassignedSharedConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying UnassignedSharedConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForParametricMap", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForParametricMap success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IdentityPixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying IdentityPixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTWithLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying FrameVOILUTWithLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ParametricMapFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ParametricMapFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying ParametricMapFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_StoredValueColorRangeSequenceNotInSharedFunctionalGroupSequenceAndPixelPresentationIsColorRange(ds1, parent_ds1, root_ds):
					partial_success =  Macro_StoredValueColorRangeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying StoredValueColorRangeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_UnassignedPerFrameConvertedAttributesMacroPresentInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_UnassignedPerFrameConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForParametricMap success after verifying UnassignedPerFrameConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_ParametricMapFrameTypeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ParametricMapFrameTypeMacro")

	partial_success = verifyType1(ds, 
			"ParametricMapFrameTypeMacro", 
			"ParametricMapFrameTypeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ParametricMapFrameTypeMacro success after verifying ParametricMapFrameTypeSequence" + ("success" if partial_success else "failure")) 
	if "ParametricMapFrameTypeSequence" in ds:
		ParametricMapFrameTypeSequence_data = ds.ParametricMapFrameTypeSequence
		if type(ParametricMapFrameTypeSequence_data) == Sequence:
			for i1 in range(0, len(ParametricMapFrameTypeSequence_data)):
				if verbose:
					log.append( " ParametricMapFrameTypeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ParametricMapFrameTypeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"ParametricMapFrameTypeMacro", "FrameType", 
						verbose, log, ElementDictionary, 
									4, 4)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ParametricMapFrameTypeMacro success after verifying FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_ParametricMapImageAndFrameType1, 
						verbose, log, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ParametricMapFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageAndFrameType2, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ParametricMapFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageAndFrameType3, 
						verbose, log, 2)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ParametricMapFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_EnhancedMRFrameType4, 
						verbose, log, 3)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ParametricMapFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_StoredValueColorRangeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"StoredValueColorRangeMacro")

	partial_success = verifyType1(ds, 
			"StoredValueColorRangeMacro", 
			"StoredValueColorRangeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "StoredValueColorRangeMacro success after verifying StoredValueColorRangeSequence" + ("success" if partial_success else "failure")) 
	if "StoredValueColorRangeSequence" in ds:
		StoredValueColorRangeSequence_data = ds.StoredValueColorRangeSequence
		if type(StoredValueColorRangeSequence_data) == Sequence:
			for i1 in range(0, len(StoredValueColorRangeSequence_data)):
				if verbose:
					log.append( " StoredValueColorRangeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = StoredValueColorRangeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"StoredValueColorRangeMacro", "MinimumStoredValueMapped", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StoredValueColorRangeMacro success after verifying MinimumStoredValueMapped --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"StoredValueColorRangeMacro", "MaximumStoredValueMapped", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StoredValueColorRangeMacro success after verifying MaximumStoredValueMapped --> "+("success" if partial_success else "failure"))

	return global_success

def Module_Manufacturing3DModel_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"Manufacturing3DModel")

	partial_success = verifyType1(ds, 
			"Manufacturing3DModel", 
			"MeasurementUnitsCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Manufacturing3DModel success after verifying MeasurementUnitsCodeSequence" + ("success" if partial_success else "failure")) 
	if "MeasurementUnitsCodeSequence" in ds:
		MeasurementUnitsCodeSequence_data = ds.MeasurementUnitsCodeSequence
		if type(MeasurementUnitsCodeSequence_data) == Sequence:
			for i1 in range(0, len(MeasurementUnitsCodeSequence_data)):
				if verbose:
					log.append( " MeasurementUnitsCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MeasurementUnitsCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " Manufacturing3DModel success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"Manufacturing3DModel", "ModelModification", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Manufacturing3DModel success after verifying ModelModification --> "+("success" if partial_success else "failure"))

	if "ModelModification" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ModelModification"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Manufacturing3DModel success after verifying string enumerated values ModelModification --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Manufacturing3DModel", "ModelMirroring", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Manufacturing3DModel success after verifying ModelMirroring --> "+("success" if partial_success else "failure"))

	if "ModelMirroring" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ModelMirroring"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Manufacturing3DModel success after verifying string enumerated values ModelMirroring --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"Manufacturing3DModel", 
			"ModelUsageCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Manufacturing3DModel success after verifying ModelUsageCodeSequence" + ("success" if partial_success else "failure")) 
	if "ModelUsageCodeSequence" in ds:
		ModelUsageCodeSequence_data = ds.ModelUsageCodeSequence
		if type(ModelUsageCodeSequence_data) == Sequence:
			for i1 in range(0, len(ModelUsageCodeSequence_data)):
				if verbose:
					log.append( " ModelUsageCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ModelUsageCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " Manufacturing3DModel success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"Manufacturing3DModel", "ContentDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Manufacturing3DModel success after verifying ContentDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"Manufacturing3DModel", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Manufacturing3DModel success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " Manufacturing3DModel success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"Manufacturing3DModel", 
			"DerivationAlgorithmSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Manufacturing3DModel success after verifying DerivationAlgorithmSequence" + ("success" if partial_success else "failure")) 
	if "DerivationAlgorithmSequence" in ds:
		DerivationAlgorithmSequence_data = ds.DerivationAlgorithmSequence
		if type(DerivationAlgorithmSequence_data) == Sequence:
			for i1 in range(0, len(DerivationAlgorithmSequence_data)):
				if verbose:
					log.append( " DerivationAlgorithmSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DerivationAlgorithmSequence_data[i1]
				partial_success =  Macro_AlgorithmIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " Manufacturing3DModel success after verifying AlgorithmIdentificationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_FileMetaInformation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"FileMetaInformation")

	partial_success =  		verifyType1(ds, 
			"FileMetaInformation", "FileMetaInformationGroupLength", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying FileMetaInformationGroupLength --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"FileMetaInformation", "FileMetaInformationVersion", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying FileMetaInformationVersion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"FileMetaInformation", "MediaStorageSOPClassUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying MediaStorageSOPClassUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"FileMetaInformation", "MediaStorageSOPInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying MediaStorageSOPInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"FileMetaInformation", "TransferSyntaxUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying TransferSyntaxUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"FileMetaInformation", "ImplementationClassUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying ImplementationClassUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"FileMetaInformation", "ImplementationVersionName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying ImplementationVersionName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"FileMetaInformation", "SourceApplicationEntityTitle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying SourceApplicationEntityTitle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"FileMetaInformation", "SendingApplicationEntityTitle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying SendingApplicationEntityTitle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"FileMetaInformation", "ReceivingApplicationEntityTitle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying ReceivingApplicationEntityTitle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"FileMetaInformation", "SourcePresentationAddress", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying SourcePresentationAddress --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"FileMetaInformation", "SendingPresentationAddress", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying SendingPresentationAddress --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"FileMetaInformation", "ReceivingPresentationAddress", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying ReceivingPresentationAddress --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"FileMetaInformation", "PrivateInformationCreatorUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying PrivateInformationCreatorUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"FileMetaInformation", "PrivateInformation", 
			verbose, log, ElementDictionary, 
			Condition_PrivateInformationCreatorUIDPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileMetaInformation success after verifying PrivateInformation --> "+("success" if partial_success else "failure"))

	return global_success

def Module_FileSetIdentification_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"FileSetIdentification")

	partial_success =  		verifyType2(ds, 
			"FileSetIdentification", "FileSetID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileSetIdentification success after verifying FileSetID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"FileSetIdentification", "FileSetDescriptorFileID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileSetIdentification success after verifying FileSetDescriptorFileID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"FileSetIdentification", "SpecificCharacterSetOfFileSetDescriptorFile", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileSetIdentification success after verifying SpecificCharacterSetOfFileSetDescriptorFile --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSetOfFileSetDescriptorFile" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSetOfFileSetDescriptorFile"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FileSetIdentification success after verifying string defined terms SpecificCharacterSetOfFileSetDescriptorFile --> "+("success" if partial_success else "failure"))

	return global_success

def Module_DirectoryInformation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"DirectoryInformation")

	partial_success =  		verifyType1(ds, 
			"DirectoryInformation", "OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DirectoryInformation success after verifying OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DirectoryInformation", "OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DirectoryInformation success after verifying OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DirectoryInformation", "FileSetConsistencyFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DirectoryInformation success after verifying FileSetConsistencyFlag --> "+("success" if partial_success else "failure"))

	if "FileSetConsistencyFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["FileSetConsistencyFlag"], 
			BinaryValueDescription_FileSetConsistencyFlag, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DirectoryInformation success after verifying binary enumerated values FileSetConsistencyFlag --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"DirectoryInformation", 
			"DirectoryRecordSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DirectoryInformation success after verifying DirectoryRecordSequence" + ("success" if partial_success else "failure")) 
	if "DirectoryRecordSequence" in ds:
		DirectoryRecordSequence_data = ds.DirectoryRecordSequence
		if type(DirectoryRecordSequence_data) == Sequence:
			for i1 in range(0, len(DirectoryRecordSequence_data)):
				if verbose:
					log.append( " DirectoryRecordSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DirectoryRecordSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"DirectoryInformation", "OffsetOfTheNextDirectoryRecord", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformation success after verifying OffsetOfTheNextDirectoryRecord --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DirectoryInformation", "RecordInUseFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformation success after verifying RecordInUseFlag --> "+("success" if partial_success else "failure"))

				if "RecordInUseFlag" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["RecordInUseFlag"], 
						BinaryValueDescription_RecordInUseFlag, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformation success after verifying binary enumerated values RecordInUseFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DirectoryInformation", "OffsetOfReferencedLowerLevelDirectoryEntity", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformation success after verifying OffsetOfReferencedLowerLevelDirectoryEntity --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DirectoryInformation", "DirectoryRecordType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformation success after verifying DirectoryRecordType --> "+("success" if partial_success else "failure"))

				if "DirectoryRecordType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["DirectoryRecordType"], 
						StringValueTable_DirectoryRecordType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformation success after verifying string enumerated values DirectoryRecordType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"DirectoryInformation", "PrivateRecordUID", 
						verbose, log, ElementDictionary, 
						Condition_DirectoryRecordTypeIsPrivate, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformation success after verifying PrivateRecordUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"DirectoryInformation", "ReferencedFileID", 
						verbose, log, ElementDictionary, 
						Condition_DirectorySOPInstance, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformation success after verifying ReferencedFileID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"DirectoryInformation", "ReferencedSOPClassUIDInFile", 
						verbose, log, ElementDictionary, 
						Condition_DirectorySOPInstance, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformation success after verifying ReferencedSOPClassUIDInFile --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"DirectoryInformation", "ReferencedSOPInstanceUIDInFile", 
						verbose, log, ElementDictionary, 
						Condition_DirectorySOPInstance, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformation success after verifying ReferencedSOPInstanceUIDInFile --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"DirectoryInformation", "ReferencedTransferSyntaxUIDInFile", 
						verbose, log, ElementDictionary, 
						Condition_DirectorySOPInstance, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformation success after verifying ReferencedTransferSyntaxUIDInFile --> "+("success" if partial_success else "failure"))

				if Condition_DirectoryRecordTypeIsPatient(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PatientDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying PatientDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsStudy(ds1, parent_ds1, root_ds):
					partial_success =  Macro_StudyDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying StudyDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsSeries(ds1, parent_ds1, root_ds):
					partial_success =  Macro_SeriesDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying SeriesDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsImage(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ImageDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying ImageDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsRTDose(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RTDoseDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying RTDoseDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsRTStructureSet(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RTStructureSetDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying RTStructureSetDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsRTPlan(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RTPlanDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying RTPlanDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsRTTreatmentRecord(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RTTreatmentRecordDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying RTTreatmentRecordDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsPresentation(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PresentationDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying PresentationDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsWaveform(ds1, parent_ds1, root_ds):
					partial_success =  Macro_WaveformDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying WaveformDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsSRDocument(ds1, parent_ds1, root_ds):
					partial_success =  Macro_SRDocumentDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying SRDocumentDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsKeyObjectDocument(ds1, parent_ds1, root_ds):
					partial_success =  Macro_KeyObjectDocumentDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying KeyObjectDocumentDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsSpectroscopy(ds1, parent_ds1, root_ds):
					partial_success =  Macro_SpectroscopyDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying SpectroscopyDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsRawData(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RawDataDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying RawDataDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsRegistration(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RegistrationDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying RegistrationDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsFiducial(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FiducialDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying FiducialDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsHangingProtocol(ds1, parent_ds1, root_ds):
					partial_success =  Macro_HangingProtocolDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying HangingProtocolDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsEncapsulatedDocument(ds1, parent_ds1, root_ds):
					partial_success =  Macro_EncapsulatedDocumentDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying EncapsulatedDocumentDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsHL7StructuredDocument(ds1, parent_ds1, root_ds):
					partial_success =  Macro_HL7StructuredDocumentDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying HL7StructuredDocumentDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsRealWorldValueMapping(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying RealWorldValueMappingDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsStereometricRelationship(ds1, parent_ds1, root_ds):
					partial_success =  Macro_StereometricRelationshipDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying StereometricRelationshipDirectoryRecord"+ ("success" if partial_success else "failure" ))
				if Condition_DirectoryRecordTypeIsSurface(ds1, parent_ds1, root_ds):
					partial_success =  Macro_SurfaceDirectoryRecord_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DirectoryInformation success after verifying SurfaceDirectoryRecord"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_PatientDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PatientDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"PatientDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"PatientDirectoryRecord", "PatientName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientDirectoryRecord success after verifying PatientName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PatientDirectoryRecord", "PatientID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientDirectoryRecord success after verifying PatientID --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_StudyDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"StudyDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"StudyDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StudyDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StudyDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"StudyDirectoryRecord", "StudyDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StudyDirectoryRecord success after verifying StudyDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"StudyDirectoryRecord", "StudyTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StudyDirectoryRecord success after verifying StudyTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"StudyDirectoryRecord", "StudyDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StudyDirectoryRecord success after verifying StudyDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"StudyDirectoryRecord", "StudyInstanceUID", 
			verbose, log, ElementDictionary, 
			Condition_ReferencedSOPInstanceUIDInFileIsNotPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StudyDirectoryRecord success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"StudyDirectoryRecord", "StudyID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StudyDirectoryRecord success after verifying StudyID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"StudyDirectoryRecord", "AccessionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StudyDirectoryRecord success after verifying AccessionNumber --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_SeriesDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SeriesDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"SeriesDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SeriesDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SeriesDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SeriesDirectoryRecord", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SeriesDirectoryRecord success after verifying Modality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SeriesDirectoryRecord", "SeriesInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SeriesDirectoryRecord success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SeriesDirectoryRecord", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SeriesDirectoryRecord success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"SeriesDirectoryRecord", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SeriesDirectoryRecord success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SeriesDirectoryRecord success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_ImageDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ImageDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"ImageDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImageDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImageDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ImageDirectoryRecord", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ImageDirectoryRecord success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"ImageDirectoryRecord", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ImageDirectoryRecord success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ImageDirectoryRecord success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_RTDoseDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"RTDoseDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"RTDoseDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDoseDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDoseDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTDoseDirectoryRecord", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDoseDirectoryRecord success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTDoseDirectoryRecord", "DoseSummationType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDoseDirectoryRecord success after verifying DoseSummationType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTDoseDirectoryRecord", "DoseComment", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDoseDirectoryRecord success after verifying DoseComment --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RTDoseDirectoryRecord", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTDoseDirectoryRecord success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTDoseDirectoryRecord success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_RTStructureSetDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"RTStructureSetDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"RTStructureSetDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTStructureSetDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTStructureSetDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTStructureSetDirectoryRecord", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTStructureSetDirectoryRecord success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTStructureSetDirectoryRecord", "StructureSetLabel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTStructureSetDirectoryRecord success after verifying StructureSetLabel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTStructureSetDirectoryRecord", "StructureSetDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTStructureSetDirectoryRecord success after verifying StructureSetDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTStructureSetDirectoryRecord", "StructureSetTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTStructureSetDirectoryRecord success after verifying StructureSetTime --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_RTPlanDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"RTPlanDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"RTPlanDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTPlanDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTPlanDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTPlanDirectoryRecord", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTPlanDirectoryRecord success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTPlanDirectoryRecord", "RTPlanLabel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTPlanDirectoryRecord success after verifying RTPlanLabel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTPlanDirectoryRecord", "RTPlanDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTPlanDirectoryRecord success after verifying RTPlanDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTPlanDirectoryRecord", "RTPlanTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTPlanDirectoryRecord success after verifying RTPlanTime --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_RTTreatmentRecordDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"RTTreatmentRecordDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"RTTreatmentRecordDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTTreatmentRecordDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTTreatmentRecordDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTTreatmentRecordDirectoryRecord", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTTreatmentRecordDirectoryRecord success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTTreatmentRecordDirectoryRecord", "TreatmentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTTreatmentRecordDirectoryRecord success after verifying TreatmentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTTreatmentRecordDirectoryRecord", "TreatmentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTTreatmentRecordDirectoryRecord success after verifying TreatmentTime --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PresentationDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PresentationDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"PresentationDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PresentationDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PresentationDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PresentationDirectoryRecord", "PresentationCreationDate", 
			verbose, log, ElementDictionary, 
			Condition_DirectoryRecordTypeIsPresentation, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PresentationDirectoryRecord success after verifying PresentationCreationDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PresentationDirectoryRecord", "PresentationCreationTime", 
			verbose, log, ElementDictionary, 
			Condition_DirectoryRecordTypeIsPresentation, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PresentationDirectoryRecord success after verifying PresentationCreationTime --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " PresentationDirectoryRecord success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"PresentationDirectoryRecord", 
			"ReferencedSeriesSequence", 
			verbose, log, ElementDictionary, 
			Condition_BlendingSequenceIsNotPresent, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PresentationDirectoryRecord success after verifying ReferencedSeriesSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSeriesSequence" in ds:
		ReferencedSeriesSequence_data = ds.ReferencedSeriesSequence
		if type(ReferencedSeriesSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSeriesSequence_data)):
				if verbose:
					log.append( " ReferencedSeriesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSeriesSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PresentationDirectoryRecord", "SeriesInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PresentationDirectoryRecord success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"PresentationDirectoryRecord", 
						"ReferencedImageSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "PresentationDirectoryRecord success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedImageSequence" in ds1:
					ReferencedImageSequence_data = ds1.ReferencedImageSequence
					if type(ReferencedImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedImageSequence_data)):
							if verbose:
								log.append( " ReferencedImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedImageSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " PresentationDirectoryRecord success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"PresentationDirectoryRecord", 
			"BlendingSequence", 
			verbose, log, ElementDictionary, 
			Condition_ReferencedSeriesSequenceIsNotPresent, 
			False, 
			parent_ds, root_ds, 
			2, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PresentationDirectoryRecord success after verifying BlendingSequence" + ("success" if partial_success else "failure")) 
	if "BlendingSequence" in ds:
		BlendingSequence_data = ds.BlendingSequence
		if type(BlendingSequence_data) == Sequence:
			for i1 in range(0, len(BlendingSequence_data)):
				if verbose:
					log.append( " BlendingSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = BlendingSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PresentationDirectoryRecord", "StudyInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PresentationDirectoryRecord success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"PresentationDirectoryRecord", 
						"ReferencedSeriesSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "PresentationDirectoryRecord success after verifying ReferencedSeriesSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedSeriesSequence" in ds1:
					ReferencedSeriesSequence_data = ds1.ReferencedSeriesSequence
					if type(ReferencedSeriesSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedSeriesSequence_data)):
							if verbose:
								log.append( " ReferencedSeriesSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedSeriesSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"PresentationDirectoryRecord", "SeriesInstanceUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " PresentationDirectoryRecord success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1(ds2, 
									"PresentationDirectoryRecord", 
									"ReferencedImageSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "PresentationDirectoryRecord success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedImageSequence" in ds2:
								ReferencedImageSequence_data = ds2.ReferencedImageSequence
								if type(ReferencedImageSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedImageSequence_data)):
										if verbose:
											log.append( " ReferencedImageSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedImageSequence_data[i3]
										partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " PresentationDirectoryRecord success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_WaveformDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"WaveformDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"WaveformDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WaveformDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WaveformDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WaveformDirectoryRecord", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WaveformDirectoryRecord success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WaveformDirectoryRecord", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WaveformDirectoryRecord success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WaveformDirectoryRecord", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WaveformDirectoryRecord success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_SRDocumentDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SRDocumentDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"SRDocumentDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SRDocumentDirectoryRecord", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentDirectoryRecord success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SRDocumentDirectoryRecord", "CompletionFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentDirectoryRecord success after verifying CompletionFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SRDocumentDirectoryRecord", "VerificationFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentDirectoryRecord success after verifying VerificationFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SRDocumentDirectoryRecord", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentDirectoryRecord success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SRDocumentDirectoryRecord", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentDirectoryRecord success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SRDocumentDirectoryRecord", "VerificationDateTime", 
			verbose, log, ElementDictionary, 
			Condition_VerificationFlagIsVerified, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentDirectoryRecord success after verifying VerificationDateTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"SRDocumentDirectoryRecord", 
			"ConceptNameCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentDirectoryRecord success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
	if "ConceptNameCodeSequence" in ds:
		ConceptNameCodeSequence_data = ds.ConceptNameCodeSequence
		if type(ConceptNameCodeSequence_data) == Sequence:
			for i1 in range(0, len(ConceptNameCodeSequence_data)):
				if verbose:
					log.append( " ConceptNameCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConceptNameCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SRDocumentDirectoryRecord success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"SRDocumentDirectoryRecord", 
			"ContentSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentDirectoryRecord success after verifying ContentSequence" + ("success" if partial_success else "failure")) 
	if "ContentSequence" in ds:
		ContentSequence_data = ds.ContentSequence
		if type(ContentSequence_data) == Sequence:
			for i1 in range(0, len(ContentSequence_data)):
				if verbose:
					log.append( " ContentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContentSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SRDocumentDirectoryRecord", "RelationshipType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentDirectoryRecord success after verifying RelationshipType --> "+("success" if partial_success else "failure"))

				if "RelationshipType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["RelationshipType"], 
						StringValueTable_SRRelationshipTypeHasConceptModifier, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentDirectoryRecord success after verifying string enumerated values RelationshipType --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_DocumentContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SRDocumentDirectoryRecord success after verifying DocumentContentMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_KeyObjectDocumentDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"KeyObjectDocumentDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"KeyObjectDocumentDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocumentDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocumentDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"KeyObjectDocumentDirectoryRecord", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocumentDirectoryRecord success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"KeyObjectDocumentDirectoryRecord", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocumentDirectoryRecord success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"KeyObjectDocumentDirectoryRecord", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocumentDirectoryRecord success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"KeyObjectDocumentDirectoryRecord", 
			"ConceptNameCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeyObjectDocumentDirectoryRecord success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
	if "ConceptNameCodeSequence" in ds:
		ConceptNameCodeSequence_data = ds.ConceptNameCodeSequence
		if type(ConceptNameCodeSequence_data) == Sequence:
			for i1 in range(0, len(ConceptNameCodeSequence_data)):
				if verbose:
					log.append( " ConceptNameCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConceptNameCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " KeyObjectDocumentDirectoryRecord success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"KeyObjectDocumentDirectoryRecord", 
			"ContentSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeyObjectDocumentDirectoryRecord success after verifying ContentSequence" + ("success" if partial_success else "failure")) 
	if "ContentSequence" in ds:
		ContentSequence_data = ds.ContentSequence
		if type(ContentSequence_data) == Sequence:
			for i1 in range(0, len(ContentSequence_data)):
				if verbose:
					log.append( " ContentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContentSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"KeyObjectDocumentDirectoryRecord", "RelationshipType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeyObjectDocumentDirectoryRecord success after verifying RelationshipType --> "+("success" if partial_success else "failure"))

				if "RelationshipType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["RelationshipType"], 
						StringValueTable_SRRelationshipTypeHasConceptModifier, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeyObjectDocumentDirectoryRecord success after verifying string enumerated values RelationshipType --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_DocumentContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " KeyObjectDocumentDirectoryRecord success after verifying DocumentContentMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_SpectroscopyDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SpectroscopyDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"SpectroscopyDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpectroscopyDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpectroscopyDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SpectroscopyDirectoryRecord", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpectroscopyDirectoryRecord success after verifying ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SpectroscopyDirectoryRecord", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpectroscopyDirectoryRecord success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SpectroscopyDirectoryRecord", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpectroscopyDirectoryRecord success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SpectroscopyDirectoryRecord", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpectroscopyDirectoryRecord success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"SpectroscopyDirectoryRecord", 
			"ReferencedImageEvidenceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SpectroscopyDirectoryRecord success after verifying ReferencedImageEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageEvidenceSequence" in ds:
		ReferencedImageEvidenceSequence_data = ds.ReferencedImageEvidenceSequence
		if type(ReferencedImageEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageEvidenceSequence_data)):
				if verbose:
					log.append( " ReferencedImageEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageEvidenceSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SpectroscopyDirectoryRecord success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"SpectroscopyDirectoryRecord", "NumberOfFrames", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpectroscopyDirectoryRecord success after verifying NumberOfFrames --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SpectroscopyDirectoryRecord", "Rows", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpectroscopyDirectoryRecord success after verifying Rows --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SpectroscopyDirectoryRecord", "Columns", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpectroscopyDirectoryRecord success after verifying Columns --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SpectroscopyDirectoryRecord", "DataPointRows", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpectroscopyDirectoryRecord success after verifying DataPointRows --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SpectroscopyDirectoryRecord", "DataPointColumns", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpectroscopyDirectoryRecord success after verifying DataPointColumns --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"SpectroscopyDirectoryRecord", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SpectroscopyDirectoryRecord success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SpectroscopyDirectoryRecord success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_RawDataDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"RawDataDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"RawDataDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawDataDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawDataDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RawDataDirectoryRecord", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawDataDirectoryRecord success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RawDataDirectoryRecord", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawDataDirectoryRecord success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RawDataDirectoryRecord", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawDataDirectoryRecord success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RawDataDirectoryRecord", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RawDataDirectoryRecord success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RawDataDirectoryRecord success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_RegistrationDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"RegistrationDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"RegistrationDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RegistrationDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RegistrationDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RegistrationDirectoryRecord", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RegistrationDirectoryRecord success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RegistrationDirectoryRecord", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RegistrationDirectoryRecord success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " RegistrationDirectoryRecord success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_FiducialDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"FiducialDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"FiducialDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FiducialDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FiducialDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"FiducialDirectoryRecord", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FiducialDirectoryRecord success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"FiducialDirectoryRecord", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FiducialDirectoryRecord success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " FiducialDirectoryRecord success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_HangingProtocolDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"HangingProtocolDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"HangingProtocolDirectoryRecord", "HangingProtocolName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDirectoryRecord success after verifying HangingProtocolName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"HangingProtocolDirectoryRecord", "HangingProtocolDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDirectoryRecord success after verifying HangingProtocolDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"HangingProtocolDirectoryRecord", "HangingProtocolLevel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDirectoryRecord success after verifying HangingProtocolLevel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"HangingProtocolDirectoryRecord", "HangingProtocolCreator", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDirectoryRecord success after verifying HangingProtocolCreator --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"HangingProtocolDirectoryRecord", "HangingProtocolCreationDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDirectoryRecord success after verifying HangingProtocolCreationDateTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"HangingProtocolDirectoryRecord", 
			"HangingProtocolDefinitionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HangingProtocolDirectoryRecord success after verifying HangingProtocolDefinitionSequence" + ("success" if partial_success else "failure")) 
	if "HangingProtocolDefinitionSequence" in ds:
		HangingProtocolDefinitionSequence_data = ds.HangingProtocolDefinitionSequence
		if type(HangingProtocolDefinitionSequence_data) == Sequence:
			for i1 in range(0, len(HangingProtocolDefinitionSequence_data)):
				if verbose:
					log.append( " HangingProtocolDefinitionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = HangingProtocolDefinitionSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"HangingProtocolDirectoryRecord", "Modality", 
						verbose, log, ElementDictionary, 
						Condition_AnatomicRegionSequenceIsNotPresent, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDirectoryRecord success after verifying Modality --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"HangingProtocolDirectoryRecord", 
						"AnatomicRegionSequence", 
						verbose, log, ElementDictionary, 
						Condition_ModalityIsNotPresent, 
						True, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HangingProtocolDirectoryRecord success after verifying AnatomicRegionSequence" + ("success" if partial_success else "failure")) 
				if "AnatomicRegionSequence" in ds1:
					AnatomicRegionSequence_data = ds1.AnatomicRegionSequence
					if type(AnatomicRegionSequence_data) == Sequence:
						for i2 in range(0, len(AnatomicRegionSequence_data)):
							if verbose:
								log.append( " AnatomicRegionSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AnatomicRegionSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " HangingProtocolDirectoryRecord success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2C(ds1, 
						"HangingProtocolDirectoryRecord", "Laterality", 
						verbose, log, ElementDictionary, 
						Condition_AnatomicRegionSequenceIsPresent, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDirectoryRecord success after verifying Laterality --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"HangingProtocolDirectoryRecord", 
						"ProcedureCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HangingProtocolDirectoryRecord success after verifying ProcedureCodeSequence" + ("success" if partial_success else "failure")) 
				if "ProcedureCodeSequence" in ds1:
					ProcedureCodeSequence_data = ds1.ProcedureCodeSequence
					if type(ProcedureCodeSequence_data) == Sequence:
						for i2 in range(0, len(ProcedureCodeSequence_data)):
							if verbose:
								log.append( " ProcedureCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ProcedureCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " HangingProtocolDirectoryRecord success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType2(ds1, 
						"HangingProtocolDirectoryRecord", 
						"ReasonForRequestedProcedureCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HangingProtocolDirectoryRecord success after verifying ReasonForRequestedProcedureCodeSequence" + ("success" if partial_success else "failure")) 
				if "ReasonForRequestedProcedureCodeSequence" in ds1:
					ReasonForRequestedProcedureCodeSequence_data = ds1.ReasonForRequestedProcedureCodeSequence
					if type(ReasonForRequestedProcedureCodeSequence_data) == Sequence:
						for i2 in range(0, len(ReasonForRequestedProcedureCodeSequence_data)):
							if verbose:
								log.append( " ReasonForRequestedProcedureCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReasonForRequestedProcedureCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " HangingProtocolDirectoryRecord success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"HangingProtocolDirectoryRecord", "NumberOfPriorsReferenced", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDirectoryRecord success after verifying NumberOfPriorsReferenced --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"HangingProtocolDirectoryRecord", 
			"HangingProtocolUserIdentificationCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HangingProtocolDirectoryRecord success after verifying HangingProtocolUserIdentificationCodeSequence" + ("success" if partial_success else "failure")) 
	if "HangingProtocolUserIdentificationCodeSequence" in ds:
		HangingProtocolUserIdentificationCodeSequence_data = ds.HangingProtocolUserIdentificationCodeSequence
		if type(HangingProtocolUserIdentificationCodeSequence_data) == Sequence:
			for i1 in range(0, len(HangingProtocolUserIdentificationCodeSequence_data)):
				if verbose:
					log.append( " HangingProtocolUserIdentificationCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = HangingProtocolUserIdentificationCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " HangingProtocolDirectoryRecord success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_EncapsulatedDocumentDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"EncapsulatedDocumentDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"EncapsulatedDocumentDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"EncapsulatedDocumentDirectoryRecord", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentDirectoryRecord success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"EncapsulatedDocumentDirectoryRecord", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentDirectoryRecord success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EncapsulatedDocumentDirectoryRecord", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentDirectoryRecord success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"EncapsulatedDocumentDirectoryRecord", "DocumentTitle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentDirectoryRecord success after verifying DocumentTitle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EncapsulatedDocumentDirectoryRecord", "HL7InstanceIdentifier", 
			verbose, log, ElementDictionary, 
			Condition_ReferencedSOPClassUIDInFileIsEncapsulatedCDADocument, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentDirectoryRecord success after verifying HL7InstanceIdentifier --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"EncapsulatedDocumentDirectoryRecord", 
			"ConceptNameCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EncapsulatedDocumentDirectoryRecord success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
	if "ConceptNameCodeSequence" in ds:
		ConceptNameCodeSequence_data = ds.ConceptNameCodeSequence
		if type(ConceptNameCodeSequence_data) == Sequence:
			for i1 in range(0, len(ConceptNameCodeSequence_data)):
				if verbose:
					log.append( " ConceptNameCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConceptNameCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EncapsulatedDocumentDirectoryRecord success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"EncapsulatedDocumentDirectoryRecord", "MIMETypeOfEncapsulatedDocument", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EncapsulatedDocumentDirectoryRecord success after verifying MIMETypeOfEncapsulatedDocument --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_HL7StructuredDocumentDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"HL7StructuredDocumentDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"HL7StructuredDocumentDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HL7StructuredDocumentDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HL7StructuredDocumentDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"HL7StructuredDocumentDirectoryRecord", "HL7InstanceIdentifier", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HL7StructuredDocumentDirectoryRecord success after verifying HL7InstanceIdentifier --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"HL7StructuredDocumentDirectoryRecord", "HL7DocumentEffectiveTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HL7StructuredDocumentDirectoryRecord success after verifying HL7DocumentEffectiveTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"HL7StructuredDocumentDirectoryRecord", 
			"HL7DocumentTypeCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HL7StructuredDocumentDirectoryRecord success after verifying HL7DocumentTypeCodeSequence" + ("success" if partial_success else "failure")) 
	if "HL7DocumentTypeCodeSequence" in ds:
		HL7DocumentTypeCodeSequence_data = ds.HL7DocumentTypeCodeSequence
		if type(HL7DocumentTypeCodeSequence_data) == Sequence:
			for i1 in range(0, len(HL7DocumentTypeCodeSequence_data)):
				if verbose:
					log.append( " HL7DocumentTypeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = HL7DocumentTypeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " HL7StructuredDocumentDirectoryRecord success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_RealWorldValueMappingDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"RealWorldValueMappingDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"RealWorldValueMappingDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RealWorldValueMappingDirectoryRecord", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingDirectoryRecord success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RealWorldValueMappingDirectoryRecord", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RealWorldValueMappingDirectoryRecord success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " RealWorldValueMappingDirectoryRecord success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_StereometricRelationshipDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"StereometricRelationshipDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"StereometricRelationshipDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StereometricRelationshipDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StereometricRelationshipDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " StereometricRelationshipDirectoryRecord success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_SurfaceDirectoryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SurfaceDirectoryRecord")

	partial_success =  		verifyType1C(ds, 
			"SurfaceDirectoryRecord", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SurfaceDirectoryRecord success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSet, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SurfaceDirectoryRecord success after verifying string defined terms SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SurfaceDirectoryRecord", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SurfaceDirectoryRecord success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SurfaceDirectoryRecord", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SurfaceDirectoryRecord success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SurfaceDirectoryRecord success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_DirectoryInformationDental_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"DirectoryInformationDental")

	partial_success = verifyType2(ds, 
			"DirectoryInformationDental", 
			"DirectoryRecordSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DirectoryInformationDental success after verifying DirectoryRecordSequence" + ("success" if partial_success else "failure")) 
	if "DirectoryRecordSequence" in ds:
		DirectoryRecordSequence_data = ds.DirectoryRecordSequence
		if type(DirectoryRecordSequence_data) == Sequence:
			for i1 in range(0, len(DirectoryRecordSequence_data)):
				if verbose:
					log.append( " DirectoryRecordSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DirectoryRecordSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"DirectoryInformationDental", "ReferencedSOPClassUIDInFile", 
						verbose, log, ElementDictionary, 
						Condition_DirectorySOPInstance, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformationDental success after verifying ReferencedSOPClassUIDInFile --> "+("success" if partial_success else "failure"))

				if Condition_DirectorySOPInstance(ds1, parent_ds1, root_ds):
					if "ReferencedSOPClassUIDInFile" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["ReferencedSOPClassUIDInFile"], 
							StringValueTable_DentalMediaProfileSOPClasses, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformationDental success after verifying string enumerated values ReferencedSOPClassUIDInFile --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"DirectoryInformationDental", "ReferencedTransferSyntaxUIDInFile", 
						verbose, log, ElementDictionary, 
						Condition_DirectorySOPInstance, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformationDental success after verifying ReferencedTransferSyntaxUIDInFile --> "+("success" if partial_success else "failure"))

				if Condition_DirectorySOPInstance(ds1, parent_ds1, root_ds):
					if "ReferencedTransferSyntaxUIDInFile" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["ReferencedTransferSyntaxUIDInFile"], 
							StringValueTable_DentalMediaProfileTransferSyntaxes, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " DirectoryInformationDental success after verifying string enumerated values ReferencedTransferSyntaxUIDInFile --> "+("success" if partial_success else "failure"))

	return global_success

def Module_PETSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"PETSeries")

	partial_success =  		verifyType1(ds, 
			"PETSeries", "SeriesDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying SeriesDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETSeries", "SeriesTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying SeriesTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETSeries", "Units", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying Units --> "+("success" if partial_success else "failure"))

	if "Units" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["Units"], 
			StringValueTable_PETUnits, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string defined terms Units --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "SUVType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying SUVType --> "+("success" if partial_success else "failure"))

	if "SUVType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SUVType"], 
			StringValueTable_SUVType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string enumerated values SUVType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETSeries", "CountsSource", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying CountsSource --> "+("success" if partial_success else "failure"))

	if "CountsSource" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CountsSource"], 
			StringValueTable_CountsSource, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string enumerated values CountsSource --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETSeries", "SeriesType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying SeriesType --> "+("success" if partial_success else "failure"))

	if "SeriesType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SeriesType"], 
			StringValueTable_PETSeriesType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string enumerated values SeriesType --> "+("success" if partial_success else "failure"))


	if "SeriesType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SeriesType"], 
			StringValueTable_PETSeriesType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string enumerated values SeriesType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"PETSeries", "ReprojectionMethod", 
			verbose, log, ElementDictionary, 
			Condition_PETSeriesType2Reprojection, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying ReprojectionMethod --> "+("success" if partial_success else "failure"))

	if Condition_PETSeriesType2Reprojection(ds, parent_ds, root_ds):
		if "ReprojectionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["ReprojectionMethod"], 
				StringValueTable_ReprojectionMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string defined terms ReprojectionMethod --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PETSeries", "NumberOfRRIntervals", 
			verbose, log, ElementDictionary, 
			Condition_PETSeriesType1Gated, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying NumberOfRRIntervals --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PETSeries", "NumberOfTimeSlots", 
			verbose, log, ElementDictionary, 
			Condition_PETSeriesType1Gated, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying NumberOfTimeSlots --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PETSeries", "NumberOfTimeSlices", 
			verbose, log, ElementDictionary, 
			Condition_PETSeriesType1Dynamic, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying NumberOfTimeSlices --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETSeries", "NumberOfSlices", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying NumberOfSlices --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"PETSeries", "CorrectedImage", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying CorrectedImage --> "+("success" if partial_success else "failure"))

	if "CorrectedImage" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["CorrectedImage"], 
			StringValueTable_CorrectedImage, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string defined terms CorrectedImage --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "RandomsCorrectionMethod", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying RandomsCorrectionMethod --> "+("success" if partial_success else "failure"))

	if "RandomsCorrectionMethod" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["RandomsCorrectionMethod"], 
			StringValueTable_RandomsCorrectionMethod, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string defined terms RandomsCorrectionMethod --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "AttenuationCorrectionMethod", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying AttenuationCorrectionMethod --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "ScatterCorrectionMethod", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying ScatterCorrectionMethod --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETSeries", "DecayCorrection", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying DecayCorrection --> "+("success" if partial_success else "failure"))

	if "DecayCorrection" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["DecayCorrection"], 
			StringValueTable_DecayCorrection, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string defined terms DecayCorrection --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "ReconstructionDiameter", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying ReconstructionDiameter --> "+("success" if partial_success else "failure"))

	if "ReconstructionDiameter" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ReconstructionDiameter"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"PETSeries", "ConvolutionKernel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying ConvolutionKernel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "ReconstructionMethod", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying ReconstructionMethod --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "DetectorLinesOfResponseUsed", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying DetectorLinesOfResponseUsed --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "AcquisitionStartCondition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying AcquisitionStartCondition --> "+("success" if partial_success else "failure"))

	if "AcquisitionStartCondition" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["AcquisitionStartCondition"], 
			StringValueTable_AcquisitionStartCondition, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string defined terms AcquisitionStartCondition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "AcquisitionStartConditionData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying AcquisitionStartConditionData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "AcquisitionTerminationCondition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying AcquisitionTerminationCondition --> "+("success" if partial_success else "failure"))

	if "AcquisitionTerminationCondition" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["AcquisitionTerminationCondition"], 
			StringValueTable_PETAcquisitionTerminationCondition, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string defined terms AcquisitionTerminationCondition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "AcquisitionTerminationConditionData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying AcquisitionTerminationConditionData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "FieldOfViewShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying FieldOfViewShape --> "+("success" if partial_success else "failure"))

	if "FieldOfViewShape" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["FieldOfViewShape"], 
			StringValueTable_PETFieldOfViewShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string defined terms FieldOfViewShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "FieldOfViewDimensions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying FieldOfViewDimensions --> "+("success" if partial_success else "failure"))

	if "FieldOfViewDimensions" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["FieldOfViewDimensions"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"PETSeries", "GantryDetectorTilt", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying GantryDetectorTilt --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "GantryDetectorSlew", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying GantryDetectorSlew --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "TypeOfDetectorMotion", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying TypeOfDetectorMotion --> "+("success" if partial_success else "failure"))

	if "TypeOfDetectorMotion" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["TypeOfDetectorMotion"], 
			StringValueTable_TypeOfDetectorMotion, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string defined terms TypeOfDetectorMotion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"PETSeries", "CollimatorType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying CollimatorType --> "+("success" if partial_success else "failure"))

	if "CollimatorType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["CollimatorType"], 
			StringValueTable_PETCollimatorType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string defined terms CollimatorType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "CollimatorGridName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying CollimatorGridName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "AxialAcceptance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying AxialAcceptance --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "AxialMash", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying AxialMash --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "TransverseMash", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying TransverseMash --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "DetectorElementSize", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying DetectorElementSize --> "+("success" if partial_success else "failure"))

	if "DetectorElementSize" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DetectorElementSize"], 
			verbose, log, -1, False)

	partial_success =  		verifyType3(ds, 
			"PETSeries", "CoincidenceWindowWidth", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying CoincidenceWindowWidth --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"PETSeries", 
			"EnergyWindowRangeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PETSeries success after verifying EnergyWindowRangeSequence" + ("success" if partial_success else "failure")) 
	if "EnergyWindowRangeSequence" in ds:
		EnergyWindowRangeSequence_data = ds.EnergyWindowRangeSequence
		if type(EnergyWindowRangeSequence_data) == Sequence:
			for i1 in range(0, len(EnergyWindowRangeSequence_data)):
				if verbose:
					log.append( " EnergyWindowRangeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = EnergyWindowRangeSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"PETSeries", "EnergyWindowLowerLimit", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETSeries success after verifying EnergyWindowLowerLimit --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"PETSeries", "EnergyWindowUpperLimit", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETSeries success after verifying EnergyWindowUpperLimit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETSeries", "SecondaryCountsType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying SecondaryCountsType --> "+("success" if partial_success else "failure"))

	if "SecondaryCountsType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SecondaryCountsType"], 
			StringValueTable_SecondaryCountsType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETSeries success after verifying string defined terms SecondaryCountsType --> "+("success" if partial_success else "failure"))

	return global_success

def Module_PETIsotope_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"PETIsotope")

	partial_success = verifyType2(ds, 
			"PETIsotope", 
			"RadiopharmaceuticalInformationSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PETIsotope success after verifying RadiopharmaceuticalInformationSequence" + ("success" if partial_success else "failure")) 
	if "RadiopharmaceuticalInformationSequence" in ds:
		RadiopharmaceuticalInformationSequence_data = ds.RadiopharmaceuticalInformationSequence
		if type(RadiopharmaceuticalInformationSequence_data) == Sequence:
			for i1 in range(0, len(RadiopharmaceuticalInformationSequence_data)):
				if verbose:
					log.append( " RadiopharmaceuticalInformationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RadiopharmaceuticalInformationSequence_data[i1]
				partial_success = verifyType2(ds1, 
						"PETIsotope", 
						"RadionuclideCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "PETIsotope success after verifying RadionuclideCodeSequence" + ("success" if partial_success else "failure")) 
				if "RadionuclideCodeSequence" in ds1:
					RadionuclideCodeSequence_data = ds1.RadionuclideCodeSequence
					if type(RadionuclideCodeSequence_data) == Sequence:
						for i2 in range(0, len(RadionuclideCodeSequence_data)):
							if verbose:
								log.append( " RadionuclideCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RadionuclideCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " PETIsotope success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "RadiopharmaceuticalRoute", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying RadiopharmaceuticalRoute --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"PETIsotope", 
						"AdministrationRouteCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "PETIsotope success after verifying AdministrationRouteCodeSequence" + ("success" if partial_success else "failure")) 
				if "AdministrationRouteCodeSequence" in ds1:
					AdministrationRouteCodeSequence_data = ds1.AdministrationRouteCodeSequence
					if type(AdministrationRouteCodeSequence_data) == Sequence:
						for i2 in range(0, len(AdministrationRouteCodeSequence_data)):
							if verbose:
								log.append( " AdministrationRouteCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AdministrationRouteCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " PETIsotope success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "RadiopharmaceuticalVolume", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying RadiopharmaceuticalVolume --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "RadiopharmaceuticalStartTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying RadiopharmaceuticalStartTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "RadiopharmaceuticalStartDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying RadiopharmaceuticalStartDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "RadiopharmaceuticalStopTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying RadiopharmaceuticalStopTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "RadiopharmaceuticalStopDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying RadiopharmaceuticalStopDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "RadionuclideTotalDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying RadionuclideTotalDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "RadionuclideHalfLife", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying RadionuclideHalfLife --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "RadionuclidePositronFraction", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying RadionuclidePositronFraction --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "RadiopharmaceuticalSpecificActivity", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying RadiopharmaceuticalSpecificActivity --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "Radiopharmaceutical", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying Radiopharmaceutical --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"PETIsotope", 
						"RadiopharmaceuticalCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "PETIsotope success after verifying RadiopharmaceuticalCodeSequence" + ("success" if partial_success else "failure")) 
				if "RadiopharmaceuticalCodeSequence" in ds1:
					RadiopharmaceuticalCodeSequence_data = ds1.RadiopharmaceuticalCodeSequence
					if type(RadiopharmaceuticalCodeSequence_data) == Sequence:
						for i2 in range(0, len(RadiopharmaceuticalCodeSequence_data)):
							if verbose:
								log.append( " RadiopharmaceuticalCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RadiopharmaceuticalCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " PETIsotope success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"PETIsotope", 
			"InterventionDrugInformationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PETIsotope success after verifying InterventionDrugInformationSequence" + ("success" if partial_success else "failure")) 
	if "InterventionDrugInformationSequence" in ds:
		InterventionDrugInformationSequence_data = ds.InterventionDrugInformationSequence
		if type(InterventionDrugInformationSequence_data) == Sequence:
			for i1 in range(0, len(InterventionDrugInformationSequence_data)):
				if verbose:
					log.append( " InterventionDrugInformationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = InterventionDrugInformationSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "InterventionDrugName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying InterventionDrugName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"PETIsotope", 
						"InterventionDrugCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "PETIsotope success after verifying InterventionDrugCodeSequence" + ("success" if partial_success else "failure")) 
				if "InterventionDrugCodeSequence" in ds1:
					InterventionDrugCodeSequence_data = ds1.InterventionDrugCodeSequence
					if type(InterventionDrugCodeSequence_data) == Sequence:
						for i2 in range(0, len(InterventionDrugCodeSequence_data)):
							if verbose:
								log.append( " InterventionDrugCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = InterventionDrugCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " PETIsotope success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "InterventionDrugStartTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying InterventionDrugStartTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "InterventionDrugStopTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying InterventionDrugStopTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"PETIsotope", "InterventionDrugDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETIsotope success after verifying InterventionDrugDose --> "+("success" if partial_success else "failure"))

	return global_success

def Module_PETMultigatedAcquisition_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"PETMultigatedAcquisition")

	partial_success =  		verifyType2(ds, 
			"PETMultigatedAcquisition", "BeatRejectionFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETMultigatedAcquisition success after verifying BeatRejectionFlag --> "+("success" if partial_success else "failure"))

	if "BeatRejectionFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BeatRejectionFlag"], 
			StringValueTable_YesNoLetter, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETMultigatedAcquisition success after verifying string enumerated values BeatRejectionFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETMultigatedAcquisition", "TriggerSourceOrType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETMultigatedAcquisition success after verifying TriggerSourceOrType --> "+("success" if partial_success else "failure"))

	if "TriggerSourceOrType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["TriggerSourceOrType"], 
			StringValueTable_EKG, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETMultigatedAcquisition success after verifying string defined terms TriggerSourceOrType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETMultigatedAcquisition", "PVCRejection", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETMultigatedAcquisition success after verifying PVCRejection --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETMultigatedAcquisition", "SkipBeats", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETMultigatedAcquisition success after verifying SkipBeats --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETMultigatedAcquisition", "HeartRate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETMultigatedAcquisition success after verifying HeartRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETMultigatedAcquisition", "CardiacFramingType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETMultigatedAcquisition success after verifying CardiacFramingType --> "+("success" if partial_success else "failure"))

	if "CardiacFramingType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["CardiacFramingType"], 
			StringValueTable_CardiacFramingType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETMultigatedAcquisition success after verifying string defined terms CardiacFramingType --> "+("success" if partial_success else "failure"))

	return global_success

def Module_PETImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"PETImage")

	partial_success =  		verifyType1(ds, 
			"PETImage", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_PETImageTypeValue2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETImage", "RescaleIntercept", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying RescaleIntercept --> "+("success" if partial_success else "failure"))

	if "RescaleIntercept" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["RescaleIntercept"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying binary enumerated values RescaleIntercept --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETImage", "RescaleSlope", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying RescaleSlope --> "+("success" if partial_success else "failure"))

	if "RescaleSlope" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["RescaleSlope"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"PETImage", "FrameReferenceTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying FrameReferenceTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PETImage", "TriggerTime", 
			verbose, log, ElementDictionary, 
			Condition_PETSeriesType1Gated, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying TriggerTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PETImage", "FrameTime", 
			verbose, log, ElementDictionary, 
			Condition_PETSeriesType1Gated, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying FrameTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PETImage", "LowRRValue", 
			verbose, log, ElementDictionary, 
			Condition_PETSeriesType1GatedAndBeatRejection, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying LowRRValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PETImage", "HighRRValue", 
			verbose, log, ElementDictionary, 
			Condition_PETSeriesType1GatedAndBeatRejection, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying HighRRValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PETImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PETImage", "ImageIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying ImageIndex --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"PETImage", "AcquisitionDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying AcquisitionDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"PETImage", "AcquisitionTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying AcquisitionTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"PETImage", "ActualFrameDuration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying ActualFrameDuration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETImage", "NominalInterval", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying NominalInterval --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETImage", "IntervalsAcquired", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying IntervalsAcquired --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETImage", "IntervalsRejected", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying IntervalsRejected --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETImage", "PrimaryPromptsCountsAccumulated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying PrimaryPromptsCountsAccumulated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETImage", "SecondaryCountsAccumulated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying SecondaryCountsAccumulated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETImage", "SliceSensitivityFactor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying SliceSensitivityFactor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PETImage", "DecayFactor", 
			verbose, log, ElementDictionary, 
			Condition_DecayCorrectionNotNone, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying DecayFactor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETImage", "DoseCalibrationFactor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying DoseCalibrationFactor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETImage", "ScatterFractionFactor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying ScatterFractionFactor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PETImage", "DeadTimeFactor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying DeadTimeFactor --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_GeneralAnatomyOptionalMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " PETImage success after verifying GeneralAnatomyOptionalMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_OptionalViewAndSliceProgressionDirectionMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " PETImage success after verifying OptionalViewAndSliceProgressionDirectionMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"PETImage", "IsocenterPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PETImage success after verifying IsocenterPosition --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiFrameFunctionalGroupsForEnhancedPETImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForEnhancedPETImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForEnhancedPETImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedRespiratorySynchronizationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RadiopharmaceuticalUsageSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RadiopharmaceuticalUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying RadiopharmaceuticalUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPatientPhysiologicalStateMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PatientPhysiologicalStateMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PatientPhysiologicalStateMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PETFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPETFrameAcquisitionMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETFrameAcquisitionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETFrameAcquisitionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPETDetectorMotionDetailsMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETDetectorMotionDetailsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETDetectorMotionDetailsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPETPositionMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETPositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPETFrameCorrectionFactorsMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETFrameCorrectionFactorsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETFrameCorrectionFactorsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPETReconstructionMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETReconstructionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETReconstructionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPETTableDynamicsMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETTableDynamicsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETTableDynamicsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForEnhancedPETImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedRespiratorySynchronizationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RadiopharmaceuticalUsageSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RadiopharmaceuticalUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying RadiopharmaceuticalUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPatientPhysiologicalStateMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PatientPhysiologicalStateMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PatientPhysiologicalStateMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PETFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPETFrameAcquisitionMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETFrameAcquisitionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETFrameAcquisitionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPETDetectorMotionDetailsMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETDetectorMotionDetailsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETDetectorMotionDetailsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPETPositionMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETPositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPETFrameCorrectionFactorsMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETFrameCorrectionFactorsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETFrameCorrectionFactorsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPETReconstructionMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETReconstructionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETReconstructionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPETTableDynamicsMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETTableDynamicsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying PETTableDynamicsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedPETImage success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomyMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PETFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying PETFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_UnassignedSharedConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying UnassignedSharedConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomyMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PETFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying PETFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_UnassignedPerFrameConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying UnassignedPerFrameConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ImageFrameConversionSourceMacroPresentInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ImageFrameConversionSourceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedPETImage success after verifying ImageFrameConversionSourceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomyMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PETFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying PETFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_UnassignedSharedConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying UnassignedSharedConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ConversionSourceAttributesSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ImageFrameConversionSourceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying ImageFrameConversionSourceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomyMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PETFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PETFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying PETFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_UnassignedPerFrameConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying UnassignedPerFrameConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ConversionSourceAttributesSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ImageFrameConversionSourceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedPETImage success after verifying ImageFrameConversionSourceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_PETFrameTypeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PETFrameTypeMacro")

	partial_success = verifyType1(ds, 
			"PETFrameTypeMacro", 
			"PETFrameTypeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PETFrameTypeMacro success after verifying PETFrameTypeSequence" + ("success" if partial_success else "failure")) 
	if "PETFrameTypeSequence" in ds:
		PETFrameTypeSequence_data = ds.PETFrameTypeSequence
		if type(PETFrameTypeSequence_data) == Sequence:
			for i1 in range(0, len(PETFrameTypeSequence_data)):
				if verbose:
					log.append( " PETFrameTypeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PETFrameTypeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PETFrameTypeMacro", "FrameType", 
						verbose, log, ElementDictionary, 
									4, 4)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameTypeMacro success after verifying FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedFrameType1, 
						verbose, log, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageAndFrameType2, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageAndFrameType3, 
						verbose, log, 2)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_CommonEnhancedFrameType4, 
						verbose, log, 3)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_CommonCTMRImageDescriptionFrameLevelMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PETFrameTypeMacro success after verifying CommonCTMRImageDescriptionFrameLevelMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_PETFrameAcquisitionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PETFrameAcquisitionMacro")

	partial_success = verifyType1(ds, 
			"PETFrameAcquisitionMacro", 
			"PETFrameAcquisitionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PETFrameAcquisitionMacro success after verifying PETFrameAcquisitionSequence" + ("success" if partial_success else "failure")) 
	if "PETFrameAcquisitionSequence" in ds:
		PETFrameAcquisitionSequence_data = ds.PETFrameAcquisitionSequence
		if type(PETFrameAcquisitionSequence_data) == Sequence:
			for i1 in range(0, len(PETFrameAcquisitionSequence_data)):
				if verbose:
					log.append( " PETFrameAcquisitionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PETFrameAcquisitionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PETFrameAcquisitionMacro", "TableHeight", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameAcquisitionMacro success after verifying TableHeight --> "+("success" if partial_success else "failure"))

				if "TableHeight" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["TableHeight"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"PETFrameAcquisitionMacro", "GantryDetectorTilt", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameAcquisitionMacro success after verifying GantryDetectorTilt --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PETFrameAcquisitionMacro", "GantryDetectorSlew", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameAcquisitionMacro success after verifying GantryDetectorSlew --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PETFrameAcquisitionMacro", "DataCollectionDiameter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameAcquisitionMacro success after verifying DataCollectionDiameter --> "+("success" if partial_success else "failure"))

				if "DataCollectionDiameter" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["DataCollectionDiameter"], 
						verbose, log, -1, True)

	return global_success

def Macro_PETDetectorMotionDetailsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PETDetectorMotionDetailsMacro")

	partial_success = verifyType1(ds, 
			"PETDetectorMotionDetailsMacro", 
			"PETDetectorMotionDetailsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PETDetectorMotionDetailsMacro success after verifying PETDetectorMotionDetailsSequence" + ("success" if partial_success else "failure")) 
	if "PETDetectorMotionDetailsSequence" in ds:
		PETDetectorMotionDetailsSequence_data = ds.PETDetectorMotionDetailsSequence
		if type(PETDetectorMotionDetailsSequence_data) == Sequence:
			for i1 in range(0, len(PETDetectorMotionDetailsSequence_data)):
				if verbose:
					log.append( " PETDetectorMotionDetailsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PETDetectorMotionDetailsSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PETDetectorMotionDetailsMacro", "RotationDirection", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETDetectorMotionDetailsMacro success after verifying RotationDirection --> "+("success" if partial_success else "failure"))

				if "RotationDirection" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["RotationDirection"], 
						StringValueTable_RotationDirection, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETDetectorMotionDetailsMacro success after verifying string enumerated values RotationDirection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PETDetectorMotionDetailsMacro", "RevolutionTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETDetectorMotionDetailsMacro success after verifying RevolutionTime --> "+("success" if partial_success else "failure"))

				if "RevolutionTime" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["RevolutionTime"], 
						verbose, log, -1, True)

	return global_success

def Macro_PETPositionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PETPositionMacro")

	partial_success = verifyType1(ds, 
			"PETPositionMacro", 
			"PETPositionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PETPositionMacro success after verifying PETPositionSequence" + ("success" if partial_success else "failure")) 
	if "PETPositionSequence" in ds:
		PETPositionSequence_data = ds.PETPositionSequence
		if type(PETPositionSequence_data) == Sequence:
			for i1 in range(0, len(PETPositionSequence_data)):
				if verbose:
					log.append( " PETPositionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PETPositionSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"PETPositionMacro", "TablePosition", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETPositionMacro success after verifying TablePosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"PETPositionMacro", "DataCollectionCenterPatient", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETPositionMacro success after verifying DataCollectionCenterPatient --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"PETPositionMacro", "ReconstructionTargetCenterPatient", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETPositionMacro success after verifying ReconstructionTargetCenterPatient --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PETFrameCorrectionFactorsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PETFrameCorrectionFactorsMacro")

	partial_success = verifyType1(ds, 
			"PETFrameCorrectionFactorsMacro", 
			"PETFrameCorrectionFactorsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PETFrameCorrectionFactorsMacro success after verifying PETFrameCorrectionFactorsSequence" + ("success" if partial_success else "failure")) 
	if "PETFrameCorrectionFactorsSequence" in ds:
		PETFrameCorrectionFactorsSequence_data = ds.PETFrameCorrectionFactorsSequence
		if type(PETFrameCorrectionFactorsSequence_data) == Sequence:
			for i1 in range(0, len(PETFrameCorrectionFactorsSequence_data)):
				if verbose:
					log.append( " PETFrameCorrectionFactorsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PETFrameCorrectionFactorsSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"PETFrameCorrectionFactorsMacro", "PrimaryPromptsCountsAccumulated", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameCorrectionFactorsMacro success after verifying PrimaryPromptsCountsAccumulated --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "PrimaryPromptsCountsAccumulated" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["PrimaryPromptsCountsAccumulated"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"PETFrameCorrectionFactorsMacro", "SliceSensitivityFactor", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameCorrectionFactorsMacro success after verifying SliceSensitivityFactor --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "SliceSensitivityFactor" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["SliceSensitivityFactor"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"PETFrameCorrectionFactorsMacro", "DecayFactor", 
						verbose, log, ElementDictionary, 
						Condition_IsDecayCorrected, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameCorrectionFactorsMacro success after verifying DecayFactor --> "+("success" if partial_success else "failure"))

				if Condition_IsDecayCorrected(ds1, parent_ds1, root_ds):
					if "DecayFactor" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["DecayFactor"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"PETFrameCorrectionFactorsMacro", "ScatterFractionFactor", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameCorrectionFactorsMacro success after verifying ScatterFractionFactor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"PETFrameCorrectionFactorsMacro", "DeadTimeFactor", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETFrameCorrectionFactorsMacro success after verifying DeadTimeFactor --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "DeadTimeFactor" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["DeadTimeFactor"], 
							verbose, log, -1, True)

	return global_success

def Macro_PETReconstructionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PETReconstructionMacro")

	partial_success = verifyType1(ds, 
			"PETReconstructionMacro", 
			"PETReconstructionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PETReconstructionMacro success after verifying PETReconstructionSequence" + ("success" if partial_success else "failure")) 
	if "PETReconstructionSequence" in ds:
		PETReconstructionSequence_data = ds.PETReconstructionSequence
		if type(PETReconstructionSequence_data) == Sequence:
			for i1 in range(0, len(PETReconstructionSequence_data)):
				if verbose:
					log.append( " PETReconstructionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PETReconstructionSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"PETReconstructionMacro", "ReconstructionType", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETReconstructionMacro success after verifying ReconstructionType --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "ReconstructionType" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["ReconstructionType"], 
							StringValueTable_PETReconstructionType, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " PETReconstructionMacro success after verifying string defined terms ReconstructionType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"PETReconstructionMacro", "ReconstructionAlgorithm", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETReconstructionMacro success after verifying ReconstructionAlgorithm --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "ReconstructionAlgorithm" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["ReconstructionAlgorithm"], 
							StringValueTable_PETReconstructionAlgorithm, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " PETReconstructionMacro success after verifying string defined terms ReconstructionAlgorithm --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PETReconstructionMacro", "IterativeReconstructionMethod", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETReconstructionMacro success after verifying IterativeReconstructionMethod --> "+("success" if partial_success else "failure"))

				if "IterativeReconstructionMethod" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["IterativeReconstructionMethod"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETReconstructionMacro success after verifying string enumerated values IterativeReconstructionMethod --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"PETReconstructionMacro", "NumberOfIterations", 
						verbose, log, ElementDictionary, 
						Condition_IsIterativeReconstruction, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETReconstructionMacro success after verifying NumberOfIterations --> "+("success" if partial_success else "failure"))

				if Condition_IsIterativeReconstruction(ds1, parent_ds1, root_ds):
					if "NumberOfIterations" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["NumberOfIterations"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"PETReconstructionMacro", "NumberOfSubsets", 
						verbose, log, ElementDictionary, 
						Condition_IsIterativeReconstruction, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETReconstructionMacro success after verifying NumberOfSubsets --> "+("success" if partial_success else "failure"))

				if Condition_IsIterativeReconstruction(ds1, parent_ds1, root_ds):
					if "NumberOfSubsets" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["NumberOfSubsets"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"PETReconstructionMacro", "ReconstructionDiameter", 
						verbose, log, ElementDictionary, 
						Condition_ReconstructionFieldOfViewAbsent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETReconstructionMacro success after verifying ReconstructionDiameter --> "+("success" if partial_success else "failure"))

				if Condition_ReconstructionFieldOfViewAbsent(ds1, parent_ds1, root_ds):
					if "ReconstructionDiameter" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["ReconstructionDiameter"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"PETReconstructionMacro", "ReconstructionFieldOfView", 
						verbose, log, ElementDictionary, 
						Condition_ReconstructionDiameterAbsent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETReconstructionMacro success after verifying ReconstructionFieldOfView --> "+("success" if partial_success else "failure"))

				if Condition_ReconstructionDiameterAbsent(ds1, parent_ds1, root_ds):
					if "ReconstructionFieldOfView" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["ReconstructionFieldOfView"], 
							verbose, log, -1, True)

	return global_success

def Macro_PETTableDynamicsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PETTableDynamicsMacro")

	partial_success = verifyType1(ds, 
			"PETTableDynamicsMacro", 
			"PETTableDynamicsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PETTableDynamicsMacro success after verifying PETTableDynamicsSequence" + ("success" if partial_success else "failure")) 
	if "PETTableDynamicsSequence" in ds:
		PETTableDynamicsSequence_data = ds.PETTableDynamicsSequence
		if type(PETTableDynamicsSequence_data) == Sequence:
			for i1 in range(0, len(PETTableDynamicsSequence_data)):
				if verbose:
					log.append( " PETTableDynamicsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PETTableDynamicsSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PETTableDynamicsMacro", "TableSpeed", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PETTableDynamicsMacro success after verifying TableSpeed --> "+("success" if partial_success else "failure"))

				if "TableSpeed" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["TableSpeed"], 
						verbose, log, -1, True)

	return global_success

def Module_EnhancedPETSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedPETSeries")

	partial_success =  		verifyType1(ds, 
			"EnhancedPETSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_PETModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"EnhancedPETSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedPETSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedPETSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"EnhancedPETSeries", 
			"RelatedSeriesSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedPETSeries success after verifying RelatedSeriesSequence" + ("success" if partial_success else "failure")) 
	if "RelatedSeriesSequence" in ds:
		RelatedSeriesSequence_data = ds.RelatedSeriesSequence
		if type(RelatedSeriesSequence_data) == Sequence:
			for i1 in range(0, len(RelatedSeriesSequence_data)):
				if verbose:
					log.append( " RelatedSeriesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RelatedSeriesSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"EnhancedPETSeries", "StudyInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPETSeries success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"EnhancedPETSeries", "SeriesInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPETSeries success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"EnhancedPETSeries", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedPETSeries success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EnhancedPETSeries success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_EnhancedPETIsotope_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedPETIsotope")

	partial_success = verifyType1(ds, 
			"EnhancedPETIsotope", 
			"RadiopharmaceuticalInformationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedPETIsotope success after verifying RadiopharmaceuticalInformationSequence" + ("success" if partial_success else "failure")) 
	if "RadiopharmaceuticalInformationSequence" in ds:
		RadiopharmaceuticalInformationSequence_data = ds.RadiopharmaceuticalInformationSequence
		if type(RadiopharmaceuticalInformationSequence_data) == Sequence:
			for i1 in range(0, len(RadiopharmaceuticalInformationSequence_data)):
				if verbose:
					log.append( " RadiopharmaceuticalInformationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RadiopharmaceuticalInformationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"EnhancedPETIsotope", "RadiopharmaceuticalAgentNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPETIsotope success after verifying RadiopharmaceuticalAgentNumber --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"EnhancedPETIsotope", 
						"RadionuclideCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedPETIsotope success after verifying RadionuclideCodeSequence" + ("success" if partial_success else "failure")) 
				if "RadionuclideCodeSequence" in ds1:
					RadionuclideCodeSequence_data = ds1.RadionuclideCodeSequence
					if type(RadionuclideCodeSequence_data) == Sequence:
						for i2 in range(0, len(RadionuclideCodeSequence_data)):
							if verbose:
								log.append( " RadionuclideCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RadionuclideCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EnhancedPETIsotope success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"EnhancedPETIsotope", 
						"AdministrationRouteCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedPETIsotope success after verifying AdministrationRouteCodeSequence" + ("success" if partial_success else "failure")) 
				if "AdministrationRouteCodeSequence" in ds1:
					AdministrationRouteCodeSequence_data = ds1.AdministrationRouteCodeSequence
					if type(AdministrationRouteCodeSequence_data) == Sequence:
						for i2 in range(0, len(AdministrationRouteCodeSequence_data)):
							if verbose:
								log.append( " AdministrationRouteCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AdministrationRouteCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EnhancedPETIsotope success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"EnhancedPETIsotope", "RadiopharmaceuticalVolume", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPETIsotope success after verifying RadiopharmaceuticalVolume --> "+("success" if partial_success else "failure"))

				if "RadiopharmaceuticalVolume" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["RadiopharmaceuticalVolume"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"EnhancedPETIsotope", "RadiopharmaceuticalStartDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPETIsotope success after verifying RadiopharmaceuticalStartDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"EnhancedPETIsotope", "RadiopharmaceuticalStopDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPETIsotope success after verifying RadiopharmaceuticalStopDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"EnhancedPETIsotope", "RadionuclideTotalDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPETIsotope success after verifying RadionuclideTotalDose --> "+("success" if partial_success else "failure"))

				if "RadionuclideTotalDose" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["RadionuclideTotalDose"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"EnhancedPETIsotope", "RadionuclideHalfLife", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPETIsotope success after verifying RadionuclideHalfLife --> "+("success" if partial_success else "failure"))

				if "RadionuclideHalfLife" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["RadionuclideHalfLife"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"EnhancedPETIsotope", "RadionuclidePositronFraction", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPETIsotope success after verifying RadionuclidePositronFraction --> "+("success" if partial_success else "failure"))

				if "RadionuclidePositronFraction" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["RadionuclidePositronFraction"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"EnhancedPETIsotope", "RadiopharmaceuticalSpecificActivity", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPETIsotope success after verifying RadiopharmaceuticalSpecificActivity --> "+("success" if partial_success else "failure"))

				if "RadiopharmaceuticalSpecificActivity" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["RadiopharmaceuticalSpecificActivity"], 
						verbose, log, -1, True)

				partial_success = verifyType1(ds1, 
						"EnhancedPETIsotope", 
						"RadiopharmaceuticalCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedPETIsotope success after verifying RadiopharmaceuticalCodeSequence" + ("success" if partial_success else "failure")) 
				if "RadiopharmaceuticalCodeSequence" in ds1:
					RadiopharmaceuticalCodeSequence_data = ds1.RadiopharmaceuticalCodeSequence
					if type(RadiopharmaceuticalCodeSequence_data) == Sequence:
						for i2 in range(0, len(RadiopharmaceuticalCodeSequence_data)):
							if verbose:
								log.append( " RadiopharmaceuticalCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RadiopharmaceuticalCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EnhancedPETIsotope success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_EnhancedPETAcquisition_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedPETAcquisition")

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "AcquisitionStartCondition", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Original, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying AcquisitionStartCondition --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1Original(ds, parent_ds, root_ds):
		if "AcquisitionStartCondition" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["AcquisitionStartCondition"], 
				StringValueTable_EnhancedPETAcquisitionStartCondition, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying string defined terms AcquisitionStartCondition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "StartDensityThreshold", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionStartConditionDENS, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying StartDensityThreshold --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "StartRelativeDensityDifferenceThreshold", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionStartConditionRDD, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying StartRelativeDensityDifferenceThreshold --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "StartCardiacTriggerCountThreshold", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionStartConditionCARD_TRIG, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying StartCardiacTriggerCountThreshold --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "StartRespiratoryTriggerCountThreshold", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionStartConditionRESP_TRIG, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying StartRespiratoryTriggerCountThreshold --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "AcquisitionTerminationCondition", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Original, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying AcquisitionTerminationCondition --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1Original(ds, parent_ds, root_ds):
		if "AcquisitionTerminationCondition" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["AcquisitionTerminationCondition"], 
				StringValueTable_EnhancedPETAcquisitionTerminationCondition, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying string defined terms AcquisitionTerminationCondition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "TerminationCountsThreshold", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionTerminationConditionCNTS, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying TerminationCountsThreshold --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "TerminationDensityThreshold", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionTerminationConditionDENS, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying TerminationDensityThreshold --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "TerminationRelativeDensityThreshold", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionTerminationConditionRDD, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying TerminationRelativeDensityThreshold --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "TerminationTimeThreshold", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionTerminationConditionTIME, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying TerminationTimeThreshold --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "TerminationCardiacTriggerCountThreshold", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionTerminationConditionCARD_TRIG, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying TerminationCardiacTriggerCountThreshold --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "TerminationRespiratoryTriggerCountThreshold", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionTerminationConditionRESP_TRIG, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying TerminationRespiratoryTriggerCountThreshold --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "TypeOfDetectorMotion", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Original, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying TypeOfDetectorMotion --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1Original(ds, parent_ds, root_ds):
		if "TypeOfDetectorMotion" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["TypeOfDetectorMotion"], 
				StringValueTable_EnhancedPETTypeOfDetectorMotion, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying string defined terms TypeOfDetectorMotion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "DetectorGeometry", 
			verbose, log, ElementDictionary, 
			Condition_OriginalAndTypeOfDetectorMotionIsStationary, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying DetectorGeometry --> "+("success" if partial_success else "failure"))

	if Condition_OriginalAndTypeOfDetectorMotionIsStationary(ds, parent_ds, root_ds):
		if "DetectorGeometry" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["DetectorGeometry"], 
				StringValueTable_DetectorGeometry, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying string defined terms DetectorGeometry --> "+("success" if partial_success else "failure"))


	if Condition_DetectorGeometryPresentAndTypeOfDetectorMotionIsNotStationary(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" may only be present when TypeOfDetectorMotion is STATIONARY  - attribute <DetectorGeometry>")

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "TransverseDetectorSeparation", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Original, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying TransverseDetectorSeparation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "AxialDetectorDimension", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Original, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying AxialDetectorDimension --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "CollimatorType", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Original, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying CollimatorType --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1Original(ds, parent_ds, root_ds):
		if "CollimatorType" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["CollimatorType"], 
				StringValueTable_PETCollimatorType, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying string defined terms CollimatorType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETAcquisition", "CoincidenceWindowWidth", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Original, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying CoincidenceWindowWidth --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"EnhancedPETAcquisition", 
			"EnergyWindowRangeSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Original, 
			True, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedPETAcquisition success after verifying EnergyWindowRangeSequence" + ("success" if partial_success else "failure")) 
	if "EnergyWindowRangeSequence" in ds:
		EnergyWindowRangeSequence_data = ds.EnergyWindowRangeSequence
		if type(EnergyWindowRangeSequence_data) == Sequence:
			for i1 in range(0, len(EnergyWindowRangeSequence_data)):
				if verbose:
					log.append( " EnergyWindowRangeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = EnergyWindowRangeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"EnhancedPETAcquisition", "EnergyWindowLowerLimit", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPETAcquisition success after verifying EnergyWindowLowerLimit --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"EnhancedPETAcquisition", "EnergyWindowUpperLimit", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPETAcquisition success after verifying EnergyWindowUpperLimit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETAcquisition", "TableMotion", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying TableMotion --> "+("success" if partial_success else "failure"))

	if "TableMotion" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["TableMotion"], 
			StringValueTable_TableMotion, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying string enumerated values TableMotion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETAcquisition", "TimeOfFlightInformationUsed", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying TimeOfFlightInformationUsed --> "+("success" if partial_success else "failure"))

	if "TimeOfFlightInformationUsed" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["TimeOfFlightInformationUsed"], 
			StringValueTable_TrueFalseFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying string enumerated values TimeOfFlightInformationUsed --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_MandatoryViewAndSliceProgressionDirectionMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying MandatoryViewAndSliceProgressionDirectionMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"EnhancedPETAcquisition", "IsocenterPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETAcquisition success after verifying IsocenterPosition --> "+("success" if partial_success else "failure"))

	return global_success

def Module_EnhancedPETImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedPETImage")

	partial_success =  		verifyType1(ds, 
			"EnhancedPETImage", "ImageType", 
			verbose, log, ElementDictionary, 
			4, 4)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageAndFrameType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageAndFrameType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_CommonCTMRImageDescriptionImageLevelMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedPETImage success after verifying CommonCTMRImageDescriptionImageLevelMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"EnhancedPETImage", "AcquisitionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying AcquisitionNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETImage", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalAndNotLegacyConvertedPET, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETImage", "AcquisitionDuration", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalAndNotLegacyConvertedPET, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying AcquisitionDuration --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"EnhancedPETImage", 
			"ReferencedRawDataSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedPETImage success after verifying ReferencedRawDataSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedRawDataSequence" in ds:
		ReferencedRawDataSequence_data = ds.ReferencedRawDataSequence
		if type(ReferencedRawDataSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedRawDataSequence_data)):
				if verbose:
					log.append( " ReferencedRawDataSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedRawDataSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedPETImage success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"EnhancedPETImage", 
			"ReferencedWaveformSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedPETImage success after verifying ReferencedWaveformSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedWaveformSequence" in ds:
		ReferencedWaveformSequence_data = ds.ReferencedWaveformSequence
		if type(ReferencedWaveformSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedWaveformSequence_data)):
				if verbose:
					log.append( " ReferencedWaveformSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedWaveformSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedPETImage success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"EnhancedPETImage", 
			"ReferencedImageEvidenceSequence", 
			verbose, log, ElementDictionary, 
			Condition_ReferencedImageSequenceIsPresentInFunctionalGroups, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedPETImage success after verifying ReferencedImageEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageEvidenceSequence" in ds:
		ReferencedImageEvidenceSequence_data = ds.ReferencedImageEvidenceSequence
		if type(ReferencedImageEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageEvidenceSequence_data)):
				if verbose:
					log.append( " ReferencedImageEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageEvidenceSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedPETImage success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"EnhancedPETImage", 
			"SourceImageEvidenceSequence", 
			verbose, log, ElementDictionary, 
			Condition_SourceImageSequenceIsPresentInFunctionalGroups, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedPETImage success after verifying SourceImageEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "SourceImageEvidenceSequence" in ds:
		SourceImageEvidenceSequence_data = ds.SourceImageEvidenceSequence
		if type(SourceImageEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(SourceImageEvidenceSequence_data)):
				if verbose:
					log.append( " SourceImageEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceImageEvidenceSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedPETImage success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"EnhancedPETImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETImage", "ContentQualification", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying ContentQualification --> "+("success" if partial_success else "failure"))

	if "ContentQualification" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ContentQualification"], 
			StringValueTable_ContentQualification, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying string enumerated values ContentQualification --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedPETImage", "ImageComments", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying ImageComments --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			Condition_NotLegacyConvertedPET, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if Condition_NotLegacyConvertedPET(ds, parent_ds, root_ds):
		if "BurnedInAnnotation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
				StringValueTable_NoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedPETImage", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			Condition_NotLegacyConvertedPET, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if Condition_NotLegacyConvertedPET(ds, parent_ds, root_ds):
		if "LossyImageCompression" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["LossyImageCompression"], 
				StringValueTable_LossyImageCompression, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionRatio" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["LossyImageCompressionRatio"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["LossyImageCompressionMethod"], 
				StringValueTable_LossyImageCompressionMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying string defined terms LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))


	if Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" method inconsistent with transfer syntax - attribute <LossyImageCompressionMethod>"+\
				" = <{}>".format( tag_for_keyword("LossyImageCompressionMethod")))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if "PresentationLUTShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
			StringValueTable_IdentityPresentationLUTShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"EnhancedPETImage", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedPETImage success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedPETImage success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_EnhancedPETCorrections_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedPETCorrections")

	partial_success =  		verifyType1(ds, 
			"EnhancedPETCorrections", "CountsSource", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying CountsSource --> "+("success" if partial_success else "failure"))

	if "CountsSource" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CountsSource"], 
			StringValueTable_CountsSource, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string enumerated values CountsSource --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETCorrections", "DecayCorrected", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying DecayCorrected --> "+("success" if partial_success else "failure"))

	if "DecayCorrected" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["DecayCorrected"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string enumerated values DecayCorrected --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETCorrections", "AttenuationCorrected", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying AttenuationCorrected --> "+("success" if partial_success else "failure"))

	if "AttenuationCorrected" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["AttenuationCorrected"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string enumerated values AttenuationCorrected --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETCorrections", "ScatterCorrected", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying ScatterCorrected --> "+("success" if partial_success else "failure"))

	if "ScatterCorrected" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ScatterCorrected"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string enumerated values ScatterCorrected --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETCorrections", "DeadTimeCorrected", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying DeadTimeCorrected --> "+("success" if partial_success else "failure"))

	if "DeadTimeCorrected" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["DeadTimeCorrected"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string enumerated values DeadTimeCorrected --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETCorrections", "GantryMotionCorrected", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying GantryMotionCorrected --> "+("success" if partial_success else "failure"))

	if "GantryMotionCorrected" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["GantryMotionCorrected"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string enumerated values GantryMotionCorrected --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETCorrections", "PatientMotionCorrected", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying PatientMotionCorrected --> "+("success" if partial_success else "failure"))

	if "PatientMotionCorrected" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PatientMotionCorrected"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string enumerated values PatientMotionCorrected --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETCorrections", "CountLossNormalizationCorrected", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying CountLossNormalizationCorrected --> "+("success" if partial_success else "failure"))

	if "CountLossNormalizationCorrected" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CountLossNormalizationCorrected"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string enumerated values CountLossNormalizationCorrected --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETCorrections", "RandomsCorrected", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying RandomsCorrected --> "+("success" if partial_success else "failure"))

	if "RandomsCorrected" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RandomsCorrected"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string enumerated values RandomsCorrected --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETCorrections", "NonUniformRadialSamplingCorrected", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying NonUniformRadialSamplingCorrected --> "+("success" if partial_success else "failure"))

	if "NonUniformRadialSamplingCorrected" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["NonUniformRadialSamplingCorrected"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string enumerated values NonUniformRadialSamplingCorrected --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETCorrections", "SensitivityCalibrated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying SensitivityCalibrated --> "+("success" if partial_success else "failure"))

	if "SensitivityCalibrated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SensitivityCalibrated"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string enumerated values SensitivityCalibrated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedPETCorrections", "DetectorNormalizationCorrection", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying DetectorNormalizationCorrection --> "+("success" if partial_success else "failure"))

	if "DetectorNormalizationCorrection" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["DetectorNormalizationCorrection"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string enumerated values DetectorNormalizationCorrection --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETCorrections", "RandomsCorrectionMethod", 
			verbose, log, ElementDictionary, 
			Condition_IsRandomsCorrected, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying RandomsCorrectionMethod --> "+("success" if partial_success else "failure"))

	if Condition_IsRandomsCorrected(ds, parent_ds, root_ds):
		if "RandomsCorrectionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["RandomsCorrectionMethod"], 
				StringValueTable_RandomsCorrectionMethodEnhanced, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string defined terms RandomsCorrectionMethod --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETCorrections", "AttenuationCorrectionSource", 
			verbose, log, ElementDictionary, 
			Condition_IsAttenuationCorrected, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying AttenuationCorrectionSource --> "+("success" if partial_success else "failure"))

	if Condition_IsAttenuationCorrected(ds, parent_ds, root_ds):
		if "AttenuationCorrectionSource" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["AttenuationCorrectionSource"], 
				StringValueTable_AttenuationCorrectionSource, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string defined terms AttenuationCorrectionSource --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETCorrections", "AttenuationCorrectionTemporalRelationship", 
			verbose, log, ElementDictionary, 
			Condition_IsAttenuationCorrected, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying AttenuationCorrectionTemporalRelationship --> "+("success" if partial_success else "failure"))

	if Condition_IsAttenuationCorrected(ds, parent_ds, root_ds):
		if "AttenuationCorrectionTemporalRelationship" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["AttenuationCorrectionTemporalRelationship"], 
				StringValueTable_AttenuationCorrectionTemporalRelationship, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying string defined terms AttenuationCorrectionTemporalRelationship --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETCorrections", "ScatterCorrectionMethod", 
			verbose, log, ElementDictionary, 
			Condition_IsScatterCorrected, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying ScatterCorrectionMethod --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPETCorrections", "DecayCorrectionDateTime", 
			verbose, log, ElementDictionary, 
			Condition_IsDecayCorrected, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPETCorrections success after verifying DecayCorrectionDateTime --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_BeamLimitingDevicePositionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"BeamLimitingDevicePositionMacro")

	partial_success = verifyType1C(ds, 
			"BeamLimitingDevicePositionMacro", 
			"BeamLimitingDevicePositionSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "BeamLimitingDevicePositionMacro success after verifying BeamLimitingDevicePositionSequence" + ("success" if partial_success else "failure")) 
	if "BeamLimitingDevicePositionSequence" in ds:
		BeamLimitingDevicePositionSequence_data = ds.BeamLimitingDevicePositionSequence
		if type(BeamLimitingDevicePositionSequence_data) == Sequence:
			for i1 in range(0, len(BeamLimitingDevicePositionSequence_data)):
				if verbose:
					log.append( " BeamLimitingDevicePositionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = BeamLimitingDevicePositionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"BeamLimitingDevicePositionMacro", "RTBeamLimitingDeviceType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BeamLimitingDevicePositionMacro success after verifying RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

				if "RTBeamLimitingDeviceType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["RTBeamLimitingDeviceType"], 
						StringValueTable_RTBeamLimitingDeviceType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BeamLimitingDevicePositionMacro success after verifying string enumerated values RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BeamLimitingDevicePositionMacro", "LeafJawPositions", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BeamLimitingDevicePositionMacro success after verifying LeafJawPositions --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PatientSupportIdentificationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PatientSupportIdentificationMacro")

	partial_success =  		verifyType1(ds, 
			"PatientSupportIdentificationMacro", "PatientSupportType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientSupportIdentificationMacro success after verifying PatientSupportType --> "+("success" if partial_success else "failure"))

	if "PatientSupportType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["PatientSupportType"], 
			StringValueTable_PatientSupportType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientSupportIdentificationMacro success after verifying string defined terms PatientSupportType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PatientSupportIdentificationMacro", "PatientSupportID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientSupportIdentificationMacro success after verifying PatientSupportID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"PatientSupportIdentificationMacro", "PatientSupportAccessoryCode", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PatientSupportIdentificationMacro success after verifying PatientSupportAccessoryCode --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTSeries")

	partial_success =  		verifyType1(ds, 
			"RTSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_RTModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTSeries", "SeriesInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTSeries success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTSeries", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTSeries success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTSeries", "SeriesDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTSeries success after verifying SeriesDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTSeries", "SeriesDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTSeries success after verifying SeriesDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTSeries", "SeriesTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTSeries success after verifying SeriesTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RTSeries", 
			"SeriesDescriptionCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTSeries success after verifying SeriesDescriptionCodeSequence" + ("success" if partial_success else "failure")) 
	if "SeriesDescriptionCodeSequence" in ds:
		SeriesDescriptionCodeSequence_data = ds.SeriesDescriptionCodeSequence
		if type(SeriesDescriptionCodeSequence_data) == Sequence:
			for i1 in range(0, len(SeriesDescriptionCodeSequence_data)):
				if verbose:
					log.append( " SeriesDescriptionCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SeriesDescriptionCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTSeries success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType2(ds, 
			"RTSeries", "OperatorsName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTSeries success after verifying OperatorsName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RTSeries", 
			"OperatorIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTSeries success after verifying OperatorIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "OperatorIdentificationSequence" in ds:
		OperatorIdentificationSequence_data = ds.OperatorIdentificationSequence
		if type(OperatorIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(OperatorIdentificationSequence_data)):
				if verbose:
					log.append( " OperatorIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OperatorIdentificationSequence_data[i1]
				partial_success =  Macro_PersonIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTSeries success after verifying PersonIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"RTSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"RTSeries", 
			"RequestAttributesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTSeries success after verifying RequestAttributesSequence" + ("success" if partial_success else "failure")) 
	if "RequestAttributesSequence" in ds:
		RequestAttributesSequence_data = ds.RequestAttributesSequence
		if type(RequestAttributesSequence_data) == Sequence:
			for i1 in range(0, len(RequestAttributesSequence_data)):
				if verbose:
					log.append( " RequestAttributesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RequestAttributesSequence_data[i1]
				partial_success =  Macro_RequestAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTSeries success after verifying RequestAttributesMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_PerformedProcedureStepSummaryMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " RTSeries success after verifying PerformedProcedureStepSummaryMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_RTImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTImage")

	partial_success =  		verifyType1(ds, 
			"RTImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8Or12To16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7Or11To15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTImage", "PixelIntensityRelationship", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying PixelIntensityRelationship --> "+("success" if partial_success else "failure"))

	if "PixelIntensityRelationship" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PixelIntensityRelationship"], 
			StringValueTable_DXPixelIntensityRelationship, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying string enumerated values PixelIntensityRelationship --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTImage", "PixelIntensityRelationshipSign", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying PixelIntensityRelationshipSign --> "+("success" if partial_success else "failure"))

	if "PixelIntensityRelationshipSign" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelIntensityRelationshipSign"], 
			BinaryValueDescription_PixelIntensityRelationshipSign, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying binary enumerated values PixelIntensityRelationshipSign --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTImage", "RTImageLabel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying RTImageLabel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "RTImageName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying RTImageName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "RTImageDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying RTImageDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTImage", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_RTImageTypeValue3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3MissingOrEmpty(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" A value is required for value 3 in RT Images - attribute <ImageType>")

	partial_success =  		verifyType2(ds, 
			"RTImage", "ConversionType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying ConversionType --> "+("success" if partial_success else "failure"))

	if "ConversionType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ConversionType"], 
			StringValueTable_ConversionType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying string defined terms ConversionType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"RTImage", "ReportedValuesOrigin", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue3SimulatorOrPortal, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying ReportedValuesOrigin --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue3SimulatorOrPortal(ds, parent_ds, root_ds):
		if "ReportedValuesOrigin" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ReportedValuesOrigin"], 
				StringValueTable_ReportedValuesOrigin, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying string enumerated values ReportedValuesOrigin --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTImage", "RTImagePlane", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying RTImagePlane --> "+("success" if partial_success else "failure"))

	if "RTImagePlane" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RTImagePlane"], 
			StringValueTable_RTImagePlane, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying string enumerated values RTImagePlane --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTImage", "XRayImageReceptorAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying XRayImageReceptorAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"RTImage", "RTImageOrientation", 
			verbose, log, ElementDictionary, 
			Condition_RTImagePlaneIsNonNormal, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying RTImageOrientation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTImage", "ImagePlanePixelSpacing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying ImagePlanePixelSpacing --> "+("success" if partial_success else "failure"))

	if "ImagePlanePixelSpacing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ImagePlanePixelSpacing"], 
			verbose, log, -1, False)

	partial_success =  		verifyType2(ds, 
			"RTImage", "RTImagePosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying RTImagePosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTImage", "RadiationMachineName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying RadiationMachineName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTImage", "PrimaryDosimeterUnit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying PrimaryDosimeterUnit --> "+("success" if partial_success else "failure"))

	if "PrimaryDosimeterUnit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PrimaryDosimeterUnit"], 
			StringValueTable_PrimaryDosimeterUnit, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying string enumerated values PrimaryDosimeterUnit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTImage", "RadiationMachineSAD", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying RadiationMachineSAD --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "RadiationMachineSSD", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying RadiationMachineSSD --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTImage", "RTImageSID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying RTImageSID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "SourceToReferenceObjectDistance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying SourceToReferenceObjectDistance --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RTImage", 
			"ReferencedRTPlanSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTImage success after verifying ReferencedRTPlanSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedRTPlanSequence" in ds:
		ReferencedRTPlanSequence_data = ds.ReferencedRTPlanSequence
		if type(ReferencedRTPlanSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedRTPlanSequence_data)):
				if verbose:
					log.append( " ReferencedRTPlanSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedRTPlanSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTImage success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"RTImage", "ReferencedBeamNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying ReferencedBeamNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "ReferencedFractionGroupNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying ReferencedFractionGroupNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "FractionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying FractionNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "StartCumulativeMetersetWeight", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying StartCumulativeMetersetWeight --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "EndCumulativeMetersetWeight", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying EndCumulativeMetersetWeight --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RTImage", 
			"ExposureSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTImage success after verifying ExposureSequence" + ("success" if partial_success else "failure")) 
	if "ExposureSequence" in ds:
		ExposureSequence_data = ds.ExposureSequence
		if type(ExposureSequence_data) == Sequence:
			for i1 in range(0, len(ExposureSequence_data)):
				if verbose:
					log.append( " ExposureSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ExposureSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"RTImage", "ReferencedFrameNumber", 
						verbose, log, ElementDictionary, 
						Condition_NeedExposureSequenceReferencedFrameNumber, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTImage success after verifying ReferencedFrameNumber --> "+("success" if partial_success else "failure"))

				if Condition_NeedExposureSequenceReferencedFrameNumber(ds1, parent_ds1, root_ds):
					if "ReferencedFrameNumber" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["ReferencedFrameNumber"], 
							verbose, log, -1, False)

				partial_success =  		verifyType2C(ds1, 
						"RTImage", "KVP", 
						verbose, log, ElementDictionary, 
						Condition_ImageTypeValue3SimulatorOrPortalOrRadiograph, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTImage success after verifying KVP --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTImage", 
						"PrimaryFluenceModeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTImage success after verifying PrimaryFluenceModeSequence" + ("success" if partial_success else "failure")) 
				if "PrimaryFluenceModeSequence" in ds1:
					PrimaryFluenceModeSequence_data = ds1.PrimaryFluenceModeSequence
					if type(PrimaryFluenceModeSequence_data) == Sequence:
						for i2 in range(0, len(PrimaryFluenceModeSequence_data)):
							if verbose:
								log.append( " PrimaryFluenceModeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PrimaryFluenceModeSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTImage", "FluenceMode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying FluenceMode --> "+("success" if partial_success else "failure"))

							if "FluenceMode" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["FluenceMode"], 
									StringValueTable_FluenceMode, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying string enumerated values FluenceMode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTImage", "FluenceModeID", 
									verbose, log, ElementDictionary, 
									Condition_FluenceModeIsNonStandard, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying FluenceModeID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"RTImage", "XRayTubeCurrent", 
						verbose, log, ElementDictionary, 
						Condition_ImageTypeValue3SimulatorOrRadiograph, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTImage success after verifying XRayTubeCurrent --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTImage", "XRayTubeCurrentInmA", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTImage success after verifying XRayTubeCurrentInmA --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"RTImage", "ExposureTime", 
						verbose, log, ElementDictionary, 
						Condition_ImageTypeValue3SimulatorOrRadiograph, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTImage success after verifying ExposureTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTImage", "ExposureTimeInms", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTImage success after verifying ExposureTimeInms --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"RTImage", "MetersetExposure", 
						verbose, log, ElementDictionary, 
						Condition_ImageTypeValue3Portal, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTImage success after verifying MetersetExposure --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTImage", "DiaphragmPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTImage success after verifying DiaphragmPosition --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTImage", 
						"BeamLimitingDeviceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTImage success after verifying BeamLimitingDeviceSequence" + ("success" if partial_success else "failure")) 
				if "BeamLimitingDeviceSequence" in ds1:
					BeamLimitingDeviceSequence_data = ds1.BeamLimitingDeviceSequence
					if type(BeamLimitingDeviceSequence_data) == Sequence:
						for i2 in range(0, len(BeamLimitingDeviceSequence_data)):
							if verbose:
								log.append( " BeamLimitingDeviceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = BeamLimitingDeviceSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTImage", "RTBeamLimitingDeviceType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							if "RTBeamLimitingDeviceType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["RTBeamLimitingDeviceType"], 
									StringValueTable_RTBeamLimitingDeviceType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying string enumerated values RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTImage", "SourceToBeamLimitingDeviceDistance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying SourceToBeamLimitingDeviceDistance --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTImage", "NumberOfLeafJawPairs", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying NumberOfLeafJawPairs --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTImage", "LeafPositionBoundaries", 
									verbose, log, ElementDictionary, 
									Condition_RTBeamLimitingDeviceTypeMLCXOrMLCY, 
									True, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying LeafPositionBoundaries --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTImage", "LeafJawPositions", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying LeafJawPositions --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTImage", 
						"ApplicatorSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTImage success after verifying ApplicatorSequence" + ("success" if partial_success else "failure")) 
				if "ApplicatorSequence" in ds1:
					ApplicatorSequence_data = ds1.ApplicatorSequence
					if type(ApplicatorSequence_data) == Sequence:
						for i2 in range(0, len(ApplicatorSequence_data)):
							if verbose:
								log.append( " ApplicatorSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ApplicatorSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTImage", "ApplicatorID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying ApplicatorID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTImage", "ApplicatorType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying ApplicatorType --> "+("success" if partial_success else "failure"))

							if "ApplicatorType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["ApplicatorType"], 
									StringValueTable_ApplicatorType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying string defined terms ApplicatorType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTImage", "ApplicatorDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying ApplicatorDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTImage", 
						"GeneralAccessorySequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTImage success after verifying GeneralAccessorySequence" + ("success" if partial_success else "failure")) 
				if "GeneralAccessorySequence" in ds1:
					GeneralAccessorySequence_data = ds1.GeneralAccessorySequence
					if type(GeneralAccessorySequence_data) == Sequence:
						for i2 in range(0, len(GeneralAccessorySequence_data)):
							if verbose:
								log.append( " GeneralAccessorySequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = GeneralAccessorySequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTImage", "GeneralAccessoryNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying GeneralAccessoryNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTImage", "GeneralAccessoryID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying GeneralAccessoryID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTImage", "GeneralAccessoryDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying GeneralAccessoryDescription --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTImage", "GeneralAccessoryType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying GeneralAccessoryType --> "+("success" if partial_success else "failure"))

							if "GeneralAccessoryType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["GeneralAccessoryType"], 
									StringValueTable_RTGeneralAccessoryType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying string defined terms GeneralAccessoryType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTImage", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTImage", "SourceToGeneralAccessoryDistance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying SourceToGeneralAccessoryDistance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTImage", "NumberOfBlocks", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTImage success after verifying NumberOfBlocks --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2C(ds1, 
						"RTImage", 
						"BlockSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfBlocksNotZero, 
						False, 
						parent_ds1, root_ds1, 
						0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTImage success after verifying BlockSequence" + ("success" if partial_success else "failure")) 
				if "BlockSequence" in ds1:
					BlockSequence_data = ds1.BlockSequence
					if type(BlockSequence_data) == Sequence:
						for i2 in range(0, len(BlockSequence_data)):
							if verbose:
								log.append( " BlockSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = BlockSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"RTImage", "BlockTrayID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying BlockTrayID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTImage", "TrayAccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying TrayAccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTImage", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTImage", "SourceToBlockTrayDistance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying SourceToBlockTrayDistance --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTImage", "BlockType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying BlockType --> "+("success" if partial_success else "failure"))

							if "BlockType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["BlockType"], 
									StringValueTable_BlockType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying string enumerated values BlockType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTImage", "BlockDivergence", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying BlockDivergence --> "+("success" if partial_success else "failure"))

							if "BlockDivergence" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["BlockDivergence"], 
									StringValueTable_BlockDivergence, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying string enumerated values BlockDivergence --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTImage", "BlockMountingPosition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying BlockMountingPosition --> "+("success" if partial_success else "failure"))

							if "BlockMountingPosition" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["BlockMountingPosition"], 
									StringValueTable_BlockMountingPosition, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying string enumerated values BlockMountingPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTImage", "BlockNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying BlockNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTImage", "BlockName", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying BlockName --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTImage", "MaterialID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying MaterialID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTImage", "BlockThickness", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying BlockThickness --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTImage", "BlockNumberOfPoints", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying BlockNumberOfPoints --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTImage", "BlockData", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTImage success after verifying BlockData --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"RTImage", 
			"FluenceMapSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue3Fluence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTImage success after verifying FluenceMapSequence" + ("success" if partial_success else "failure")) 
	if "FluenceMapSequence" in ds:
		FluenceMapSequence_data = ds.FluenceMapSequence
		if type(FluenceMapSequence_data) == Sequence:
			for i1 in range(0, len(FluenceMapSequence_data)):
				if verbose:
					log.append( " FluenceMapSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FluenceMapSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTImage", "FluenceDataSource", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTImage success after verifying FluenceDataSource --> "+("success" if partial_success else "failure"))

				if "FluenceDataSource" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FluenceDataSource"], 
						StringValueTable_FluenceDataSource, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTImage success after verifying string enumerated values FluenceDataSource --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTImage", "FluenceDataScale", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTImage success after verifying FluenceDataScale --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "GantryAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying GantryAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "GantryPitchAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying GantryPitchAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "BeamLimitingDeviceAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying BeamLimitingDeviceAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "PatientSupportAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying PatientSupportAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "TableTopEccentricAxisDistance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying TableTopEccentricAxisDistance --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "TableTopEccentricAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying TableTopEccentricAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "TableTopPitchAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying TableTopPitchAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "TableTopRollAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying TableTopRollAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "TableTopVerticalPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying TableTopVerticalPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "TableTopLongitudinalPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying TableTopLongitudinalPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "TableTopLateralPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying TableTopLateralPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "IsocenterPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying IsocenterPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RTImage", "PatientPosition", 
			verbose, log, ElementDictionary, 
			Condition_IsocenterPositionIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying PatientPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "ExposureTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying ExposureTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "ExposureTimeInms", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying ExposureTimeInms --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTImage", "MetersetExposure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTImage success after verifying MetersetExposure --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTDose_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTDose")

	partial_success =  		verifyType1C(ds, 
			"RTDose", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			Condition_PixelDataPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if Condition_PixelDataPresent(ds, parent_ds, root_ds):
		if "SamplesPerPixel" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
				BinaryValueDescription_SamplesPerPixelIsOne, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RTDose", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			Condition_PixelDataPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if Condition_PixelDataPresent(ds, parent_ds, root_ds):
		if "PhotometricInterpretation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
				StringValueTable_PhotometricInterpretationMonochrome2, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RTDose", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			Condition_PixelDataPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if Condition_PixelDataPresent(ds, parent_ds, root_ds):
		if "BitsAllocated" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
				BinaryValueDescription_BitsAre16Or32, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RTDose", "BitsStored", 
			verbose, log, ElementDictionary, 
			Condition_PixelDataPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if Condition_PixelDataPresent(ds, parent_ds, root_ds):
		if "BitsStored" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
				BinaryValueDescription_BitsAre16Or32, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RTDose", "HighBit", 
			verbose, log, ElementDictionary, 
			Condition_PixelDataPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if Condition_PixelDataPresent(ds, parent_ds, root_ds):
		if "HighBit" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["HighBit"], 
				BinaryValueDescription_BitsAre15Or31, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RTDose", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			Condition_PixelDataPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if Condition_PixelDataPresent(ds, parent_ds, root_ds):
		if "PixelRepresentation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
				BinaryValueDescription_PixelRepresentationUnsigned, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTDose", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTDose", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTDose", "DoseUnits", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying DoseUnits --> "+("success" if partial_success else "failure"))

	if "DoseUnits" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["DoseUnits"], 
			StringValueTable_DoseUnits, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying string enumerated values DoseUnits --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTDose", "DoseType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying DoseType --> "+("success" if partial_success else "failure"))

	if "DoseType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["DoseType"], 
			StringValueTable_DoseType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying string defined terms DoseType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTDose", "SpatialTransformOfDose", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying SpatialTransformOfDose --> "+("success" if partial_success else "failure"))

	if "SpatialTransformOfDose" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["SpatialTransformOfDose"], 
			StringValueTable_SpatialTransformOfDose, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying string defined terms SpatialTransformOfDose --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2C(ds, 
			"RTDose", 
			"ReferencedSpatialRegistrationSequence", 
			verbose, log, ElementDictionary, 
			Condition_SpatialTransformOfDoseIsRigidOrNonRigid, 
			False, 
			parent_ds, root_ds, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTDose success after verifying ReferencedSpatialRegistrationSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSpatialRegistrationSequence" in ds:
		ReferencedSpatialRegistrationSequence_data = ds.ReferencedSpatialRegistrationSequence
		if type(ReferencedSpatialRegistrationSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSpatialRegistrationSequence_data)):
				if verbose:
					log.append( " ReferencedSpatialRegistrationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSpatialRegistrationSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTDose success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"RTDose", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTDose", "DoseComment", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying DoseComment --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTDose", "NormalizationPoint", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying NormalizationPoint --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTDose", "DoseSummationType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying DoseSummationType --> "+("success" if partial_success else "failure"))

	if "DoseSummationType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["DoseSummationType"], 
			StringValueTable_DoseSummationType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying string defined terms DoseSummationType --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"RTDose", 
			"ReferencedRTPlanSequence", 
			verbose, log, ElementDictionary, 
			Condition_NeedReferencedRTPlanSequence, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTDose success after verifying ReferencedRTPlanSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedRTPlanSequence" in ds:
		ReferencedRTPlanSequence_data = ds.ReferencedRTPlanSequence
		if type(ReferencedRTPlanSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedRTPlanSequence_data)):
				if verbose:
					log.append( " ReferencedRTPlanSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedRTPlanSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTDose success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"RTDose", 
						"ReferencedFractionGroupSequence", 
						verbose, log, ElementDictionary, 
						Condition_NeedReferencedFractionGroupSequence, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTDose success after verifying ReferencedFractionGroupSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedFractionGroupSequence" in ds1:
					ReferencedFractionGroupSequence_data = ds1.ReferencedFractionGroupSequence
					if type(ReferencedFractionGroupSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedFractionGroupSequence_data)):
							if verbose:
								log.append( " ReferencedFractionGroupSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedFractionGroupSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTDose", "ReferencedFractionGroupNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTDose success after verifying ReferencedFractionGroupNumber --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"RTDose", 
									"ReferencedBeamSequence", 
									verbose, log, ElementDictionary, 
									Condition_NeedReferencedBeamSequence, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTDose success after verifying ReferencedBeamSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedBeamSequence" in ds2:
								ReferencedBeamSequence_data = ds2.ReferencedBeamSequence
								if type(ReferencedBeamSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedBeamSequence_data)):
										if verbose:
											log.append( " ReferencedBeamSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedBeamSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTDose", "ReferencedBeamNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTDose success after verifying ReferencedBeamNumber --> "+("success" if partial_success else "failure"))

										partial_success = verifyType1C(ds3, 
												"RTDose", 
												"ReferencedControlPointSequence", 
												verbose, log, ElementDictionary, 
												Condition_DoseSummationTypeControlPoint, 
												False, 
												parent_ds3, root_ds3, 
												1, 1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( "RTDose success after verifying ReferencedControlPointSequence" + ("success" if partial_success else "failure")) 
										if "ReferencedControlPointSequence" in ds3:
											ReferencedControlPointSequence_data = ds3.ReferencedControlPointSequence
											if type(ReferencedControlPointSequence_data) == Sequence:
												for i4 in range(0, len(ReferencedControlPointSequence_data)):
													if verbose:
														log.append( " ReferencedControlPointSequence item [{}]".format(i4+1))
													parent_ds4 = ds3
													ds4 = ReferencedControlPointSequence_data[i4]
													partial_success =  		verifyType1(ds4, 
															"RTDose", "ReferencedStartControlPointIndex", 
															verbose, log, ElementDictionary, 
																											0, 0)
													global_success = global_success and partial_success 
													if verbose:
														log.append( " RTDose success after verifying ReferencedStartControlPointIndex --> "+("success" if partial_success else "failure"))

													partial_success =  		verifyType1(ds4, 
															"RTDose", "ReferencedStopControlPointIndex", 
															verbose, log, ElementDictionary, 
																											0, 0)
													global_success = global_success and partial_success 
													if verbose:
														log.append( " RTDose success after verifying ReferencedStopControlPointIndex --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"RTDose", 
									"ReferencedBrachyApplicationSetupSequence", 
									verbose, log, ElementDictionary, 
									Condition_NeedReferencedBrachyApplicationSetupSequence, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTDose success after verifying ReferencedBrachyApplicationSetupSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedBrachyApplicationSetupSequence" in ds2:
								ReferencedBrachyApplicationSetupSequence_data = ds2.ReferencedBrachyApplicationSetupSequence
								if type(ReferencedBrachyApplicationSetupSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedBrachyApplicationSetupSequence_data)):
										if verbose:
											log.append( " ReferencedBrachyApplicationSetupSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedBrachyApplicationSetupSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTDose", "ReferencedBrachyApplicationSetupNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTDose success after verifying ReferencedBrachyApplicationSetupNumber --> "+("success" if partial_success else "failure"))


	if Condition_DoseSummationTypeIsNotMultiPlanAndReferencedRTPlanSequenceHasMultipleItems(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Multiple items not permitted unless DoseSummationType is MULTI_PLAN - attribute <ReferencedRTPlanSequence>")


	if Condition_DoseSummationTypeIsMultiPlanAndReferencedRTPlanSequenceHasLessThanTwoItems(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Two or more items required if DoseSummationType is MULTI_PLAN - attribute <ReferencedRTPlanSequence>")

	partial_success =  		verifyType1C(ds, 
			"RTDose", "GridFrameOffsetVector", 
			verbose, log, ElementDictionary, 
			Condition_NeedGridFrameOffsetVector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying GridFrameOffsetVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"RTDose", "DoseGridScaling", 
			verbose, log, ElementDictionary, 
			Condition_PixelDataPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying DoseGridScaling --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTDose", "TissueHeterogeneityCorrection", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying TissueHeterogeneityCorrection --> "+("success" if partial_success else "failure"))

	if "TissueHeterogeneityCorrection" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["TissueHeterogeneityCorrection"], 
			StringValueTable_TissueHeterogeneityCorrection, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDose success after verifying string enumerated values TissueHeterogeneityCorrection --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTDVH_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTDVH")

	partial_success = verifyType1(ds, 
			"RTDVH", 
			"ReferencedStructureSetSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTDVH success after verifying ReferencedStructureSetSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedStructureSetSequence" in ds:
		ReferencedStructureSetSequence_data = ds.ReferencedStructureSetSequence
		if type(ReferencedStructureSetSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedStructureSetSequence_data)):
				if verbose:
					log.append( " ReferencedStructureSetSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedStructureSetSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTDVH success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"RTDVH", "DVHNormalizationPoint", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDVH success after verifying DVHNormalizationPoint --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTDVH", "DVHNormalizationDoseValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTDVH success after verifying DVHNormalizationDoseValue --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"RTDVH", 
			"DVHSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTDVH success after verifying DVHSequence" + ("success" if partial_success else "failure")) 
	if "DVHSequence" in ds:
		DVHSequence_data = ds.DVHSequence
		if type(DVHSequence_data) == Sequence:
			for i1 in range(0, len(DVHSequence_data)):
				if verbose:
					log.append( " DVHSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DVHSequence_data[i1]
				partial_success = verifyType1(ds1, 
						"RTDVH", 
						"DVHReferencedROISequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTDVH success after verifying DVHReferencedROISequence" + ("success" if partial_success else "failure")) 
				if "DVHReferencedROISequence" in ds1:
					DVHReferencedROISequence_data = ds1.DVHReferencedROISequence
					if type(DVHReferencedROISequence_data) == Sequence:
						for i2 in range(0, len(DVHReferencedROISequence_data)):
							if verbose:
								log.append( " DVHReferencedROISequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = DVHReferencedROISequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTDVH", "ReferencedROINumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTDVH success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTDVH", "DVHROIContributionType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTDVH success after verifying DVHROIContributionType --> "+("success" if partial_success else "failure"))

							if "DVHROIContributionType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["DVHROIContributionType"], 
									StringValueTable_DVHROIContributionType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTDVH success after verifying string enumerated values DVHROIContributionType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTDVH", "DVHType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying DVHType --> "+("success" if partial_success else "failure"))

				if "DVHType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["DVHType"], 
						StringValueTable_DVHType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying string enumerated values DVHType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTDVH", "DoseUnits", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying DoseUnits --> "+("success" if partial_success else "failure"))

				if "DoseUnits" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["DoseUnits"], 
						StringValueTable_DVHDoseUnits, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying string enumerated values DoseUnits --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTDVH", "DoseType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying DoseType --> "+("success" if partial_success else "failure"))

				if "DoseType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["DoseType"], 
						StringValueTable_DVHDoseType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying string defined terms DoseType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTDVH", "DVHDoseScaling", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying DVHDoseScaling --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTDVH", "DVHVolumeUnits", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying DVHVolumeUnits --> "+("success" if partial_success else "failure"))

				if "DVHVolumeUnits" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["DVHVolumeUnits"], 
						StringValueTable_DVHVolumeUnits, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying string defined terms DVHVolumeUnits --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTDVH", "DVHNumberOfBins", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying DVHNumberOfBins --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTDVH", "DVHData", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying DVHData --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTDVH", "DVHMinimumDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying DVHMinimumDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTDVH", "DVHMaximumDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying DVHMaximumDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTDVH", "DVHMeanDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDVH success after verifying DVHMeanDose --> "+("success" if partial_success else "failure"))

	return global_success

def Module_StructureSet_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"StructureSet")

	partial_success =  		verifyType1(ds, 
			"StructureSet", "StructureSetLabel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StructureSet success after verifying StructureSetLabel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"StructureSet", "StructureSetName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StructureSet success after verifying StructureSetName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"StructureSet", "StructureSetDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StructureSet success after verifying StructureSetDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"StructureSet", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StructureSet success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"StructureSet", "StructureSetDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StructureSet success after verifying StructureSetDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"StructureSet", "StructureSetTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StructureSet success after verifying StructureSetTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"StructureSet", 
			"ReferencedFrameOfReferenceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "StructureSet success after verifying ReferencedFrameOfReferenceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedFrameOfReferenceSequence" in ds:
		ReferencedFrameOfReferenceSequence_data = ds.ReferencedFrameOfReferenceSequence
		if type(ReferencedFrameOfReferenceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedFrameOfReferenceSequence_data)):
				if verbose:
					log.append( " ReferencedFrameOfReferenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedFrameOfReferenceSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"StructureSet", "FrameOfReferenceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructureSet success after verifying FrameOfReferenceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"StructureSet", 
						"FrameOfReferenceRelationshipSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "StructureSet success after verifying FrameOfReferenceRelationshipSequence" + ("success" if partial_success else "failure")) 
				if "FrameOfReferenceRelationshipSequence" in ds1:
					FrameOfReferenceRelationshipSequence_data = ds1.FrameOfReferenceRelationshipSequence
					if type(FrameOfReferenceRelationshipSequence_data) == Sequence:
						for i2 in range(0, len(FrameOfReferenceRelationshipSequence_data)):
							if verbose:
								log.append( " FrameOfReferenceRelationshipSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = FrameOfReferenceRelationshipSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"StructureSet", "RelatedFrameOfReferenceUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " StructureSet success after verifying RelatedFrameOfReferenceUID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"StructureSet", "FrameOfReferenceTransformationType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " StructureSet success after verifying FrameOfReferenceTransformationType --> "+("success" if partial_success else "failure"))

							if "FrameOfReferenceTransformationType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["FrameOfReferenceTransformationType"], 
									StringValueTable_TransformationType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " StructureSet success after verifying string defined terms FrameOfReferenceTransformationType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"StructureSet", "FrameOfReferenceTransformationMatrix", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " StructureSet success after verifying FrameOfReferenceTransformationMatrix --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"StructureSet", "FrameOfReferenceTransformationComment", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " StructureSet success after verifying FrameOfReferenceTransformationComment --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"StructureSet", 
						"RTReferencedStudySequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "StructureSet success after verifying RTReferencedStudySequence" + ("success" if partial_success else "failure")) 
				if "RTReferencedStudySequence" in ds1:
					RTReferencedStudySequence_data = ds1.RTReferencedStudySequence
					if type(RTReferencedStudySequence_data) == Sequence:
						for i2 in range(0, len(RTReferencedStudySequence_data)):
							if verbose:
								log.append( " RTReferencedStudySequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RTReferencedStudySequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " StructureSet success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1(ds2, 
									"StructureSet", 
									"RTReferencedSeriesSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "StructureSet success after verifying RTReferencedSeriesSequence" + ("success" if partial_success else "failure")) 
							if "RTReferencedSeriesSequence" in ds2:
								RTReferencedSeriesSequence_data = ds2.RTReferencedSeriesSequence
								if type(RTReferencedSeriesSequence_data) == Sequence:
									for i3 in range(0, len(RTReferencedSeriesSequence_data)):
										if verbose:
											log.append( " RTReferencedSeriesSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = RTReferencedSeriesSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"StructureSet", "SeriesInstanceUID", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " StructureSet success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

										partial_success = verifyType1(ds3, 
												"StructureSet", 
												"ContourImageSequence", 
												verbose, log, ElementDictionary, 
																					1, 0xFFFFFFFF)
										global_success = global_success and partial_success 
										if verbose:
											log.append( "StructureSet success after verifying ContourImageSequence" + ("success" if partial_success else "failure")) 
										if "ContourImageSequence" in ds3:
											ContourImageSequence_data = ds3.ContourImageSequence
											if type(ContourImageSequence_data) == Sequence:
												for i4 in range(0, len(ContourImageSequence_data)):
													if verbose:
														log.append( " ContourImageSequence item [{}]".format(i4+1))
													parent_ds4 = ds3
													ds4 = ContourImageSequence_data[i4]
													partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds4, parent_ds4, root_ds, verbose, log, ElementDictionary)

													if verbose:
														log.append( " StructureSet success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"StructureSet", 
			"StructureSetROISequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "StructureSet success after verifying StructureSetROISequence" + ("success" if partial_success else "failure")) 
	if "StructureSetROISequence" in ds:
		StructureSetROISequence_data = ds.StructureSetROISequence
		if type(StructureSetROISequence_data) == Sequence:
			for i1 in range(0, len(StructureSetROISequence_data)):
				if verbose:
					log.append( " StructureSetROISequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = StructureSetROISequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"StructureSet", "ROINumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructureSet success after verifying ROINumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"StructureSet", "ReferencedFrameOfReferenceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructureSet success after verifying ReferencedFrameOfReferenceUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"StructureSet", "ROIName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructureSet success after verifying ROIName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"StructureSet", "ROIDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructureSet success after verifying ROIDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"StructureSet", "ROIVolume", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructureSet success after verifying ROIVolume --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"StructureSet", "ROIGenerationAlgorithm", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructureSet success after verifying ROIGenerationAlgorithm --> "+("success" if partial_success else "failure"))

				if "ROIGenerationAlgorithm" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ROIGenerationAlgorithm"], 
						StringValueTable_ROIGenerationAlgorithm, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructureSet success after verifying string defined terms ROIGenerationAlgorithm --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"StructureSet", "ROIGenerationDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructureSet success after verifying ROIGenerationDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"StructureSet", 
						"ROIDerivationAlgorithmIdentificationSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "StructureSet success after verifying ROIDerivationAlgorithmIdentificationSequence" + ("success" if partial_success else "failure")) 
				if "ROIDerivationAlgorithmIdentificationSequence" in ds1:
					ROIDerivationAlgorithmIdentificationSequence_data = ds1.ROIDerivationAlgorithmIdentificationSequence
					if type(ROIDerivationAlgorithmIdentificationSequence_data) == Sequence:
						for i2 in range(0, len(ROIDerivationAlgorithmIdentificationSequence_data)):
							if verbose:
								log.append( " ROIDerivationAlgorithmIdentificationSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ROIDerivationAlgorithmIdentificationSequence_data[i2]
							partial_success =  Macro_AlgorithmIdentificationMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " StructureSet success after verifying AlgorithmIdentificationMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"StructureSet", 
						"DerivationCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "StructureSet success after verifying DerivationCodeSequence" + ("success" if partial_success else "failure")) 
				if "DerivationCodeSequence" in ds1:
					DerivationCodeSequence_data = ds1.DerivationCodeSequence
					if type(DerivationCodeSequence_data) == Sequence:
						for i2 in range(0, len(DerivationCodeSequence_data)):
							if verbose:
								log.append( " DerivationCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = DerivationCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " StructureSet success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"StructureSet", 
						"DefinitionSourceSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "StructureSet success after verifying DefinitionSourceSequence" + ("success" if partial_success else "failure")) 
				if "DefinitionSourceSequence" in ds1:
					DefinitionSourceSequence_data = ds1.DefinitionSourceSequence
					if type(DefinitionSourceSequence_data) == Sequence:
						for i2 in range(0, len(DefinitionSourceSequence_data)):
							if verbose:
								log.append( " DefinitionSourceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = DefinitionSourceSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " StructureSet success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1C(ds2, 
									"StructureSet", "ReferencedSegmentNumber", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedSOPClassUIDIsSegmentationStorage, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " StructureSet success after verifying ReferencedSegmentNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"StructureSet", "ReferencedFiducialUID", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedSOPClassUIDIsSpatialFiducialsStorage, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " StructureSet success after verifying ReferencedFiducialUID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"StructureSet", 
			"PredecessorStructureSetSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "StructureSet success after verifying PredecessorStructureSetSequence" + ("success" if partial_success else "failure")) 
	if "PredecessorStructureSetSequence" in ds:
		PredecessorStructureSetSequence_data = ds.PredecessorStructureSetSequence
		if type(PredecessorStructureSetSequence_data) == Sequence:
			for i1 in range(0, len(PredecessorStructureSetSequence_data)):
				if verbose:
					log.append( " PredecessorStructureSetSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PredecessorStructureSetSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " StructureSet success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_ROIContour_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ROIContour")

	partial_success = verifyType1(ds, 
			"ROIContour", 
			"ROIContourSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ROIContour success after verifying ROIContourSequence" + ("success" if partial_success else "failure")) 
	if "ROIContourSequence" in ds:
		ROIContourSequence_data = ds.ROIContourSequence
		if type(ROIContourSequence_data) == Sequence:
			for i1 in range(0, len(ROIContourSequence_data)):
				if verbose:
					log.append( " ROIContourSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ROIContourSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"ROIContour", "ReferencedROINumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ROIContour success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"ROIContour", "ROIDisplayColor", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ROIContour success after verifying ROIDisplayColor --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"ROIContour", 
						"ContourSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "ROIContour success after verifying ContourSequence" + ("success" if partial_success else "failure")) 
				if "ContourSequence" in ds1:
					ContourSequence_data = ds1.ContourSequence
					if type(ContourSequence_data) == Sequence:
						for i2 in range(0, len(ContourSequence_data)):
							if verbose:
								log.append( " ContourSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ContourSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"ROIContour", "ContourNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " ROIContour success after verifying ContourNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"ROIContour", "AttachedContours", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " ROIContour success after verifying AttachedContours --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"ROIContour", 
									"ContourImageSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "ROIContour success after verifying ContourImageSequence" + ("success" if partial_success else "failure")) 
							if "ContourImageSequence" in ds2:
								ContourImageSequence_data = ds2.ContourImageSequence
								if type(ContourImageSequence_data) == Sequence:
									for i3 in range(0, len(ContourImageSequence_data)):
										if verbose:
											log.append( " ContourImageSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ContourImageSequence_data[i3]
										partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " ROIContour success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1(ds2, 
									"ROIContour", "ContourGeometricType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " ROIContour success after verifying ContourGeometricType --> "+("success" if partial_success else "failure"))

							if "ContourGeometricType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["ContourGeometricType"], 
									StringValueTable_ContourGeometricType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " ROIContour success after verifying string enumerated values ContourGeometricType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"ROIContour", "ContourSlabThickness", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " ROIContour success after verifying ContourSlabThickness --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"ROIContour", "ContourOffsetVector", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " ROIContour success after verifying ContourOffsetVector --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"ROIContour", "NumberOfContourPoints", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " ROIContour success after verifying NumberOfContourPoints --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"ROIContour", "ContourData", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " ROIContour success after verifying ContourData --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTDoseROI_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTDoseROI")

	partial_success = verifyType1(ds, 
			"RTDoseROI", 
			"RTDoseROISequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTDoseROI success after verifying RTDoseROISequence" + ("success" if partial_success else "failure")) 
	if "RTDoseROISequence" in ds:
		RTDoseROISequence_data = ds.RTDoseROISequence
		if type(RTDoseROISequence_data) == Sequence:
			for i1 in range(0, len(RTDoseROISequence_data)):
				if verbose:
					log.append( " RTDoseROISequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RTDoseROISequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTDoseROI", "ReferencedROINumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDoseROI success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTDoseROI", "DoseUnits", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDoseROI success after verifying DoseUnits --> "+("success" if partial_success else "failure"))

				if "DoseUnits" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["DoseUnits"], 
						StringValueTable_DoseUnits, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDoseROI success after verifying string enumerated values DoseUnits --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTDoseROI", "DoseValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTDoseROI success after verifying DoseValue --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTROIObservations_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTROIObservations")

	partial_success = verifyType1(ds, 
			"RTROIObservations", 
			"RTROIObservationsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTROIObservations success after verifying RTROIObservationsSequence" + ("success" if partial_success else "failure")) 
	if "RTROIObservationsSequence" in ds:
		RTROIObservationsSequence_data = ds.RTROIObservationsSequence
		if type(RTROIObservationsSequence_data) == Sequence:
			for i1 in range(0, len(RTROIObservationsSequence_data)):
				if verbose:
					log.append( " RTROIObservationsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RTROIObservationsSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTROIObservations", "ObservationNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTROIObservations success after verifying ObservationNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTROIObservations", "ReferencedROINumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTROIObservations success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTROIObservations", "ROIObservationLabel", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTROIObservations success after verifying ROIObservationLabel --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTROIObservations", "ROIObservationDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTROIObservations success after verifying ROIObservationDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTROIObservations", 
						"RTRelatedROISequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTROIObservations success after verifying RTRelatedROISequence" + ("success" if partial_success else "failure")) 
				if "RTRelatedROISequence" in ds1:
					RTRelatedROISequence_data = ds1.RTRelatedROISequence
					if type(RTRelatedROISequence_data) == Sequence:
						for i2 in range(0, len(RTRelatedROISequence_data)):
							if verbose:
								log.append( " RTRelatedROISequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RTRelatedROISequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTROIObservations", "ReferencedROINumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTROIObservations success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTROIObservations", "RTROIRelationship", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTROIObservations success after verifying RTROIRelationship --> "+("success" if partial_success else "failure"))

							if "RTROIRelationship" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["RTROIRelationship"], 
									StringValueTable_RTROIRelationship, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTROIObservations success after verifying string defined terms RTROIRelationship --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTROIObservations", 
						"RTROIIdentificationCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTROIObservations success after verifying RTROIIdentificationCodeSequence" + ("success" if partial_success else "failure")) 
				if "RTROIIdentificationCodeSequence" in ds1:
					RTROIIdentificationCodeSequence_data = ds1.RTROIIdentificationCodeSequence
					if type(RTROIIdentificationCodeSequence_data) == Sequence:
						for i2 in range(0, len(RTROIIdentificationCodeSequence_data)):
							if verbose:
								log.append( " RTROIIdentificationCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RTROIIdentificationCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTROIObservations success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType3(ds2, 
									"RTROIObservations", 
									"SegmentedPropertyTypeModifierCodeSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTROIObservations success after verifying SegmentedPropertyTypeModifierCodeSequence" + ("success" if partial_success else "failure")) 
							if "SegmentedPropertyTypeModifierCodeSequence" in ds2:
								SegmentedPropertyTypeModifierCodeSequence_data = ds2.SegmentedPropertyTypeModifierCodeSequence
								if type(SegmentedPropertyTypeModifierCodeSequence_data) == Sequence:
									for i3 in range(0, len(SegmentedPropertyTypeModifierCodeSequence_data)):
										if verbose:
											log.append( " SegmentedPropertyTypeModifierCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = SegmentedPropertyTypeModifierCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " RTROIObservations success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"RTROIObservations", 
						"RelatedRTROIObservationsSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTROIObservations success after verifying RelatedRTROIObservationsSequence" + ("success" if partial_success else "failure")) 
				if "RelatedRTROIObservationsSequence" in ds1:
					RelatedRTROIObservationsSequence_data = ds1.RelatedRTROIObservationsSequence
					if type(RelatedRTROIObservationsSequence_data) == Sequence:
						for i2 in range(0, len(RelatedRTROIObservationsSequence_data)):
							if verbose:
								log.append( " RelatedRTROIObservationsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RelatedRTROIObservationsSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTROIObservations", "ObservationNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTROIObservations success after verifying ObservationNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTROIObservations", "RTROIInterpretedType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTROIObservations success after verifying RTROIInterpretedType --> "+("success" if partial_success else "failure"))

				if "RTROIInterpretedType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["RTROIInterpretedType"], 
						StringValueTable_RTROIInterpretedType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTROIObservations success after verifying string defined terms RTROIInterpretedType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTROIObservations", "ROIInterpreter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTROIObservations success after verifying ROIInterpreter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTROIObservations", "MaterialID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTROIObservations success after verifying MaterialID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTROIObservations", 
						"ROIPhysicalPropertiesSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTROIObservations success after verifying ROIPhysicalPropertiesSequence" + ("success" if partial_success else "failure")) 
				if "ROIPhysicalPropertiesSequence" in ds1:
					ROIPhysicalPropertiesSequence_data = ds1.ROIPhysicalPropertiesSequence
					if type(ROIPhysicalPropertiesSequence_data) == Sequence:
						for i2 in range(0, len(ROIPhysicalPropertiesSequence_data)):
							if verbose:
								log.append( " ROIPhysicalPropertiesSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ROIPhysicalPropertiesSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTROIObservations", "ROIPhysicalProperty", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTROIObservations success after verifying ROIPhysicalProperty --> "+("success" if partial_success else "failure"))

							if "ROIPhysicalProperty" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["ROIPhysicalProperty"], 
									StringValueTable_ROIPhysicalProperty, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTROIObservations success after verifying string defined terms ROIPhysicalProperty --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"RTROIObservations", 
									"ROIElementalCompositionSequence", 
									verbose, log, ElementDictionary, 
									Condition_ROIPhysicalPropertyIsElemFraction, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTROIObservations success after verifying ROIElementalCompositionSequence" + ("success" if partial_success else "failure")) 
							if "ROIElementalCompositionSequence" in ds2:
								ROIElementalCompositionSequence_data = ds2.ROIElementalCompositionSequence
								if type(ROIElementalCompositionSequence_data) == Sequence:
									for i3 in range(0, len(ROIElementalCompositionSequence_data)):
										if verbose:
											log.append( " ROIElementalCompositionSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ROIElementalCompositionSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTROIObservations", "ROIElementalCompositionAtomicNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTROIObservations success after verifying ROIElementalCompositionAtomicNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTROIObservations", "ROIElementalCompositionAtomicMassFraction", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTROIObservations success after verifying ROIElementalCompositionAtomicMassFraction --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTROIObservations", "ROIPhysicalPropertyValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTROIObservations success after verifying ROIPhysicalPropertyValue --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTGeneralPlan_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTGeneralPlan")

	partial_success =  		verifyType1(ds, 
			"RTGeneralPlan", "RTPlanLabel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralPlan success after verifying RTPlanLabel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTGeneralPlan", "RTPlanName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralPlan success after verifying RTPlanName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTGeneralPlan", "RTPlanDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralPlan success after verifying RTPlanDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTGeneralPlan", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralPlan success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTGeneralPlan", "RTPlanDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralPlan success after verifying RTPlanDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTGeneralPlan", "RTPlanTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralPlan success after verifying RTPlanTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTGeneralPlan", "TreatmentProtocols", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralPlan success after verifying TreatmentProtocols --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTGeneralPlan", "PlanIntent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralPlan success after verifying PlanIntent --> "+("success" if partial_success else "failure"))

	if "PlanIntent" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["PlanIntent"], 
			StringValueTable_PlanIntent, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralPlan success after verifying string defined terms PlanIntent --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTGeneralPlan", "TreatmentSites", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralPlan success after verifying TreatmentSites --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTGeneralPlan", "RTPlanGeometry", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralPlan success after verifying RTPlanGeometry --> "+("success" if partial_success else "failure"))

	if "RTPlanGeometry" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["RTPlanGeometry"], 
			StringValueTable_RTPlanGeometry, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralPlan success after verifying string defined terms RTPlanGeometry --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"RTGeneralPlan", 
			"ReferencedStructureSetSequence", 
			verbose, log, ElementDictionary, 
			Condition_RTPlanGeometryIsPatient, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTGeneralPlan success after verifying ReferencedStructureSetSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedStructureSetSequence" in ds:
		ReferencedStructureSetSequence_data = ds.ReferencedStructureSetSequence
		if type(ReferencedStructureSetSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedStructureSetSequence_data)):
				if verbose:
					log.append( " ReferencedStructureSetSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedStructureSetSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTGeneralPlan success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"RTGeneralPlan", 
			"ReferencedDoseSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTGeneralPlan success after verifying ReferencedDoseSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedDoseSequence" in ds:
		ReferencedDoseSequence_data = ds.ReferencedDoseSequence
		if type(ReferencedDoseSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedDoseSequence_data)):
				if verbose:
					log.append( " ReferencedDoseSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedDoseSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTGeneralPlan success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"RTGeneralPlan", 
			"ReferencedRTPlanSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTGeneralPlan success after verifying ReferencedRTPlanSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedRTPlanSequence" in ds:
		ReferencedRTPlanSequence_data = ds.ReferencedRTPlanSequence
		if type(ReferencedRTPlanSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedRTPlanSequence_data)):
				if verbose:
					log.append( " ReferencedRTPlanSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedRTPlanSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTGeneralPlan success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"RTGeneralPlan", "RTPlanRelationship", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTGeneralPlan success after verifying RTPlanRelationship --> "+("success" if partial_success else "failure"))

				if "RTPlanRelationship" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["RTPlanRelationship"], 
						StringValueTable_RTPlanRelationship, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTGeneralPlan success after verifying string defined terms RTPlanRelationship --> "+("success" if partial_success else "failure"))


				if Condition_PlanIntentIsVerification(ds1, parent_ds1, root_ds):
					if "RTPlanRelationship" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["RTPlanRelationship"], 
							StringValueTable_RTPlanRelationshipVerifiedPlan, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " RTGeneralPlan success after verifying string defined terms RTPlanRelationship --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTGeneralPlan", "FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralPlan success after verifying FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTPrescription_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTPrescription")

	partial_success =  		verifyType3(ds, 
			"RTPrescription", "PrescriptionDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTPrescription success after verifying PrescriptionDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RTPrescription", 
			"DoseReferenceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTPrescription success after verifying DoseReferenceSequence" + ("success" if partial_success else "failure")) 
	if "DoseReferenceSequence" in ds:
		DoseReferenceSequence_data = ds.DoseReferenceSequence
		if type(DoseReferenceSequence_data) == Sequence:
			for i1 in range(0, len(DoseReferenceSequence_data)):
				if verbose:
					log.append( " DoseReferenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DoseReferenceSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTPrescription", "DoseReferenceNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying DoseReferenceNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "DoseReferenceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying DoseReferenceUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTPrescription", "DoseReferenceStructureType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying DoseReferenceStructureType --> "+("success" if partial_success else "failure"))

				if "DoseReferenceStructureType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["DoseReferenceStructureType"], 
						StringValueTable_DoseReferenceStructureType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying string defined terms DoseReferenceStructureType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "DoseReferenceDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying DoseReferenceDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTPrescription", "ReferencedROINumber", 
						verbose, log, ElementDictionary, 
						Condition_DoseReferenceStructureTypePointOrVolume, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTPrescription", "DoseReferencePointCoordinates", 
						verbose, log, ElementDictionary, 
						Condition_DoseReferenceStructureTypeCoordinates, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying DoseReferencePointCoordinates --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "NominalPriorDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying NominalPriorDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTPrescription", "DoseReferenceType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying DoseReferenceType --> "+("success" if partial_success else "failure"))

				if "DoseReferenceType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["DoseReferenceType"], 
						StringValueTable_DoseReferenceType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying string defined terms DoseReferenceType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "ConstraintWeight", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying ConstraintWeight --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "DeliveryWarningDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying DeliveryWarningDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "DeliveryMaximumDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying DeliveryMaximumDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "TargetMinimumDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying TargetMinimumDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "TargetPrescriptionDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying TargetPrescriptionDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "TargetMaximumDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying TargetMaximumDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "TargetUnderdoseVolumeFraction", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying TargetUnderdoseVolumeFraction --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "OrganAtRiskFullVolumeDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying OrganAtRiskFullVolumeDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "OrganAtRiskLimitDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying OrganAtRiskLimitDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "OrganAtRiskMaximumDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying OrganAtRiskMaximumDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPrescription", "OrganAtRiskOverdoseVolumeFraction", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPrescription success after verifying OrganAtRiskOverdoseVolumeFraction --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTToleranceTables_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTToleranceTables")

	partial_success = verifyType3(ds, 
			"RTToleranceTables", 
			"ToleranceTableSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTToleranceTables success after verifying ToleranceTableSequence" + ("success" if partial_success else "failure")) 
	if "ToleranceTableSequence" in ds:
		ToleranceTableSequence_data = ds.ToleranceTableSequence
		if type(ToleranceTableSequence_data) == Sequence:
			for i1 in range(0, len(ToleranceTableSequence_data)):
				if verbose:
					log.append( " ToleranceTableSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ToleranceTableSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTToleranceTables", "ToleranceTableNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTToleranceTables success after verifying ToleranceTableNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTToleranceTables", "ToleranceTableLabel", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTToleranceTables success after verifying ToleranceTableLabel --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTToleranceTables", "GantryAngleTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTToleranceTables success after verifying GantryAngleTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTToleranceTables", "GantryPitchAngleTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTToleranceTables success after verifying GantryPitchAngleTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTToleranceTables", "BeamLimitingDeviceAngleTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTToleranceTables success after verifying BeamLimitingDeviceAngleTolerance --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTToleranceTables", 
						"BeamLimitingDeviceToleranceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTToleranceTables success after verifying BeamLimitingDeviceToleranceSequence" + ("success" if partial_success else "failure")) 
				if "BeamLimitingDeviceToleranceSequence" in ds1:
					BeamLimitingDeviceToleranceSequence_data = ds1.BeamLimitingDeviceToleranceSequence
					if type(BeamLimitingDeviceToleranceSequence_data) == Sequence:
						for i2 in range(0, len(BeamLimitingDeviceToleranceSequence_data)):
							if verbose:
								log.append( " BeamLimitingDeviceToleranceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = BeamLimitingDeviceToleranceSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTToleranceTables", "RTBeamLimitingDeviceType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTToleranceTables success after verifying RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							if "RTBeamLimitingDeviceType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["RTBeamLimitingDeviceType"], 
									StringValueTable_RTBeamLimitingDeviceType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTToleranceTables success after verifying string enumerated values RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTToleranceTables", "BeamLimitingDevicePositionTolerance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTToleranceTables success after verifying BeamLimitingDevicePositionTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTToleranceTables", "PatientSupportAngleTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTToleranceTables success after verifying PatientSupportAngleTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTToleranceTables", "TableTopEccentricAngleTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTToleranceTables success after verifying TableTopEccentricAngleTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTToleranceTables", "TableTopPitchAngleTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTToleranceTables success after verifying TableTopPitchAngleTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTToleranceTables", "TableTopRollAngleTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTToleranceTables success after verifying TableTopRollAngleTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTToleranceTables", "TableTopVerticalPositionTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTToleranceTables success after verifying TableTopVerticalPositionTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTToleranceTables", "TableTopLongitudinalPositionTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTToleranceTables success after verifying TableTopLongitudinalPositionTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTToleranceTables", "TableTopLateralPositionTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTToleranceTables success after verifying TableTopLateralPositionTolerance --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTPatientSetup_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTPatientSetup")

	partial_success = verifyType1(ds, 
			"RTPatientSetup", 
			"PatientSetupSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTPatientSetup success after verifying PatientSetupSequence" + ("success" if partial_success else "failure")) 
	if "PatientSetupSequence" in ds:
		PatientSetupSequence_data = ds.PatientSetupSequence
		if type(PatientSetupSequence_data) == Sequence:
			for i1 in range(0, len(PatientSetupSequence_data)):
				if verbose:
					log.append( " PatientSetupSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientSetupSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTPatientSetup", "PatientSetupNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPatientSetup success after verifying PatientSetupNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPatientSetup", "PatientSetupLabel", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPatientSetup success after verifying PatientSetupLabel --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTPatientSetup", "PatientPosition", 
						verbose, log, ElementDictionary, 
						Condition_PatientAdditionalPositionNotPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPatientSetup success after verifying PatientPosition --> "+("success" if partial_success else "failure"))

				if Condition_PatientAdditionalPositionNotPresent(ds1, parent_ds1, root_ds):
					if "PatientPosition" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["PatientPosition"], 
							StringValueTable_RTPatientPosition, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPatientSetup success after verifying string defined terms PatientPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTPatientSetup", "PatientAdditionalPosition", 
						verbose, log, ElementDictionary, 
						Condition_PatientPositionNotPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPatientSetup success after verifying PatientAdditionalPosition --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTPatientSetup", 
						"ReferencedSetupImageSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTPatientSetup success after verifying ReferencedSetupImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedSetupImageSequence" in ds1:
					ReferencedSetupImageSequence_data = ds1.ReferencedSetupImageSequence
					if type(ReferencedSetupImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedSetupImageSequence_data)):
							if verbose:
								log.append( " ReferencedSetupImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedSetupImageSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "SetupImageComment", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying SetupImageComment --> "+("success" if partial_success else "failure"))

							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTPatientSetup success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"RTPatientSetup", 
						"FixationDeviceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTPatientSetup success after verifying FixationDeviceSequence" + ("success" if partial_success else "failure")) 
				if "FixationDeviceSequence" in ds1:
					FixationDeviceSequence_data = ds1.FixationDeviceSequence
					if type(FixationDeviceSequence_data) == Sequence:
						for i2 in range(0, len(FixationDeviceSequence_data)):
							if verbose:
								log.append( " FixationDeviceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = FixationDeviceSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTPatientSetup", "FixationDeviceType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying FixationDeviceType --> "+("success" if partial_success else "failure"))

							if "FixationDeviceType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["FixationDeviceType"], 
									StringValueTable_FixationDeviceType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying string defined terms FixationDeviceType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTPatientSetup", "FixationDeviceLabel", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying FixationDeviceLabel --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "FixationDeviceDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying FixationDeviceDescription --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "FixationDevicePosition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying FixationDevicePosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "FixationDevicePitchAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying FixationDevicePitchAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "FixationDeviceRollAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying FixationDeviceRollAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTPatientSetup", 
						"ShieldingDeviceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTPatientSetup success after verifying ShieldingDeviceSequence" + ("success" if partial_success else "failure")) 
				if "ShieldingDeviceSequence" in ds1:
					ShieldingDeviceSequence_data = ds1.ShieldingDeviceSequence
					if type(ShieldingDeviceSequence_data) == Sequence:
						for i2 in range(0, len(ShieldingDeviceSequence_data)):
							if verbose:
								log.append( " ShieldingDeviceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ShieldingDeviceSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTPatientSetup", "ShieldingDeviceType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying ShieldingDeviceType --> "+("success" if partial_success else "failure"))

							if "ShieldingDeviceType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["ShieldingDeviceType"], 
									StringValueTable_ShieldingDeviceType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying string defined terms ShieldingDeviceType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTPatientSetup", "ShieldingDeviceLabel", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying ShieldingDeviceLabel --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "ShieldingDeviceDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying ShieldingDeviceDescription --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "ShieldingDevicePosition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying ShieldingDevicePosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPatientSetup", "SetupTechnique", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPatientSetup success after verifying SetupTechnique --> "+("success" if partial_success else "failure"))

				if "SetupTechnique" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["SetupTechnique"], 
						StringValueTable_SetupTechnique, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPatientSetup success after verifying string defined terms SetupTechnique --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPatientSetup", "SetupTechniqueDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPatientSetup success after verifying SetupTechniqueDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTPatientSetup", 
						"SetupDeviceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTPatientSetup success after verifying SetupDeviceSequence" + ("success" if partial_success else "failure")) 
				if "SetupDeviceSequence" in ds1:
					SetupDeviceSequence_data = ds1.SetupDeviceSequence
					if type(SetupDeviceSequence_data) == Sequence:
						for i2 in range(0, len(SetupDeviceSequence_data)):
							if verbose:
								log.append( " SetupDeviceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SetupDeviceSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTPatientSetup", "SetupDeviceType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying SetupDeviceType --> "+("success" if partial_success else "failure"))

							if "SetupDeviceType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["SetupDeviceType"], 
									StringValueTable_SetupDeviceType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying string defined terms SetupDeviceType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTPatientSetup", "SetupDeviceLabel", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying SetupDeviceLabel --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "SetupDeviceDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying SetupDeviceDescription --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTPatientSetup", "SetupDeviceParameter", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying SetupDeviceParameter --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "SetupReferenceDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying SetupReferenceDescription --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPatientSetup", "TableTopVerticalSetupDisplacement", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPatientSetup success after verifying TableTopVerticalSetupDisplacement --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPatientSetup", "TableTopLongitudinalSetupDisplacement", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPatientSetup success after verifying TableTopLongitudinalSetupDisplacement --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTPatientSetup", "TableTopLateralSetupDisplacement", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTPatientSetup success after verifying TableTopLateralSetupDisplacement --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTPatientSetup", 
						"MotionSynchronizationSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTPatientSetup success after verifying MotionSynchronizationSequence" + ("success" if partial_success else "failure")) 
				if "MotionSynchronizationSequence" in ds1:
					MotionSynchronizationSequence_data = ds1.MotionSynchronizationSequence
					if type(MotionSynchronizationSequence_data) == Sequence:
						for i2 in range(0, len(MotionSynchronizationSequence_data)):
							if verbose:
								log.append( " MotionSynchronizationSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MotionSynchronizationSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTPatientSetup", "RespiratoryMotionCompensationTechnique", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying RespiratoryMotionCompensationTechnique --> "+("success" if partial_success else "failure"))

							if "RespiratoryMotionCompensationTechnique" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["RespiratoryMotionCompensationTechnique"], 
									StringValueTable_RTRespiratoryMotionCompensationTechnique, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying string defined terms RespiratoryMotionCompensationTechnique --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTPatientSetup", "RespiratorySignalSource", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying RespiratorySignalSource --> "+("success" if partial_success else "failure"))

							if "RespiratorySignalSource" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["RespiratorySignalSource"], 
									StringValueTable_RTRespiratorySignalSource, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying string defined terms RespiratorySignalSource --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "RespiratoryMotionCompensationTechniqueDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying RespiratoryMotionCompensationTechniqueDescription --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTPatientSetup", "RespiratorySignalSourceID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTPatientSetup success after verifying RespiratorySignalSourceID --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTFractionScheme_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTFractionScheme")

	partial_success = verifyType1(ds, 
			"RTFractionScheme", 
			"FractionGroupSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTFractionScheme success after verifying FractionGroupSequence" + ("success" if partial_success else "failure")) 
	if "FractionGroupSequence" in ds:
		FractionGroupSequence_data = ds.FractionGroupSequence
		if type(FractionGroupSequence_data) == Sequence:
			for i1 in range(0, len(FractionGroupSequence_data)):
				if verbose:
					log.append( " FractionGroupSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FractionGroupSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTFractionScheme", "FractionGroupNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTFractionScheme success after verifying FractionGroupNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTFractionScheme", "FractionGroupDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTFractionScheme success after verifying FractionGroupDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTFractionScheme", 
						"ReferencedDoseSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTFractionScheme success after verifying ReferencedDoseSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedDoseSequence" in ds1:
					ReferencedDoseSequence_data = ds1.ReferencedDoseSequence
					if type(ReferencedDoseSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedDoseSequence_data)):
							if verbose:
								log.append( " ReferencedDoseSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedDoseSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTFractionScheme success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"RTFractionScheme", 
						"ReferencedDoseReferenceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTFractionScheme success after verifying ReferencedDoseReferenceSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedDoseReferenceSequence" in ds1:
					ReferencedDoseReferenceSequence_data = ds1.ReferencedDoseReferenceSequence
					if type(ReferencedDoseReferenceSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedDoseReferenceSequence_data)):
							if verbose:
								log.append( " ReferencedDoseReferenceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedDoseReferenceSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTFractionScheme", "ReferencedDoseReferenceNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "ConstraintWeight", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying ConstraintWeight --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "DeliveryWarningDose", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying DeliveryWarningDose --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "DeliveryMaximumDose", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying DeliveryMaximumDose --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "TargetMinimumDose", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying TargetMinimumDose --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "TargetPrescriptionDose", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying TargetPrescriptionDose --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "TargetMaximumDose", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying TargetMaximumDose --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "TargetUnderdoseVolumeFraction", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying TargetUnderdoseVolumeFraction --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "OrganAtRiskFullVolumeDose", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying OrganAtRiskFullVolumeDose --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "OrganAtRiskLimitDose", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying OrganAtRiskLimitDose --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "OrganAtRiskMaximumDose", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying OrganAtRiskMaximumDose --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "OrganAtRiskOverdoseVolumeFraction", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying OrganAtRiskOverdoseVolumeFraction --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTFractionScheme", "NumberOfFractionsPlanned", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTFractionScheme success after verifying NumberOfFractionsPlanned --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTFractionScheme", "NumberOfFractionPatternDigitsPerDay", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTFractionScheme success after verifying NumberOfFractionPatternDigitsPerDay --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTFractionScheme", "RepeatFractionCycleLength", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTFractionScheme success after verifying RepeatFractionCycleLength --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTFractionScheme", "FractionPattern", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTFractionScheme success after verifying FractionPattern --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTFractionScheme", "BeamDoseMeaning", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTFractionScheme success after verifying BeamDoseMeaning --> "+("success" if partial_success else "failure"))

				if "BeamDoseMeaning" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["BeamDoseMeaning"], 
						StringValueTable_BeamDoseMeaning, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTFractionScheme success after verifying string enumerated values BeamDoseMeaning --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTFractionScheme", "NumberOfBeams", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTFractionScheme success after verifying NumberOfBeams --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTFractionScheme", 
						"ReferencedBeamSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfBeamsNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTFractionScheme success after verifying ReferencedBeamSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedBeamSequence" in ds1:
					ReferencedBeamSequence_data = ds1.ReferencedBeamSequence
					if type(ReferencedBeamSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedBeamSequence_data)):
							if verbose:
								log.append( " ReferencedBeamSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedBeamSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTFractionScheme", "ReferencedBeamNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying ReferencedBeamNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "BeamDoseSpecificationPoint", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying BeamDoseSpecificationPoint --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "ReferencedDoseReferenceUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying ReferencedDoseReferenceUID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "BeamDose", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying BeamDose --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTFractionScheme", "BeamDoseType", 
									verbose, log, ElementDictionary, 
									Condition_AlternateBeamDosePresent, 
									True, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying BeamDoseType --> "+("success" if partial_success else "failure"))

							if Condition_AlternateBeamDosePresent(ds2, parent_ds2, root_ds):
								if "BeamDoseType" not in ds2: 
									partial_success = False 
								else:
									partial_success = verifyEnumValues(ds2["BeamDoseType"], 
										StringValueTable_BeamDoseType, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying string enumerated values BeamDoseType --> "+("success" if partial_success else "failure"))


							if Condition_AlternateBeamDoseTypeSameValueAsBeamDoseType(ds2, parent_ds2, root_ds):
									log.append( EMsgDC("Null") +" A different value than AlternateBeamDoseType is required - attribute <BeamDoseType>")

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "AlternateBeamDose", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying AlternateBeamDose --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTFractionScheme", "AlternateBeamDoseType", 
									verbose, log, ElementDictionary, 
									Condition_AlternateBeamDosePresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying AlternateBeamDoseType --> "+("success" if partial_success else "failure"))

							if Condition_AlternateBeamDosePresent(ds2, parent_ds2, root_ds):
								if "AlternateBeamDoseType" not in ds2: 
									partial_success = False 
								else:
									partial_success = verifyEnumValues(ds2["AlternateBeamDoseType"], 
										StringValueTable_BeamDoseType, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying string enumerated values AlternateBeamDoseType --> "+("success" if partial_success else "failure"))


							if Condition_AlternateBeamDoseTypeSameValueAsBeamDoseType(ds2, parent_ds2, root_ds):
									log.append( EMsgDC("Null") +" A different value than BeamDoseType is required - attribute <AlternateBeamDoseType>")

							partial_success = verifyType3(ds2, 
									"RTFractionScheme", 
									"BeamDoseVerificationControlPointSequence", 
									verbose, log, ElementDictionary, 
															2, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTFractionScheme success after verifying BeamDoseVerificationControlPointSequence" + ("success" if partial_success else "failure")) 
							if "BeamDoseVerificationControlPointSequence" in ds2:
								BeamDoseVerificationControlPointSequence_data = ds2.BeamDoseVerificationControlPointSequence
								if type(BeamDoseVerificationControlPointSequence_data) == Sequence:
									for i3 in range(0, len(BeamDoseVerificationControlPointSequence_data)):
										if verbose:
											log.append( " BeamDoseVerificationControlPointSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = BeamDoseVerificationControlPointSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTFractionScheme", "CumulativeMetersetWeight", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTFractionScheme success after verifying CumulativeMetersetWeight --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1C(ds3, 
												"RTFractionScheme", "ReferencedControlPointIndex", 
												verbose, log, ElementDictionary, 
												0, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTFractionScheme success after verifying ReferencedControlPointIndex --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType2C(ds3, 
												"RTFractionScheme", "AverageBeamDosePointDepth", 
												verbose, log, ElementDictionary, 
												0, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTFractionScheme success after verifying AverageBeamDosePointDepth --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType2C(ds3, 
												"RTFractionScheme", "AverageBeamDosePointEquivalentDepth", 
												verbose, log, ElementDictionary, 
												0, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTFractionScheme success after verifying AverageBeamDosePointEquivalentDepth --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType2C(ds3, 
												"RTFractionScheme", "AverageBeamDosePointSSD", 
												verbose, log, ElementDictionary, 
												0, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTFractionScheme success after verifying AverageBeamDosePointSSD --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "BeamMeterset", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying BeamMeterset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTFractionScheme", "NumberOfBrachyApplicationSetups", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTFractionScheme success after verifying NumberOfBrachyApplicationSetups --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTFractionScheme", 
						"ReferencedBrachyApplicationSetupSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfBrachyApplicationSetupsNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTFractionScheme success after verifying ReferencedBrachyApplicationSetupSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedBrachyApplicationSetupSequence" in ds1:
					ReferencedBrachyApplicationSetupSequence_data = ds1.ReferencedBrachyApplicationSetupSequence
					if type(ReferencedBrachyApplicationSetupSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedBrachyApplicationSetupSequence_data)):
							if verbose:
								log.append( " ReferencedBrachyApplicationSetupSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedBrachyApplicationSetupSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTFractionScheme", "ReferencedBrachyApplicationSetupNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying ReferencedBrachyApplicationSetupNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "BrachyApplicationSetupDoseSpecificationPoint", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying BrachyApplicationSetupDoseSpecificationPoint --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTFractionScheme", "BrachyApplicationSetupDose", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTFractionScheme success after verifying BrachyApplicationSetupDose --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTBeams_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTBeams")

	partial_success = verifyType1(ds, 
			"RTBeams", 
			"BeamSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTBeams success after verifying BeamSequence" + ("success" if partial_success else "failure")) 
	if "BeamSequence" in ds:
		BeamSequence_data = ds.BeamSequence
		if type(BeamSequence_data) == Sequence:
			for i1 in range(0, len(BeamSequence_data)):
				if verbose:
					log.append( " BeamSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = BeamSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTBeams", "BeamNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying BeamNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "BeamName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying BeamName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "BeamDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying BeamDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBeams", "BeamType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying BeamType --> "+("success" if partial_success else "failure"))

				if "BeamType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["BeamType"], 
						StringValueTable_BeamType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying string enumerated values BeamType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTBeams", "RadiationType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying RadiationType --> "+("success" if partial_success else "failure"))

				if "RadiationType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["RadiationType"], 
						StringValueTable_RadiationType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying string defined terms RadiationType --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeams", 
						"PrimaryFluenceModeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeams success after verifying PrimaryFluenceModeSequence" + ("success" if partial_success else "failure")) 
				if "PrimaryFluenceModeSequence" in ds1:
					PrimaryFluenceModeSequence_data = ds1.PrimaryFluenceModeSequence
					if type(PrimaryFluenceModeSequence_data) == Sequence:
						for i2 in range(0, len(PrimaryFluenceModeSequence_data)):
							if verbose:
								log.append( " PrimaryFluenceModeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PrimaryFluenceModeSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTBeams", "FluenceMode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying FluenceMode --> "+("success" if partial_success else "failure"))

							if "FluenceMode" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["FluenceMode"], 
									StringValueTable_FluenceMode, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values FluenceMode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "FluenceModeID", 
									verbose, log, ElementDictionary, 
									Condition_FluenceModeIsNonStandard, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying FluenceModeID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTBeams", "HighDoseTechniqueType", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying HighDoseTechniqueType --> "+("success" if partial_success else "failure"))

				if "HighDoseTechniqueType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["HighDoseTechniqueType"], 
						StringValueTable_HighDoseTechniqueType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying string defined terms HighDoseTechniqueType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTBeams", "TreatmentMachineName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying TreatmentMachineName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "Manufacturer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "InstitutionName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying InstitutionName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "InstitutionAddress", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying InstitutionAddress --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "InstitutionalDepartmentName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying InstitutionalDepartmentName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeams", 
						"InstitutionalDepartmentTypeCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeams success after verifying InstitutionalDepartmentTypeCodeSequence" + ("success" if partial_success else "failure")) 
				if "InstitutionalDepartmentTypeCodeSequence" in ds1:
					InstitutionalDepartmentTypeCodeSequence_data = ds1.InstitutionalDepartmentTypeCodeSequence
					if type(InstitutionalDepartmentTypeCodeSequence_data) == Sequence:
						for i2 in range(0, len(InstitutionalDepartmentTypeCodeSequence_data)):
							if verbose:
								log.append( " InstitutionalDepartmentTypeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = InstitutionalDepartmentTypeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTBeams success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"RTBeams", "ManufacturerModelName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "DeviceSerialNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying DeviceSerialNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "PrimaryDosimeterUnit", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying PrimaryDosimeterUnit --> "+("success" if partial_success else "failure"))

				if "PrimaryDosimeterUnit" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["PrimaryDosimeterUnit"], 
						StringValueTable_PrimaryDosimeterUnit, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying string enumerated values PrimaryDosimeterUnit --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "ReferencedToleranceTableNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying ReferencedToleranceTableNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "SourceAxisDistance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying SourceAxisDistance --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"RTBeams", 
						"BeamLimitingDeviceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeams success after verifying BeamLimitingDeviceSequence" + ("success" if partial_success else "failure")) 
				if "BeamLimitingDeviceSequence" in ds1:
					BeamLimitingDeviceSequence_data = ds1.BeamLimitingDeviceSequence
					if type(BeamLimitingDeviceSequence_data) == Sequence:
						for i2 in range(0, len(BeamLimitingDeviceSequence_data)):
							if verbose:
								log.append( " BeamLimitingDeviceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = BeamLimitingDeviceSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTBeams", "RTBeamLimitingDeviceType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							if "RTBeamLimitingDeviceType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["RTBeamLimitingDeviceType"], 
									StringValueTable_RTBeamLimitingDeviceType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "SourceToBeamLimitingDeviceDistance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying SourceToBeamLimitingDeviceDistance --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeams", "NumberOfLeafJawPairs", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying NumberOfLeafJawPairs --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTBeams", "LeafPositionBoundaries", 
									verbose, log, ElementDictionary, 
									Condition_RTBeamLimitingDeviceTypeMLCXOrMLCY, 
									True, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying LeafPositionBoundaries --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "ReferencedPatientSetupNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying ReferencedPatientSetupNumber --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeams", 
						"ReferencedReferenceImageSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeams success after verifying ReferencedReferenceImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedReferenceImageSequence" in ds1:
					ReferencedReferenceImageSequence_data = ds1.ReferencedReferenceImageSequence
					if type(ReferencedReferenceImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedReferenceImageSequence_data)):
							if verbose:
								log.append( " ReferencedReferenceImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedReferenceImageSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTBeams success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1(ds2, 
									"RTBeams", "ReferenceImageNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying ReferenceImageNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "StartCumulativeMetersetWeight", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying StartCumulativeMetersetWeight --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "EndCumulativeMetersetWeight", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying EndCumulativeMetersetWeight --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeams", 
						"PlannedVerificationImageSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeams success after verifying PlannedVerificationImageSequence" + ("success" if partial_success else "failure")) 
				if "PlannedVerificationImageSequence" in ds1:
					PlannedVerificationImageSequence_data = ds1.PlannedVerificationImageSequence
					if type(PlannedVerificationImageSequence_data) == Sequence:
						for i2 in range(0, len(PlannedVerificationImageSequence_data)):
							if verbose:
								log.append( " PlannedVerificationImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PlannedVerificationImageSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"RTBeams", "StartCumulativeMetersetWeight", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying StartCumulativeMetersetWeight --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "MetersetExposure", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying MetersetExposure --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "EndCumulativeMetersetWeight", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying EndCumulativeMetersetWeight --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "RTImagePlane", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying RTImagePlane --> "+("success" if partial_success else "failure"))

							if "RTImagePlane" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["RTImagePlane"], 
									StringValueTable_RTImagePlane, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values RTImagePlane --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "XRayImageReceptorAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying XRayImageReceptorAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "RTImageOrientation", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying RTImageOrientation --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "RTImagePosition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying RTImagePosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "RTImageSID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying RTImageSID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "ImagingDeviceSpecificAcquisitionParameters", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying ImagingDeviceSpecificAcquisitionParameters --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "ReferencedReferenceImageNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying ReferencedReferenceImageNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "TreatmentDeliveryType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying TreatmentDeliveryType --> "+("success" if partial_success else "failure"))

				if "TreatmentDeliveryType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["TreatmentDeliveryType"], 
						StringValueTable_TreatmentDeliveryType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying string defined terms TreatmentDeliveryType --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeams", 
						"ReferencedDoseSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeams success after verifying ReferencedDoseSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedDoseSequence" in ds1:
					ReferencedDoseSequence_data = ds1.ReferencedDoseSequence
					if type(ReferencedDoseSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedDoseSequence_data)):
							if verbose:
								log.append( " ReferencedDoseSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedDoseSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTBeams success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"RTBeams", "NumberOfWedges", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying NumberOfWedges --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTBeams", 
						"WedgeSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfWedgesNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeams success after verifying WedgeSequence" + ("success" if partial_success else "failure")) 
				if "WedgeSequence" in ds1:
					WedgeSequence_data = ds1.WedgeSequence
					if type(WedgeSequence_data) == Sequence:
						for i2 in range(0, len(WedgeSequence_data)):
							if verbose:
								log.append( " WedgeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = WedgeSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTBeams", "WedgeNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying WedgeNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "WedgeType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying WedgeType --> "+("success" if partial_success else "failure"))

							if "WedgeType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["WedgeType"], 
									StringValueTable_WedgeType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string defined terms WedgeType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "WedgeID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying WedgeID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "WedgeAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying WedgeAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "WedgeFactor", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying WedgeFactor --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "WedgeOrientation", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying WedgeOrientation --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "SourceToWedgeTrayDistance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying SourceToWedgeTrayDistance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBeams", "NumberOfCompensators", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying NumberOfCompensators --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "TotalCompensatorTrayFactor", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying TotalCompensatorTrayFactor --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTBeams", 
						"CompensatorSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfCompensatorsNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeams success after verifying CompensatorSequence" + ("success" if partial_success else "failure")) 
				if "CompensatorSequence" in ds1:
					CompensatorSequence_data = ds1.CompensatorSequence
					if type(CompensatorSequence_data) == Sequence:
						for i2 in range(0, len(CompensatorSequence_data)):
							if verbose:
								log.append( " CompensatorSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = CompensatorSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"RTBeams", "CompensatorDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying CompensatorDescription --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeams", "CompensatorNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying CompensatorNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "MaterialID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying MaterialID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "CompensatorID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying CompensatorID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "CompensatorTrayID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying CompensatorTrayID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "TrayAccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying TrayAccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "SourceToCompensatorTrayDistance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying SourceToCompensatorTrayDistance --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "CompensatorDivergence", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying CompensatorDivergence --> "+("success" if partial_success else "failure"))

							if "CompensatorDivergence" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["CompensatorDivergence"], 
									StringValueTable_CompensatorDivergence, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values CompensatorDivergence --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "CompensatorMountingPosition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying CompensatorMountingPosition --> "+("success" if partial_success else "failure"))

							if "CompensatorMountingPosition" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["CompensatorMountingPosition"], 
									StringValueTable_CompensatorMountingPosition, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values CompensatorMountingPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeams", "CompensatorRows", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying CompensatorRows --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeams", "CompensatorColumns", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying CompensatorColumns --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeams", "CompensatorPixelSpacing", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying CompensatorPixelSpacing --> "+("success" if partial_success else "failure"))

							if "CompensatorPixelSpacing" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyNotZero(ds2["CompensatorPixelSpacing"], 
									verbose, log, -1, False)

							partial_success =  		verifyType1(ds2, 
									"RTBeams", "CompensatorPosition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying CompensatorPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeams", "CompensatorTransmissionData", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying CompensatorTransmissionData --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeams", "CompensatorThicknessData", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying CompensatorThicknessData --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "SourceToCompensatorDistance", 
									verbose, log, ElementDictionary, 
									Condition_NeedSourceToCompensatorDistance, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying SourceToCompensatorDistance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBeams", "NumberOfBoli", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying NumberOfBoli --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTBeams", 
						"ReferencedBolusSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfBoliNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeams success after verifying ReferencedBolusSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedBolusSequence" in ds1:
					ReferencedBolusSequence_data = ds1.ReferencedBolusSequence
					if type(ReferencedBolusSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedBolusSequence_data)):
							if verbose:
								log.append( " ReferencedBolusSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedBolusSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTBeams", "ReferencedROINumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "BolusID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BolusID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "BolusDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BolusDescription --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBeams", "NumberOfBlocks", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying NumberOfBlocks --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeams", "TotalBlockTrayFactor", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying TotalBlockTrayFactor --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTBeams", 
						"BlockSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfBlocksNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeams success after verifying BlockSequence" + ("success" if partial_success else "failure")) 
				if "BlockSequence" in ds1:
					BlockSequence_data = ds1.BlockSequence
					if type(BlockSequence_data) == Sequence:
						for i2 in range(0, len(BlockSequence_data)):
							if verbose:
								log.append( " BlockSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = BlockSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"RTBeams", "BlockTrayID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BlockTrayID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "TrayAccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying TrayAccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "SourceToBlockTrayDistance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying SourceToBlockTrayDistance --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeams", "BlockType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BlockType --> "+("success" if partial_success else "failure"))

							if "BlockType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["BlockType"], 
									StringValueTable_BlockType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values BlockType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "BlockDivergence", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BlockDivergence --> "+("success" if partial_success else "failure"))

							if "BlockDivergence" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["BlockDivergence"], 
									StringValueTable_BlockDivergence, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values BlockDivergence --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "BlockMountingPosition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BlockMountingPosition --> "+("success" if partial_success else "failure"))

							if "BlockMountingPosition" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["BlockMountingPosition"], 
									StringValueTable_BlockMountingPosition, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values BlockMountingPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeams", "BlockNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BlockNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "BlockName", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BlockName --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "MaterialID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying MaterialID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "BlockThickness", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BlockThickness --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "BlockTransmission", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BlockTransmission --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "BlockNumberOfPoints", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BlockNumberOfPoints --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "BlockData", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BlockData --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeams", 
						"ApplicatorSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeams success after verifying ApplicatorSequence" + ("success" if partial_success else "failure")) 
				if "ApplicatorSequence" in ds1:
					ApplicatorSequence_data = ds1.ApplicatorSequence
					if type(ApplicatorSequence_data) == Sequence:
						for i2 in range(0, len(ApplicatorSequence_data)):
							if verbose:
								log.append( " ApplicatorSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ApplicatorSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTBeams", "ApplicatorID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying ApplicatorID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeams", "ApplicatorType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying ApplicatorType --> "+("success" if partial_success else "failure"))

							if "ApplicatorType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["ApplicatorType"], 
									StringValueTable_ApplicatorType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string defined terms ApplicatorType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "ApplicatorDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying ApplicatorDescription --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTBeams", 
									"GeneralAccessorySequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBeams success after verifying GeneralAccessorySequence" + ("success" if partial_success else "failure")) 
							if "GeneralAccessorySequence" in ds2:
								GeneralAccessorySequence_data = ds2.GeneralAccessorySequence
								if type(GeneralAccessorySequence_data) == Sequence:
									for i3 in range(0, len(GeneralAccessorySequence_data)):
										if verbose:
											log.append( " GeneralAccessorySequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = GeneralAccessorySequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTBeams", "GeneralAccessoryNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying GeneralAccessoryNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBeams", "GeneralAccessoryID", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying GeneralAccessoryID --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBeams", "GeneralAccessoryDescription", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying GeneralAccessoryDescription --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBeams", "GeneralAccessoryType", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying GeneralAccessoryType --> "+("success" if partial_success else "failure"))

										if "GeneralAccessoryType" not in ds3: 
											partial_success = False 
										else: 
											partial_success = verifyDefinedTerms(ds3["GeneralAccessoryType"], 
												StringValueTable_RTGeneralAccessoryType, 
												verbose, log, -1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying string defined terms GeneralAccessoryType --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBeams", "AccessoryCode", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBeams", "SourceToGeneralAccessoryDistance", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying SourceToGeneralAccessoryDistance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTBeams", "FinalCumulativeMetersetWeight", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying FinalCumulativeMetersetWeight --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBeams", "NumberOfControlPoints", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeams success after verifying NumberOfControlPoints --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"RTBeams", 
						"ControlPointSequence", 
						verbose, log, ElementDictionary, 
									2, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeams success after verifying ControlPointSequence" + ("success" if partial_success else "failure")) 
				if "ControlPointSequence" in ds1:
					ControlPointSequence_data = ds1.ControlPointSequence
					if type(ControlPointSequence_data) == Sequence:
						for i2 in range(0, len(ControlPointSequence_data)):
							if verbose:
								log.append( " ControlPointSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ControlPointSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTBeams", "ControlPointIndex", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying ControlPointIndex --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeams", "CumulativeMetersetWeight", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying CumulativeMetersetWeight --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTBeams", 
									"ReferencedDoseReferenceSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBeams success after verifying ReferencedDoseReferenceSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedDoseReferenceSequence" in ds2:
								ReferencedDoseReferenceSequence_data = ds2.ReferencedDoseReferenceSequence
								if type(ReferencedDoseReferenceSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedDoseReferenceSequence_data)):
										if verbose:
											log.append( " ReferencedDoseReferenceSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedDoseReferenceSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTBeams", "ReferencedDoseReferenceNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType2(ds3, 
												"RTBeams", "CumulativeDoseReferenceCoefficient", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying CumulativeDoseReferenceCoefficient --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"RTBeams", 
									"ReferencedDoseSequence", 
									verbose, log, ElementDictionary, 
									Condition_DoseSummationTypeControlPoint, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBeams success after verifying ReferencedDoseSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedDoseSequence" in ds2:
								ReferencedDoseSequence_data = ds2.ReferencedDoseSequence
								if type(ReferencedDoseSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedDoseSequence_data)):
										if verbose:
											log.append( " ReferencedDoseSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedDoseSequence_data[i3]
										partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " RTBeams success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType3(ds2, 
									"RTBeams", "NominalBeamEnergy", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying NominalBeamEnergy --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "DoseRateSet", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying DoseRateSet --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTBeams", 
									"WedgePositionSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBeams success after verifying WedgePositionSequence" + ("success" if partial_success else "failure")) 
							if "WedgePositionSequence" in ds2:
								WedgePositionSequence_data = ds2.WedgePositionSequence
								if type(WedgePositionSequence_data) == Sequence:
									for i3 in range(0, len(WedgePositionSequence_data)):
										if verbose:
											log.append( " WedgePositionSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = WedgePositionSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTBeams", "ReferencedWedgeNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying ReferencedWedgeNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBeams", "WedgePosition", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying WedgePosition --> "+("success" if partial_success else "failure"))

										if "WedgePosition" not in ds3: 
											partial_success = False 
										else:
											partial_success = verifyEnumValues(ds3["WedgePosition"], 
												StringValueTable_WedgePosition, 
												verbose, log, -1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying string enumerated values WedgePosition --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"RTBeams", 
									"BeamLimitingDevicePositionSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBeams success after verifying BeamLimitingDevicePositionSequence" + ("success" if partial_success else "failure")) 
							if "BeamLimitingDevicePositionSequence" in ds2:
								BeamLimitingDevicePositionSequence_data = ds2.BeamLimitingDevicePositionSequence
								if type(BeamLimitingDevicePositionSequence_data) == Sequence:
									for i3 in range(0, len(BeamLimitingDevicePositionSequence_data)):
										if verbose:
											log.append( " BeamLimitingDevicePositionSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = BeamLimitingDevicePositionSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTBeams", "RTBeamLimitingDeviceType", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

										if "RTBeamLimitingDeviceType" not in ds3: 
											partial_success = False 
										else:
											partial_success = verifyEnumValues(ds3["RTBeamLimitingDeviceType"], 
												StringValueTable_RTBeamLimitingDeviceType, 
												verbose, log, -1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying string enumerated values RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBeams", "LeafJawPositions", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeams success after verifying LeafJawPositions --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "GantryAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying GantryAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "GantryRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying GantryRotationDirection --> "+("success" if partial_success else "failure"))

							if "GantryRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["GantryRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values GantryRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "GantryPitchAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying GantryPitchAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "GantryPitchRotationDirection", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying GantryPitchRotationDirection --> "+("success" if partial_success else "failure"))

							if "GantryPitchRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["GantryPitchRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values GantryPitchRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "BeamLimitingDeviceAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BeamLimitingDeviceAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "BeamLimitingDeviceRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying BeamLimitingDeviceRotationDirection --> "+("success" if partial_success else "failure"))

							if "BeamLimitingDeviceRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["BeamLimitingDeviceRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values BeamLimitingDeviceRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "PatientSupportAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying PatientSupportAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "PatientSupportRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying PatientSupportRotationDirection --> "+("success" if partial_success else "failure"))

							if "PatientSupportRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["PatientSupportRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values PatientSupportRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "TableTopEccentricAxisDistance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying TableTopEccentricAxisDistance --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "TableTopEccentricAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying TableTopEccentricAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "TableTopEccentricRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying TableTopEccentricRotationDirection --> "+("success" if partial_success else "failure"))

							if "TableTopEccentricRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["TableTopEccentricRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values TableTopEccentricRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "TableTopPitchAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying TableTopPitchAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "TableTopPitchRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying TableTopPitchRotationDirection --> "+("success" if partial_success else "failure"))

							if "TableTopPitchRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["TableTopPitchRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values TableTopPitchRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "TableTopRollAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying TableTopRollAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeams", "TableTopRollRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying TableTopRollRotationDirection --> "+("success" if partial_success else "failure"))

							if "TableTopRollRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["TableTopRollRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying string enumerated values TableTopRollRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTBeams", "TableTopVerticalPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying TableTopVerticalPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTBeams", "TableTopLongitudinalPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying TableTopLongitudinalPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTBeams", "TableTopLateralPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying TableTopLateralPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTBeams", "IsocenterPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying IsocenterPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "SurfaceEntryPoint", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying SurfaceEntryPoint --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeams", "SourceToSurfaceDistance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeams success after verifying SourceToSurfaceDistance --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTBrachyApplicationSetups_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTBrachyApplicationSetups")

	partial_success =  		verifyType1(ds, 
			"RTBrachyApplicationSetups", "BrachyTreatmentTechnique", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBrachyApplicationSetups success after verifying BrachyTreatmentTechnique --> "+("success" if partial_success else "failure"))

	if "BrachyTreatmentTechnique" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BrachyTreatmentTechnique"], 
			StringValueTable_BrachyTreatmentTechnique, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBrachyApplicationSetups success after verifying string enumerated values BrachyTreatmentTechnique --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTBrachyApplicationSetups", "BrachyTreatmentType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBrachyApplicationSetups success after verifying BrachyTreatmentType --> "+("success" if partial_success else "failure"))

	if "BrachyTreatmentType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["BrachyTreatmentType"], 
			StringValueTable_BrachyTreatmentType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBrachyApplicationSetups success after verifying string defined terms BrachyTreatmentType --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"RTBrachyApplicationSetups", 
			"TreatmentMachineSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTBrachyApplicationSetups success after verifying TreatmentMachineSequence" + ("success" if partial_success else "failure")) 
	if "TreatmentMachineSequence" in ds:
		TreatmentMachineSequence_data = ds.TreatmentMachineSequence
		if type(TreatmentMachineSequence_data) == Sequence:
			for i1 in range(0, len(TreatmentMachineSequence_data)):
				if verbose:
					log.append( " TreatmentMachineSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TreatmentMachineSequence_data[i1]
				partial_success =  		verifyType2(ds1, 
						"RTBrachyApplicationSetups", "TreatmentMachineName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying TreatmentMachineName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "Manufacturer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "InstitutionName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying InstitutionName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "InstitutionAddress", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying InstitutionAddress --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "InstitutionalDepartmentName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying InstitutionalDepartmentName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBrachyApplicationSetups", 
						"InstitutionalDepartmentTypeCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBrachyApplicationSetups success after verifying InstitutionalDepartmentTypeCodeSequence" + ("success" if partial_success else "failure")) 
				if "InstitutionalDepartmentTypeCodeSequence" in ds1:
					InstitutionalDepartmentTypeCodeSequence_data = ds1.InstitutionalDepartmentTypeCodeSequence
					if type(InstitutionalDepartmentTypeCodeSequence_data) == Sequence:
						for i2 in range(0, len(InstitutionalDepartmentTypeCodeSequence_data)):
							if verbose:
								log.append( " InstitutionalDepartmentTypeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = InstitutionalDepartmentTypeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "ManufacturerModelName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "DeviceSerialNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying DeviceSerialNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"RTBrachyApplicationSetups", 
			"SourceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTBrachyApplicationSetups success after verifying SourceSequence" + ("success" if partial_success else "failure")) 
	if "SourceSequence" in ds:
		SourceSequence_data = ds.SourceSequence
		if type(SourceSequence_data) == Sequence:
			for i1 in range(0, len(SourceSequence_data)):
				if verbose:
					log.append( " SourceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTBrachyApplicationSetups", "SourceNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "SourceSerialNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceSerialNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "SourceModelID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceModelID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "SourceDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachyApplicationSetups", "SourceType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "SourceManufacturer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceManufacturer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "ActiveSourceDiameter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying ActiveSourceDiameter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "ActiveSourceLength", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying ActiveSourceLength --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "MaterialID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying MaterialID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "SourceEncapsulationNominalThickness", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceEncapsulationNominalThickness --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "SourceEncapsulationNominalTransmission", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceEncapsulationNominalTransmission --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachyApplicationSetups", "SourceIsotopeName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceIsotopeName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachyApplicationSetups", "SourceIsotopeHalfLife", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceIsotopeHalfLife --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTBrachyApplicationSetups", "SourceStrengthUnits", 
						verbose, log, ElementDictionary, 
						Condition_SourceIsNotGammaEmitter, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceStrengthUnits --> "+("success" if partial_success else "failure"))

				if Condition_SourceIsNotGammaEmitter(ds1, parent_ds1, root_ds):
					if "SourceStrengthUnits" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["SourceStrengthUnits"], 
							StringValueTable_SourceStrengthUnits, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying string enumerated values SourceStrengthUnits --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachyApplicationSetups", "ReferenceAirKermaRate", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying ReferenceAirKermaRate --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTBrachyApplicationSetups", "SourceStrength", 
						verbose, log, ElementDictionary, 
						Condition_SourceIsNotGammaEmitter, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceStrength --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachyApplicationSetups", "SourceStrengthReferenceDate", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceStrengthReferenceDate --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachyApplicationSetups", "SourceStrengthReferenceTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying SourceStrengthReferenceTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"RTBrachyApplicationSetups", 
			"ApplicationSetupSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTBrachyApplicationSetups success after verifying ApplicationSetupSequence" + ("success" if partial_success else "failure")) 
	if "ApplicationSetupSequence" in ds:
		ApplicationSetupSequence_data = ds.ApplicationSetupSequence
		if type(ApplicationSetupSequence_data) == Sequence:
			for i1 in range(0, len(ApplicationSetupSequence_data)):
				if verbose:
					log.append( " ApplicationSetupSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ApplicationSetupSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTBrachyApplicationSetups", "ApplicationSetupType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying ApplicationSetupType --> "+("success" if partial_success else "failure"))

				if "ApplicationSetupType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ApplicationSetupType"], 
						StringValueTable_ApplicationSetupType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying string defined terms ApplicationSetupType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachyApplicationSetups", "ApplicationSetupNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying ApplicationSetupNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "ApplicationSetupName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying ApplicationSetupName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "ApplicationSetupManufacturer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying ApplicationSetupManufacturer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "TemplateNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying TemplateNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "TemplateType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying TemplateType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachyApplicationSetups", "TemplateName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying TemplateName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBrachyApplicationSetups", 
						"ReferencedReferenceImageSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBrachyApplicationSetups success after verifying ReferencedReferenceImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedReferenceImageSequence" in ds1:
					ReferencedReferenceImageSequence_data = ds1.ReferencedReferenceImageSequence
					if type(ReferencedReferenceImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedReferenceImageSequence_data)):
							if verbose:
								log.append( " ReferencedReferenceImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedReferenceImageSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"RTBrachyApplicationSetups", "TotalReferenceAirKerma", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachyApplicationSetups success after verifying TotalReferenceAirKerma --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBrachyApplicationSetups", 
						"BrachyAccessoryDeviceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBrachyApplicationSetups success after verifying BrachyAccessoryDeviceSequence" + ("success" if partial_success else "failure")) 
				if "BrachyAccessoryDeviceSequence" in ds1:
					BrachyAccessoryDeviceSequence_data = ds1.BrachyAccessoryDeviceSequence
					if type(BrachyAccessoryDeviceSequence_data) == Sequence:
						for i2 in range(0, len(BrachyAccessoryDeviceSequence_data)):
							if verbose:
								log.append( " BrachyAccessoryDeviceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = BrachyAccessoryDeviceSequence_data[i2]
							partial_success =  		verifyType2(ds2, 
									"RTBrachyApplicationSetups", "BrachyAccessoryDeviceNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying BrachyAccessoryDeviceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBrachyApplicationSetups", "BrachyAccessoryDeviceID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying BrachyAccessoryDeviceID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBrachyApplicationSetups", "BrachyAccessoryDeviceType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying BrachyAccessoryDeviceType --> "+("success" if partial_success else "failure"))

							if "BrachyAccessoryDeviceType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["BrachyAccessoryDeviceType"], 
									StringValueTable_BrachyAccessoryDeviceType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying string defined terms BrachyAccessoryDeviceType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBrachyApplicationSetups", "BrachyAccessoryDeviceName", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying BrachyAccessoryDeviceName --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBrachyApplicationSetups", "MaterialID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying MaterialID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBrachyApplicationSetups", "BrachyAccessoryDeviceNominalThickness", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying BrachyAccessoryDeviceNominalThickness --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBrachyApplicationSetups", "BrachyAccessoryDeviceNominalTransmission", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying BrachyAccessoryDeviceNominalTransmission --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBrachyApplicationSetups", "ReferencedROINumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"RTBrachyApplicationSetups", 
						"ChannelSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBrachyApplicationSetups success after verifying ChannelSequence" + ("success" if partial_success else "failure")) 
				if "ChannelSequence" in ds1:
					ChannelSequence_data = ds1.ChannelSequence
					if type(ChannelSequence_data) == Sequence:
						for i2 in range(0, len(ChannelSequence_data)):
							if verbose:
								log.append( " ChannelSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ChannelSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTBrachyApplicationSetups", "ChannelNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying ChannelNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBrachyApplicationSetups", "ChannelLength", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying ChannelLength --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBrachyApplicationSetups", "ChannelTotalTime", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying ChannelTotalTime --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBrachyApplicationSetups", "SourceMovementType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying SourceMovementType --> "+("success" if partial_success else "failure"))

							if "SourceMovementType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["SourceMovementType"], 
									StringValueTable_SourceMovementType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying string defined terms SourceMovementType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachyApplicationSetups", "NumberOfPulses", 
									verbose, log, ElementDictionary, 
									Condition_BrachyTreatmentTypePDR, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying NumberOfPulses --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachyApplicationSetups", "PulseRepetitionInterval", 
									verbose, log, ElementDictionary, 
									Condition_BrachyTreatmentTypePDR, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying PulseRepetitionInterval --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBrachyApplicationSetups", "SourceApplicatorNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying SourceApplicatorNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTBrachyApplicationSetups", "SourceApplicatorID", 
									verbose, log, ElementDictionary, 
									Condition_SourceApplicatorNumberPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying SourceApplicatorID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachyApplicationSetups", "SourceApplicatorType", 
									verbose, log, ElementDictionary, 
									Condition_SourceApplicatorNumberPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying SourceApplicatorType --> "+("success" if partial_success else "failure"))

							if Condition_SourceApplicatorNumberPresent(ds2, parent_ds2, root_ds):
								if "SourceApplicatorType" not in ds2: 
									partial_success = False 
								else: 
									partial_success = verifyDefinedTerms(ds2["SourceApplicatorType"], 
										StringValueTable_SourceApplicatorType, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying string defined terms SourceApplicatorType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBrachyApplicationSetups", "SourceApplicatorName", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying SourceApplicatorName --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachyApplicationSetups", "SourceApplicatorLength", 
									verbose, log, ElementDictionary, 
									Condition_SourceApplicatorNumberPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying SourceApplicatorLength --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBrachyApplicationSetups", "SourceApplicatorManufacturer", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying SourceApplicatorManufacturer --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBrachyApplicationSetups", "MaterialID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying MaterialID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBrachyApplicationSetups", "SourceApplicatorWallNominalThickness", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying SourceApplicatorWallNominalThickness --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBrachyApplicationSetups", "SourceApplicatorWallNominalTransmission", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying SourceApplicatorWallNominalTransmission --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachyApplicationSetups", "SourceApplicatorStepSize", 
									verbose, log, ElementDictionary, 
									Condition_SourceMovementTypeStepwise, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying SourceApplicatorStepSize --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTBrachyApplicationSetups", "ReferencedROINumber", 
									verbose, log, ElementDictionary, 
									Condition_SourceApplicatorNumberPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBrachyApplicationSetups", "TransferTubeNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying TransferTubeNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTBrachyApplicationSetups", "TransferTubeLength", 
									verbose, log, ElementDictionary, 
									Condition_TransferTubeNumberNotNull, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying TransferTubeLength --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTBrachyApplicationSetups", 
									"ChannelShieldSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBrachyApplicationSetups success after verifying ChannelShieldSequence" + ("success" if partial_success else "failure")) 
							if "ChannelShieldSequence" in ds2:
								ChannelShieldSequence_data = ds2.ChannelShieldSequence
								if type(ChannelShieldSequence_data) == Sequence:
									for i3 in range(0, len(ChannelShieldSequence_data)):
										if verbose:
											log.append( " ChannelShieldSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ChannelShieldSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTBrachyApplicationSetups", "ChannelShieldNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachyApplicationSetups success after verifying ChannelShieldNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType2(ds3, 
												"RTBrachyApplicationSetups", "ChannelShieldID", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachyApplicationSetups success after verifying ChannelShieldID --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBrachyApplicationSetups", "ChannelShieldName", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachyApplicationSetups success after verifying ChannelShieldName --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBrachyApplicationSetups", "MaterialID", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachyApplicationSetups success after verifying MaterialID --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBrachyApplicationSetups", "ChannelShieldNominalThickness", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachyApplicationSetups success after verifying ChannelShieldNominalThickness --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBrachyApplicationSetups", "ChannelShieldNominalTransmission", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachyApplicationSetups success after verifying ChannelShieldNominalTransmission --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType2(ds3, 
												"RTBrachyApplicationSetups", "ReferencedROINumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachyApplicationSetups success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBrachyApplicationSetups", "ReferencedSourceNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying ReferencedSourceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBrachyApplicationSetups", "NumberOfControlPoints", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying NumberOfControlPoints --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachyApplicationSetups", "FinalCumulativeTimeWeight", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachyApplicationSetups success after verifying FinalCumulativeTimeWeight --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1(ds2, 
									"RTBrachyApplicationSetups", 
									"BrachyControlPointSequence", 
									verbose, log, ElementDictionary, 
															2, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBrachyApplicationSetups success after verifying BrachyControlPointSequence" + ("success" if partial_success else "failure")) 
							if "BrachyControlPointSequence" in ds2:
								BrachyControlPointSequence_data = ds2.BrachyControlPointSequence
								if type(BrachyControlPointSequence_data) == Sequence:
									for i3 in range(0, len(BrachyControlPointSequence_data)):
										if verbose:
											log.append( " BrachyControlPointSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = BrachyControlPointSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTBrachyApplicationSetups", "ControlPointIndex", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachyApplicationSetups success after verifying ControlPointIndex --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType2(ds3, 
												"RTBrachyApplicationSetups", "CumulativeTimeWeight", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachyApplicationSetups success after verifying CumulativeTimeWeight --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBrachyApplicationSetups", "ControlPointRelativePosition", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachyApplicationSetups success after verifying ControlPointRelativePosition --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBrachyApplicationSetups", "ControlPoint3DPosition", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachyApplicationSetups success after verifying ControlPoint3DPosition --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBrachyApplicationSetups", "ControlPointOrientation", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachyApplicationSetups success after verifying ControlPointOrientation --> "+("success" if partial_success else "failure"))

										partial_success = verifyType3(ds3, 
												"RTBrachyApplicationSetups", 
												"BrachyReferencedDoseReferenceSequence", 
												verbose, log, ElementDictionary, 
																					1, 0xFFFFFFFF)
										global_success = global_success and partial_success 
										if verbose:
											log.append( "RTBrachyApplicationSetups success after verifying BrachyReferencedDoseReferenceSequence" + ("success" if partial_success else "failure")) 
										if "BrachyReferencedDoseReferenceSequence" in ds3:
											BrachyReferencedDoseReferenceSequence_data = ds3.BrachyReferencedDoseReferenceSequence
											if type(BrachyReferencedDoseReferenceSequence_data) == Sequence:
												for i4 in range(0, len(BrachyReferencedDoseReferenceSequence_data)):
													if verbose:
														log.append( " BrachyReferencedDoseReferenceSequence item [{}]".format(i4+1))
													parent_ds4 = ds3
													ds4 = BrachyReferencedDoseReferenceSequence_data[i4]
													partial_success =  		verifyType1(ds4, 
															"RTBrachyApplicationSetups", "ReferencedDoseReferenceNumber", 
															verbose, log, ElementDictionary, 
																											0, 0)
													global_success = global_success and partial_success 
													if verbose:
														log.append( " RTBrachyApplicationSetups success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

													partial_success =  		verifyType1(ds4, 
															"RTBrachyApplicationSetups", "CumulativeDoseReferenceCoefficient", 
															verbose, log, ElementDictionary, 
																											0, 0)
													global_success = global_success and partial_success 
													if verbose:
														log.append( " RTBrachyApplicationSetups success after verifying CumulativeDoseReferenceCoefficient --> "+("success" if partial_success else "failure"))

	return global_success

def Module_Approval_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"Approval")

	partial_success =  		verifyType1(ds, 
			"Approval", "ApprovalStatus", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Approval success after verifying ApprovalStatus --> "+("success" if partial_success else "failure"))

	if "ApprovalStatus" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ApprovalStatus"], 
			StringValueTable_ApprovalStatus, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Approval success after verifying string enumerated values ApprovalStatus --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"Approval", "ReviewDate", 
			verbose, log, ElementDictionary, 
			Condition_ApprovalStatusApprovedOrRejected, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Approval success after verifying ReviewDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"Approval", "ReviewTime", 
			verbose, log, ElementDictionary, 
			Condition_ApprovalStatusApprovedOrRejected, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Approval success after verifying ReviewTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"Approval", "ReviewerName", 
			verbose, log, ElementDictionary, 
			Condition_ApprovalStatusApprovedOrRejected, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Approval success after verifying ReviewerName --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTGeneralTreatmentRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTGeneralTreatmentRecord")

	partial_success =  		verifyType1(ds, 
			"RTGeneralTreatmentRecord", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralTreatmentRecord success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTGeneralTreatmentRecord", "TreatmentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralTreatmentRecord success after verifying TreatmentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTGeneralTreatmentRecord", "TreatmentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTGeneralTreatmentRecord success after verifying TreatmentTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"RTGeneralTreatmentRecord", 
			"ReferencedRTPlanSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTGeneralTreatmentRecord success after verifying ReferencedRTPlanSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedRTPlanSequence" in ds:
		ReferencedRTPlanSequence_data = ds.ReferencedRTPlanSequence
		if type(ReferencedRTPlanSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedRTPlanSequence_data)):
				if verbose:
					log.append( " ReferencedRTPlanSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedRTPlanSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTGeneralTreatmentRecord success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"RTGeneralTreatmentRecord", 
			"ReferencedTreatmentRecordSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTGeneralTreatmentRecord success after verifying ReferencedTreatmentRecordSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedTreatmentRecordSequence" in ds:
		ReferencedTreatmentRecordSequence_data = ds.ReferencedTreatmentRecordSequence
		if type(ReferencedTreatmentRecordSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedTreatmentRecordSequence_data)):
				if verbose:
					log.append( " ReferencedTreatmentRecordSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedTreatmentRecordSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTGeneralTreatmentRecord success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_RTTreatmentMachineRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTTreatmentMachineRecord")

	partial_success = verifyType1(ds, 
			"RTTreatmentMachineRecord", 
			"TreatmentMachineSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTTreatmentMachineRecord success after verifying TreatmentMachineSequence" + ("success" if partial_success else "failure")) 
	if "TreatmentMachineSequence" in ds:
		TreatmentMachineSequence_data = ds.TreatmentMachineSequence
		if type(TreatmentMachineSequence_data) == Sequence:
			for i1 in range(0, len(TreatmentMachineSequence_data)):
				if verbose:
					log.append( " TreatmentMachineSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TreatmentMachineSequence_data[i1]
				partial_success =  		verifyType2(ds1, 
						"RTTreatmentMachineRecord", "TreatmentMachineName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentMachineRecord success after verifying TreatmentMachineName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTTreatmentMachineRecord", "Manufacturer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentMachineRecord success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTTreatmentMachineRecord", "InstitutionName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentMachineRecord success after verifying InstitutionName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTTreatmentMachineRecord", "InstitutionAddress", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentMachineRecord success after verifying InstitutionAddress --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTTreatmentMachineRecord", "InstitutionalDepartmentName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentMachineRecord success after verifying InstitutionalDepartmentName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTTreatmentMachineRecord", 
						"InstitutionalDepartmentTypeCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTTreatmentMachineRecord success after verifying InstitutionalDepartmentTypeCodeSequence" + ("success" if partial_success else "failure")) 
				if "InstitutionalDepartmentTypeCodeSequence" in ds1:
					InstitutionalDepartmentTypeCodeSequence_data = ds1.InstitutionalDepartmentTypeCodeSequence
					if type(InstitutionalDepartmentTypeCodeSequence_data) == Sequence:
						for i2 in range(0, len(InstitutionalDepartmentTypeCodeSequence_data)):
							if verbose:
								log.append( " InstitutionalDepartmentTypeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = InstitutionalDepartmentTypeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTTreatmentMachineRecord success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"RTTreatmentMachineRecord", "ManufacturerModelName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentMachineRecord success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTTreatmentMachineRecord", "DeviceSerialNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentMachineRecord success after verifying DeviceSerialNumber --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MeasuredDoseReferenceRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MeasuredDoseReferenceRecord")

	partial_success = verifyType1(ds, 
			"MeasuredDoseReferenceRecord", 
			"MeasuredDoseReferenceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MeasuredDoseReferenceRecord success after verifying MeasuredDoseReferenceSequence" + ("success" if partial_success else "failure")) 
	if "MeasuredDoseReferenceSequence" in ds:
		MeasuredDoseReferenceSequence_data = ds.MeasuredDoseReferenceSequence
		if type(MeasuredDoseReferenceSequence_data) == Sequence:
			for i1 in range(0, len(MeasuredDoseReferenceSequence_data)):
				if verbose:
					log.append( " MeasuredDoseReferenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MeasuredDoseReferenceSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"MeasuredDoseReferenceRecord", "ReferencedDoseReferenceNumber", 
						verbose, log, ElementDictionary, 
						Condition_MeasuredDoseReferenceNumberNotPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MeasuredDoseReferenceRecord success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MeasuredDoseReferenceRecord", "MeasuredDoseReferenceNumber", 
						verbose, log, ElementDictionary, 
						Condition_ReferencedDoseReferenceNumberNotPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MeasuredDoseReferenceRecord success after verifying MeasuredDoseReferenceNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MeasuredDoseReferenceRecord", "DoseUnits", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MeasuredDoseReferenceRecord success after verifying DoseUnits --> "+("success" if partial_success else "failure"))

				if "DoseUnits" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["DoseUnits"], 
						StringValueTable_DoseUnits, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MeasuredDoseReferenceRecord success after verifying string enumerated values DoseUnits --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"MeasuredDoseReferenceRecord", "MeasuredDoseValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MeasuredDoseReferenceRecord success after verifying MeasuredDoseValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"MeasuredDoseReferenceRecord", "MeasuredDoseType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MeasuredDoseReferenceRecord success after verifying MeasuredDoseType --> "+("success" if partial_success else "failure"))

				if "MeasuredDoseType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["MeasuredDoseType"], 
						StringValueTable_MeasuredDoseType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MeasuredDoseReferenceRecord success after verifying string defined terms MeasuredDoseType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"MeasuredDoseReferenceRecord", "MeasuredDoseDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MeasuredDoseReferenceRecord success after verifying MeasuredDoseDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Module_CalculatedDoseReferenceRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"CalculatedDoseReferenceRecord")

	partial_success = verifyType1(ds, 
			"CalculatedDoseReferenceRecord", 
			"CalculatedDoseReferenceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CalculatedDoseReferenceRecord success after verifying CalculatedDoseReferenceSequence" + ("success" if partial_success else "failure")) 
	if "CalculatedDoseReferenceSequence" in ds:
		CalculatedDoseReferenceSequence_data = ds.CalculatedDoseReferenceSequence
		if type(CalculatedDoseReferenceSequence_data) == Sequence:
			for i1 in range(0, len(CalculatedDoseReferenceSequence_data)):
				if verbose:
					log.append( " CalculatedDoseReferenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CalculatedDoseReferenceSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"CalculatedDoseReferenceRecord", "ReferencedDoseReferenceNumber", 
						verbose, log, ElementDictionary, 
						Condition_CalculatedDoseReferenceNumberNotPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CalculatedDoseReferenceRecord success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CalculatedDoseReferenceRecord", "CalculatedDoseReferenceNumber", 
						verbose, log, ElementDictionary, 
						Condition_ReferencedDoseReferenceNumberNotPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CalculatedDoseReferenceRecord success after verifying CalculatedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"CalculatedDoseReferenceRecord", "CalculatedDoseReferenceDoseValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CalculatedDoseReferenceRecord success after verifying CalculatedDoseReferenceDoseValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"CalculatedDoseReferenceRecord", "CalculatedDoseReferenceDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CalculatedDoseReferenceRecord success after verifying CalculatedDoseReferenceDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTBeamsSessionRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTBeamsSessionRecord")

	partial_success =  		verifyType3(ds, 
			"RTBeamsSessionRecord", "ReferencedFractionGroupNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBeamsSessionRecord success after verifying ReferencedFractionGroupNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTBeamsSessionRecord", "NumberOfFractionsPlanned", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBeamsSessionRecord success after verifying NumberOfFractionsPlanned --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTBeamsSessionRecord", "PrimaryDosimeterUnit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBeamsSessionRecord success after verifying PrimaryDosimeterUnit --> "+("success" if partial_success else "failure"))

	if "PrimaryDosimeterUnit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PrimaryDosimeterUnit"], 
			StringValueTable_PrimaryDosimeterUnit, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBeamsSessionRecord success after verifying string enumerated values PrimaryDosimeterUnit --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"RTBeamsSessionRecord", 
			"TreatmentSessionBeamSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTBeamsSessionRecord success after verifying TreatmentSessionBeamSequence" + ("success" if partial_success else "failure")) 
	if "TreatmentSessionBeamSequence" in ds:
		TreatmentSessionBeamSequence_data = ds.TreatmentSessionBeamSequence
		if type(TreatmentSessionBeamSequence_data) == Sequence:
			for i1 in range(0, len(TreatmentSessionBeamSequence_data)):
				if verbose:
					log.append( " TreatmentSessionBeamSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TreatmentSessionBeamSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"RTBeamsSessionRecord", "ReferencedBeamNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying ReferencedBeamNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeamsSessionRecord", "BeamName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying BeamName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeamsSessionRecord", "BeamDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying BeamDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBeamsSessionRecord", "BeamType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying BeamType --> "+("success" if partial_success else "failure"))

				if "BeamType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["BeamType"], 
						StringValueTable_BeamType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying string enumerated values BeamType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBeamsSessionRecord", "RadiationType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying RadiationType --> "+("success" if partial_success else "failure"))

				if "RadiationType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["RadiationType"], 
						StringValueTable_RadiationType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying string defined terms RadiationType --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeamsSessionRecord", 
						"PrimaryFluenceModeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeamsSessionRecord success after verifying PrimaryFluenceModeSequence" + ("success" if partial_success else "failure")) 
				if "PrimaryFluenceModeSequence" in ds1:
					PrimaryFluenceModeSequence_data = ds1.PrimaryFluenceModeSequence
					if type(PrimaryFluenceModeSequence_data) == Sequence:
						for i2 in range(0, len(PrimaryFluenceModeSequence_data)):
							if verbose:
								log.append( " PrimaryFluenceModeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PrimaryFluenceModeSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTBeamsSessionRecord", "FluenceMode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying FluenceMode --> "+("success" if partial_success else "failure"))

							if "FluenceMode" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["FluenceMode"], 
									StringValueTable_FluenceMode, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying string enumerated values FluenceMode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "FluenceModeID", 
									verbose, log, ElementDictionary, 
									Condition_FluenceModeIsNonStandard, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying FluenceModeID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTBeamsSessionRecord", "HighDoseTechniqueType", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying HighDoseTechniqueType --> "+("success" if partial_success else "failure"))

				if "HighDoseTechniqueType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["HighDoseTechniqueType"], 
						StringValueTable_HighDoseTechniqueType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying string defined terms HighDoseTechniqueType --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeamsSessionRecord", 
						"ReferencedVerificationImageSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeamsSessionRecord success after verifying ReferencedVerificationImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedVerificationImageSequence" in ds1:
					ReferencedVerificationImageSequence_data = ds1.ReferencedVerificationImageSequence
					if type(ReferencedVerificationImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedVerificationImageSequence_data)):
							if verbose:
								log.append( " ReferencedVerificationImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedVerificationImageSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "StartMeterset", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying StartMeterset --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "EndMeterset", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying EndMeterset --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeamsSessionRecord", 
						"ReferencedMeasuredDoseReferenceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeamsSessionRecord success after verifying ReferencedMeasuredDoseReferenceSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedMeasuredDoseReferenceSequence" in ds1:
					ReferencedMeasuredDoseReferenceSequence_data = ds1.ReferencedMeasuredDoseReferenceSequence
					if type(ReferencedMeasuredDoseReferenceSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedMeasuredDoseReferenceSequence_data)):
							if verbose:
								log.append( " ReferencedMeasuredDoseReferenceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedMeasuredDoseReferenceSequence_data[i2]
							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "ReferencedDoseReferenceNumber", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedMeasuredDoseReferenceNumberNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "ReferencedMeasuredDoseReferenceNumber", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedDoseReferenceNumberNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying ReferencedMeasuredDoseReferenceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeamsSessionRecord", "MeasuredDoseValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying MeasuredDoseValue --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeamsSessionRecord", 
						"ReferencedCalculatedDoseReferenceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeamsSessionRecord success after verifying ReferencedCalculatedDoseReferenceSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedCalculatedDoseReferenceSequence" in ds1:
					ReferencedCalculatedDoseReferenceSequence_data = ds1.ReferencedCalculatedDoseReferenceSequence
					if type(ReferencedCalculatedDoseReferenceSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedCalculatedDoseReferenceSequence_data)):
							if verbose:
								log.append( " ReferencedCalculatedDoseReferenceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedCalculatedDoseReferenceSequence_data[i2]
							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "ReferencedDoseReferenceNumber", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedCalculatedDoseReferenceNumberNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "ReferencedCalculatedDoseReferenceNumber", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedDoseReferenceNumberNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying ReferencedCalculatedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeamsSessionRecord", "CalculatedDoseReferenceDoseValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying CalculatedDoseReferenceDoseValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeamsSessionRecord", "SourceAxisDistance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying SourceAxisDistance --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"RTBeamsSessionRecord", 
						"BeamLimitingDeviceLeafPairsSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeamsSessionRecord success after verifying BeamLimitingDeviceLeafPairsSequence" + ("success" if partial_success else "failure")) 
				if "BeamLimitingDeviceLeafPairsSequence" in ds1:
					BeamLimitingDeviceLeafPairsSequence_data = ds1.BeamLimitingDeviceLeafPairsSequence
					if type(BeamLimitingDeviceLeafPairsSequence_data) == Sequence:
						for i2 in range(0, len(BeamLimitingDeviceLeafPairsSequence_data)):
							if verbose:
								log.append( " BeamLimitingDeviceLeafPairsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = BeamLimitingDeviceLeafPairsSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTBeamsSessionRecord", "RTBeamLimitingDeviceType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							if "RTBeamLimitingDeviceType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["RTBeamLimitingDeviceType"], 
									StringValueTable_RTBeamLimitingDeviceType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying string enumerated values RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeamsSessionRecord", "NumberOfLeafJawPairs", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying NumberOfLeafJawPairs --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeamsSessionRecord", "ReferencedPatientSetupNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying ReferencedPatientSetupNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBeamsSessionRecord", "NumberOfWedges", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying NumberOfWedges --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTBeamsSessionRecord", 
						"RecordedWedgeSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfWedgesNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeamsSessionRecord success after verifying RecordedWedgeSequence" + ("success" if partial_success else "failure")) 
				if "RecordedWedgeSequence" in ds1:
					RecordedWedgeSequence_data = ds1.RecordedWedgeSequence
					if type(RecordedWedgeSequence_data) == Sequence:
						for i2 in range(0, len(RecordedWedgeSequence_data)):
							if verbose:
								log.append( " RecordedWedgeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RecordedWedgeSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "WedgeNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying WedgeNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeamsSessionRecord", "WedgeType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying WedgeType --> "+("success" if partial_success else "failure"))

							if "WedgeType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["WedgeType"], 
									StringValueTable_WedgeType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying string defined terms WedgeType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "WedgeID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying WedgeID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "WedgeAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying WedgeAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "WedgeOrientation", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying WedgeOrientation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTBeamsSessionRecord", "NumberOfCompensators", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying NumberOfCompensators --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeamsSessionRecord", 
						"RecordedCompensatorSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeamsSessionRecord success after verifying RecordedCompensatorSequence" + ("success" if partial_success else "failure")) 
				if "RecordedCompensatorSequence" in ds1:
					RecordedCompensatorSequence_data = ds1.RecordedCompensatorSequence
					if type(RecordedCompensatorSequence_data) == Sequence:
						for i2 in range(0, len(RecordedCompensatorSequence_data)):
							if verbose:
								log.append( " RecordedCompensatorSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RecordedCompensatorSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTBeamsSessionRecord", "ReferencedCompensatorNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying ReferencedCompensatorNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeamsSessionRecord", "CompensatorType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying CompensatorType --> "+("success" if partial_success else "failure"))

							if "CompensatorType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["CompensatorType"], 
									StringValueTable_CompensatorType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying string defined terms CompensatorType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "CompensatorID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying CompensatorID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "CompensatorTrayID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying CompensatorTrayID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "TrayAccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TrayAccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTBeamsSessionRecord", "NumberOfBoli", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying NumberOfBoli --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeamsSessionRecord", 
						"ReferencedBolusSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeamsSessionRecord success after verifying ReferencedBolusSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedBolusSequence" in ds1:
					ReferencedBolusSequence_data = ds1.ReferencedBolusSequence
					if type(ReferencedBolusSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedBolusSequence_data)):
							if verbose:
								log.append( " ReferencedBolusSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedBolusSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTBeamsSessionRecord", "ReferencedROINumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTBeamsSessionRecord", "NumberOfBlocks", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying NumberOfBlocks --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeamsSessionRecord", 
						"RecordedBlockSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeamsSessionRecord success after verifying RecordedBlockSequence" + ("success" if partial_success else "failure")) 
				if "RecordedBlockSequence" in ds1:
					RecordedBlockSequence_data = ds1.RecordedBlockSequence
					if type(RecordedBlockSequence_data) == Sequence:
						for i2 in range(0, len(RecordedBlockSequence_data)):
							if verbose:
								log.append( " RecordedBlockSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RecordedBlockSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "BlockTrayID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying BlockTrayID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "TrayAccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TrayAccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "ReferencedBlockNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying ReferencedBlockNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeamsSessionRecord", "BlockName", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying BlockName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBeamsSessionRecord", 
						"ApplicatorSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeamsSessionRecord success after verifying ApplicatorSequence" + ("success" if partial_success else "failure")) 
				if "ApplicatorSequence" in ds1:
					ApplicatorSequence_data = ds1.ApplicatorSequence
					if type(ApplicatorSequence_data) == Sequence:
						for i2 in range(0, len(ApplicatorSequence_data)):
							if verbose:
								log.append( " ApplicatorSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ApplicatorSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTBeamsSessionRecord", "ApplicatorID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying ApplicatorID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeamsSessionRecord", "ApplicatorType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying ApplicatorType --> "+("success" if partial_success else "failure"))

							if "ApplicatorType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["ApplicatorType"], 
									StringValueTable_ApplicatorType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying string defined terms ApplicatorType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "ApplicatorDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying ApplicatorDescription --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTBeamsSessionRecord", 
									"GeneralAccessorySequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBeamsSessionRecord success after verifying GeneralAccessorySequence" + ("success" if partial_success else "failure")) 
							if "GeneralAccessorySequence" in ds2:
								GeneralAccessorySequence_data = ds2.GeneralAccessorySequence
								if type(GeneralAccessorySequence_data) == Sequence:
									for i3 in range(0, len(GeneralAccessorySequence_data)):
										if verbose:
											log.append( " GeneralAccessorySequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = GeneralAccessorySequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTBeamsSessionRecord", "GeneralAccessoryNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying GeneralAccessoryNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBeamsSessionRecord", "GeneralAccessoryID", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying GeneralAccessoryID --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBeamsSessionRecord", "GeneralAccessoryDescription", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying GeneralAccessoryDescription --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBeamsSessionRecord", "GeneralAccessoryType", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying GeneralAccessoryType --> "+("success" if partial_success else "failure"))

										if "GeneralAccessoryType" not in ds3: 
											partial_success = False 
										else: 
											partial_success = verifyDefinedTerms(ds3["GeneralAccessoryType"], 
												StringValueTable_RTGeneralAccessoryType, 
												verbose, log, -1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying string defined terms GeneralAccessoryType --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBeamsSessionRecord", "AccessoryCode", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBeamsSessionRecord", "SourceToGeneralAccessoryDistance", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying SourceToGeneralAccessoryDistance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTBeamsSessionRecord", "CurrentFractionNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying CurrentFractionNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTBeamsSessionRecord", "TreatmentDeliveryType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying TreatmentDeliveryType --> "+("success" if partial_success else "failure"))

				if "TreatmentDeliveryType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["TreatmentDeliveryType"], 
						StringValueTable_TreatmentDeliveryType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying string defined terms TreatmentDeliveryType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBeamsSessionRecord", "TreatmentTerminationStatus", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying TreatmentTerminationStatus --> "+("success" if partial_success else "failure"))

				if "TreatmentTerminationStatus" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["TreatmentTerminationStatus"], 
						StringValueTable_TreatmentTerminationStatus, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying string enumerated values TreatmentTerminationStatus --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeamsSessionRecord", "TreatmentTerminationCode", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying TreatmentTerminationCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTBeamsSessionRecord", "TreatmentVerificationStatus", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying TreatmentVerificationStatus --> "+("success" if partial_success else "failure"))

				if "TreatmentVerificationStatus" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["TreatmentVerificationStatus"], 
						StringValueTable_TreatmentVerificationStatus, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying string enumerated values TreatmentVerificationStatus --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeamsSessionRecord", "SpecifiedPrimaryMeterset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying SpecifiedPrimaryMeterset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeamsSessionRecord", "SpecifiedSecondaryMeterset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying SpecifiedSecondaryMeterset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeamsSessionRecord", "DeliveredPrimaryMeterset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying DeliveredPrimaryMeterset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeamsSessionRecord", "DeliveredSecondaryMeterset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying DeliveredSecondaryMeterset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeamsSessionRecord", "SpecifiedTreatmentTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying SpecifiedTreatmentTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBeamsSessionRecord", "DeliveredTreatmentTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying DeliveredTreatmentTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBeamsSessionRecord", "NumberOfControlPoints", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBeamsSessionRecord success after verifying NumberOfControlPoints --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"RTBeamsSessionRecord", 
						"ControlPointDeliverySequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBeamsSessionRecord success after verifying ControlPointDeliverySequence" + ("success" if partial_success else "failure")) 
				if "ControlPointDeliverySequence" in ds1:
					ControlPointDeliverySequence_data = ds1.ControlPointDeliverySequence
					if type(ControlPointDeliverySequence_data) == Sequence:
						for i2 in range(0, len(ControlPointDeliverySequence_data)):
							if verbose:
								log.append( " ControlPointDeliverySequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ControlPointDeliverySequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "ReferencedControlPointIndex", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying ReferencedControlPointIndex --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeamsSessionRecord", "TreatmentControlPointDate", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TreatmentControlPointDate --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeamsSessionRecord", "TreatmentControlPointTime", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TreatmentControlPointTime --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeamsSessionRecord", "SpecifiedMeterset", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying SpecifiedMeterset --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBeamsSessionRecord", "DeliveredMeterset", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying DeliveredMeterset --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeamsSessionRecord", "DoseRateSet", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying DoseRateSet --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBeamsSessionRecord", "DoseRateDelivered", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying DoseRateDelivered --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "NominalBeamEnergy", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying NominalBeamEnergy --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "NominalBeamEnergyUnit", 
									verbose, log, ElementDictionary, 
									Condition_NominalBeamEnergyIsPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying NominalBeamEnergyUnit --> "+("success" if partial_success else "failure"))

							if Condition_NominalBeamEnergyIsPresent(ds2, parent_ds2, root_ds):
								if "NominalBeamEnergyUnit" not in ds2: 
									partial_success = False 
								else: 
									partial_success = verifyDefinedTerms(ds2["NominalBeamEnergyUnit"], 
										StringValueTable_NominalBeamEnergyUnit, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying string defined terms NominalBeamEnergyUnit --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTBeamsSessionRecord", 
									"WedgePositionSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBeamsSessionRecord success after verifying WedgePositionSequence" + ("success" if partial_success else "failure")) 
							if "WedgePositionSequence" in ds2:
								WedgePositionSequence_data = ds2.WedgePositionSequence
								if type(WedgePositionSequence_data) == Sequence:
									for i3 in range(0, len(WedgePositionSequence_data)):
										if verbose:
											log.append( " WedgePositionSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = WedgePositionSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTBeamsSessionRecord", "ReferencedWedgeNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying ReferencedWedgeNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBeamsSessionRecord", "WedgePosition", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying WedgePosition --> "+("success" if partial_success else "failure"))

										if "WedgePosition" not in ds3: 
											partial_success = False 
										else:
											partial_success = verifyEnumValues(ds3["WedgePosition"], 
												StringValueTable_WedgePosition, 
												verbose, log, -1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying string enumerated values WedgePosition --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"RTBeamsSessionRecord", 
									"BeamLimitingDevicePositionSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBeamsSessionRecord success after verifying BeamLimitingDevicePositionSequence" + ("success" if partial_success else "failure")) 
							if "BeamLimitingDevicePositionSequence" in ds2:
								BeamLimitingDevicePositionSequence_data = ds2.BeamLimitingDevicePositionSequence
								if type(BeamLimitingDevicePositionSequence_data) == Sequence:
									for i3 in range(0, len(BeamLimitingDevicePositionSequence_data)):
										if verbose:
											log.append( " BeamLimitingDevicePositionSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = BeamLimitingDevicePositionSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTBeamsSessionRecord", "RTBeamLimitingDeviceType", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

										if "RTBeamLimitingDeviceType" not in ds3: 
											partial_success = False 
										else:
											partial_success = verifyEnumValues(ds3["RTBeamLimitingDeviceType"], 
												StringValueTable_RTBeamLimitingDeviceType, 
												verbose, log, -1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying string enumerated values RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBeamsSessionRecord", "LeafJawPositions", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying LeafJawPositions --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "GantryAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying GantryAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "GantryRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying GantryRotationDirection --> "+("success" if partial_success else "failure"))

							if "GantryRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["GantryRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying string enumerated values GantryRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "GantryPitchAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying GantryPitchAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "GantryPitchRotationDirection", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying GantryPitchRotationDirection --> "+("success" if partial_success else "failure"))

							if "GantryPitchRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["GantryPitchRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying string enumerated values GantryPitchRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "BeamStopperPosition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying BeamStopperPosition --> "+("success" if partial_success else "failure"))

							if "BeamStopperPosition" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["BeamStopperPosition"], 
									StringValueTable_BeamStopperPosition, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying string enumerated values BeamStopperPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "BeamLimitingDeviceAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying BeamLimitingDeviceAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "BeamLimitingDeviceRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying BeamLimitingDeviceRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "PatientSupportAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying PatientSupportAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "PatientSupportRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying PatientSupportRotationDirection --> "+("success" if partial_success else "failure"))

							if "PatientSupportRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["PatientSupportRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying string enumerated values PatientSupportRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBeamsSessionRecord", "TableTopEccentricAxisDistance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TableTopEccentricAxisDistance --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "TableTopEccentricAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TableTopEccentricAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "TableTopEccentricRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TableTopEccentricRotationDirection --> "+("success" if partial_success else "failure"))

							if "TableTopEccentricRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["TableTopEccentricRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying string enumerated values TableTopEccentricRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "TableTopPitchAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TableTopPitchAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "TableTopPitchRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TableTopPitchRotationDirection --> "+("success" if partial_success else "failure"))

							if "TableTopPitchRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["TableTopPitchRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying string enumerated values TableTopPitchRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "TableTopRollAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TableTopRollAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBeamsSessionRecord", "TableTopRollRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TableTopRollRotationDirection --> "+("success" if partial_success else "failure"))

							if "TableTopRollRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["TableTopRollRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying string enumerated values TableTopRollRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTBeamsSessionRecord", "TableTopVerticalPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TableTopVerticalPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTBeamsSessionRecord", "TableTopLongitudinalPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TableTopLongitudinalPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTBeamsSessionRecord", "TableTopLateralPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBeamsSessionRecord success after verifying TableTopLateralPosition --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTBeamsSessionRecord", 
									"CorrectedParameterSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBeamsSessionRecord success after verifying CorrectedParameterSequence" + ("success" if partial_success else "failure")) 
							if "CorrectedParameterSequence" in ds2:
								CorrectedParameterSequence_data = ds2.CorrectedParameterSequence
								if type(CorrectedParameterSequence_data) == Sequence:
									for i3 in range(0, len(CorrectedParameterSequence_data)):
										if verbose:
											log.append( " CorrectedParameterSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = CorrectedParameterSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTBeamsSessionRecord", "ParameterSequencePointer", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying ParameterSequencePointer --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBeamsSessionRecord", "ParameterItemIndex", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying ParameterItemIndex --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBeamsSessionRecord", "ParameterPointer", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying ParameterPointer --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBeamsSessionRecord", "CorrectionValue", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying CorrectionValue --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTBeamsSessionRecord", 
									"OverrideSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBeamsSessionRecord success after verifying OverrideSequence" + ("success" if partial_success else "failure")) 
							if "OverrideSequence" in ds2:
								OverrideSequence_data = ds2.OverrideSequence
								if type(OverrideSequence_data) == Sequence:
									for i3 in range(0, len(OverrideSequence_data)):
										if verbose:
											log.append( " OverrideSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = OverrideSequence_data[i3]
										partial_success =  		verifyType2(ds3, 
												"RTBeamsSessionRecord", "OverrideParameterPointer", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying OverrideParameterPointer --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBeamsSessionRecord", "ParameterSequencePointer", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying ParameterSequencePointer --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBeamsSessionRecord", "ParameterItemIndex", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying ParameterItemIndex --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBeamsSessionRecord", "ParameterValueNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying ParameterValueNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType2(ds3, 
												"RTBeamsSessionRecord", "OperatorsName", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying OperatorsName --> "+("success" if partial_success else "failure"))

										partial_success = verifyType3(ds3, 
												"RTBeamsSessionRecord", 
												"OperatorIdentificationSequence", 
												verbose, log, ElementDictionary, 
																					1, 1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( "RTBeamsSessionRecord success after verifying OperatorIdentificationSequence" + ("success" if partial_success else "failure")) 
										if "OperatorIdentificationSequence" in ds3:
											OperatorIdentificationSequence_data = ds3.OperatorIdentificationSequence
											if type(OperatorIdentificationSequence_data) == Sequence:
												for i4 in range(0, len(OperatorIdentificationSequence_data)):
													if verbose:
														log.append( " OperatorIdentificationSequence item [{}]".format(i4+1))
													parent_ds4 = ds3
													ds4 = OperatorIdentificationSequence_data[i4]
													partial_success =  Macro_PersonIdentificationMacro_verify(ds4, parent_ds4, root_ds, verbose, log, ElementDictionary)

													if verbose:
														log.append( " RTBeamsSessionRecord success after verifying PersonIdentificationMacro"+ ("success" if partial_success else "failure" ))
										partial_success =  		verifyType3(ds3, 
												"RTBeamsSessionRecord", "OverrideReason", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBeamsSessionRecord success after verifying OverrideReason --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTBrachySessionRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTBrachySessionRecord")

	partial_success =  		verifyType3(ds, 
			"RTBrachySessionRecord", "ReferencedFractionGroupNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBrachySessionRecord success after verifying ReferencedFractionGroupNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTBrachySessionRecord", "NumberOfFractionsPlanned", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBrachySessionRecord success after verifying NumberOfFractionsPlanned --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTBrachySessionRecord", "BrachyTreatmentTechnique", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBrachySessionRecord success after verifying BrachyTreatmentTechnique --> "+("success" if partial_success else "failure"))

	if "BrachyTreatmentTechnique" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BrachyTreatmentTechnique"], 
			StringValueTable_BrachyTreatmentTechnique, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBrachySessionRecord success after verifying string enumerated values BrachyTreatmentTechnique --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTBrachySessionRecord", "BrachyTreatmentType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBrachySessionRecord success after verifying BrachyTreatmentType --> "+("success" if partial_success else "failure"))

	if "BrachyTreatmentType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["BrachyTreatmentType"], 
			StringValueTable_BrachyTreatmentType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTBrachySessionRecord success after verifying string defined terms BrachyTreatmentType --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"RTBrachySessionRecord", 
			"RecordedSourceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTBrachySessionRecord success after verifying RecordedSourceSequence" + ("success" if partial_success else "failure")) 
	if "RecordedSourceSequence" in ds:
		RecordedSourceSequence_data = ds.RecordedSourceSequence
		if type(RecordedSourceSequence_data) == Sequence:
			for i1 in range(0, len(RecordedSourceSequence_data)):
				if verbose:
					log.append( " RecordedSourceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RecordedSourceSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTBrachySessionRecord", "SourceNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying SourceNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachySessionRecord", "SourceType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying SourceType --> "+("success" if partial_success else "failure"))

				if "SourceType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["SourceType"], 
						StringValueTable_SourceType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying string defined terms SourceType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTBrachySessionRecord", "SourceManufacturer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying SourceManufacturer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTBrachySessionRecord", "SourceSerialNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying SourceSerialNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachySessionRecord", "SourceIsotopeName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying SourceIsotopeName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachySessionRecord", "SourceIsotopeHalfLife", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying SourceIsotopeHalfLife --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTBrachySessionRecord", "SourceStrengthUnits", 
						verbose, log, ElementDictionary, 
						Condition_SourceIsNotGammaEmitter, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying SourceStrengthUnits --> "+("success" if partial_success else "failure"))

				if Condition_SourceIsNotGammaEmitter(ds1, parent_ds1, root_ds):
					if "SourceStrengthUnits" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["SourceStrengthUnits"], 
							StringValueTable_SourceStrengthUnits, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying string enumerated values SourceStrengthUnits --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachySessionRecord", "ReferenceAirKermaRate", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying ReferenceAirKermaRate --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTBrachySessionRecord", "SourceStrength", 
						verbose, log, ElementDictionary, 
						Condition_SourceIsNotGammaEmitter, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying SourceStrength --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachySessionRecord", "SourceStrengthReferenceDate", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying SourceStrengthReferenceDate --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachySessionRecord", "SourceStrengthReferenceTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying SourceStrengthReferenceTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"RTBrachySessionRecord", 
			"TreatmentSessionApplicationSetupSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTBrachySessionRecord success after verifying TreatmentSessionApplicationSetupSequence" + ("success" if partial_success else "failure")) 
	if "TreatmentSessionApplicationSetupSequence" in ds:
		TreatmentSessionApplicationSetupSequence_data = ds.TreatmentSessionApplicationSetupSequence
		if type(TreatmentSessionApplicationSetupSequence_data) == Sequence:
			for i1 in range(0, len(TreatmentSessionApplicationSetupSequence_data)):
				if verbose:
					log.append( " TreatmentSessionApplicationSetupSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TreatmentSessionApplicationSetupSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTBrachySessionRecord", "ApplicationSetupType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying ApplicationSetupType --> "+("success" if partial_success else "failure"))

				if "ApplicationSetupType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ApplicationSetupType"], 
						StringValueTable_ApplicationSetupType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying string defined terms ApplicationSetupType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachySessionRecord", "ReferencedBrachyApplicationSetupNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying ReferencedBrachyApplicationSetupNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachySessionRecord", "ApplicationSetupName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying ApplicationSetupName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachySessionRecord", "ApplicationSetupManufacturer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying ApplicationSetupManufacturer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachySessionRecord", "TemplateNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying TemplateNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachySessionRecord", "TemplateType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying TemplateType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachySessionRecord", "TemplateName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying TemplateName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachySessionRecord", "ApplicationSetupCheck", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying ApplicationSetupCheck --> "+("success" if partial_success else "failure"))

				if "ApplicationSetupCheck" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ApplicationSetupCheck"], 
						StringValueTable_ApplicationSetupCheck, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying string enumerated values ApplicationSetupCheck --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBrachySessionRecord", 
						"ReferencedVerificationImageSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBrachySessionRecord success after verifying ReferencedVerificationImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedVerificationImageSequence" in ds1:
					ReferencedVerificationImageSequence_data = ds1.ReferencedVerificationImageSequence
					if type(ReferencedVerificationImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedVerificationImageSequence_data)):
							if verbose:
								log.append( " ReferencedVerificationImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedVerificationImageSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTBrachySessionRecord success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"RTBrachySessionRecord", "TotalReferenceAirKerma", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying TotalReferenceAirKerma --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBrachySessionRecord", 
						"ReferencedMeasuredDoseReferenceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBrachySessionRecord success after verifying ReferencedMeasuredDoseReferenceSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedMeasuredDoseReferenceSequence" in ds1:
					ReferencedMeasuredDoseReferenceSequence_data = ds1.ReferencedMeasuredDoseReferenceSequence
					if type(ReferencedMeasuredDoseReferenceSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedMeasuredDoseReferenceSequence_data)):
							if verbose:
								log.append( " ReferencedMeasuredDoseReferenceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedMeasuredDoseReferenceSequence_data[i2]
							partial_success =  		verifyType1C(ds2, 
									"RTBrachySessionRecord", "ReferencedDoseReferenceNumber", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedMeasuredDoseReferenceNumberNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachySessionRecord", "ReferencedMeasuredDoseReferenceNumber", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedDoseReferenceNumberNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying ReferencedMeasuredDoseReferenceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBrachySessionRecord", "MeasuredDoseValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying MeasuredDoseValue --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBrachySessionRecord", 
						"ReferencedCalculatedDoseReferenceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBrachySessionRecord success after verifying ReferencedCalculatedDoseReferenceSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedCalculatedDoseReferenceSequence" in ds1:
					ReferencedCalculatedDoseReferenceSequence_data = ds1.ReferencedCalculatedDoseReferenceSequence
					if type(ReferencedCalculatedDoseReferenceSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedCalculatedDoseReferenceSequence_data)):
							if verbose:
								log.append( " ReferencedCalculatedDoseReferenceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedCalculatedDoseReferenceSequence_data[i2]
							partial_success =  		verifyType1C(ds2, 
									"RTBrachySessionRecord", "ReferencedDoseReferenceNumber", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedCalculatedDoseReferenceNumberNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachySessionRecord", "ReferencedCalculatedDoseReferenceNumber", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedDoseReferenceNumberNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying ReferencedCalculatedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBrachySessionRecord", "CalculatedDoseReferenceDoseValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying CalculatedDoseReferenceDoseValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTBrachySessionRecord", "CurrentFractionNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying CurrentFractionNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTBrachySessionRecord", "TreatmentDeliveryType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying TreatmentDeliveryType --> "+("success" if partial_success else "failure"))

				if "TreatmentDeliveryType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["TreatmentDeliveryType"], 
						StringValueTable_TreatmentDeliveryTypeNormalOrContinuation, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying string defined terms TreatmentDeliveryType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTBrachySessionRecord", "TreatmentTerminationStatus", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying TreatmentTerminationStatus --> "+("success" if partial_success else "failure"))

				if "TreatmentTerminationStatus" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["TreatmentTerminationStatus"], 
						StringValueTable_TreatmentTerminationStatus, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying string enumerated values TreatmentTerminationStatus --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTBrachySessionRecord", "TreatmentTerminationCode", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying TreatmentTerminationCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTBrachySessionRecord", "TreatmentVerificationStatus", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying TreatmentVerificationStatus --> "+("success" if partial_success else "failure"))

				if "TreatmentVerificationStatus" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["TreatmentVerificationStatus"], 
						StringValueTable_TreatmentVerificationStatus, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTBrachySessionRecord success after verifying string enumerated values TreatmentVerificationStatus --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTBrachySessionRecord", 
						"RecordedBrachyAccessoryDeviceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBrachySessionRecord success after verifying RecordedBrachyAccessoryDeviceSequence" + ("success" if partial_success else "failure")) 
				if "RecordedBrachyAccessoryDeviceSequence" in ds1:
					RecordedBrachyAccessoryDeviceSequence_data = ds1.RecordedBrachyAccessoryDeviceSequence
					if type(RecordedBrachyAccessoryDeviceSequence_data) == Sequence:
						for i2 in range(0, len(RecordedBrachyAccessoryDeviceSequence_data)):
							if verbose:
								log.append( " RecordedBrachyAccessoryDeviceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RecordedBrachyAccessoryDeviceSequence_data[i2]
							partial_success =  		verifyType2(ds2, 
									"RTBrachySessionRecord", "ReferencedBrachyAccessoryDeviceNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying ReferencedBrachyAccessoryDeviceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBrachySessionRecord", "BrachyAccessoryDeviceID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying BrachyAccessoryDeviceID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBrachySessionRecord", "BrachyAccessoryDeviceType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying BrachyAccessoryDeviceType --> "+("success" if partial_success else "failure"))

							if "BrachyAccessoryDeviceType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["BrachyAccessoryDeviceType"], 
									StringValueTable_BrachyAccessoryDeviceType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying string defined terms BrachyAccessoryDeviceType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTBrachySessionRecord", "BrachyAccessoryDeviceName", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying BrachyAccessoryDeviceName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"RTBrachySessionRecord", 
						"RecordedChannelSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTBrachySessionRecord success after verifying RecordedChannelSequence" + ("success" if partial_success else "failure")) 
				if "RecordedChannelSequence" in ds1:
					RecordedChannelSequence_data = ds1.RecordedChannelSequence
					if type(RecordedChannelSequence_data) == Sequence:
						for i2 in range(0, len(RecordedChannelSequence_data)):
							if verbose:
								log.append( " RecordedChannelSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RecordedChannelSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTBrachySessionRecord", "ChannelNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying ChannelNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBrachySessionRecord", "ChannelLength", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying ChannelLength --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBrachySessionRecord", "SpecifiedChannelTotalTime", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying SpecifiedChannelTotalTime --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBrachySessionRecord", "DeliveredChannelTotalTime", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying DeliveredChannelTotalTime --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBrachySessionRecord", "SourceMovementType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying SourceMovementType --> "+("success" if partial_success else "failure"))

							if "SourceMovementType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["SourceMovementType"], 
									StringValueTable_SourceMovementType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying string defined terms SourceMovementType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachySessionRecord", "SpecifiedNumberOfPulses", 
									verbose, log, ElementDictionary, 
									Condition_BrachyTreatmentTypeIsPDR, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying SpecifiedNumberOfPulses --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachySessionRecord", "DeliveredNumberOfPulses", 
									verbose, log, ElementDictionary, 
									Condition_BrachyTreatmentTypeIsPDR, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying DeliveredNumberOfPulses --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachySessionRecord", "SpecifiedPulseRepetitionInterval", 
									verbose, log, ElementDictionary, 
									Condition_BrachyTreatmentTypeIsPDR, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying SpecifiedPulseRepetitionInterval --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachySessionRecord", "DeliveredPulseRepetitionInterval", 
									verbose, log, ElementDictionary, 
									Condition_BrachyTreatmentTypeIsPDR, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying DeliveredPulseRepetitionInterval --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTBrachySessionRecord", 
									"ReferencedMeasuredDoseReferenceSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBrachySessionRecord success after verifying ReferencedMeasuredDoseReferenceSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedMeasuredDoseReferenceSequence" in ds2:
								ReferencedMeasuredDoseReferenceSequence_data = ds2.ReferencedMeasuredDoseReferenceSequence
								if type(ReferencedMeasuredDoseReferenceSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedMeasuredDoseReferenceSequence_data)):
										if verbose:
											log.append( " ReferencedMeasuredDoseReferenceSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedMeasuredDoseReferenceSequence_data[i3]
										partial_success =  		verifyType1C(ds3, 
												"RTBrachySessionRecord", "ReferencedDoseReferenceNumber", 
												verbose, log, ElementDictionary, 
												Condition_ReferencedMeasuredDoseReferenceNumberNotPresent, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1C(ds3, 
												"RTBrachySessionRecord", "ReferencedMeasuredDoseReferenceNumber", 
												verbose, log, ElementDictionary, 
												Condition_ReferencedDoseReferenceNumberNotPresent, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying ReferencedMeasuredDoseReferenceNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBrachySessionRecord", "MeasuredDoseValue", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying MeasuredDoseValue --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTBrachySessionRecord", 
									"ReferencedCalculatedDoseReferenceSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBrachySessionRecord success after verifying ReferencedCalculatedDoseReferenceSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedCalculatedDoseReferenceSequence" in ds2:
								ReferencedCalculatedDoseReferenceSequence_data = ds2.ReferencedCalculatedDoseReferenceSequence
								if type(ReferencedCalculatedDoseReferenceSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedCalculatedDoseReferenceSequence_data)):
										if verbose:
											log.append( " ReferencedCalculatedDoseReferenceSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedCalculatedDoseReferenceSequence_data[i3]
										partial_success =  		verifyType1C(ds3, 
												"RTBrachySessionRecord", "ReferencedDoseReferenceNumber", 
												verbose, log, ElementDictionary, 
												Condition_ReferencedCalculatedDoseReferenceNumberNotPresent, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1C(ds3, 
												"RTBrachySessionRecord", "ReferencedCalculatedDoseReferenceNumber", 
												verbose, log, ElementDictionary, 
												Condition_ReferencedDoseReferenceNumberNotPresent, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying ReferencedCalculatedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBrachySessionRecord", "CalculatedDoseReferenceDoseValue", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying CalculatedDoseReferenceDoseValue --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTBrachySessionRecord", 
									"RecordedSourceApplicatorSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBrachySessionRecord success after verifying RecordedSourceApplicatorSequence" + ("success" if partial_success else "failure")) 
							if "RecordedSourceApplicatorSequence" in ds2:
								RecordedSourceApplicatorSequence_data = ds2.RecordedSourceApplicatorSequence
								if type(RecordedSourceApplicatorSequence_data) == Sequence:
									for i3 in range(0, len(RecordedSourceApplicatorSequence_data)):
										if verbose:
											log.append( " RecordedSourceApplicatorSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = RecordedSourceApplicatorSequence_data[i3]
										partial_success =  		verifyType2(ds3, 
												"RTBrachySessionRecord", "ReferencedSourceApplicatorNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying ReferencedSourceApplicatorNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType2(ds3, 
												"RTBrachySessionRecord", "SourceApplicatorID", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying SourceApplicatorID --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBrachySessionRecord", "SourceApplicatorType", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying SourceApplicatorType --> "+("success" if partial_success else "failure"))

										if "SourceApplicatorType" not in ds3: 
											partial_success = False 
										else: 
											partial_success = verifyDefinedTerms(ds3["SourceApplicatorType"], 
												StringValueTable_SourceApplicatorType, 
												verbose, log, -1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying string defined terms SourceApplicatorType --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBrachySessionRecord", "SourceApplicatorName", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying SourceApplicatorName --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBrachySessionRecord", "SourceApplicatorLength", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying SourceApplicatorLength --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBrachySessionRecord", "SourceApplicatorManufacturer", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying SourceApplicatorManufacturer --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1C(ds3, 
												"RTBrachySessionRecord", "SourceApplicatorStepSize", 
												verbose, log, ElementDictionary, 
												0, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying SourceApplicatorStepSize --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTBrachySessionRecord", "TransferTubeNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying TransferTubeNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTBrachySessionRecord", "TransferTubeLength", 
									verbose, log, ElementDictionary, 
									Condition_TransferTubeNumberIsNotEmpty, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying TransferTubeLength --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTBrachySessionRecord", 
									"RecordedChannelShieldSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBrachySessionRecord success after verifying RecordedChannelShieldSequence" + ("success" if partial_success else "failure")) 
							if "RecordedChannelShieldSequence" in ds2:
								RecordedChannelShieldSequence_data = ds2.RecordedChannelShieldSequence
								if type(RecordedChannelShieldSequence_data) == Sequence:
									for i3 in range(0, len(RecordedChannelShieldSequence_data)):
										if verbose:
											log.append( " RecordedChannelShieldSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = RecordedChannelShieldSequence_data[i3]
										partial_success =  		verifyType2(ds3, 
												"RTBrachySessionRecord", "ReferencedChannelShieldNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying ReferencedChannelShieldNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType2(ds3, 
												"RTBrachySessionRecord", "ChannelShieldID", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying ChannelShieldID --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTBrachySessionRecord", "ChannelShieldName", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying ChannelShieldName --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBrachySessionRecord", "ReferencedSourceNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying ReferencedSourceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachySessionRecord", "SafePositionExitDate", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying SafePositionExitDate --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachySessionRecord", "SafePositionExitTime", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying SafePositionExitTime --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachySessionRecord", "SafePositionReturnDate", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying SafePositionReturnDate --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTBrachySessionRecord", "SafePositionReturnTime", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying SafePositionReturnTime --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTBrachySessionRecord", "NumberOfControlPoints", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTBrachySessionRecord success after verifying NumberOfControlPoints --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1(ds2, 
									"RTBrachySessionRecord", 
									"BrachyControlPointDeliveredSequence", 
									verbose, log, ElementDictionary, 
															2, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTBrachySessionRecord success after verifying BrachyControlPointDeliveredSequence" + ("success" if partial_success else "failure")) 
							if "BrachyControlPointDeliveredSequence" in ds2:
								BrachyControlPointDeliveredSequence_data = ds2.BrachyControlPointDeliveredSequence
								if type(BrachyControlPointDeliveredSequence_data) == Sequence:
									for i3 in range(0, len(BrachyControlPointDeliveredSequence_data)):
										if verbose:
											log.append( " BrachyControlPointDeliveredSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = BrachyControlPointDeliveredSequence_data[i3]
										partial_success =  		verifyType3(ds3, 
												"RTBrachySessionRecord", "ReferencedControlPointIndex", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying ReferencedControlPointIndex --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBrachySessionRecord", "TreatmentControlPointDate", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying TreatmentControlPointDate --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBrachySessionRecord", "TreatmentControlPointTime", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying TreatmentControlPointTime --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTBrachySessionRecord", "ControlPointRelativePosition", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTBrachySessionRecord success after verifying ControlPointRelativePosition --> "+("success" if partial_success else "failure"))

										partial_success = verifyType3(ds3, 
												"RTBrachySessionRecord", 
												"OverrideSequence", 
												verbose, log, ElementDictionary, 
																					1, 0xFFFFFFFF)
										global_success = global_success and partial_success 
										if verbose:
											log.append( "RTBrachySessionRecord success after verifying OverrideSequence" + ("success" if partial_success else "failure")) 
										if "OverrideSequence" in ds3:
											OverrideSequence_data = ds3.OverrideSequence
											if type(OverrideSequence_data) == Sequence:
												for i4 in range(0, len(OverrideSequence_data)):
													if verbose:
														log.append( " OverrideSequence item [{}]".format(i4+1))
													parent_ds4 = ds3
													ds4 = OverrideSequence_data[i4]
													partial_success =  		verifyType2(ds4, 
															"RTBrachySessionRecord", "OverrideParameterPointer", 
															verbose, log, ElementDictionary, 
																											0, 0)
													global_success = global_success and partial_success 
													if verbose:
														log.append( " RTBrachySessionRecord success after verifying OverrideParameterPointer --> "+("success" if partial_success else "failure"))

													partial_success =  		verifyType2(ds4, 
															"RTBrachySessionRecord", "OperatorsName", 
															verbose, log, ElementDictionary, 
																											0, 0)
													global_success = global_success and partial_success 
													if verbose:
														log.append( " RTBrachySessionRecord success after verifying OperatorsName --> "+("success" if partial_success else "failure"))

													partial_success = verifyType3(ds4, 
															"RTBrachySessionRecord", 
															"OperatorIdentificationSequence", 
															verbose, log, ElementDictionary, 
																											1, 1)
													global_success = global_success and partial_success 
													if verbose:
														log.append( "RTBrachySessionRecord success after verifying OperatorIdentificationSequence" + ("success" if partial_success else "failure")) 
													if "OperatorIdentificationSequence" in ds4:
														OperatorIdentificationSequence_data = ds4.OperatorIdentificationSequence
														if type(OperatorIdentificationSequence_data) == Sequence:
															for i5 in range(0, len(OperatorIdentificationSequence_data)):
																if verbose:
																	log.append( " OperatorIdentificationSequence item [{}]".format(i5+1))
																parent_ds5 = ds4
																ds5 = OperatorIdentificationSequence_data[i5]
																partial_success =  Macro_PersonIdentificationMacro_verify(ds5, parent_ds5, root_ds, verbose, log, ElementDictionary)

																if verbose:
																	log.append( " RTBrachySessionRecord success after verifying PersonIdentificationMacro"+ ("success" if partial_success else "failure" ))
													partial_success =  		verifyType3(ds4, 
															"RTBrachySessionRecord", "OverrideReason", 
															verbose, log, ElementDictionary, 
																											0, 0)
													global_success = global_success and partial_success 
													if verbose:
														log.append( " RTBrachySessionRecord success after verifying OverrideReason --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTTreatmentSummaryRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTTreatmentSummaryRecord")

	partial_success =  		verifyType1(ds, 
			"RTTreatmentSummaryRecord", "CurrentTreatmentStatus", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTTreatmentSummaryRecord success after verifying CurrentTreatmentStatus --> "+("success" if partial_success else "failure"))

	if "CurrentTreatmentStatus" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CurrentTreatmentStatus"], 
			StringValueTable_CurrentTreatmentStatus, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTTreatmentSummaryRecord success after verifying string enumerated values CurrentTreatmentStatus --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RTTreatmentSummaryRecord", "TreatmentStatusComment", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTTreatmentSummaryRecord success after verifying TreatmentStatusComment --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTTreatmentSummaryRecord", "FirstTreatmentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTTreatmentSummaryRecord success after verifying FirstTreatmentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTTreatmentSummaryRecord", "MostRecentTreatmentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTTreatmentSummaryRecord success after verifying MostRecentTreatmentDate --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RTTreatmentSummaryRecord", 
			"FractionGroupSummarySequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTTreatmentSummaryRecord success after verifying FractionGroupSummarySequence" + ("success" if partial_success else "failure")) 
	if "FractionGroupSummarySequence" in ds:
		FractionGroupSummarySequence_data = ds.FractionGroupSummarySequence
		if type(FractionGroupSummarySequence_data) == Sequence:
			for i1 in range(0, len(FractionGroupSummarySequence_data)):
				if verbose:
					log.append( " FractionGroupSummarySequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FractionGroupSummarySequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"RTTreatmentSummaryRecord", "ReferencedFractionGroupNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentSummaryRecord success after verifying ReferencedFractionGroupNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTTreatmentSummaryRecord", "FractionGroupType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentSummaryRecord success after verifying FractionGroupType --> "+("success" if partial_success else "failure"))

				if "FractionGroupType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FractionGroupType"], 
						StringValueTable_FractionGroupType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentSummaryRecord success after verifying string enumerated values FractionGroupType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTTreatmentSummaryRecord", "NumberOfFractionsPlanned", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentSummaryRecord success after verifying NumberOfFractionsPlanned --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTTreatmentSummaryRecord", "NumberOfFractionsDelivered", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentSummaryRecord success after verifying NumberOfFractionsDelivered --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTTreatmentSummaryRecord", 
						"FractionStatusSummarySequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTTreatmentSummaryRecord success after verifying FractionStatusSummarySequence" + ("success" if partial_success else "failure")) 
				if "FractionStatusSummarySequence" in ds1:
					FractionStatusSummarySequence_data = ds1.FractionStatusSummarySequence
					if type(FractionStatusSummarySequence_data) == Sequence:
						for i2 in range(0, len(FractionStatusSummarySequence_data)):
							if verbose:
								log.append( " FractionStatusSummarySequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = FractionStatusSummarySequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTTreatmentSummaryRecord", "ReferencedFractionNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTTreatmentSummaryRecord success after verifying ReferencedFractionNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTTreatmentSummaryRecord", "TreatmentDate", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTTreatmentSummaryRecord success after verifying TreatmentDate --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTTreatmentSummaryRecord", "TreatmentTime", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTTreatmentSummaryRecord success after verifying TreatmentTime --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTTreatmentSummaryRecord", "TreatmentTerminationStatus", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTTreatmentSummaryRecord success after verifying TreatmentTerminationStatus --> "+("success" if partial_success else "failure"))

							if "TreatmentTerminationStatus" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["TreatmentTerminationStatus"], 
									StringValueTable_TreatmentTerminationStatus, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTTreatmentSummaryRecord success after verifying string enumerated values TreatmentTerminationStatus --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RTTreatmentSummaryRecord", 
			"TreatmentSummaryMeasuredDoseReferenceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTTreatmentSummaryRecord success after verifying TreatmentSummaryMeasuredDoseReferenceSequence" + ("success" if partial_success else "failure")) 
	if "TreatmentSummaryMeasuredDoseReferenceSequence" in ds:
		TreatmentSummaryMeasuredDoseReferenceSequence_data = ds.TreatmentSummaryMeasuredDoseReferenceSequence
		if type(TreatmentSummaryMeasuredDoseReferenceSequence_data) == Sequence:
			for i1 in range(0, len(TreatmentSummaryMeasuredDoseReferenceSequence_data)):
				if verbose:
					log.append( " TreatmentSummaryMeasuredDoseReferenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TreatmentSummaryMeasuredDoseReferenceSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"RTTreatmentSummaryRecord", "ReferencedDoseReferenceNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentSummaryRecord success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTTreatmentSummaryRecord", "DoseReferenceDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentSummaryRecord success after verifying DoseReferenceDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTTreatmentSummaryRecord", "CumulativeDoseToDoseReference", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentSummaryRecord success after verifying CumulativeDoseToDoseReference --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RTTreatmentSummaryRecord", 
			"TreatmentSummaryCalculatedDoseReferenceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTTreatmentSummaryRecord success after verifying TreatmentSummaryCalculatedDoseReferenceSequence" + ("success" if partial_success else "failure")) 
	if "TreatmentSummaryCalculatedDoseReferenceSequence" in ds:
		TreatmentSummaryCalculatedDoseReferenceSequence_data = ds.TreatmentSummaryCalculatedDoseReferenceSequence
		if type(TreatmentSummaryCalculatedDoseReferenceSequence_data) == Sequence:
			for i1 in range(0, len(TreatmentSummaryCalculatedDoseReferenceSequence_data)):
				if verbose:
					log.append( " TreatmentSummaryCalculatedDoseReferenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TreatmentSummaryCalculatedDoseReferenceSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"RTTreatmentSummaryRecord", "ReferencedDoseReferenceNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentSummaryRecord success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTTreatmentSummaryRecord", "DoseReferenceDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentSummaryRecord success after verifying DoseReferenceDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTTreatmentSummaryRecord", "CumulativeDoseToDoseReference", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTTreatmentSummaryRecord success after verifying CumulativeDoseToDoseReference --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTIonToleranceTables_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTIonToleranceTables")

	partial_success = verifyType3(ds, 
			"RTIonToleranceTables", 
			"IonToleranceTableSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTIonToleranceTables success after verifying IonToleranceTableSequence" + ("success" if partial_success else "failure")) 
	if "IonToleranceTableSequence" in ds:
		IonToleranceTableSequence_data = ds.IonToleranceTableSequence
		if type(IonToleranceTableSequence_data) == Sequence:
			for i1 in range(0, len(IonToleranceTableSequence_data)):
				if verbose:
					log.append( " IonToleranceTableSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IonToleranceTableSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTIonToleranceTables", "ToleranceTableNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonToleranceTables success after verifying ToleranceTableNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonToleranceTables", "ToleranceTableLabel", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonToleranceTables success after verifying ToleranceTableLabel --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonToleranceTables", "GantryAngleTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonToleranceTables success after verifying GantryAngleTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonToleranceTables", "BeamLimitingDeviceAngleTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonToleranceTables success after verifying BeamLimitingDeviceAngleTolerance --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTIonToleranceTables", 
						"BeamLimitingDeviceToleranceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonToleranceTables success after verifying BeamLimitingDeviceToleranceSequence" + ("success" if partial_success else "failure")) 
				if "BeamLimitingDeviceToleranceSequence" in ds1:
					BeamLimitingDeviceToleranceSequence_data = ds1.BeamLimitingDeviceToleranceSequence
					if type(BeamLimitingDeviceToleranceSequence_data) == Sequence:
						for i2 in range(0, len(BeamLimitingDeviceToleranceSequence_data)):
							if verbose:
								log.append( " BeamLimitingDeviceToleranceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = BeamLimitingDeviceToleranceSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonToleranceTables", "RTBeamLimitingDeviceType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonToleranceTables success after verifying RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							if "RTBeamLimitingDeviceType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["RTBeamLimitingDeviceType"], 
									StringValueTable_RTBeamLimitingDeviceType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonToleranceTables success after verifying string enumerated values RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonToleranceTables", "BeamLimitingDevicePositionTolerance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonToleranceTables success after verifying BeamLimitingDevicePositionTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonToleranceTables", "PatientSupportAngleTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonToleranceTables success after verifying PatientSupportAngleTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonToleranceTables", "TableTopVerticalPositionTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonToleranceTables success after verifying TableTopVerticalPositionTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonToleranceTables", "TableTopLongitudinalPositionTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonToleranceTables success after verifying TableTopLongitudinalPositionTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonToleranceTables", "TableTopLateralPositionTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonToleranceTables success after verifying TableTopLateralPositionTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonToleranceTables", "TableTopPitchAngleTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonToleranceTables success after verifying TableTopPitchAngleTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonToleranceTables", "TableTopRollAngleTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonToleranceTables success after verifying TableTopRollAngleTolerance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonToleranceTables", "SnoutPositionTolerance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonToleranceTables success after verifying SnoutPositionTolerance --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTIonBeams_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTIonBeams")

	partial_success = verifyType1(ds, 
			"RTIonBeams", 
			"IonBeamSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTIonBeams success after verifying IonBeamSequence" + ("success" if partial_success else "failure")) 
	if "IonBeamSequence" in ds:
		IonBeamSequence_data = ds.IonBeamSequence
		if type(IonBeamSequence_data) == Sequence:
			for i1 in range(0, len(IonBeamSequence_data)):
				if verbose:
					log.append( " IonBeamSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IonBeamSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "BeamNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying BeamNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "BeamName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying BeamName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "BeamDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying BeamDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "BeamType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying BeamType --> "+("success" if partial_success else "failure"))

				if "BeamType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["BeamType"], 
						StringValueTable_BeamType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying string enumerated values BeamType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "RadiationType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying RadiationType --> "+("success" if partial_success else "failure"))

				if "RadiationType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["RadiationType"], 
						StringValueTable_IonRadiationType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying string defined terms RadiationType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTIonBeams", "RadiationMassNumber", 
						verbose, log, ElementDictionary, 
						Condition_RadiationTypeIsIon, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying RadiationMassNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTIonBeams", "RadiationAtomicNumber", 
						verbose, log, ElementDictionary, 
						Condition_RadiationTypeIsIon, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying RadiationAtomicNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTIonBeams", "RadiationChargeState", 
						verbose, log, ElementDictionary, 
						Condition_RadiationTypeIsIon, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying RadiationChargeState --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "ScanMode", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying ScanMode --> "+("success" if partial_success else "failure"))

				if "ScanMode" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ScanMode"], 
						StringValueTable_IonScanMode, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying string defined terms ScanMode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTIonBeams", "ModulatedScanModeType", 
						verbose, log, ElementDictionary, 
						Condition_ScanModeIsModulatedSpec, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying ModulatedScanModeType --> "+("success" if partial_success else "failure"))

				if Condition_ScanModeIsModulatedSpec(ds1, parent_ds1, root_ds):
					if "ModulatedScanModeType" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["ModulatedScanModeType"], 
							StringValueTable_ModulatedScanModeType, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying string defined terms ModulatedScanModeType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTIonBeams", "TreatmentMachineName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying TreatmentMachineName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "Manufacturer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "InstitutionName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying InstitutionName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "InstitutionAddress", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying InstitutionAddress --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "InstitutionalDepartmentName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying InstitutionalDepartmentName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTIonBeams", 
						"InstitutionalDepartmentTypeCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying InstitutionalDepartmentTypeCodeSequence" + ("success" if partial_success else "failure")) 
				if "InstitutionalDepartmentTypeCodeSequence" in ds1:
					InstitutionalDepartmentTypeCodeSequence_data = ds1.InstitutionalDepartmentTypeCodeSequence
					if type(InstitutionalDepartmentTypeCodeSequence_data) == Sequence:
						for i2 in range(0, len(InstitutionalDepartmentTypeCodeSequence_data)):
							if verbose:
								log.append( " InstitutionalDepartmentTypeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = InstitutionalDepartmentTypeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTIonBeams success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "ManufacturerModelName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "DeviceSerialNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying DeviceSerialNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "PrimaryDosimeterUnit", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying PrimaryDosimeterUnit --> "+("success" if partial_success else "failure"))

				if "PrimaryDosimeterUnit" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["PrimaryDosimeterUnit"], 
						StringValueTable_IonPrimaryDosimeterUnit, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying string enumerated values PrimaryDosimeterUnit --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "ReferencedToleranceTableNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying ReferencedToleranceTableNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "VirtualSourceAxisDistances", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying VirtualSourceAxisDistances --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTIonBeams", 
						"IonBeamLimitingDeviceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying IonBeamLimitingDeviceSequence" + ("success" if partial_success else "failure")) 
				if "IonBeamLimitingDeviceSequence" in ds1:
					IonBeamLimitingDeviceSequence_data = ds1.IonBeamLimitingDeviceSequence
					if type(IonBeamLimitingDeviceSequence_data) == Sequence:
						for i2 in range(0, len(IonBeamLimitingDeviceSequence_data)):
							if verbose:
								log.append( " IonBeamLimitingDeviceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IonBeamLimitingDeviceSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "RTBeamLimitingDeviceType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							if "RTBeamLimitingDeviceType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["RTBeamLimitingDeviceType"], 
									StringValueTable_RTBeamLimitingDeviceType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string enumerated values RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTIonBeams", "IsocenterToBeamLimitingDeviceDistance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying IsocenterToBeamLimitingDeviceDistance --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "NumberOfLeafJawPairs", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying NumberOfLeafJawPairs --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "LeafPositionBoundaries", 
									verbose, log, ElementDictionary, 
									Condition_RTBeamLimitingDeviceTypeMLCXOrMLCY, 
									True, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying LeafPositionBoundaries --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "ReferencedPatientSetupNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying ReferencedPatientSetupNumber --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTIonBeams", 
						"ReferencedReferenceImageSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying ReferencedReferenceImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedReferenceImageSequence" in ds1:
					ReferencedReferenceImageSequence_data = ds1.ReferencedReferenceImageSequence
					if type(ReferencedReferenceImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedReferenceImageSequence_data)):
							if verbose:
								log.append( " ReferencedReferenceImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedReferenceImageSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTIonBeams success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "ReferenceImageNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying ReferenceImageNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "TreatmentDeliveryType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying TreatmentDeliveryType --> "+("success" if partial_success else "failure"))

				if "TreatmentDeliveryType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["TreatmentDeliveryType"], 
						StringValueTable_TreatmentDeliveryType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying string defined terms TreatmentDeliveryType --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTIonBeams", 
						"ReferencedDoseSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying ReferencedDoseSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedDoseSequence" in ds1:
					ReferencedDoseSequence_data = ds1.ReferencedDoseSequence
					if type(ReferencedDoseSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedDoseSequence_data)):
							if verbose:
								log.append( " ReferencedDoseSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedDoseSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "ReferencedSOPClassUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying ReferencedSOPClassUID --> "+("success" if partial_success else "failure"))

							if "ReferencedSOPClassUID" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["ReferencedSOPClassUID"], 
									StringValueTable_RTDoseSOPClass, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string enumerated values ReferencedSOPClassUID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "ReferencedSOPInstanceUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying ReferencedSOPInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "NumberOfWedges", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying NumberOfWedges --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "TotalWedgeTrayWaterEquivalentThickness", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying TotalWedgeTrayWaterEquivalentThickness --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeams", 
						"IonWedgeSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfWedgesNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying IonWedgeSequence" + ("success" if partial_success else "failure")) 
				if "IonWedgeSequence" in ds1:
					IonWedgeSequence_data = ds1.IonWedgeSequence
					if type(IonWedgeSequence_data) == Sequence:
						for i2 in range(0, len(IonWedgeSequence_data)):
							if verbose:
								log.append( " IonWedgeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IonWedgeSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "WedgeNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying WedgeNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTIonBeams", "WedgeType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying WedgeType --> "+("success" if partial_success else "failure"))

							if "WedgeType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["WedgeType"], 
									StringValueTable_IonWedgeType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string defined terms WedgeType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "WedgeID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying WedgeID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTIonBeams", "WedgeAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying WedgeAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTIonBeams", "WedgeOrientation", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying WedgeOrientation --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "IsocenterToWedgeTrayDistance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying IsocenterToWedgeTrayDistance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "NumberOfCompensators", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying NumberOfCompensators --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "TotalCompensatorTrayWaterEquivalentThickness", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying TotalCompensatorTrayWaterEquivalentThickness --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeams", 
						"IonRangeCompensatorSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfCompensatorsNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying IonRangeCompensatorSequence" + ("success" if partial_success else "failure")) 
				if "IonRangeCompensatorSequence" in ds1:
					IonRangeCompensatorSequence_data = ds1.IonRangeCompensatorSequence
					if type(IonRangeCompensatorSequence_data) == Sequence:
						for i2 in range(0, len(IonRangeCompensatorSequence_data)):
							if verbose:
								log.append( " IonRangeCompensatorSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IonRangeCompensatorSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "CompensatorDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CompensatorDescription --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "CompensatorNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CompensatorNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTIonBeams", "MaterialID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying MaterialID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "CompensatorID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CompensatorID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "IsocenterToCompensatorTrayDistance", 
									verbose, log, ElementDictionary, 
									Condition_CompensatorMountingPositionNotDoubleSided, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying IsocenterToCompensatorTrayDistance --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "CompensatorDivergence", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CompensatorDivergence --> "+("success" if partial_success else "failure"))

							if "CompensatorDivergence" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["CompensatorDivergence"], 
									StringValueTable_CompensatorDivergence, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string enumerated values CompensatorDivergence --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "CompensatorMountingPosition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CompensatorMountingPosition --> "+("success" if partial_success else "failure"))

							if "CompensatorMountingPosition" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["CompensatorMountingPosition"], 
									StringValueTable_CompensatorMountingPosition, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string enumerated values CompensatorMountingPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "CompensatorRows", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CompensatorRows --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "CompensatorColumns", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CompensatorColumns --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "CompensatorPixelSpacing", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CompensatorPixelSpacing --> "+("success" if partial_success else "failure"))

							if "CompensatorPixelSpacing" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyNotZero(ds2["CompensatorPixelSpacing"], 
									verbose, log, -1, False)

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "CompensatorPosition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CompensatorPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "CompensatorColumnOffset", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CompensatorColumnOffset --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "CompensatorThicknessData", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CompensatorThicknessData --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "IsocenterToCompensatorDistances", 
									verbose, log, ElementDictionary, 
									Condition_NeedIsocenterToCompensatorDistance, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying IsocenterToCompensatorDistances --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "CompensatorRelativeStoppingPowerRatio", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CompensatorRelativeStoppingPowerRatio --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "CompensatorMillingToolDiameter", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CompensatorMillingToolDiameter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "NumberOfBoli", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying NumberOfBoli --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeams", 
						"ReferencedBolusSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfBoliNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying ReferencedBolusSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedBolusSequence" in ds1:
					ReferencedBolusSequence_data = ds1.ReferencedBolusSequence
					if type(ReferencedBolusSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedBolusSequence_data)):
							if verbose:
								log.append( " ReferencedBolusSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedBolusSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "ReferencedROINumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "NumberOfBlocks", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying NumberOfBlocks --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "TotalBlockTrayWaterEquivalentThickness", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying TotalBlockTrayWaterEquivalentThickness --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeams", 
						"IonBlockSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfBlocksNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying IonBlockSequence" + ("success" if partial_success else "failure")) 
				if "IonBlockSequence" in ds1:
					IonBlockSequence_data = ds1.IonBlockSequence
					if type(IonBlockSequence_data) == Sequence:
						for i2 in range(0, len(IonBlockSequence_data)):
							if verbose:
								log.append( " IonBlockSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IonBlockSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "BlockTrayID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying BlockTrayID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "IsocenterToBlockTrayDistance", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying IsocenterToBlockTrayDistance --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "BlockType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying BlockType --> "+("success" if partial_success else "failure"))

							if "BlockType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["BlockType"], 
									StringValueTable_BlockType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string enumerated values BlockType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "BlockDivergence", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying BlockDivergence --> "+("success" if partial_success else "failure"))

							if "BlockDivergence" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["BlockDivergence"], 
									StringValueTable_BlockDivergence, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string enumerated values BlockDivergence --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "BlockMountingPosition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying BlockMountingPosition --> "+("success" if partial_success else "failure"))

							if "BlockMountingPosition" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["BlockMountingPosition"], 
									StringValueTable_BlockMountingPosition, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string enumerated values BlockMountingPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "BlockNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying BlockNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "BlockName", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying BlockName --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTIonBeams", "MaterialID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying MaterialID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "BlockThickness", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying BlockThickness --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "BlockNumberOfPoints", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying BlockNumberOfPoints --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "BlockData", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying BlockData --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTIonBeams", 
						"SnoutSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying SnoutSequence" + ("success" if partial_success else "failure")) 
				if "SnoutSequence" in ds1:
					SnoutSequence_data = ds1.SnoutSequence
					if type(SnoutSequence_data) == Sequence:
						for i2 in range(0, len(SnoutSequence_data)):
							if verbose:
								log.append( " SnoutSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SnoutSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "SnoutID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying SnoutID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTIonBeams", 
						"ApplicatorSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying ApplicatorSequence" + ("success" if partial_success else "failure")) 
				if "ApplicatorSequence" in ds1:
					ApplicatorSequence_data = ds1.ApplicatorSequence
					if type(ApplicatorSequence_data) == Sequence:
						for i2 in range(0, len(ApplicatorSequence_data)):
							if verbose:
								log.append( " ApplicatorSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ApplicatorSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "ApplicatorID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying ApplicatorID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "ApplicatorType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying ApplicatorType --> "+("success" if partial_success else "failure"))

							if "ApplicatorType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["ApplicatorType"], 
									StringValueTable_IonApplicatorType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string defined terms ApplicatorType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "ApplicatorDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying ApplicatorDescription --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTIonBeams", 
									"GeneralAccessorySequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTIonBeams success after verifying GeneralAccessorySequence" + ("success" if partial_success else "failure")) 
							if "GeneralAccessorySequence" in ds2:
								GeneralAccessorySequence_data = ds2.GeneralAccessorySequence
								if type(GeneralAccessorySequence_data) == Sequence:
									for i3 in range(0, len(GeneralAccessorySequence_data)):
										if verbose:
											log.append( " GeneralAccessorySequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = GeneralAccessorySequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTIonBeams", "GeneralAccessoryNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying GeneralAccessoryNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTIonBeams", "GeneralAccessoryID", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying GeneralAccessoryID --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeams", "GeneralAccessoryDescription", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying GeneralAccessoryDescription --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeams", "GeneralAccessoryType", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying GeneralAccessoryType --> "+("success" if partial_success else "failure"))

										if "GeneralAccessoryType" not in ds3: 
											partial_success = False 
										else: 
											partial_success = verifyDefinedTerms(ds3["GeneralAccessoryType"], 
												StringValueTable_RTGeneralAccessoryType, 
												verbose, log, -1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying string defined terms GeneralAccessoryType --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeams", "AccessoryCode", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeams", "IsocenterToGeneralAccessoryDistance", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying IsocenterToGeneralAccessoryDistance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "NumberOfRangeShifters", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying NumberOfRangeShifters --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeams", 
						"RangeShifterSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfRangeShiftersNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying RangeShifterSequence" + ("success" if partial_success else "failure")) 
				if "RangeShifterSequence" in ds1:
					RangeShifterSequence_data = ds1.RangeShifterSequence
					if type(RangeShifterSequence_data) == Sequence:
						for i2 in range(0, len(RangeShifterSequence_data)):
							if verbose:
								log.append( " RangeShifterSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RangeShifterSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "RangeShifterNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying RangeShifterNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "RangeShifterID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying RangeShifterID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "RangeShifterType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying RangeShifterType --> "+("success" if partial_success else "failure"))

							if "RangeShifterType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["RangeShifterType"], 
									StringValueTable_RangeShifterType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string defined terms RangeShifterType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "RangeShifterDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying RangeShifterDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "NumberOfLateralSpreadingDevices", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying NumberOfLateralSpreadingDevices --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeams", 
						"LateralSpreadingDeviceSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfLateralSpreadingDevicesNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying LateralSpreadingDeviceSequence" + ("success" if partial_success else "failure")) 
				if "LateralSpreadingDeviceSequence" in ds1:
					LateralSpreadingDeviceSequence_data = ds1.LateralSpreadingDeviceSequence
					if type(LateralSpreadingDeviceSequence_data) == Sequence:
						for i2 in range(0, len(LateralSpreadingDeviceSequence_data)):
							if verbose:
								log.append( " LateralSpreadingDeviceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = LateralSpreadingDeviceSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "LateralSpreadingDeviceNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying LateralSpreadingDeviceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "LateralSpreadingDeviceID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying LateralSpreadingDeviceID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "LateralSpreadingDeviceType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying LateralSpreadingDeviceType --> "+("success" if partial_success else "failure"))

							if "LateralSpreadingDeviceType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["LateralSpreadingDeviceType"], 
									StringValueTable_LateralSpreadingDeviceType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string defined terms LateralSpreadingDeviceType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "LateralSpreadingDeviceDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying LateralSpreadingDeviceDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "NumberOfRangeModulators", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying NumberOfRangeModulators --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeams", 
						"RangeModulatorSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfRangeModulatorsNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying RangeModulatorSequence" + ("success" if partial_success else "failure")) 
				if "RangeModulatorSequence" in ds1:
					RangeModulatorSequence_data = ds1.RangeModulatorSequence
					if type(RangeModulatorSequence_data) == Sequence:
						for i2 in range(0, len(RangeModulatorSequence_data)):
							if verbose:
								log.append( " RangeModulatorSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RangeModulatorSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "RangeModulatorNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying RangeModulatorNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "RangeModulatorID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying RangeModulatorID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "RangeModulatorType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying RangeModulatorType --> "+("success" if partial_success else "failure"))

							if "RangeModulatorType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["RangeModulatorType"], 
									StringValueTable_RangeModulatorType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string defined terms RangeModulatorType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "RangeModulatorDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying RangeModulatorDescription --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "BeamCurrentModulationID", 
									verbose, log, ElementDictionary, 
									Condition_RangeModulatorTypeIsWhlModWeights, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying BeamCurrentModulationID --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_PatientSupportIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTIonBeams success after verifying PatientSupportIdentificationMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "FixationLightAzimuthalAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying FixationLightAzimuthalAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeams", "FixationLightPolarAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying FixationLightPolarAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTIonBeams", "FinalCumulativeMetersetWeight", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying FinalCumulativeMetersetWeight --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeams", "NumberOfControlPoints", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeams success after verifying NumberOfControlPoints --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"RTIonBeams", 
						"IonControlPointSequence", 
						verbose, log, ElementDictionary, 
									2, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeams success after verifying IonControlPointSequence" + ("success" if partial_success else "failure")) 
				if "IonControlPointSequence" in ds1:
					IonControlPointSequence_data = ds1.IonControlPointSequence
					if type(IonControlPointSequence_data) == Sequence:
						for i2 in range(0, len(IonControlPointSequence_data)):
							if verbose:
								log.append( " IonControlPointSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IonControlPointSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeams", "ControlPointIndex", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying ControlPointIndex --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTIonBeams", "CumulativeMetersetWeight", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying CumulativeMetersetWeight --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTIonBeams", 
									"ReferencedDoseReferenceSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTIonBeams success after verifying ReferencedDoseReferenceSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedDoseReferenceSequence" in ds2:
								ReferencedDoseReferenceSequence_data = ds2.ReferencedDoseReferenceSequence
								if type(ReferencedDoseReferenceSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedDoseReferenceSequence_data)):
										if verbose:
											log.append( " ReferencedDoseReferenceSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedDoseReferenceSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTIonBeams", "ReferencedDoseReferenceNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType2(ds3, 
												"RTIonBeams", "CumulativeDoseReferenceCoefficient", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying CumulativeDoseReferenceCoefficient --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "NominalBeamEnergy", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying NominalBeamEnergy --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "KVP", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying KVP --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "MetersetRate", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying MetersetRate --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"RTIonBeams", 
									"IonWedgePositionSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTIonBeams success after verifying IonWedgePositionSequence" + ("success" if partial_success else "failure")) 
							if "IonWedgePositionSequence" in ds2:
								IonWedgePositionSequence_data = ds2.IonWedgePositionSequence
								if type(IonWedgePositionSequence_data) == Sequence:
									for i3 in range(0, len(IonWedgePositionSequence_data)):
										if verbose:
											log.append( " IonWedgePositionSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = IonWedgePositionSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTIonBeams", "ReferencedWedgeNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying ReferencedWedgeNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTIonBeams", "WedgePosition", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying WedgePosition --> "+("success" if partial_success else "failure"))

										if "WedgePosition" not in ds3: 
											partial_success = False 
										else:
											partial_success = verifyEnumValues(ds3["WedgePosition"], 
												StringValueTable_WedgePosition, 
												verbose, log, -1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying string enumerated values WedgePosition --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1C(ds3, 
												"RTIonBeams", "WedgeThinEdgePosition", 
												verbose, log, ElementDictionary, 
												0, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying WedgeThinEdgePosition --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"RTIonBeams", 
									"RangeShifterSettingsSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTIonBeams success after verifying RangeShifterSettingsSequence" + ("success" if partial_success else "failure")) 
							if "RangeShifterSettingsSequence" in ds2:
								RangeShifterSettingsSequence_data = ds2.RangeShifterSettingsSequence
								if type(RangeShifterSettingsSequence_data) == Sequence:
									for i3 in range(0, len(RangeShifterSettingsSequence_data)):
										if verbose:
											log.append( " RangeShifterSettingsSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = RangeShifterSettingsSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTIonBeams", "ReferencedRangeShifterNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying ReferencedRangeShifterNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTIonBeams", "RangeShifterSetting", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying RangeShifterSetting --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeams", "IsocenterToRangeShifterDistance", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying IsocenterToRangeShifterDistance --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeams", "RangeShifterWaterEquivalentThickness", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying RangeShifterWaterEquivalentThickness --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"RTIonBeams", 
									"LateralSpreadingDeviceSettingsSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTIonBeams success after verifying LateralSpreadingDeviceSettingsSequence" + ("success" if partial_success else "failure")) 
							if "LateralSpreadingDeviceSettingsSequence" in ds2:
								LateralSpreadingDeviceSettingsSequence_data = ds2.LateralSpreadingDeviceSettingsSequence
								if type(LateralSpreadingDeviceSettingsSequence_data) == Sequence:
									for i3 in range(0, len(LateralSpreadingDeviceSettingsSequence_data)):
										if verbose:
											log.append( " LateralSpreadingDeviceSettingsSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = LateralSpreadingDeviceSettingsSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTIonBeams", "ReferencedLateralSpreadingDeviceNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying ReferencedLateralSpreadingDeviceNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTIonBeams", "LateralSpreadingDeviceSetting", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying LateralSpreadingDeviceSetting --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeams", "IsocenterToLateralSpreadingDeviceDistance", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying IsocenterToLateralSpreadingDeviceDistance --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeams", "LateralSpreadingDeviceWaterEquivalentThickness", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying LateralSpreadingDeviceWaterEquivalentThickness --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"RTIonBeams", 
									"RangeModulatorSettingsSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTIonBeams success after verifying RangeModulatorSettingsSequence" + ("success" if partial_success else "failure")) 
							if "RangeModulatorSettingsSequence" in ds2:
								RangeModulatorSettingsSequence_data = ds2.RangeModulatorSettingsSequence
								if type(RangeModulatorSettingsSequence_data) == Sequence:
									for i3 in range(0, len(RangeModulatorSettingsSequence_data)):
										if verbose:
											log.append( " RangeModulatorSettingsSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = RangeModulatorSettingsSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTIonBeams", "ReferencedRangeModulatorNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying ReferencedRangeModulatorNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1C(ds3, 
												"RTIonBeams", "RangeModulatorGatingStartValue", 
												verbose, log, ElementDictionary, 
												0, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying RangeModulatorGatingStartValue --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1C(ds3, 
												"RTIonBeams", "RangeModulatorGatingStopValue", 
												verbose, log, ElementDictionary, 
												0, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying RangeModulatorGatingStopValue --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeams", "RangeModulatorGatingStartWaterEquivalentThickness", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying RangeModulatorGatingStartWaterEquivalentThickness --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeams", "RangeModulatorGatingStopWaterEquivalentThickness", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeams success after verifying RangeModulatorGatingStopWaterEquivalentThickness --> "+("success" if partial_success else "failure"))

							partial_success =  Macro_BeamLimitingDevicePositionMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTIonBeams success after verifying BeamLimitingDevicePositionMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "GantryAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying GantryAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "GantryRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying GantryRotationDirection --> "+("success" if partial_success else "failure"))

							if "GantryRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["GantryRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string enumerated values GantryRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "GantryPitchAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying GantryPitchAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "GantryPitchRotationDirection", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying GantryPitchRotationDirection --> "+("success" if partial_success else "failure"))

							if "GantryPitchRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["GantryPitchRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string enumerated values GantryPitchRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "BeamLimitingDeviceAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying BeamLimitingDeviceAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "BeamLimitingDeviceRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying BeamLimitingDeviceRotationDirection --> "+("success" if partial_success else "failure"))

							if "BeamLimitingDeviceRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["BeamLimitingDeviceRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string enumerated values BeamLimitingDeviceRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "ScanSpotPositionMap", 
									verbose, log, ElementDictionary, 
									Condition_ScanModeAboveIsModulatedOrModulatedSpec, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying ScanSpotPositionMap --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "ScanSpotMetersetWeights", 
									verbose, log, ElementDictionary, 
									Condition_ScanModeAboveIsModulatedOrModulatedSpec, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying ScanSpotMetersetWeights --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "ScanningSpotSize", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying ScanningSpotSize --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "NumberOfPaintings", 
									verbose, log, ElementDictionary, 
									Condition_ScanModeAboveIsModulatedOrModulatedSpec, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying NumberOfPaintings --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "PatientSupportAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying PatientSupportAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeams", "PatientSupportRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying PatientSupportRotationDirection --> "+("success" if partial_success else "failure"))

							if "PatientSupportRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["PatientSupportRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string enumerated values PatientSupportRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeams", "TableTopPitchAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying TableTopPitchAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeams", "TableTopPitchRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying TableTopPitchRotationDirection --> "+("success" if partial_success else "failure"))

							if "TableTopPitchRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["TableTopPitchRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string enumerated values TableTopPitchRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeams", "TableTopRollAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying TableTopRollAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeams", "TableTopRollRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying TableTopRollRotationDirection --> "+("success" if partial_success else "failure"))

							if "TableTopRollRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["TableTopRollRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying string enumerated values TableTopRollRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "HeadFixationAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying HeadFixationAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeams", "TableTopVerticalPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying TableTopVerticalPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeams", "TableTopLongitudinalPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying TableTopLongitudinalPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeams", "TableTopLateralPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying TableTopLateralPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeams", "SnoutPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying SnoutPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeams", "IsocenterPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying IsocenterPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeams", "SurfaceEntryPoint", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeams success after verifying SurfaceEntryPoint --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RTIonBeamsSessionRecord_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RTIonBeamsSessionRecord")

	partial_success =  		verifyType3(ds, 
			"RTIonBeamsSessionRecord", "ReferencedFractionGroupNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTIonBeamsSessionRecord success after verifying ReferencedFractionGroupNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"RTIonBeamsSessionRecord", "NumberOfFractionsPlanned", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTIonBeamsSessionRecord success after verifying NumberOfFractionsPlanned --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RTIonBeamsSessionRecord", "PrimaryDosimeterUnit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTIonBeamsSessionRecord success after verifying PrimaryDosimeterUnit --> "+("success" if partial_success else "failure"))

	if "PrimaryDosimeterUnit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PrimaryDosimeterUnit"], 
			StringValueTable_IonPrimaryDosimeterUnit, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RTIonBeamsSessionRecord success after verifying string enumerated values PrimaryDosimeterUnit --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"RTIonBeamsSessionRecord", 
			"TreatmentSessionIonBeamSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RTIonBeamsSessionRecord success after verifying TreatmentSessionIonBeamSequence" + ("success" if partial_success else "failure")) 
	if "TreatmentSessionIonBeamSequence" in ds:
		TreatmentSessionIonBeamSequence_data = ds.TreatmentSessionIonBeamSequence
		if type(TreatmentSessionIonBeamSequence_data) == Sequence:
			for i1 in range(0, len(TreatmentSessionIonBeamSequence_data)):
				if verbose:
					log.append( " TreatmentSessionIonBeamSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TreatmentSessionIonBeamSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "ReferencedBeamNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying ReferencedBeamNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "BeamName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying BeamName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeamsSessionRecord", "BeamDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying BeamDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "BeamType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying BeamType --> "+("success" if partial_success else "failure"))

				if "BeamType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["BeamType"], 
						StringValueTable_BeamType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying string enumerated values BeamType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "RadiationType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying RadiationType --> "+("success" if partial_success else "failure"))

				if "RadiationType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["RadiationType"], 
						StringValueTable_IonRadiationType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying string defined terms RadiationType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTIonBeamsSessionRecord", "RadiationMassNumber", 
						verbose, log, ElementDictionary, 
						Condition_RadiationTypeIsIon, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying RadiationMassNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTIonBeamsSessionRecord", "RadiationAtomicNumber", 
						verbose, log, ElementDictionary, 
						Condition_RadiationTypeIsIon, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying RadiationAtomicNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTIonBeamsSessionRecord", "RadiationChargeState", 
						verbose, log, ElementDictionary, 
						Condition_RadiationTypeIsIon, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying RadiationChargeState --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "ScanMode", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying ScanMode --> "+("success" if partial_success else "failure"))

				if "ScanMode" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ScanMode"], 
						StringValueTable_IonScanMode, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying string defined terms ScanMode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"RTIonBeamsSessionRecord", "ModulatedScanModeType", 
						verbose, log, ElementDictionary, 
						Condition_ScanModeIsModulatedSpec, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying ModulatedScanModeType --> "+("success" if partial_success else "failure"))

				if Condition_ScanModeIsModulatedSpec(ds1, parent_ds1, root_ds):
					if "ModulatedScanModeType" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["ModulatedScanModeType"], 
							StringValueTable_ModulatedScanModeType, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying string defined terms ModulatedScanModeType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeamsSessionRecord", "ReferencedToleranceTableNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying ReferencedToleranceTableNumber --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTIonBeamsSessionRecord", 
						"BeamLimitingDeviceLeafPairsSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying BeamLimitingDeviceLeafPairsSequence" + ("success" if partial_success else "failure")) 
				if "BeamLimitingDeviceLeafPairsSequence" in ds1:
					BeamLimitingDeviceLeafPairsSequence_data = ds1.BeamLimitingDeviceLeafPairsSequence
					if type(BeamLimitingDeviceLeafPairsSequence_data) == Sequence:
						for i2 in range(0, len(BeamLimitingDeviceLeafPairsSequence_data)):
							if verbose:
								log.append( " BeamLimitingDeviceLeafPairsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = BeamLimitingDeviceLeafPairsSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "RTBeamLimitingDeviceType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							if "RTBeamLimitingDeviceType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["RTBeamLimitingDeviceType"], 
									StringValueTable_RTBeamLimitingDeviceType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying string enumerated values RTBeamLimitingDeviceType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "NumberOfLeafJawPairs", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying NumberOfLeafJawPairs --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeamsSessionRecord", "ReferencedPatientSetupNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying ReferencedPatientSetupNumber --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTIonBeamsSessionRecord", 
						"ReferencedVerificationImageSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying ReferencedVerificationImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedVerificationImageSequence" in ds1:
					ReferencedVerificationImageSequence_data = ds1.ReferencedVerificationImageSequence
					if type(ReferencedVerificationImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedVerificationImageSequence_data)):
							if verbose:
								log.append( " ReferencedVerificationImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedVerificationImageSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"RTIonBeamsSessionRecord", 
						"ReferencedMeasuredDoseReferenceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying ReferencedMeasuredDoseReferenceSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedMeasuredDoseReferenceSequence" in ds1:
					ReferencedMeasuredDoseReferenceSequence_data = ds1.ReferencedMeasuredDoseReferenceSequence
					if type(ReferencedMeasuredDoseReferenceSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedMeasuredDoseReferenceSequence_data)):
							if verbose:
								log.append( " ReferencedMeasuredDoseReferenceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedMeasuredDoseReferenceSequence_data[i2]
							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "ReferencedDoseReferenceNumber", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedMeasuredDoseReferenceNumberNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "ReferencedMeasuredDoseReferenceNumber", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedDoseReferenceNumberNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ReferencedMeasuredDoseReferenceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "MeasuredDoseValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying MeasuredDoseValue --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"RTIonBeamsSessionRecord", 
						"ReferencedCalculatedDoseReferenceSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying ReferencedCalculatedDoseReferenceSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedCalculatedDoseReferenceSequence" in ds1:
					ReferencedCalculatedDoseReferenceSequence_data = ds1.ReferencedCalculatedDoseReferenceSequence
					if type(ReferencedCalculatedDoseReferenceSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedCalculatedDoseReferenceSequence_data)):
							if verbose:
								log.append( " ReferencedCalculatedDoseReferenceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedCalculatedDoseReferenceSequence_data[i2]
							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "ReferencedDoseReferenceNumber", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedCalculatedDoseReferenceNumberNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ReferencedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "ReferencedCalculatedDoseReferenceNumber", 
									verbose, log, ElementDictionary, 
									Condition_ReferencedDoseReferenceNumberNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ReferencedCalculatedDoseReferenceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "CalculatedDoseReferenceDoseValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying CalculatedDoseReferenceDoseValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "NumberOfWedges", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying NumberOfWedges --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeamsSessionRecord", 
						"RecordedWedgeSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfWedgesNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying RecordedWedgeSequence" + ("success" if partial_success else "failure")) 
				if "RecordedWedgeSequence" in ds1:
					RecordedWedgeSequence_data = ds1.RecordedWedgeSequence
					if type(RecordedWedgeSequence_data) == Sequence:
						for i2 in range(0, len(RecordedWedgeSequence_data)):
							if verbose:
								log.append( " RecordedWedgeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RecordedWedgeSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "WedgeNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying WedgeNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTIonBeamsSessionRecord", "WedgeType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying WedgeType --> "+("success" if partial_success else "failure"))

							if "WedgeType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["WedgeType"], 
									StringValueTable_IonWedgeType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying string defined terms WedgeType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "WedgeID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying WedgeID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "WedgeAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying WedgeAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "WedgeOrientation", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying WedgeOrientation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "NumberOfCompensators", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying NumberOfCompensators --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeamsSessionRecord", 
						"RecordedCompensatorSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfCompensatorsNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying RecordedCompensatorSequence" + ("success" if partial_success else "failure")) 
				if "RecordedCompensatorSequence" in ds1:
					RecordedCompensatorSequence_data = ds1.RecordedCompensatorSequence
					if type(RecordedCompensatorSequence_data) == Sequence:
						for i2 in range(0, len(RecordedCompensatorSequence_data)):
							if verbose:
								log.append( " RecordedCompensatorSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RecordedCompensatorSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "ReferencedCompensatorNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ReferencedCompensatorNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTIonBeamsSessionRecord", "CompensatorType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying CompensatorType --> "+("success" if partial_success else "failure"))

							if "CompensatorType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["CompensatorType"], 
									StringValueTable_CompensatorType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying string defined terms CompensatorType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "CompensatorID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying CompensatorID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "NumberOfBoli", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying NumberOfBoli --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeamsSessionRecord", 
						"ReferencedBolusSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfBoliNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying ReferencedBolusSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedBolusSequence" in ds1:
					ReferencedBolusSequence_data = ds1.ReferencedBolusSequence
					if type(ReferencedBolusSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedBolusSequence_data)):
							if verbose:
								log.append( " ReferencedBolusSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedBolusSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "ReferencedROINumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ReferencedROINumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "NumberOfBlocks", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying NumberOfBlocks --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeamsSessionRecord", 
						"RecordedBlockSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfBlocksNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying RecordedBlockSequence" + ("success" if partial_success else "failure")) 
				if "RecordedBlockSequence" in ds1:
					RecordedBlockSequence_data = ds1.RecordedBlockSequence
					if type(RecordedBlockSequence_data) == Sequence:
						for i2 in range(0, len(RecordedBlockSequence_data)):
							if verbose:
								log.append( " RecordedBlockSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RecordedBlockSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "BlockTrayID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying BlockTrayID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "ReferencedBlockNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ReferencedBlockNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTIonBeamsSessionRecord", "BlockName", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying BlockName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeamsSessionRecord", 
						"RecordedSnoutSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying RecordedSnoutSequence" + ("success" if partial_success else "failure")) 
				if "RecordedSnoutSequence" in ds1:
					RecordedSnoutSequence_data = ds1.RecordedSnoutSequence
					if type(RecordedSnoutSequence_data) == Sequence:
						for i2 in range(0, len(RecordedSnoutSequence_data)):
							if verbose:
								log.append( " RecordedSnoutSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RecordedSnoutSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "SnoutID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying SnoutID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeamsSessionRecord", 
						"ApplicatorSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying ApplicatorSequence" + ("success" if partial_success else "failure")) 
				if "ApplicatorSequence" in ds1:
					ApplicatorSequence_data = ds1.ApplicatorSequence
					if type(ApplicatorSequence_data) == Sequence:
						for i2 in range(0, len(ApplicatorSequence_data)):
							if verbose:
								log.append( " ApplicatorSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ApplicatorSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "ApplicatorID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ApplicatorID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "ApplicatorType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ApplicatorType --> "+("success" if partial_success else "failure"))

							if "ApplicatorType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["ApplicatorType"], 
									StringValueTable_IonApplicatorType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying string defined terms ApplicatorType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "ApplicatorDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ApplicatorDescription --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTIonBeamsSessionRecord", 
									"GeneralAccessorySequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTIonBeamsSessionRecord success after verifying GeneralAccessorySequence" + ("success" if partial_success else "failure")) 
							if "GeneralAccessorySequence" in ds2:
								GeneralAccessorySequence_data = ds2.GeneralAccessorySequence
								if type(GeneralAccessorySequence_data) == Sequence:
									for i3 in range(0, len(GeneralAccessorySequence_data)):
										if verbose:
											log.append( " GeneralAccessorySequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = GeneralAccessorySequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "GeneralAccessoryNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying GeneralAccessoryNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "GeneralAccessoryID", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying GeneralAccessoryID --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeamsSessionRecord", "GeneralAccessoryDescription", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying GeneralAccessoryDescription --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeamsSessionRecord", "GeneralAccessoryType", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying GeneralAccessoryType --> "+("success" if partial_success else "failure"))

										if "GeneralAccessoryType" not in ds3: 
											partial_success = False 
										else: 
											partial_success = verifyDefinedTerms(ds3["GeneralAccessoryType"], 
												StringValueTable_RTGeneralAccessoryType, 
												verbose, log, -1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying string defined terms GeneralAccessoryType --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeamsSessionRecord", "AccessoryCode", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "NumberOfRangeShifters", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying NumberOfRangeShifters --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeamsSessionRecord", 
						"RecordedRangeShifterSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfRangeShiftersNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying RecordedRangeShifterSequence" + ("success" if partial_success else "failure")) 
				if "RecordedRangeShifterSequence" in ds1:
					RecordedRangeShifterSequence_data = ds1.RecordedRangeShifterSequence
					if type(RecordedRangeShifterSequence_data) == Sequence:
						for i2 in range(0, len(RecordedRangeShifterSequence_data)):
							if verbose:
								log.append( " RecordedRangeShifterSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RecordedRangeShifterSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "ReferencedRangeShifterNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ReferencedRangeShifterNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "NumberOfLateralSpreadingDevices", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying NumberOfLateralSpreadingDevices --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeamsSessionRecord", 
						"RecordedLateralSpreadingDeviceSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfLateralSpreadingDevicesNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying RecordedLateralSpreadingDeviceSequence" + ("success" if partial_success else "failure")) 
				if "RecordedLateralSpreadingDeviceSequence" in ds1:
					RecordedLateralSpreadingDeviceSequence_data = ds1.RecordedLateralSpreadingDeviceSequence
					if type(RecordedLateralSpreadingDeviceSequence_data) == Sequence:
						for i2 in range(0, len(RecordedLateralSpreadingDeviceSequence_data)):
							if verbose:
								log.append( " RecordedLateralSpreadingDeviceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RecordedLateralSpreadingDeviceSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "ReferencedLateralSpreadingDeviceNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ReferencedLateralSpreadingDeviceNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "LateralSpreadingDeviceID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying LateralSpreadingDeviceID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "NumberOfRangeModulators", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying NumberOfRangeModulators --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"RTIonBeamsSessionRecord", 
						"RecordedRangeModulatorSequence", 
						verbose, log, ElementDictionary, 
						Condition_NumberOfRangeModulatorsNotZero, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying RecordedRangeModulatorSequence" + ("success" if partial_success else "failure")) 
				if "RecordedRangeModulatorSequence" in ds1:
					RecordedRangeModulatorSequence_data = ds1.RecordedRangeModulatorSequence
					if type(RecordedRangeModulatorSequence_data) == Sequence:
						for i2 in range(0, len(RecordedRangeModulatorSequence_data)):
							if verbose:
								log.append( " RecordedRangeModulatorSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RecordedRangeModulatorSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "ReferencedRangeModulatorNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ReferencedRangeModulatorNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "RangeModulatorID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying RangeModulatorID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "AccessoryCode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying AccessoryCode --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "RangeModulatorType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying RangeModulatorType --> "+("success" if partial_success else "failure"))

							if "RangeModulatorType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["RangeModulatorType"], 
									StringValueTable_RangeModulatorType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying string defined terms RangeModulatorType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "BeamCurrentModulationID", 
									verbose, log, ElementDictionary, 
									Condition_RangeModulatorTypeIsWhlModWeights, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying BeamCurrentModulationID --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_PatientSupportIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying PatientSupportIdentificationMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"RTIonBeamsSessionRecord", "FixationLightAzimuthalAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying FixationLightAzimuthalAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeamsSessionRecord", "FixationLightPolarAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying FixationLightPolarAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTIonBeamsSessionRecord", "CurrentFractionNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying CurrentFractionNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTIonBeamsSessionRecord", "TreatmentDeliveryType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying TreatmentDeliveryType --> "+("success" if partial_success else "failure"))

				if "TreatmentDeliveryType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["TreatmentDeliveryType"], 
						StringValueTable_TreatmentDeliveryType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying string defined terms TreatmentDeliveryType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "TreatmentTerminationStatus", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying TreatmentTerminationStatus --> "+("success" if partial_success else "failure"))

				if "TreatmentTerminationStatus" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["TreatmentTerminationStatus"], 
						StringValueTable_TreatmentTerminationStatus, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying string enumerated values TreatmentTerminationStatus --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeamsSessionRecord", "TreatmentTerminationCode", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying TreatmentTerminationCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"RTIonBeamsSessionRecord", "TreatmentVerificationStatus", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying TreatmentVerificationStatus --> "+("success" if partial_success else "failure"))

				if "TreatmentVerificationStatus" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["TreatmentVerificationStatus"], 
						StringValueTable_TreatmentVerificationStatus, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying string enumerated values TreatmentVerificationStatus --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeamsSessionRecord", "SpecifiedPrimaryMeterset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying SpecifiedPrimaryMeterset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeamsSessionRecord", "SpecifiedSecondaryMeterset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying SpecifiedSecondaryMeterset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeamsSessionRecord", "DeliveredPrimaryMeterset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying DeliveredPrimaryMeterset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeamsSessionRecord", "DeliveredSecondaryMeterset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying DeliveredSecondaryMeterset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeamsSessionRecord", "SpecifiedTreatmentTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying SpecifiedTreatmentTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"RTIonBeamsSessionRecord", "DeliveredTreatmentTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying DeliveredTreatmentTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"RTIonBeamsSessionRecord", "NumberOfControlPoints", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " RTIonBeamsSessionRecord success after verifying NumberOfControlPoints --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"RTIonBeamsSessionRecord", 
						"IonControlPointDeliverySequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RTIonBeamsSessionRecord success after verifying IonControlPointDeliverySequence" + ("success" if partial_success else "failure")) 
				if "IonControlPointDeliverySequence" in ds1:
					IonControlPointDeliverySequence_data = ds1.IonControlPointDeliverySequence
					if type(IonControlPointDeliverySequence_data) == Sequence:
						for i2 in range(0, len(IonControlPointDeliverySequence_data)):
							if verbose:
								log.append( " IonControlPointDeliverySequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IonControlPointDeliverySequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "ReferencedControlPointIndex", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ReferencedControlPointIndex --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "TreatmentControlPointDate", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying TreatmentControlPointDate --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "TreatmentControlPointTime", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying TreatmentControlPointTime --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"RTIonBeamsSessionRecord", "SpecifiedMeterset", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying SpecifiedMeterset --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"RTIonBeamsSessionRecord", "DeliveredMeterset", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying DeliveredMeterset --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "MetersetRateSet", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying MetersetRateSet --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "MetersetRateDelivered", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying MetersetRateDelivered --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "NominalBeamEnergy", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying NominalBeamEnergy --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "KVP", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying KVP --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", 
									"IonWedgePositionSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTIonBeamsSessionRecord success after verifying IonWedgePositionSequence" + ("success" if partial_success else "failure")) 
							if "IonWedgePositionSequence" in ds2:
								IonWedgePositionSequence_data = ds2.IonWedgePositionSequence
								if type(IonWedgePositionSequence_data) == Sequence:
									for i3 in range(0, len(IonWedgePositionSequence_data)):
										if verbose:
											log.append( " IonWedgePositionSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = IonWedgePositionSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "ReferencedWedgeNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying ReferencedWedgeNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "WedgePosition", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying WedgePosition --> "+("success" if partial_success else "failure"))

										if "WedgePosition" not in ds3: 
											partial_success = False 
										else:
											partial_success = verifyEnumValues(ds3["WedgePosition"], 
												StringValueTable_WedgePosition, 
												verbose, log, -1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying string enumerated values WedgePosition --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1C(ds3, 
												"RTIonBeamsSessionRecord", "WedgeThinEdgePosition", 
												verbose, log, ElementDictionary, 
												0, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying WedgeThinEdgePosition --> "+("success" if partial_success else "failure"))

							partial_success =  Macro_BeamLimitingDevicePositionMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying BeamLimitingDevicePositionMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", 
									"RangeShifterSettingsSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTIonBeamsSessionRecord success after verifying RangeShifterSettingsSequence" + ("success" if partial_success else "failure")) 
							if "RangeShifterSettingsSequence" in ds2:
								RangeShifterSettingsSequence_data = ds2.RangeShifterSettingsSequence
								if type(RangeShifterSettingsSequence_data) == Sequence:
									for i3 in range(0, len(RangeShifterSettingsSequence_data)):
										if verbose:
											log.append( " RangeShifterSettingsSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = RangeShifterSettingsSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "ReferencedRangeShifterNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying ReferencedRangeShifterNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "RangeShifterSetting", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying RangeShifterSetting --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", 
									"LateralSpreadingDeviceSettingsSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTIonBeamsSessionRecord success after verifying LateralSpreadingDeviceSettingsSequence" + ("success" if partial_success else "failure")) 
							if "LateralSpreadingDeviceSettingsSequence" in ds2:
								LateralSpreadingDeviceSettingsSequence_data = ds2.LateralSpreadingDeviceSettingsSequence
								if type(LateralSpreadingDeviceSettingsSequence_data) == Sequence:
									for i3 in range(0, len(LateralSpreadingDeviceSettingsSequence_data)):
										if verbose:
											log.append( " LateralSpreadingDeviceSettingsSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = LateralSpreadingDeviceSettingsSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "ReferencedLateralSpreadingDeviceNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying ReferencedLateralSpreadingDeviceNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "LateralSpreadingDeviceSetting", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying LateralSpreadingDeviceSetting --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", 
									"RangeModulatorSettingsSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTIonBeamsSessionRecord success after verifying RangeModulatorSettingsSequence" + ("success" if partial_success else "failure")) 
							if "RangeModulatorSettingsSequence" in ds2:
								RangeModulatorSettingsSequence_data = ds2.RangeModulatorSettingsSequence
								if type(RangeModulatorSettingsSequence_data) == Sequence:
									for i3 in range(0, len(RangeModulatorSettingsSequence_data)):
										if verbose:
											log.append( " RangeModulatorSettingsSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = RangeModulatorSettingsSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "ReferencedRangeModulatorNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying ReferencedRangeModulatorNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1C(ds3, 
												"RTIonBeamsSessionRecord", "RangeModulatorGatingStartValue", 
												verbose, log, ElementDictionary, 
												0, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying RangeModulatorGatingStartValue --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1C(ds3, 
												"RTIonBeamsSessionRecord", "RangeModulatorGatingStopValue", 
												verbose, log, ElementDictionary, 
												0, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying RangeModulatorGatingStopValue --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "GantryAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying GantryAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "GantryRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying GantryRotationDirection --> "+("success" if partial_success else "failure"))

							if "GantryRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["GantryRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying string enumerated values GantryRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "GantryPitchAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying GantryPitchAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "GantryPitchRotationDirection", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying GantryPitchRotationDirection --> "+("success" if partial_success else "failure"))

							if "GantryPitchRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["GantryPitchRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying string enumerated values GantryPitchRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "BeamLimitingDeviceAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying BeamLimitingDeviceAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "BeamLimitingDeviceRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying BeamLimitingDeviceRotationDirection --> "+("success" if partial_success else "failure"))

							if "BeamLimitingDeviceRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["BeamLimitingDeviceRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying string enumerated values BeamLimitingDeviceRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "ScanSpotTuneID", 
									verbose, log, ElementDictionary, 
									Condition_ScanModeAboveIsModulatedOrModulatedSpec, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ScanSpotTuneID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "NumberOfScanSpotPositions", 
									verbose, log, ElementDictionary, 
									Condition_ScanModeAboveIsModulatedOrModulatedSpec, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying NumberOfScanSpotPositions --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "ScanSpotPositionMap", 
									verbose, log, ElementDictionary, 
									Condition_ScanModeAboveIsModulatedOrModulatedSpec, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ScanSpotPositionMap --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "ScanSpotMetersetsDelivered", 
									verbose, log, ElementDictionary, 
									Condition_ScanModeAboveIsModulatedOrModulatedSpec, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ScanSpotMetersetsDelivered --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "ScanSpotTimeOffset", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ScanSpotTimeOffset --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "ScanningSpotSize", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying ScanningSpotSize --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "NumberOfPaintings", 
									verbose, log, ElementDictionary, 
									Condition_ScanModeAboveIsModulatedOrModulatedSpec, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying NumberOfPaintings --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "PatientSupportAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying PatientSupportAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"RTIonBeamsSessionRecord", "PatientSupportRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying PatientSupportRotationDirection --> "+("success" if partial_success else "failure"))

							if "PatientSupportRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["PatientSupportRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying string enumerated values PatientSupportRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeamsSessionRecord", "TableTopPitchAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying TableTopPitchAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeamsSessionRecord", "TableTopPitchRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying TableTopPitchRotationDirection --> "+("success" if partial_success else "failure"))

							if "TableTopPitchRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["TableTopPitchRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying string enumerated values TableTopPitchRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeamsSessionRecord", "TableTopRollAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying TableTopRollAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeamsSessionRecord", "TableTopRollRotationDirection", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying TableTopRollRotationDirection --> "+("success" if partial_success else "failure"))

							if "TableTopRollRotationDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["TableTopRollRotationDirection"], 
									StringValueTable_RotationDirectionWithNone, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying string enumerated values TableTopRollRotationDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"RTIonBeamsSessionRecord", "HeadFixationAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying HeadFixationAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeamsSessionRecord", "TableTopVerticalPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying TableTopVerticalPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeamsSessionRecord", "TableTopLongitudinalPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying TableTopLongitudinalPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeamsSessionRecord", "TableTopLateralPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying TableTopLateralPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"RTIonBeamsSessionRecord", "SnoutPosition", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " RTIonBeamsSessionRecord success after verifying SnoutPosition --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTIonBeamsSessionRecord", 
									"CorrectedParameterSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTIonBeamsSessionRecord success after verifying CorrectedParameterSequence" + ("success" if partial_success else "failure")) 
							if "CorrectedParameterSequence" in ds2:
								CorrectedParameterSequence_data = ds2.CorrectedParameterSequence
								if type(CorrectedParameterSequence_data) == Sequence:
									for i3 in range(0, len(CorrectedParameterSequence_data)):
										if verbose:
											log.append( " CorrectedParameterSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = CorrectedParameterSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "ParameterSequencePointer", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying ParameterSequencePointer --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "ParameterItemIndex", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying ParameterItemIndex --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "ParameterPointer", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying ParameterPointer --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "CorrectionValue", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying CorrectionValue --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"RTIonBeamsSessionRecord", 
									"OverrideSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "RTIonBeamsSessionRecord success after verifying OverrideSequence" + ("success" if partial_success else "failure")) 
							if "OverrideSequence" in ds2:
								OverrideSequence_data = ds2.OverrideSequence
								if type(OverrideSequence_data) == Sequence:
									for i3 in range(0, len(OverrideSequence_data)):
										if verbose:
											log.append( " OverrideSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = OverrideSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "ParameterSequencePointer", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying ParameterSequencePointer --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "OverrideParameterPointer", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying OverrideParameterPointer --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"RTIonBeamsSessionRecord", "ParameterItemIndex", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying ParameterItemIndex --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"RTIonBeamsSessionRecord", "ParameterValueNumber", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying ParameterValueNumber --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType2(ds3, 
												"RTIonBeamsSessionRecord", "OperatorsName", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying OperatorsName --> "+("success" if partial_success else "failure"))

										partial_success = verifyType3(ds3, 
												"RTIonBeamsSessionRecord", 
												"OperatorIdentificationSequence", 
												verbose, log, ElementDictionary, 
																					1, 1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( "RTIonBeamsSessionRecord success after verifying OperatorIdentificationSequence" + ("success" if partial_success else "failure")) 
										if "OperatorIdentificationSequence" in ds3:
											OperatorIdentificationSequence_data = ds3.OperatorIdentificationSequence
											if type(OperatorIdentificationSequence_data) == Sequence:
												for i4 in range(0, len(OperatorIdentificationSequence_data)):
													if verbose:
														log.append( " OperatorIdentificationSequence item [{}]".format(i4+1))
													parent_ds4 = ds3
													ds4 = OperatorIdentificationSequence_data[i4]
													partial_success =  Macro_PersonIdentificationMacro_verify(ds4, parent_ds4, root_ds, verbose, log, ElementDictionary)

													if verbose:
														log.append( " RTIonBeamsSessionRecord success after verifying PersonIdentificationMacro"+ ("success" if partial_success else "failure" ))
										partial_success =  		verifyType3(ds3, 
												"RTIonBeamsSessionRecord", "OverrideReason", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " RTIonBeamsSessionRecord success after verifying OverrideReason --> "+("success" if partial_success else "failure"))

	return global_success

def Module_AcquisitionContext_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"AcquisitionContext")

	partial_success = verifyType2(ds, 
			"AcquisitionContext", 
			"AcquisitionContextSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "AcquisitionContext success after verifying AcquisitionContextSequence" + ("success" if partial_success else "failure")) 
	if "AcquisitionContextSequence" in ds:
		AcquisitionContextSequence_data = ds.AcquisitionContextSequence
		if type(AcquisitionContextSequence_data) == Sequence:
			for i1 in range(0, len(AcquisitionContextSequence_data)):
				if verbose:
					log.append( " AcquisitionContextSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AcquisitionContextSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"AcquisitionContext", "ValueType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AcquisitionContext success after verifying ValueType --> "+("success" if partial_success else "failure"))

				if "ValueType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ValueType"], 
						StringValueTable_AcquisitionContextValueTypes, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AcquisitionContext success after verifying string defined terms ValueType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"AcquisitionContext", "ObservationDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AcquisitionContext success after verifying ObservationDateTime --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"AcquisitionContext", 
						"ConceptNameCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "AcquisitionContext success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
				if "ConceptNameCodeSequence" in ds1:
					ConceptNameCodeSequence_data = ds1.ConceptNameCodeSequence
					if type(ConceptNameCodeSequence_data) == Sequence:
						for i2 in range(0, len(ConceptNameCodeSequence_data)):
							if verbose:
								log.append( " ConceptNameCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ConceptNameCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " AcquisitionContext success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"AcquisitionContext", "ReferencedFrameNumber", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AcquisitionContext success after verifying ReferencedFrameNumber --> "+("success" if partial_success else "failure"))

				if "ReferencedFrameNumber" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ReferencedFrameNumber"], 
						verbose, log, -1, False)


				if Condition_ReferencedFrameNumberOrReferencedFrameNumbersPresentButNMImageInstance(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" May not be present for NM Image - attribute <ReferencedFrameNumber>")

				partial_success =  		verifyType1C(ds1, 
						"AcquisitionContext", "NumericValue", 
						verbose, log, ElementDictionary, 
						Condition_AcquisitionContextItemIsNumeric, 
						False, 
						parent_ds1, root_ds, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AcquisitionContext success after verifying NumericValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"AcquisitionContext", "FloatingPointValue", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AcquisitionContext success after verifying FloatingPointValue --> "+("success" if partial_success else "failure"))


				if Condition_FloatingPointValuePresentButAcquisitionContextItemIsNotNumeric(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" May not be present when NumericValue is absent - attribute <FloatingPointValue>")

				partial_success =  		verifyType1C(ds1, 
						"AcquisitionContext", "RationalNumeratorValue", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AcquisitionContext success after verifying RationalNumeratorValue --> "+("success" if partial_success else "failure"))


				if Condition_RationalNumeratorValuePresentButAcquisitionContextItemIsNotNumeric(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" May not be present when NumericValue is absent - attribute <RationalNumeratorValue>")

				partial_success =  		verifyType1C(ds1, 
						"AcquisitionContext", "RationalDenominatorValue", 
						verbose, log, ElementDictionary, 
						Condition_RationalNumeratorValueIsPresent, 
						False, 
						parent_ds1, root_ds, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AcquisitionContext success after verifying RationalDenominatorValue --> "+("success" if partial_success else "failure"))

				if Condition_RationalNumeratorValueIsPresent(ds1, parent_ds1, root_ds):
					if "RationalDenominatorValue" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["RationalDenominatorValue"], 
							verbose, log, -1, False)


				if Condition_RationalDenominatorValuePresentButAcquisitionContextItemIsNotNumeric(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" May not be present when NumericValue is absent - attribute <RationalDenominatorValue>")

				partial_success = verifyType1C(ds1, 
						"AcquisitionContext", 
						"MeasurementUnitsCodeSequence", 
						verbose, log, ElementDictionary, 
						Condition_NeedMeasurementUnitsCodeSequence, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "AcquisitionContext success after verifying MeasurementUnitsCodeSequence" + ("success" if partial_success else "failure")) 
				if "MeasurementUnitsCodeSequence" in ds1:
					MeasurementUnitsCodeSequence_data = ds1.MeasurementUnitsCodeSequence
					if type(MeasurementUnitsCodeSequence_data) == Sequence:
						for i2 in range(0, len(MeasurementUnitsCodeSequence_data)):
							if verbose:
								log.append( " MeasurementUnitsCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MeasurementUnitsCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " AcquisitionContext success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))

				if Condition_MeasurementUnitsCodeSequencePresentAndNumericValueAbsent(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" May not be present when NumericValue is absent - attribute <MeasurementUnitsCodeSequence>")

				partial_success =  		verifyType1C(ds1, 
						"AcquisitionContext", "Date", 
						verbose, log, ElementDictionary, 
						Condition_AcquisitionContextItemIsDate, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AcquisitionContext success after verifying Date --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"AcquisitionContext", "Time", 
						verbose, log, ElementDictionary, 
						Condition_AcquisitionContextItemIsTime, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AcquisitionContext success after verifying Time --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"AcquisitionContext", "PersonName", 
						verbose, log, ElementDictionary, 
						Condition_AcquisitionContextItemIsPersonName, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AcquisitionContext success after verifying PersonName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"AcquisitionContext", "TextValue", 
						verbose, log, ElementDictionary, 
						Condition_AcquisitionContextItemIsTextValue, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AcquisitionContext success after verifying TextValue --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"AcquisitionContext", 
						"ConceptCodeSequence", 
						verbose, log, ElementDictionary, 
						Condition_AcquisitionContextItemIsConceptCodeSequence, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "AcquisitionContext success after verifying ConceptCodeSequence" + ("success" if partial_success else "failure")) 
				if "ConceptCodeSequence" in ds1:
					ConceptCodeSequence_data = ds1.ConceptCodeSequence
					if type(ConceptCodeSequence_data) == Sequence:
						for i2 in range(0, len(ConceptCodeSequence_data)):
							if verbose:
								log.append( " ConceptCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ConceptCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " AcquisitionContext success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"AcquisitionContext", "AcquisitionContextDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " AcquisitionContext success after verifying AcquisitionContextDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_SpecimenMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SpecimenMacro")

	partial_success =  		verifyType1(ds, 
			"SpecimenMacro", "ContainerIdentifier", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpecimenMacro success after verifying ContainerIdentifier --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"SpecimenMacro", 
			"IssuerOfTheContainerIdentifierSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SpecimenMacro success after verifying IssuerOfTheContainerIdentifierSequence" + ("success" if partial_success else "failure")) 
	if "IssuerOfTheContainerIdentifierSequence" in ds:
		IssuerOfTheContainerIdentifierSequence_data = ds.IssuerOfTheContainerIdentifierSequence
		if type(IssuerOfTheContainerIdentifierSequence_data) == Sequence:
			for i1 in range(0, len(IssuerOfTheContainerIdentifierSequence_data)):
				if verbose:
					log.append( " IssuerOfTheContainerIdentifierSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IssuerOfTheContainerIdentifierSequence_data[i1]
				partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SpecimenMacro success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"SpecimenMacro", 
			"AlternateContainerIdentifierSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SpecimenMacro success after verifying AlternateContainerIdentifierSequence" + ("success" if partial_success else "failure")) 
	if "AlternateContainerIdentifierSequence" in ds:
		AlternateContainerIdentifierSequence_data = ds.AlternateContainerIdentifierSequence
		if type(AlternateContainerIdentifierSequence_data) == Sequence:
			for i1 in range(0, len(AlternateContainerIdentifierSequence_data)):
				if verbose:
					log.append( " AlternateContainerIdentifierSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AlternateContainerIdentifierSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SpecimenMacro", "ContainerIdentifier", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying ContainerIdentifier --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"SpecimenMacro", 
						"IssuerOfTheContainerIdentifierSequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SpecimenMacro success after verifying IssuerOfTheContainerIdentifierSequence" + ("success" if partial_success else "failure")) 
				if "IssuerOfTheContainerIdentifierSequence" in ds1:
					IssuerOfTheContainerIdentifierSequence_data = ds1.IssuerOfTheContainerIdentifierSequence
					if type(IssuerOfTheContainerIdentifierSequence_data) == Sequence:
						for i2 in range(0, len(IssuerOfTheContainerIdentifierSequence_data)):
							if verbose:
								log.append( " IssuerOfTheContainerIdentifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IssuerOfTheContainerIdentifierSequence_data[i2]
							partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SpecimenMacro success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType2(ds, 
			"SpecimenMacro", 
			"ContainerTypeCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SpecimenMacro success after verifying ContainerTypeCodeSequence" + ("success" if partial_success else "failure")) 
	if "ContainerTypeCodeSequence" in ds:
		ContainerTypeCodeSequence_data = ds.ContainerTypeCodeSequence
		if type(ContainerTypeCodeSequence_data) == Sequence:
			for i1 in range(0, len(ContainerTypeCodeSequence_data)):
				if verbose:
					log.append( " ContainerTypeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContainerTypeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SpecimenMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"SpecimenMacro", "ContainerDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpecimenMacro success after verifying ContainerDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"SpecimenMacro", 
			"ContainerComponentSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SpecimenMacro success after verifying ContainerComponentSequence" + ("success" if partial_success else "failure")) 
	if "ContainerComponentSequence" in ds:
		ContainerComponentSequence_data = ds.ContainerComponentSequence
		if type(ContainerComponentSequence_data) == Sequence:
			for i1 in range(0, len(ContainerComponentSequence_data)):
				if verbose:
					log.append( " ContainerComponentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContainerComponentSequence_data[i1]
				partial_success = verifyType1(ds1, 
						"SpecimenMacro", 
						"ContainerComponentTypeCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SpecimenMacro success after verifying ContainerComponentTypeCodeSequence" + ("success" if partial_success else "failure")) 
				if "ContainerComponentTypeCodeSequence" in ds1:
					ContainerComponentTypeCodeSequence_data = ds1.ContainerComponentTypeCodeSequence
					if type(ContainerComponentTypeCodeSequence_data) == Sequence:
						for i2 in range(0, len(ContainerComponentTypeCodeSequence_data)):
							if verbose:
								log.append( " ContainerComponentTypeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ContainerComponentTypeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SpecimenMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"SpecimenMacro", "Manufacturer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SpecimenMacro", "ManufacturerModelName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SpecimenMacro", "ContainerComponentID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying ContainerComponentID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SpecimenMacro", "ContainerComponentLength", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying ContainerComponentLength --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SpecimenMacro", "ContainerComponentWidth", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying ContainerComponentWidth --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SpecimenMacro", "ContainerComponentDiameter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying ContainerComponentDiameter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SpecimenMacro", "ContainerComponentThickness", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying ContainerComponentThickness --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SpecimenMacro", "ContainerComponentMaterial", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying ContainerComponentMaterial --> "+("success" if partial_success else "failure"))

				if "ContainerComponentMaterial" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ContainerComponentMaterial"], 
						StringValueTable_ContainerComponentMaterial, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying string defined terms ContainerComponentMaterial --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SpecimenMacro", "ContainerComponentDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying ContainerComponentDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"SpecimenMacro", 
			"SpecimenDescriptionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SpecimenMacro success after verifying SpecimenDescriptionSequence" + ("success" if partial_success else "failure")) 
	if "SpecimenDescriptionSequence" in ds:
		SpecimenDescriptionSequence_data = ds.SpecimenDescriptionSequence
		if type(SpecimenDescriptionSequence_data) == Sequence:
			for i1 in range(0, len(SpecimenDescriptionSequence_data)):
				if verbose:
					log.append( " SpecimenDescriptionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SpecimenDescriptionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SpecimenMacro", "SpecimenIdentifier", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying SpecimenIdentifier --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"SpecimenMacro", 
						"IssuerOfTheSpecimenIdentifierSequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SpecimenMacro success after verifying IssuerOfTheSpecimenIdentifierSequence" + ("success" if partial_success else "failure")) 
				if "IssuerOfTheSpecimenIdentifierSequence" in ds1:
					IssuerOfTheSpecimenIdentifierSequence_data = ds1.IssuerOfTheSpecimenIdentifierSequence
					if type(IssuerOfTheSpecimenIdentifierSequence_data) == Sequence:
						for i2 in range(0, len(IssuerOfTheSpecimenIdentifierSequence_data)):
							if verbose:
								log.append( " IssuerOfTheSpecimenIdentifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IssuerOfTheSpecimenIdentifierSequence_data[i2]
							partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SpecimenMacro success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"SpecimenMacro", "SpecimenUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying SpecimenUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SpecimenMacro", 
						"SpecimenTypeCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SpecimenMacro success after verifying SpecimenTypeCodeSequence" + ("success" if partial_success else "failure")) 
				if "SpecimenTypeCodeSequence" in ds1:
					SpecimenTypeCodeSequence_data = ds1.SpecimenTypeCodeSequence
					if type(SpecimenTypeCodeSequence_data) == Sequence:
						for i2 in range(0, len(SpecimenTypeCodeSequence_data)):
							if verbose:
								log.append( " SpecimenTypeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SpecimenTypeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SpecimenMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"SpecimenMacro", "SpecimenShortDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying SpecimenShortDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SpecimenMacro", "SpecimenDetailedDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenMacro success after verifying SpecimenDetailedDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"SpecimenMacro", 
						"SpecimenPreparationSequence", 
						verbose, log, ElementDictionary, 
									0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SpecimenMacro success after verifying SpecimenPreparationSequence" + ("success" if partial_success else "failure")) 
				if "SpecimenPreparationSequence" in ds1:
					SpecimenPreparationSequence_data = ds1.SpecimenPreparationSequence
					if type(SpecimenPreparationSequence_data) == Sequence:
						for i2 in range(0, len(SpecimenPreparationSequence_data)):
							if verbose:
								log.append( " SpecimenPreparationSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SpecimenPreparationSequence_data[i2]
							partial_success = verifyType1(ds2, 
									"SpecimenMacro", 
									"SpecimenPreparationStepContentItemSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "SpecimenMacro success after verifying SpecimenPreparationStepContentItemSequence" + ("success" if partial_success else "failure")) 
							if "SpecimenPreparationStepContentItemSequence" in ds2:
								SpecimenPreparationStepContentItemSequence_data = ds2.SpecimenPreparationStepContentItemSequence
								if type(SpecimenPreparationStepContentItemSequence_data) == Sequence:
									for i3 in range(0, len(SpecimenPreparationStepContentItemSequence_data)):
										if verbose:
											log.append( " SpecimenPreparationStepContentItemSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = SpecimenPreparationStepContentItemSequence_data[i3]
										partial_success =  Macro_ContentItemMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " SpecimenMacro success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_PrimaryAnatomicStructureMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SpecimenMacro success after verifying PrimaryAnatomicStructureMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"SpecimenMacro", 
						"SpecimenLocalizationContentItemSequence", 
						verbose, log, ElementDictionary, 
						0, 
						True, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SpecimenMacro success after verifying SpecimenLocalizationContentItemSequence" + ("success" if partial_success else "failure")) 
				if "SpecimenLocalizationContentItemSequence" in ds1:
					SpecimenLocalizationContentItemSequence_data = ds1.SpecimenLocalizationContentItemSequence
					if type(SpecimenLocalizationContentItemSequence_data) == Sequence:
						for i2 in range(0, len(SpecimenLocalizationContentItemSequence_data)):
							if verbose:
								log.append( " SpecimenLocalizationContentItemSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SpecimenLocalizationContentItemSequence_data[i2]
							partial_success =  Macro_ContentItemMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SpecimenMacro success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_Specimen_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"Specimen")

	partial_success =  Macro_SpecimenMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " Specimen success after verifying SpecimenMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_XRayAcquisitionDose_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRayAcquisitionDose")

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "KVP", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying KVP --> "+("success" if partial_success else "failure"))

	if "KVP" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["KVP"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "XRayTubeCurrent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying XRayTubeCurrent --> "+("success" if partial_success else "failure"))

	if "XRayTubeCurrent" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["XRayTubeCurrent"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "XRayTubeCurrentInuA", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying XRayTubeCurrentInuA --> "+("success" if partial_success else "failure"))

	if "XRayTubeCurrentInuA" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["XRayTubeCurrentInuA"], 
			verbose, log, -1, True)


	if Condition_XRayTubeCurrentInmAIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <XRayAcquisitionDose> - use XRayTubeCurrent and/or XRayTubeCurrentInuA instead of - attribute <XRayTubeCurrentInmA>")

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "ExposureTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying ExposureTime --> "+("success" if partial_success else "failure"))

	if "ExposureTime" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureTime"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "ExposureTimeInuS", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying ExposureTimeInuS --> "+("success" if partial_success else "failure"))

	if "ExposureTimeInuS" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureTimeInuS"], 
			verbose, log, -1, True)


	if Condition_ExposureTimeInmsIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <XRayAcquisitionDose> - use ExposureTime and/or ExposureTimeInuS instead of - attribute <ExposureTimeInms>")

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "Exposure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying Exposure --> "+("success" if partial_success else "failure"))

	if "Exposure" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Exposure"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "ExposureInuAs", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying ExposureInuAs --> "+("success" if partial_success else "failure"))

	if "ExposureInuAs" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureInuAs"], 
			verbose, log, -1, True)


	if Condition_ExposureInmAsIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <XRayAcquisitionDose> - use Exposure and/or ExposureInuAs instead of - attribute <ExposureInmAs>")

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "DistanceSourceToDetector", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

	if "DistanceSourceToDetector" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceSourceToDetector"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "DistanceSourceToPatient", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying DistanceSourceToPatient --> "+("success" if partial_success else "failure"))

	if "DistanceSourceToPatient" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceSourceToPatient"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "ImageAndFluoroscopyAreaDoseProduct", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying ImageAndFluoroscopyAreaDoseProduct --> "+("success" if partial_success else "failure"))

	if "ImageAndFluoroscopyAreaDoseProduct" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ImageAndFluoroscopyAreaDoseProduct"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "BodyPartThickness", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying BodyPartThickness --> "+("success" if partial_success else "failure"))

	if "BodyPartThickness" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["BodyPartThickness"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "RelativeXRayExposure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying RelativeXRayExposure --> "+("success" if partial_success else "failure"))

	if "RelativeXRayExposure" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["RelativeXRayExposure"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "EntranceDose", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying EntranceDose --> "+("success" if partial_success else "failure"))

	if "EntranceDose" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["EntranceDose"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "EntranceDoseInmGy", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying EntranceDoseInmGy --> "+("success" if partial_success else "failure"))

	if "EntranceDoseInmGy" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["EntranceDoseInmGy"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "EntranceDoseDerivation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying EntranceDoseDerivation --> "+("success" if partial_success else "failure"))

	if "EntranceDoseDerivation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["EntranceDoseDerivation"], 
			StringValueTable_EntranceDoseDerivation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying string enumerated values EntranceDoseDerivation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "ExposedArea", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying ExposedArea --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "DistanceSourceToEntrance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying DistanceSourceToEntrance --> "+("success" if partial_success else "failure"))

	if "DistanceSourceToEntrance" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceSourceToEntrance"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "CommentsOnRadiationDose", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying CommentsOnRadiationDose --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "XRayOutput", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying XRayOutput --> "+("success" if partial_success else "failure"))

	if "XRayOutput" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["XRayOutput"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "HalfValueLayer", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying HalfValueLayer --> "+("success" if partial_success else "failure"))

	if "HalfValueLayer" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["HalfValueLayer"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "OrganDose", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying OrganDose --> "+("success" if partial_success else "failure"))

	if "OrganDose" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["OrganDose"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "OrganExposed", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying OrganExposed --> "+("success" if partial_success else "failure"))

	if "OrganExposed" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["OrganExposed"], 
			StringValueTable_OrganExposed, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying string defined terms OrganExposed --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "AnodeTargetMaterial", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying AnodeTargetMaterial --> "+("success" if partial_success else "failure"))

	if "AnodeTargetMaterial" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["AnodeTargetMaterial"], 
			StringValueTable_AnodeTargetMaterial, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying string defined terms AnodeTargetMaterial --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_XRayFiltrationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " XRayAcquisitionDose success after verifying XRayFiltrationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"XRayAcquisitionDose", "RectificationType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying RectificationType --> "+("success" if partial_success else "failure"))

	if "RectificationType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["RectificationType"], 
			StringValueTable_RectificationType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisitionDose success after verifying string defined terms RectificationType --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ExposureIndexMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " XRayAcquisitionDose success after verifying ExposureIndexMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_XRayGeneration_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRayGeneration")

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "KVP", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying KVP --> "+("success" if partial_success else "failure"))

	if "KVP" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["KVP"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "XRayTubeCurrent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying XRayTubeCurrent --> "+("success" if partial_success else "failure"))

	if "XRayTubeCurrent" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["XRayTubeCurrent"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "XRayTubeCurrentInuA", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying XRayTubeCurrentInuA --> "+("success" if partial_success else "failure"))

	if "XRayTubeCurrentInuA" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["XRayTubeCurrentInuA"], 
			verbose, log, -1, True)


	if Condition_XRayTubeCurrentInmAIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <XRayGeneration> - use XRayTubeCurrent and/or XRayTubeCurrentInuA instead of - attribute <XRayTubeCurrentInmA>")

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "ExposureTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying ExposureTime --> "+("success" if partial_success else "failure"))

	if "ExposureTime" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureTime"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "ExposureTimeInuS", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying ExposureTimeInuS --> "+("success" if partial_success else "failure"))

	if "ExposureTimeInuS" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureTimeInuS"], 
			verbose, log, -1, True)


	if Condition_ExposureTimeInmsIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <XRayGeneration> - use ExposureTime and/or ExposureTimeInuS instead of - attribute <ExposureTimeInms>")

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "Exposure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying Exposure --> "+("success" if partial_success else "failure"))

	if "Exposure" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Exposure"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "ExposureInuAs", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying ExposureInuAs --> "+("success" if partial_success else "failure"))

	if "ExposureInuAs" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureInuAs"], 
			verbose, log, -1, True)


	if Condition_ExposureInmAsIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <XRayGeneration> - use Exposure and/or ExposureInuAs instead of - attribute <ExposureInmAs>")

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "ExposureControlMode", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying ExposureControlMode --> "+("success" if partial_success else "failure"))

	if "ExposureControlMode" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ExposureControlMode"], 
			StringValueTable_ExposureControlMode, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying string defined terms ExposureControlMode --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "ExposureControlModeDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying ExposureControlModeDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "ExposureStatus", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying ExposureStatus --> "+("success" if partial_success else "failure"))

	if "ExposureStatus" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ExposureStatus"], 
			StringValueTable_ExposureStatus, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying string defined terms ExposureStatus --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "PhototimerSetting", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying PhototimerSetting --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "FocalSpots", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying FocalSpots --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "AnodeTargetMaterial", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying AnodeTargetMaterial --> "+("success" if partial_success else "failure"))

	if "AnodeTargetMaterial" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["AnodeTargetMaterial"], 
			StringValueTable_AnodeTargetMaterial, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying string defined terms AnodeTargetMaterial --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "RectificationType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying RectificationType --> "+("success" if partial_success else "failure"))

	if "RectificationType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["RectificationType"], 
			StringValueTable_RectificationType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying string defined terms RectificationType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayGeneration", "GeneratorID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGeneration success after verifying GeneratorID --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayFiltrationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayFiltrationMacro")

	partial_success =  		verifyType3(ds, 
			"XRayFiltrationMacro", "FilterType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayFiltrationMacro success after verifying FilterType --> "+("success" if partial_success else "failure"))

	if "FilterType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["FilterType"], 
			StringValueTable_DXFilterType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayFiltrationMacro success after verifying string defined terms FilterType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayFiltrationMacro", "FilterMaterial", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayFiltrationMacro success after verifying FilterMaterial --> "+("success" if partial_success else "failure"))

	if "FilterMaterial" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["FilterMaterial"], 
			StringValueTable_DXFilterMaterial, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayFiltrationMacro success after verifying string defined terms FilterMaterial --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayFiltrationMacro", "FilterThicknessMaximum", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayFiltrationMacro success after verifying FilterThicknessMaximum --> "+("success" if partial_success else "failure"))

	if "FilterThicknessMaximum" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["FilterThicknessMaximum"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayFiltrationMacro", "FilterThicknessMinimum", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayFiltrationMacro success after verifying FilterThicknessMinimum --> "+("success" if partial_success else "failure"))

	if "FilterThicknessMinimum" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["FilterThicknessMinimum"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayFiltrationMacro", "FilterBeamPathLengthMinimum", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayFiltrationMacro success after verifying FilterBeamPathLengthMinimum --> "+("success" if partial_success else "failure"))

	if "FilterBeamPathLengthMinimum" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["FilterBeamPathLengthMinimum"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayFiltrationMacro", "FilterBeamPathLengthMaximum", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayFiltrationMacro success after verifying FilterBeamPathLengthMaximum --> "+("success" if partial_success else "failure"))

	if "FilterBeamPathLengthMaximum" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["FilterBeamPathLengthMaximum"], 
			verbose, log, -1, True)

	return global_success

def Module_XRayFiltration_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRayFiltration")

	partial_success =  Macro_XRayFiltrationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " XRayFiltration success after verifying XRayFiltrationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_XRayGridDescriptionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayGridDescriptionMacro")

	partial_success =  		verifyType3(ds, 
			"XRayGridDescriptionMacro", "GridAbsorbingMaterial", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGridDescriptionMacro success after verifying GridAbsorbingMaterial --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayGridDescriptionMacro", "GridSpacingMaterial", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGridDescriptionMacro success after verifying GridSpacingMaterial --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayGridDescriptionMacro", "GridThickness", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGridDescriptionMacro success after verifying GridThickness --> "+("success" if partial_success else "failure"))

	if "GridThickness" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["GridThickness"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayGridDescriptionMacro", "GridPitch", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGridDescriptionMacro success after verifying GridPitch --> "+("success" if partial_success else "failure"))

	if "GridPitch" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["GridPitch"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayGridDescriptionMacro", "GridAspectRatio", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGridDescriptionMacro success after verifying GridAspectRatio --> "+("success" if partial_success else "failure"))

	if "GridAspectRatio" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["GridAspectRatio"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayGridDescriptionMacro", "GridPeriod", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGridDescriptionMacro success after verifying GridPeriod --> "+("success" if partial_success else "failure"))

	if "GridPeriod" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["GridPeriod"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayGridDescriptionMacro", "GridFocalDistance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGridDescriptionMacro success after verifying GridFocalDistance --> "+("success" if partial_success else "failure"))

	if "GridFocalDistance" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["GridFocalDistance"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayGridDescriptionMacro", "GridID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGridDescriptionMacro success after verifying GridID --> "+("success" if partial_success else "failure"))

	return global_success

def Module_XRayGrid_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRayGrid")

	partial_success =  		verifyType3(ds, 
			"XRayGrid", "Grid", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGrid success after verifying Grid --> "+("success" if partial_success else "failure"))

	if "Grid" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["Grid"], 
			StringValueTable_XRayGrid, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayGrid success after verifying string defined terms Grid --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_XRayGridDescriptionMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " XRayGrid success after verifying XRayGridDescriptionMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_DXSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"DXSeries")

	partial_success =  		verifyType1(ds, 
			"DXSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_DXModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"DXSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DXSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DXSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"DXSeries", "PresentationIntentType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXSeries success after verifying PresentationIntentType --> "+("success" if partial_success else "failure"))

	if "PresentationIntentType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationIntentType"], 
			StringValueTable_PresentationIntentType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXSeries success after verifying string enumerated values PresentationIntentType --> "+("success" if partial_success else "failure"))


	if Condition_IsForProcessingSOPClass(ds, parent_ds, root_ds):
		if "PresentationIntentType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationIntentType"], 
				StringValueTable_ForProcessing, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DXSeries success after verifying string enumerated values PresentationIntentType --> "+("success" if partial_success else "failure"))


	if Condition_IsForPresentationSOPClass(ds, parent_ds, root_ds):
		if "PresentationIntentType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationIntentType"], 
				StringValueTable_ForPresentation, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DXSeries success after verifying string enumerated values PresentationIntentType --> "+("success" if partial_success else "failure"))

	return global_success

def Module_DXAnatomyImaged_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"DXAnatomyImaged")

	partial_success =  		verifyType1(ds, 
			"DXAnatomyImaged", "ImageLaterality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXAnatomyImaged success after verifying ImageLaterality --> "+("success" if partial_success else "failure"))

	if "ImageLaterality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageLaterality"], 
			StringValueTable_ImageLaterality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXAnatomyImaged success after verifying string enumerated values ImageLaterality --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_GeneralAnatomyRequiredMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DXAnatomyImaged success after verifying GeneralAnatomyRequiredMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_DXImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"DXImage")

	partial_success =  		verifyType1(ds, 
			"DXImage", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_DXImageType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre6To16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre5To15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "PixelIntensityRelationship", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying PixelIntensityRelationship --> "+("success" if partial_success else "failure"))

	if "PixelIntensityRelationship" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PixelIntensityRelationship"], 
			StringValueTable_DXPixelIntensityRelationship, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying string enumerated values PixelIntensityRelationship --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "PixelIntensityRelationshipSign", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying PixelIntensityRelationshipSign --> "+("success" if partial_success else "failure"))

	if "PixelIntensityRelationshipSign" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelIntensityRelationshipSign"], 
			BinaryValueDescription_PixelIntensityRelationshipSign, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying binary enumerated values PixelIntensityRelationshipSign --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "RescaleIntercept", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying RescaleIntercept --> "+("success" if partial_success else "failure"))

	if "RescaleIntercept" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["RescaleIntercept"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying binary enumerated values RescaleIntercept --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "RescaleSlope", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying RescaleSlope --> "+("success" if partial_success else "failure"))

	if "RescaleSlope" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["RescaleSlope"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying binary enumerated values RescaleSlope --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "RescaleType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying RescaleType --> "+("success" if partial_success else "failure"))

	if "RescaleType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RescaleType"], 
			StringValueTable_ModalityLUTTypeUnspecified, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying string enumerated values RescaleType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if "PresentationLUTShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
			StringValueTable_DXPresentationLUTShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DXImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	if "LossyImageCompressionRatio" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["LossyImageCompressionRatio"], 
			verbose, log, -1, False)

	partial_success =  		verifyType3(ds, 
			"DXImage", "DerivationDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying DerivationDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXImage", "AcquisitionDeviceProcessingDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying AcquisitionDeviceProcessingDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXImage", "AcquisitionDeviceProcessingCode", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying AcquisitionDeviceProcessingCode --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DXImage", "PatientOrientation", 
			verbose, log, ElementDictionary, 
			Condition_DXPatientOrientationRequired, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying PatientOrientation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXImage", "CalibrationImage", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying CalibrationImage --> "+("success" if partial_success else "failure"))

	if "CalibrationImage" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CalibrationImage"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying string enumerated values CalibrationImage --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXImage", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"DXImage", 
			"VOILUTSequence", 
			verbose, log, ElementDictionary, 
			Condition_ForPresentationAndWindowCenterNotPresent, 
			True, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DXImage success after verifying VOILUTSequence" + ("success" if partial_success else "failure")) 
	if "VOILUTSequence" in ds:
		VOILUTSequence_data = ds.VOILUTSequence
		if type(VOILUTSequence_data) == Sequence:
			for i1 in range(0, len(VOILUTSequence_data)):
				if verbose:
					log.append( " VOILUTSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VOILUTSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"DXImage", "LUTDescriptor", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DXImage success after verifying LUTDescriptor --> "+("success" if partial_success else "failure"))


				if "LUTDescriptor" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["LUTDescriptor"], 
						BinaryValueDescription_BitsAre10To16, 
						verbose, log, 2)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DXImage success after verifying binary enumerated values LUTDescriptor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"DXImage", "LUTExplanation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DXImage success after verifying LUTExplanation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DXImage", "LUTData", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DXImage success after verifying LUTData --> "+("success" if partial_success else "failure"))


	if Condition_VOILUTSequencePresentAndPresentationIntentTypeIsNotForPresentation(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May only be present in For Presentation images - attribute <VOILUTSequence>")

	partial_success =  		verifyType1C(ds, 
			"DXImage", "WindowCenter", 
			verbose, log, ElementDictionary, 
			Condition_ForPresentationAndVOILUTSequenceNotPresent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying WindowCenter --> "+("success" if partial_success else "failure"))


	if Condition_WindowCenterPresentAndPresentationIntentTypeIsNotForPresentation(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" May only be present in For Presentation images - attribute <WindowCenter>")

	partial_success =  		verifyType1C(ds, 
			"DXImage", "WindowWidth", 
			verbose, log, ElementDictionary, 
			Condition_WindowCenterPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying WindowWidth --> "+("success" if partial_success else "failure"))

	if Condition_WindowCenterPresent(ds, parent_ds, root_ds):
		if "WindowWidth" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["WindowWidth"], 
				verbose, log, -1, False)


	if Condition_WindowWidthIsNegative(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Not permitted to be negative - attribute <WindowWidth>"+\
				" = <{}>".format( tag_for_keyword("WindowWidth")))

	partial_success =  		verifyType3(ds, 
			"DXImage", "WindowCenterWidthExplanation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXImage success after verifying WindowCenterWidthExplanation --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_DigitalXRayDetectorMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"DigitalXRayDetectorMacro")

	partial_success =  		verifyType2(ds, 
			"DigitalXRayDetectorMacro", "DetectorType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorType --> "+("success" if partial_success else "failure"))

	if "DetectorType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["DetectorType"], 
			StringValueTable_DetectorType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying string defined terms DetectorType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorConfiguration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorConfiguration --> "+("success" if partial_success else "failure"))

	if "DetectorConfiguration" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["DetectorConfiguration"], 
			StringValueTable_DetectorConfiguration, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying string defined terms DetectorConfiguration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorMode", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorMode --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DateOfLastDetectorCalibration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DateOfLastDetectorCalibration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "TimeOfLastDetectorCalibration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying TimeOfLastDetectorCalibration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "ExposuresOnDetectorSinceLastCalibration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying ExposuresOnDetectorSinceLastCalibration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "ExposuresOnDetectorSinceManufactured", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying ExposuresOnDetectorSinceManufactured --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorTimeSinceLastExposure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorTimeSinceLastExposure --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorBinning", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorBinning --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorManufacturerName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorManufacturerName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorManufacturerModelName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorManufacturerModelName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorConditionsNominalFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorConditionsNominalFlag --> "+("success" if partial_success else "failure"))

	if "DetectorConditionsNominalFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["DetectorConditionsNominalFlag"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying string enumerated values DetectorConditionsNominalFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorTemperature", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorTemperature --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "Sensitivity", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying Sensitivity --> "+("success" if partial_success else "failure"))

	if "Sensitivity" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Sensitivity"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorElementPhysicalSize", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorElementPhysicalSize --> "+("success" if partial_success else "failure"))

	if "DetectorElementPhysicalSize" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DetectorElementPhysicalSize"], 
			verbose, log, -1, False)

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorElementSpacing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorElementSpacing --> "+("success" if partial_success else "failure"))

	if "DetectorElementSpacing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DetectorElementSpacing"], 
			verbose, log, -1, False)

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorActiveShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorActiveShape --> "+("success" if partial_success else "failure"))

	if "DetectorActiveShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["DetectorActiveShape"], 
			StringValueTable_DXShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying string enumerated values DetectorActiveShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorActiveDimensions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorActiveDimensions --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DigitalXRayDetectorMacro", "DetectorActiveOrigin", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying DetectorActiveOrigin --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ExposureIndexMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DigitalXRayDetectorMacro success after verifying ExposureIndexMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_DXDetector_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"DXDetector")

	partial_success =  Macro_DigitalXRayDetectorMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DXDetector success after verifying DigitalXRayDetectorMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"DXDetector", "DetectorActiveTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXDetector success after verifying DetectorActiveTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXDetector", "DetectorActivationOffsetFromExposure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXDetector success after verifying DetectorActivationOffsetFromExposure --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXDetector", "FieldOfViewShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXDetector success after verifying FieldOfViewShape --> "+("success" if partial_success else "failure"))

	if "FieldOfViewShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["FieldOfViewShape"], 
			StringValueTable_DXShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXDetector success after verifying string enumerated values FieldOfViewShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXDetector", "FieldOfViewDimensions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXDetector success after verifying FieldOfViewDimensions --> "+("success" if partial_success else "failure"))

	if "FieldOfViewDimensions" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["FieldOfViewDimensions"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"DXDetector", "FieldOfViewOrigin", 
			verbose, log, ElementDictionary, 
			Condition_FieldOfViewRotationOrFieldOfViewHorizontalFlipPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXDetector success after verifying FieldOfViewOrigin --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DXDetector", "FieldOfViewRotation", 
			verbose, log, ElementDictionary, 
			Condition_FieldOfViewHorizontalFlipPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXDetector success after verifying FieldOfViewRotation --> "+("success" if partial_success else "failure"))

	if Condition_FieldOfViewHorizontalFlipPresent(ds, parent_ds, root_ds):
		if "FieldOfViewRotation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["FieldOfViewRotation"], 
				StringValueTable_DXFieldOfViewRotation, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DXDetector success after verifying string enumerated values FieldOfViewRotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DXDetector", "FieldOfViewHorizontalFlip", 
			verbose, log, ElementDictionary, 
			Condition_FieldOfViewRotationPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXDetector success after verifying FieldOfViewHorizontalFlip --> "+("success" if partial_success else "failure"))

	if Condition_FieldOfViewRotationPresent(ds, parent_ds, root_ds):
		if "FieldOfViewHorizontalFlip" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["FieldOfViewHorizontalFlip"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DXDetector success after verifying string enumerated values FieldOfViewHorizontalFlip --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DXDetector", "ImagerPixelSpacing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXDetector success after verifying ImagerPixelSpacing --> "+("success" if partial_success else "failure"))

	if "ImagerPixelSpacing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ImagerPixelSpacing"], 
			verbose, log, -1, False)

	partial_success =  Macro_BasicPixelSpacingCalibrationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DXDetector success after verifying BasicPixelSpacingCalibrationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"DXDetector", "CassetteID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXDetector success after verifying CassetteID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXDetector", "PlateID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXDetector success after verifying PlateID --> "+("success" if partial_success else "failure"))

	return global_success

def Module_DXPositioning_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"DXPositioning")

	partial_success = verifyType3(ds, 
			"DXPositioning", 
			"ProjectionEponymousNameCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DXPositioning success after verifying ProjectionEponymousNameCodeSequence" + ("success" if partial_success else "failure")) 
	if "ProjectionEponymousNameCodeSequence" in ds:
		ProjectionEponymousNameCodeSequence_data = ds.ProjectionEponymousNameCodeSequence
		if type(ProjectionEponymousNameCodeSequence_data) == Sequence:
			for i1 in range(0, len(ProjectionEponymousNameCodeSequence_data)):
				if verbose:
					log.append( " ProjectionEponymousNameCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ProjectionEponymousNameCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DXPositioning success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"DXPositioning", "PatientPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying PatientPosition --> "+("success" if partial_success else "failure"))

	if "PatientPosition" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["PatientPosition"], 
			StringValueTable_PatientPosition, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying string defined terms PatientPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXPositioning", "ViewPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying ViewPosition --> "+("success" if partial_success else "failure"))


	if Condition_IsHuman(ds, parent_ds, root_ds):
		if "ViewPosition" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["ViewPosition"], 
				StringValueTable_ViewPositionHuman, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying string defined terms ViewPosition --> "+("success" if partial_success else "failure"))


	if Condition_IsAnimal(ds, parent_ds, root_ds):
		if "ViewPosition" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["ViewPosition"], 
				StringValueTable_ViewPositionAnimal, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying string defined terms ViewPosition --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"DXPositioning", 
			"ViewCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DXPositioning success after verifying ViewCodeSequence" + ("success" if partial_success else "failure")) 
	if "ViewCodeSequence" in ds:
		ViewCodeSequence_data = ds.ViewCodeSequence
		if type(ViewCodeSequence_data) == Sequence:
			for i1 in range(0, len(ViewCodeSequence_data)):
				if verbose:
					log.append( " ViewCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ViewCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DXPositioning success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"DXPositioning", 
						"ViewModifierCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "DXPositioning success after verifying ViewModifierCodeSequence" + ("success" if partial_success else "failure")) 
				if "ViewModifierCodeSequence" in ds1:
					ViewModifierCodeSequence_data = ds1.ViewModifierCodeSequence
					if type(ViewModifierCodeSequence_data) == Sequence:
						for i2 in range(0, len(ViewModifierCodeSequence_data)):
							if verbose:
								log.append( " ViewModifierCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ViewModifierCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " DXPositioning success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))

	if Condition_ViewCodeSequenceAbsentOrEmptyButViewPositionHasValue(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" ViewCodeSequence is empty or absent, but view is known since ViewPosition has a value - attribute <ViewCodeSequence>")

	partial_success = verifyType1C(ds, 
			"DXPositioning", 
			"ViewModifierCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DXPositioning success after verifying ViewModifierCodeSequence" + ("success" if partial_success else "failure")) 
	if "ViewModifierCodeSequence" in ds:
		ViewModifierCodeSequence_data = ds.ViewModifierCodeSequence
		if type(ViewModifierCodeSequence_data) == Sequence:
			for i1 in range(0, len(ViewModifierCodeSequence_data)):
				if verbose:
					log.append( " ViewModifierCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ViewModifierCodeSequence_data[i1]
	partial_success = verifyType3(ds, 
			"DXPositioning", 
			"PatientOrientationCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DXPositioning success after verifying PatientOrientationCodeSequence" + ("success" if partial_success else "failure")) 
	if "PatientOrientationCodeSequence" in ds:
		PatientOrientationCodeSequence_data = ds.PatientOrientationCodeSequence
		if type(PatientOrientationCodeSequence_data) == Sequence:
			for i1 in range(0, len(PatientOrientationCodeSequence_data)):
				if verbose:
					log.append( " PatientOrientationCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientOrientationCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DXPositioning success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"DXPositioning", 
						"PatientOrientationModifierCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "DXPositioning success after verifying PatientOrientationModifierCodeSequence" + ("success" if partial_success else "failure")) 
				if "PatientOrientationModifierCodeSequence" in ds1:
					PatientOrientationModifierCodeSequence_data = ds1.PatientOrientationModifierCodeSequence
					if type(PatientOrientationModifierCodeSequence_data) == Sequence:
						for i2 in range(0, len(PatientOrientationModifierCodeSequence_data)):
							if verbose:
								log.append( " PatientOrientationModifierCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PatientOrientationModifierCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " DXPositioning success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"DXPositioning", 
			"PatientOrientationModifierCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_Never, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DXPositioning success after verifying PatientOrientationModifierCodeSequence" + ("success" if partial_success else "failure")) 
	if "PatientOrientationModifierCodeSequence" in ds:
		PatientOrientationModifierCodeSequence_data = ds.PatientOrientationModifierCodeSequence
		if type(PatientOrientationModifierCodeSequence_data) == Sequence:
			for i1 in range(0, len(PatientOrientationModifierCodeSequence_data)):
				if verbose:
					log.append( " PatientOrientationModifierCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientOrientationModifierCodeSequence_data[i1]
	partial_success = verifyType3(ds, 
			"DXPositioning", 
			"PatientGantryRelationshipCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DXPositioning success after verifying PatientGantryRelationshipCodeSequence" + ("success" if partial_success else "failure")) 
	if "PatientGantryRelationshipCodeSequence" in ds:
		PatientGantryRelationshipCodeSequence_data = ds.PatientGantryRelationshipCodeSequence
		if type(PatientGantryRelationshipCodeSequence_data) == Sequence:
			for i1 in range(0, len(PatientGantryRelationshipCodeSequence_data)):
				if verbose:
					log.append( " PatientGantryRelationshipCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientGantryRelationshipCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DXPositioning success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"DXPositioning", "DistanceSourceToPatient", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying DistanceSourceToPatient --> "+("success" if partial_success else "failure"))

	if "DistanceSourceToPatient" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceSourceToPatient"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"DXPositioning", "DistanceSourceToDetector", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

	if "DistanceSourceToDetector" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceSourceToDetector"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"DXPositioning", "EstimatedRadiographicMagnificationFactor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying EstimatedRadiographicMagnificationFactor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"DXPositioning", "PositionerType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying PositionerType --> "+("success" if partial_success else "failure"))

	if "PositionerType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["PositionerType"], 
			StringValueTable_DXPositionerType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying string defined terms PositionerType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXPositioning", "PositionerPrimaryAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying PositionerPrimaryAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXPositioning", "PositionerSecondaryAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying PositionerSecondaryAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXPositioning", "DetectorPrimaryAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying DetectorPrimaryAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXPositioning", "DetectorSecondaryAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying DetectorSecondaryAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXPositioning", "ColumnAngulation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying ColumnAngulation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXPositioning", "TableType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying TableType --> "+("success" if partial_success else "failure"))

	if "TableType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["TableType"], 
			StringValueTable_DXTableType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying string defined terms TableType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXPositioning", "TableAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying TableAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXPositioning", "BodyPartThickness", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying BodyPartThickness --> "+("success" if partial_success else "failure"))

	if "BodyPartThickness" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["BodyPartThickness"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"DXPositioning", "CompressionForce", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying CompressionForce --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DXPositioning", "PaddleDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DXPositioning success after verifying PaddleDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MammographySeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MammographySeries")

	partial_success =  		verifyType1(ds, 
			"MammographySeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographySeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_MammographyModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographySeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"MammographySeries", 
			"RequestAttributesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MammographySeries success after verifying RequestAttributesSequence" + ("success" if partial_success else "failure")) 
	if "RequestAttributesSequence" in ds:
		RequestAttributesSequence_data = ds.RequestAttributesSequence
		if type(RequestAttributesSequence_data) == Sequence:
			for i1 in range(0, len(RequestAttributesSequence_data)):
				if verbose:
					log.append( " RequestAttributesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RequestAttributesSequence_data[i1]
				partial_success =  Macro_RequestAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MammographySeries success after verifying RequestAttributesMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MammographyImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MammographyImage")

	partial_success =  		verifyType1(ds, 
			"MammographyImage", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_MammoImageType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_MammoImageType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_MammoImageType5, 
			verbose, log, 4)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MammographyImage", "PositionerType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying PositionerType --> "+("success" if partial_success else "failure"))

	if "PositionerType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PositionerType"], 
			StringValueTable_MammographyPositionerType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying string enumerated values PositionerType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MammographyImage", "DistanceSourceToPatient", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying DistanceSourceToPatient --> "+("success" if partial_success else "failure"))

	if "DistanceSourceToPatient" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceSourceToPatient"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"MammographyImage", "DistanceSourceToDetector", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

	if "DistanceSourceToDetector" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceSourceToDetector"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"MammographyImage", "PositionerPrimaryAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying PositionerPrimaryAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MammographyImage", "PositionerPrimaryAngleDirection", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying PositionerPrimaryAngleDirection --> "+("success" if partial_success else "failure"))

	if "PositionerPrimaryAngleDirection" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PositionerPrimaryAngleDirection"], 
			StringValueTable_PositionerPrimaryAngleDirection, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying string enumerated values PositionerPrimaryAngleDirection --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MammographyImage", "PositionerSecondaryAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying PositionerSecondaryAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MammographyImage", "ImageLaterality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying ImageLaterality --> "+("success" if partial_success else "failure"))

	if "ImageLaterality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageLaterality"], 
			StringValueTable_MammographyImageLaterality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying string enumerated values ImageLaterality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MammographyImage", "OrganExposed", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying OrganExposed --> "+("success" if partial_success else "failure"))

	if "OrganExposed" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["OrganExposed"], 
			StringValueTable_MammographyOrganExposed, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying string defined terms OrganExposed --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MammographyImage", "BreastImplantPresent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying BreastImplantPresent --> "+("success" if partial_success else "failure"))

	if "BreastImplantPresent" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BreastImplantPresent"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying string enumerated values BreastImplantPresent --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MammographyImage", "PartialView", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying PartialView --> "+("success" if partial_success else "failure"))

	if "PartialView" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PartialView"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying string enumerated values PartialView --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MammographyImage", "PartialViewDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MammographyImage success after verifying PartialViewDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"MammographyImage", 
			"PartialViewCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MammographyImage success after verifying PartialViewCodeSequence" + ("success" if partial_success else "failure")) 
	if "PartialViewCodeSequence" in ds:
		PartialViewCodeSequence_data = ds.PartialViewCodeSequence
		if type(PartialViewCodeSequence_data) == Sequence:
			for i1 in range(0, len(PartialViewCodeSequence_data)):
				if verbose:
					log.append( " PartialViewCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PartialViewCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MammographyImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_GeneralAnatomyMandatoryMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " MammographyImage success after verifying GeneralAnatomyMandatoryMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MammographyImage", 
			"ViewCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MammographyImage success after verifying ViewCodeSequence" + ("success" if partial_success else "failure")) 
	if "ViewCodeSequence" in ds:
		ViewCodeSequence_data = ds.ViewCodeSequence
		if type(ViewCodeSequence_data) == Sequence:
			for i1 in range(0, len(ViewCodeSequence_data)):
				if verbose:
					log.append( " ViewCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ViewCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MammographyImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType2(ds1, 
						"MammographyImage", 
						"ViewModifierCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "MammographyImage success after verifying ViewModifierCodeSequence" + ("success" if partial_success else "failure")) 
				if "ViewModifierCodeSequence" in ds1:
					ViewModifierCodeSequence_data = ds1.ViewModifierCodeSequence
					if type(ViewModifierCodeSequence_data) == Sequence:
						for i2 in range(0, len(ViewModifierCodeSequence_data)):
							if verbose:
								log.append( " ViewModifierCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ViewModifierCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " MammographyImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"MammographyImage", 
			"BiopsyTargetSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MammographyImage success after verifying BiopsyTargetSequence" + ("success" if partial_success else "failure")) 
	if "BiopsyTargetSequence" in ds:
		BiopsyTargetSequence_data = ds.BiopsyTargetSequence
		if type(BiopsyTargetSequence_data) == Sequence:
			for i1 in range(0, len(BiopsyTargetSequence_data)):
				if verbose:
					log.append( " BiopsyTargetSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = BiopsyTargetSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MammographyImage", "TargetUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MammographyImage success after verifying TargetUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MammographyImage", "LocalizingCursorPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MammographyImage success after verifying LocalizingCursorPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MammographyImage", "CalculatedTargetPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MammographyImage success after verifying CalculatedTargetPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MammographyImage", "DisplayedZValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MammographyImage success after verifying DisplayedZValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"MammographyImage", "TargetLabel", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MammographyImage success after verifying TargetLabel --> "+("success" if partial_success else "failure"))

	return global_success

def Module_IntraoralSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IntraoralSeries")

	partial_success =  		verifyType1(ds, 
			"IntraoralSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntraoralSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_IntraoralModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntraoralSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	return global_success

def Module_IntraoralImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IntraoralImage")

	partial_success =  		verifyType1(ds, 
			"IntraoralImage", "PositionerType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntraoralImage success after verifying PositionerType --> "+("success" if partial_success else "failure"))

	if "PositionerType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PositionerType"], 
			StringValueTable_IntraoralPositionerType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntraoralImage success after verifying string enumerated values PositionerType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IntraoralImage", "ImageLaterality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntraoralImage success after verifying ImageLaterality --> "+("success" if partial_success else "failure"))

	if "ImageLaterality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageLaterality"], 
			StringValueTable_IntraoralImageLaterality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntraoralImage success after verifying string enumerated values ImageLaterality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"IntraoralImage", 
			"AnatomicRegionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntraoralImage success after verifying AnatomicRegionSequence" + ("success" if partial_success else "failure")) 
	if "AnatomicRegionSequence" in ds:
		AnatomicRegionSequence_data = ds.AnatomicRegionSequence
		if type(AnatomicRegionSequence_data) == Sequence:
			for i1 in range(0, len(AnatomicRegionSequence_data)):
				if verbose:
					log.append( " AnatomicRegionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AnatomicRegionSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IntraoralImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"IntraoralImage", 
						"AnatomicRegionModifierSequence", 
						verbose, log, ElementDictionary, 
						Condition_NoPrimaryAnatomicStructureSequence, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IntraoralImage success after verifying AnatomicRegionModifierSequence" + ("success" if partial_success else "failure")) 
				if "AnatomicRegionModifierSequence" in ds1:
					AnatomicRegionModifierSequence_data = ds1.AnatomicRegionModifierSequence
					if type(AnatomicRegionModifierSequence_data) == Sequence:
						for i2 in range(0, len(AnatomicRegionModifierSequence_data)):
							if verbose:
								log.append( " AnatomicRegionModifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AnatomicRegionModifierSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IntraoralImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"IntraoralImage", 
			"PrimaryAnatomicStructureSequence", 
			verbose, log, ElementDictionary, 
			Condition_NoAnatomicRegionModifierSequence, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntraoralImage success after verifying PrimaryAnatomicStructureSequence" + ("success" if partial_success else "failure")) 
	if "PrimaryAnatomicStructureSequence" in ds:
		PrimaryAnatomicStructureSequence_data = ds.PrimaryAnatomicStructureSequence
		if type(PrimaryAnatomicStructureSequence_data) == Sequence:
			for i1 in range(0, len(PrimaryAnatomicStructureSequence_data)):
				if verbose:
					log.append( " PrimaryAnatomicStructureSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PrimaryAnatomicStructureSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IntraoralImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_ImageHistogram_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ImageHistogram")

	partial_success = verifyType1(ds, 
			"ImageHistogram", 
			"HistogramSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ImageHistogram success after verifying HistogramSequence" + ("success" if partial_success else "failure")) 
	if "HistogramSequence" in ds:
		HistogramSequence_data = ds.HistogramSequence
		if type(HistogramSequence_data) == Sequence:
			for i1 in range(0, len(HistogramSequence_data)):
				if verbose:
					log.append( " HistogramSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = HistogramSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"ImageHistogram", "HistogramNumberOfBins", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ImageHistogram success after verifying HistogramNumberOfBins --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"ImageHistogram", "HistogramFirstBinValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ImageHistogram success after verifying HistogramFirstBinValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"ImageHistogram", "HistogramLastBinValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ImageHistogram success after verifying HistogramLastBinValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"ImageHistogram", "HistogramBinWidth", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ImageHistogram success after verifying HistogramBinWidth --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"ImageHistogram", "HistogramExplanation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ImageHistogram success after verifying HistogramExplanation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"ImageHistogram", "HistogramData", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ImageHistogram success after verifying HistogramData --> "+("success" if partial_success else "failure"))

	return global_success

def Module_IHEDBTProfile_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IHEDBTProfile")

	partial_success =  		verifyType1(ds, 
			"IHEDBTProfile", "PatientName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEDBTProfile success after verifying PatientName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEDBTProfile", "PatientID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEDBTProfile success after verifying PatientID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEDBTProfile", "PatientBirthDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEDBTProfile success after verifying PatientBirthDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEDBTProfile", "PatientAge", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEDBTProfile success after verifying PatientAge --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEDBTProfile", "OperatorsName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEDBTProfile success after verifying OperatorsName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEDBTProfile", "Manufacturer", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEDBTProfile success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEDBTProfile", "InstitutionName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEDBTProfile success after verifying InstitutionName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEDBTProfile", "InstitutionAddress", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEDBTProfile success after verifying InstitutionAddress --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEDBTProfile", "ManufacturerModelName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEDBTProfile success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEDBTProfile", "DeviceSerialNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEDBTProfile success after verifying DeviceSerialNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEDBTProfile", "StationName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEDBTProfile success after verifying StationName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"IHEDBTProfile", 
			"ContributingSourcesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IHEDBTProfile success after verifying ContributingSourcesSequence" + ("success" if partial_success else "failure")) 
	if "ContributingSourcesSequence" in ds:
		ContributingSourcesSequence_data = ds.ContributingSourcesSequence
		if type(ContributingSourcesSequence_data) == Sequence:
			for i1 in range(0, len(ContributingSourcesSequence_data)):
				if verbose:
					log.append( " ContributingSourcesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContributingSourcesSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IHEDBTProfile", "AcquisitionDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IHEDBTProfile success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"IHEDBTProfile", 
			"XRay3DAcquisitionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IHEDBTProfile success after verifying XRay3DAcquisitionSequence" + ("success" if partial_success else "failure")) 
	if "XRay3DAcquisitionSequence" in ds:
		XRay3DAcquisitionSequence_data = ds.XRay3DAcquisitionSequence
		if type(XRay3DAcquisitionSequence_data) == Sequence:
			for i1 in range(0, len(XRay3DAcquisitionSequence_data)):
				if verbose:
					log.append( " XRay3DAcquisitionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = XRay3DAcquisitionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IHEDBTProfile", "OrganDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IHEDBTProfile success after verifying OrganDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"IHEDBTProfile", "EntranceDoseInmGy", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IHEDBTProfile success after verifying EntranceDoseInmGy --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValuesNotDBTThinThickGenerated2D(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Values not those required for thin or thick slices or generated 2D image by IHE DBT Rad TF Vol 2 Table 4.8.4.1.2.7-1 - attribute <ImageType>")

	return global_success

def Module_IHEMammoProfile_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IHEMammoProfile")

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "PatientName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying PatientName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "PatientID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying PatientID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "PatientBirthDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying PatientBirthDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "PatientAge", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying PatientAge --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "AcquisitionDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying AcquisitionDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "AcquisitionTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying AcquisitionTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "OperatorsName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying OperatorsName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "Manufacturer", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "InstitutionName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying InstitutionName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "InstitutionAddress", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying InstitutionAddress --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "ManufacturerModelName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "DeviceSerialNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying DeviceSerialNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "DetectorID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying DetectorID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "SoftwareVersions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying SoftwareVersions --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "StationName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying StationName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IHEMammoProfile", "GantryID", 
			verbose, log, ElementDictionary, 
			Condition_DetectorTypeIsStorage, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying GantryID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "KVP", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying KVP --> "+("success" if partial_success else "failure"))

	if "KVP" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["KVP"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "Exposure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying Exposure --> "+("success" if partial_success else "failure"))

	if "Exposure" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Exposure"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "ExposureTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying ExposureTime --> "+("success" if partial_success else "failure"))

	if "ExposureTime" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureTime"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "FilterMaterial", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying FilterMaterial --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "AnodeTargetMaterial", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying AnodeTargetMaterial --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "CompressionForce", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying CompressionForce --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "BodyPartThickness", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying BodyPartThickness --> "+("success" if partial_success else "failure"))

	if "BodyPartThickness" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["BodyPartThickness"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "PositionerPrimaryAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying PositionerPrimaryAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "RelativeXRayExposure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying RelativeXRayExposure --> "+("success" if partial_success else "failure"))

	if "RelativeXRayExposure" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["RelativeXRayExposure"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "EntranceDoseInmGy", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying EntranceDoseInmGy --> "+("success" if partial_success else "failure"))

	if "EntranceDoseInmGy" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["EntranceDoseInmGy"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "OrganDose", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying OrganDose --> "+("success" if partial_success else "failure"))

	if "OrganDose" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["OrganDose"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_NoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "BreastImplantPresent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying BreastImplantPresent --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "PixelPaddingValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying PixelPaddingValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfile", "EstimatedRadiographicMagnificationFactor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying EstimatedRadiographicMagnificationFactor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IHEMammoProfile", "DateOfLastDetectorCalibration", 
			verbose, log, ElementDictionary, 
			Condition_DetectorTypeIsNotStorage, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfile success after verifying DateOfLastDetectorCalibration --> "+("success" if partial_success else "failure"))


	if Condition_PixelSpacingIsPresent(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" Attribute present but not used in IHE Mammo Profile - attribute <PixelSpacing>")

	return global_success

def Module_IHEMammoProfileWithoutPartialViewOption_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IHEMammoProfileWithoutPartialViewOption")


	if Condition_PartialViewNotPresent(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" IHE Mammo Profile Partial View Option not supported - attribute <PartialView>")

	return global_success

def Module_IHEMammoProfileWithPartialViewOption_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IHEMammoProfileWithPartialViewOption")

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfileWithPartialViewOption", "PartialView", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfileWithPartialViewOption success after verifying PartialView --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"IHEMammoProfileWithPartialViewOption", 
			"PartialViewCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_PartialViewIsYes, 
			False, 
			parent_ds, root_ds, 
			1, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IHEMammoProfileWithPartialViewOption success after verifying PartialViewCodeSequence" + ("success" if partial_success else "failure")) 
	if "PartialViewCodeSequence" in ds:
		PartialViewCodeSequence_data = ds.PartialViewCodeSequence
		if type(PartialViewCodeSequence_data) == Sequence:
			for i1 in range(0, len(PartialViewCodeSequence_data)):
				if verbose:
					log.append( " PartialViewCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PartialViewCodeSequence_data[i1]
	return global_success

def Module_IHEMammoProfileForPresentationOnly_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IHEMammoProfileForPresentationOnly")

	partial_success = verifyType1(ds, 
			"IHEMammoProfileForPresentationOnly", 
			"SourceImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IHEMammoProfileForPresentationOnly success after verifying SourceImageSequence" + ("success" if partial_success else "failure")) 
	if "SourceImageSequence" in ds:
		SourceImageSequence_data = ds.SourceImageSequence
		if type(SourceImageSequence_data) == Sequence:
			for i1 in range(0, len(SourceImageSequence_data)):
				if verbose:
					log.append( " SourceImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceImageSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IHEMammoProfileForPresentationOnly", "SpatialLocationsPreserved", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IHEMammoProfileForPresentationOnly success after verifying SpatialLocationsPreserved --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"IHEMammoProfileForPresentationOnly", 
			"VOILUTSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IHEMammoProfileForPresentationOnly success after verifying VOILUTSequence" + ("success" if partial_success else "failure")) 
	if "VOILUTSequence" in ds:
		VOILUTSequence_data = ds.VOILUTSequence
		if type(VOILUTSequence_data) == Sequence:
			for i1 in range(0, len(VOILUTSequence_data)):
				if verbose:
					log.append( " VOILUTSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VOILUTSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IHEMammoProfileForPresentationOnly", "LUTExplanation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IHEMammoProfileForPresentationOnly success after verifying LUTExplanation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IHEMammoProfileForPresentationOnly", "WindowCenterWidthExplanation", 
			verbose, log, ElementDictionary, 
			Condition_WindowCenterPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfileForPresentationOnly success after verifying WindowCenterWidthExplanation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEMammoProfileForPresentationOnly", "VOILUTFunction", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEMammoProfileForPresentationOnly success after verifying VOILUTFunction --> "+("success" if partial_success else "failure"))

	return global_success

def Module_DentalImageOnMediaProfile_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"DentalImageOnMediaProfile")

	partial_success =  		verifyType1(ds, 
			"DentalImageOnMediaProfile", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DentalImageOnMediaProfile success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DentalImageOnMediaProfile success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))


	if Condition_BitsStoredIs8(ds, parent_ds, root_ds):
		if "BitsAllocated" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
				BinaryValueDescription_BitsAre8, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DentalImageOnMediaProfile success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))


	if Condition_BitsStoredGreaterThan8(ds, parent_ds, root_ds):
		if "BitsAllocated" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
				BinaryValueDescription_BitsAre16, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DentalImageOnMediaProfile success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"DentalImageOnMediaProfile", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DentalImageOnMediaProfile success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8Or10Or12Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DentalImageOnMediaProfile success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"DentalImageOnMediaProfile", "InstitutionName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DentalImageOnMediaProfile success after verifying InstitutionName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"DentalImageOnMediaProfile", "ManufacturerModelName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DentalImageOnMediaProfile success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"DentalImageOnMediaProfile", "DetectorID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DentalImageOnMediaProfile success after verifying DetectorID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"DentalImageOnMediaProfile", "DetectorManufacturerName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DentalImageOnMediaProfile success after verifying DetectorManufacturerName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"DentalImageOnMediaProfile", "DetectorManufacturerModelName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DentalImageOnMediaProfile success after verifying DetectorManufacturerModelName --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiFrameFunctionalGroupsForBreastTomosynthesisImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForBreastTomosynthesisImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForBreastTomosynthesisImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IdentityPixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying IdentityPixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTWithLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying FrameVOILUTWithLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForBreastTomosynthesisImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IdentityPixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying IdentityPixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTWithLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying FrameVOILUTWithLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_XRay3DFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastTomosynthesisImage success after verifying XRay3DFrameTypeMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_IdentityPixelValueTransformationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"IdentityPixelValueTransformationMacro")

	partial_success = verifyType1(ds, 
			"IdentityPixelValueTransformationMacro", 
			"PixelValueTransformationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IdentityPixelValueTransformationMacro success after verifying PixelValueTransformationSequence" + ("success" if partial_success else "failure")) 
	if "PixelValueTransformationSequence" in ds:
		PixelValueTransformationSequence_data = ds.PixelValueTransformationSequence
		if type(PixelValueTransformationSequence_data) == Sequence:
			for i1 in range(0, len(PixelValueTransformationSequence_data)):
				if verbose:
					log.append( " PixelValueTransformationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PixelValueTransformationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IdentityPixelValueTransformationMacro", "RescaleIntercept", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IdentityPixelValueTransformationMacro success after verifying RescaleIntercept --> "+("success" if partial_success else "failure"))

				if "RescaleIntercept" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["RescaleIntercept"], 
						BinaryValueDescription_Zero, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IdentityPixelValueTransformationMacro success after verifying binary enumerated values RescaleIntercept --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"IdentityPixelValueTransformationMacro", "RescaleSlope", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IdentityPixelValueTransformationMacro success after verifying RescaleSlope --> "+("success" if partial_success else "failure"))

				if "RescaleSlope" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["RescaleSlope"], 
						BinaryValueDescription_One, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IdentityPixelValueTransformationMacro success after verifying binary enumerated values RescaleSlope --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"IdentityPixelValueTransformationMacro", "RescaleType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IdentityPixelValueTransformationMacro success after verifying RescaleType --> "+("success" if partial_success else "failure"))

				if "RescaleType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["RescaleType"], 
						StringValueTable_ModalityLUTTypeUnspecified, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IdentityPixelValueTransformationMacro success after verifying string enumerated values RescaleType --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_FrameVOILUTWithLUTMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"FrameVOILUTWithLUTMacro")

	partial_success = verifyType1(ds, 
			"FrameVOILUTWithLUTMacro", 
			"FrameVOILUTSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "FrameVOILUTWithLUTMacro success after verifying FrameVOILUTSequence" + ("success" if partial_success else "failure")) 
	if "FrameVOILUTSequence" in ds:
		FrameVOILUTSequence_data = ds.FrameVOILUTSequence
		if type(FrameVOILUTSequence_data) == Sequence:
			for i1 in range(0, len(FrameVOILUTSequence_data)):
				if verbose:
					log.append( " FrameVOILUTSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FrameVOILUTSequence_data[i1]
				partial_success =  Macro_VOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " FrameVOILUTWithLUTMacro success after verifying VOILUTMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_BreastTomosynthesisContributingSources_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"BreastTomosynthesisContributingSources")

	partial_success = verifyType1(ds, 
			"BreastTomosynthesisContributingSources", 
			"ContributingSourcesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "BreastTomosynthesisContributingSources success after verifying ContributingSourcesSequence" + ("success" if partial_success else "failure")) 
	if "ContributingSourcesSequence" in ds:
		ContributingSourcesSequence_data = ds.ContributingSourcesSequence
		if type(ContributingSourcesSequence_data) == Sequence:
			for i1 in range(0, len(ContributingSourcesSequence_data)):
				if verbose:
					log.append( " ContributingSourcesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContributingSourcesSequence_data[i1]
				partial_success =  Macro_GeneralContributingSourcesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " BreastTomosynthesisContributingSources success after verifying GeneralContributingSourcesMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_ContributingImageSourcesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " BreastTomosynthesisContributingSources success after verifying ContributingImageSourcesMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisContributingSources", "DetectorType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisContributingSources success after verifying DetectorType --> "+("success" if partial_success else "failure"))

				if "DetectorType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["DetectorType"], 
						StringValueTable_DetectorTypeExcludingFilm, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisContributingSources success after verifying string defined terms DetectorType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisContributingSources", "DetectorID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisContributingSources success after verifying DetectorID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisContributingSources", "DateOfLastDetectorCalibration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisContributingSources success after verifying DateOfLastDetectorCalibration --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisContributingSources", "TimeOfLastDetectorCalibration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisContributingSources success after verifying TimeOfLastDetectorCalibration --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisContributingSources", "DetectorElementSpacing", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisContributingSources success after verifying DetectorElementSpacing --> "+("success" if partial_success else "failure"))

	return global_success

def Module_BreastTomosynthesisAcquisition_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"BreastTomosynthesisAcquisition")

	partial_success = verifyType1(ds, 
			"BreastTomosynthesisAcquisition", 
			"XRay3DAcquisitionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "BreastTomosynthesisAcquisition success after verifying XRay3DAcquisitionSequence" + ("success" if partial_success else "failure")) 
	if "XRay3DAcquisitionSequence" in ds:
		XRay3DAcquisitionSequence_data = ds.XRay3DAcquisitionSequence
		if type(XRay3DAcquisitionSequence_data) == Sequence:
			for i1 in range(0, len(XRay3DAcquisitionSequence_data)):
				if verbose:
					log.append( " XRay3DAcquisitionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = XRay3DAcquisitionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "FieldOfViewShape", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying FieldOfViewShape --> "+("success" if partial_success else "failure"))

				if "FieldOfViewShape" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FieldOfViewShape"], 
						StringValueTable_BreastTomosynthesisFieldOfViewShape, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying string enumerated values FieldOfViewShape --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "XRayReceptorType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying XRayReceptorType --> "+("success" if partial_success else "failure"))

				if "XRayReceptorType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["XRayReceptorType"], 
						StringValueTable_BreastTomosynthesisXRayReceptorType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying string enumerated values XRayReceptorType --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_XRay3DGeneralSharedAcquisitionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying XRay3DGeneralSharedAcquisitionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_XRay3DGeneralPositionerMovementMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying XRay3DGeneralPositionerMovementMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "DistanceSourceToDetector", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

				if "DistanceSourceToDetector" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["DistanceSourceToDetector"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "DistanceSourceToPatient", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying DistanceSourceToPatient --> "+("success" if partial_success else "failure"))

				if "DistanceSourceToPatient" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["DistanceSourceToPatient"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "EstimatedRadiographicMagnificationFactor", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying EstimatedRadiographicMagnificationFactor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "AnodeTargetMaterial", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying AnodeTargetMaterial --> "+("success" if partial_success else "failure"))

				if "AnodeTargetMaterial" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["AnodeTargetMaterial"], 
						StringValueTable_AnodeTargetMaterial, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying string defined terms AnodeTargetMaterial --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "BodyPartThickness", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying BodyPartThickness --> "+("success" if partial_success else "failure"))

				if "BodyPartThickness" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["BodyPartThickness"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "ExposureControlMode", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying ExposureControlMode --> "+("success" if partial_success else "failure"))

				if "ExposureControlMode" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ExposureControlMode"], 
						StringValueTable_ExposureControlMode, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying string defined terms ExposureControlMode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "ExposureControlModeDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying ExposureControlModeDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "HalfValueLayer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying HalfValueLayer --> "+("success" if partial_success else "failure"))

				if "HalfValueLayer" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["HalfValueLayer"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"BreastTomosynthesisAcquisition", "OrganDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying OrganDose --> "+("success" if partial_success else "failure"))

				if "OrganDose" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["OrganDose"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"BreastTomosynthesisAcquisition", "EntranceDoseInmGy", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying EntranceDoseInmGy --> "+("success" if partial_success else "failure"))

				if "EntranceDoseInmGy" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["EntranceDoseInmGy"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"BreastTomosynthesisAcquisition", "EntranceDoseDerivation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying EntranceDoseDerivation --> "+("success" if partial_success else "failure"))

				if "EntranceDoseDerivation" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["EntranceDoseDerivation"], 
						StringValueTable_EntranceDoseDerivation, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying string enumerated values EntranceDoseDerivation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "FocalSpots", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying FocalSpots --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastTomosynthesisAcquisition", "DetectorBinning", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying DetectorBinning --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "DetectorTemperature", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying DetectorTemperature --> "+("success" if partial_success else "failure"))

				if "DetectorTemperature" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["DetectorTemperature"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "FilterType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying FilterType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "FilterMaterial", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying FilterMaterial --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"BreastTomosynthesisAcquisition", "FilterThicknessMinimum", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying FilterThicknessMinimum --> "+("success" if partial_success else "failure"))

				if "FilterThicknessMinimum" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["FilterThicknessMinimum"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"BreastTomosynthesisAcquisition", "FilterThicknessMaximum", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying FilterThicknessMaximum --> "+("success" if partial_success else "failure"))

				if "FilterThicknessMaximum" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["FilterThicknessMaximum"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"BreastTomosynthesisAcquisition", "FilterBeamPathLengthMinimum", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying FilterBeamPathLengthMinimum --> "+("success" if partial_success else "failure"))

				if "FilterBeamPathLengthMinimum" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["FilterBeamPathLengthMinimum"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"BreastTomosynthesisAcquisition", "FilterBeamPathLengthMaximum", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying FilterBeamPathLengthMaximum --> "+("success" if partial_success else "failure"))

				if "FilterBeamPathLengthMaximum" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["FilterBeamPathLengthMaximum"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "CompressionForce", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying CompressionForce --> "+("success" if partial_success else "failure"))

				if "CompressionForce" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["CompressionForce"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", "PaddleDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastTomosynthesisAcquisition success after verifying PaddleDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"BreastTomosynthesisAcquisition", 
						"PerProjectionAcquisitionSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "BreastTomosynthesisAcquisition success after verifying PerProjectionAcquisitionSequence" + ("success" if partial_success else "failure")) 
				if "PerProjectionAcquisitionSequence" in ds1:
					PerProjectionAcquisitionSequence_data = ds1.PerProjectionAcquisitionSequence
					if type(PerProjectionAcquisitionSequence_data) == Sequence:
						for i2 in range(0, len(PerProjectionAcquisitionSequence_data)):
							if verbose:
								log.append( " PerProjectionAcquisitionSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PerProjectionAcquisitionSequence_data[i2]
							partial_success =  Macro_XRay3DGeneralPerProjectionAcquisitionMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying XRay3DGeneralPerProjectionAcquisitionMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1(ds2, 
									"BreastTomosynthesisAcquisition", "PositionerPrimaryAngle", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying PositionerPrimaryAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"BreastTomosynthesisAcquisition", "PositionerPrimaryAngleDirection", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying PositionerPrimaryAngleDirection --> "+("success" if partial_success else "failure"))

							if "PositionerPrimaryAngleDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["PositionerPrimaryAngleDirection"], 
									StringValueTable_PositionerPrimaryAngleDirection, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying string enumerated values PositionerPrimaryAngleDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"BreastTomosynthesisAcquisition", "PositionerSecondaryAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying PositionerSecondaryAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"BreastTomosynthesisAcquisition", "ExposureTimeInms", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying ExposureTimeInms --> "+("success" if partial_success else "failure"))

							if "ExposureTimeInms" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyNotZero(ds2["ExposureTimeInms"], 
									verbose, log, -1, True)

							partial_success =  		verifyType1(ds2, 
									"BreastTomosynthesisAcquisition", "ExposureInmAs", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying ExposureInmAs --> "+("success" if partial_success else "failure"))

							if "ExposureInmAs" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyNotZero(ds2["ExposureInmAs"], 
									verbose, log, -1, True)

							partial_success =  		verifyType1(ds2, 
									"BreastTomosynthesisAcquisition", "RelativeXRayExposure", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying RelativeXRayExposure --> "+("success" if partial_success else "failure"))

							if "RelativeXRayExposure" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyNotZero(ds2["RelativeXRayExposure"], 
									verbose, log, -1, True)

							partial_success =  		verifyType3(ds2, 
									"BreastTomosynthesisAcquisition", "OrganDose", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying OrganDose --> "+("success" if partial_success else "failure"))

							if "OrganDose" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyNotZero(ds2["OrganDose"], 
									verbose, log, -1, True)

							partial_success =  		verifyType3(ds2, 
									"BreastTomosynthesisAcquisition", "EntranceDoseInmGy", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying EntranceDoseInmGy --> "+("success" if partial_success else "failure"))

							if "EntranceDoseInmGy" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyNotZero(ds2["EntranceDoseInmGy"], 
									verbose, log, -1, True)

							partial_success =  		verifyType3(ds2, 
									"BreastTomosynthesisAcquisition", "EntranceDoseDerivation", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying EntranceDoseDerivation --> "+("success" if partial_success else "failure"))

							if "EntranceDoseDerivation" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["EntranceDoseDerivation"], 
									StringValueTable_EntranceDoseDerivation, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying string enumerated values EntranceDoseDerivation --> "+("success" if partial_success else "failure"))

							partial_success =  Macro_ExposureIndexMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying ExposureIndexMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType3(ds2, 
									"BreastTomosynthesisAcquisition", "IrradiationEventUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " BreastTomosynthesisAcquisition success after verifying IrradiationEventUID --> "+("success" if partial_success else "failure"))

	return global_success

def Module_BreastView_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"BreastView")

	partial_success =  		verifyType1(ds, 
			"BreastView", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BreastView success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageAndFrameType3AndBreastTomoImageAndFrameType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BreastView success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_BreastTomoImageAndFrameType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BreastView success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_BreastTomoImageAndFrameType5, 
			verbose, log, 4)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BreastView success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"BreastView", 
			"ViewCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "BreastView success after verifying ViewCodeSequence" + ("success" if partial_success else "failure")) 
	if "ViewCodeSequence" in ds:
		ViewCodeSequence_data = ds.ViewCodeSequence
		if type(ViewCodeSequence_data) == Sequence:
			for i1 in range(0, len(ViewCodeSequence_data)):
				if verbose:
					log.append( " ViewCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ViewCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " BreastView success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType2(ds1, 
						"BreastView", 
						"ViewModifierCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "BreastView success after verifying ViewModifierCodeSequence" + ("success" if partial_success else "failure")) 
				if "ViewModifierCodeSequence" in ds1:
					ViewModifierCodeSequence_data = ds1.ViewModifierCodeSequence
					if type(ViewModifierCodeSequence_data) == Sequence:
						for i2 in range(0, len(ViewModifierCodeSequence_data)):
							if verbose:
								log.append( " ViewModifierCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ViewModifierCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " BreastView success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"BreastView", "BreastImplantPresent", 
			verbose, log, ElementDictionary, 
			Condition_ModalityIsMG, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BreastView success after verifying BreastImplantPresent --> "+("success" if partial_success else "failure"))

	if Condition_ModalityIsMG(ds, parent_ds, root_ds):
		if "BreastImplantPresent" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["BreastImplantPresent"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " BreastView success after verifying string enumerated values BreastImplantPresent --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"BreastView", "PartialView", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BreastView success after verifying PartialView --> "+("success" if partial_success else "failure"))

	if "PartialView" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PartialView"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BreastView success after verifying string enumerated values PartialView --> "+("success" if partial_success else "failure"))


	if Condition_ViewModifierCodeSequenceIsMagnificationOrSpotCompression(ds, parent_ds, root_ds):
		if "PartialView" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PartialView"], 
				StringValueTable_NoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " BreastView success after verifying string enumerated values PartialView --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"BreastView", 
			"PartialViewCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_PartialViewIsYes, 
			False, 
			parent_ds, root_ds, 
			1, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "BreastView success after verifying PartialViewCodeSequence" + ("success" if partial_success else "failure")) 
	if "PartialViewCodeSequence" in ds:
		PartialViewCodeSequence_data = ds.PartialViewCodeSequence
		if type(PartialViewCodeSequence_data) == Sequence:
			for i1 in range(0, len(PartialViewCodeSequence_data)):
				if verbose:
					log.append( " PartialViewCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PartialViewCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " BreastView success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_EnhancedMammographySeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedMammographySeries")

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographySeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographySeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_MammographyModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographySeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"EnhancedMammographySeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedMammographySeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedMammographySeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"EnhancedMammographySeries", 
			"RequestAttributesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedMammographySeries success after verifying RequestAttributesSequence" + ("success" if partial_success else "failure")) 
	if "RequestAttributesSequence" in ds:
		RequestAttributesSequence_data = ds.RequestAttributesSequence
		if type(RequestAttributesSequence_data) == Sequence:
			for i1 in range(0, len(RequestAttributesSequence_data)):
				if verbose:
					log.append( " RequestAttributesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RequestAttributesSequence_data[i1]
				partial_success =  Macro_RequestAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedMammographySeries success after verifying RequestAttributesMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_EnhancedMammographyImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedMammographyImage")

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "PositionerMotion", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying PositionerMotion --> "+("success" if partial_success else "failure"))

	if "PositionerMotion" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["PositionerMotion"], 
			StringValueTable_MammographyPositionerAndDetectorMotion, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying string defined terms PositionerMotion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "PositionerType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying PositionerType --> "+("success" if partial_success else "failure"))

	if "PositionerType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PositionerType"], 
			StringValueTable_MammographyPositionerTypeWithoutNone, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying string enumerated values PositionerType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "ContentQualification", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying ContentQualification --> "+("success" if partial_success else "failure"))

	if "ContentQualification" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ContentQualification"], 
			StringValueTable_ContentQualification, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying string enumerated values ContentQualification --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "AcquisitionDuration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying AcquisitionDuration --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_DigitalXRayDetectorMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedMammographyImage success after verifying DigitalXRayDetectorMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "KVP", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying KVP --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedMammographyImage", "XRayTubeCurrentInmA", 
			verbose, log, ElementDictionary, 
			Condition_ExposureInmAsNotPresent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying XRayTubeCurrentInmA --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedMammographyImage", "ExposureTimeInms", 
			verbose, log, ElementDictionary, 
			Condition_ExposureInmAsNotPresent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying ExposureTimeInms --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedMammographyImage", "ExposureInmAs", 
			verbose, log, ElementDictionary, 
			Condition_XRayTubeCurrentInmAOrExposureTimeInmsNotPresent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying ExposureInmAs --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "FocalSpots", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying FocalSpots --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "AnodeTargetMaterial", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying AnodeTargetMaterial --> "+("success" if partial_success else "failure"))

	if "AnodeTargetMaterial" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["AnodeTargetMaterial"], 
			StringValueTable_AnodeTargetMaterial, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying string defined terms AnodeTargetMaterial --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "BodyPartThickness", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying BodyPartThickness --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "CompressionForce", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying CompressionForce --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "PaddleDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying PaddleDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "ExposureControlMode", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying ExposureControlMode --> "+("success" if partial_success else "failure"))

	if "ExposureControlMode" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ExposureControlMode"], 
			StringValueTable_ExposureControlMode, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying string defined terms ExposureControlMode --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "ExposureControlModeDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying ExposureControlModeDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedMammographyImage", "PatientOrientation", 
			verbose, log, ElementDictionary, 
			Condition_ViewIsNotSpecimen, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying PatientOrientation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedMammographyImage", "ImageComments", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying ImageComments --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8To16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7To15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedMammographyImage", "QualityControlImage", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying QualityControlImage --> "+("success" if partial_success else "failure"))

	if "QualityControlImage" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["QualityControlImage"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying string enumerated values QualityControlImage --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_NoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedMammographyImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionRatio" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["LossyImageCompressionRatio"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"EnhancedMammographyImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["LossyImageCompressionMethod"], 
				StringValueTable_LossyImageCompressionMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying string defined terms LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))


	if Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" method inconsistent with transfer syntax - attribute <LossyImageCompressionMethod>"+\
				" = <{}>".format( tag_for_keyword("LossyImageCompressionMethod")))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "OrganDose", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying OrganDose --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "EntranceDoseInmGy", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying EntranceDoseInmGy --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedMammographyImage", "EntranceDoseDerivation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying EntranceDoseDerivation --> "+("success" if partial_success else "failure"))

	if "EntranceDoseDerivation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["EntranceDoseDerivation"], 
			StringValueTable_EntranceDoseDerivation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying string enumerated values EntranceDoseDerivation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "TypeOfDetectorMotion", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying TypeOfDetectorMotion --> "+("success" if partial_success else "failure"))

	if "TypeOfDetectorMotion" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["TypeOfDetectorMotion"], 
			StringValueTable_MammographyPositionerAndDetectorMotion, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying string defined terms TypeOfDetectorMotion --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"EnhancedMammographyImage", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedMammographyImage success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedMammographyImage success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"EnhancedMammographyImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if "PresentationLUTShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
			StringValueTable_DXPresentationLUTShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMammographyImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_BreastXRayPositionerMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"BreastXRayPositionerMacro")

	partial_success = verifyType1(ds, 
			"BreastXRayPositionerMacro", 
			"PositionerPositionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "BreastXRayPositionerMacro success after verifying PositionerPositionSequence" + ("success" if partial_success else "failure")) 
	if "PositionerPositionSequence" in ds:
		PositionerPositionSequence_data = ds.PositionerPositionSequence
		if type(PositionerPositionSequence_data) == Sequence:
			for i1 in range(0, len(PositionerPositionSequence_data)):
				if verbose:
					log.append( " PositionerPositionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PositionerPositionSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"BreastXRayPositionerMacro", "PositionerPrimaryAngle", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayPositionerMacro success after verifying PositionerPrimaryAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastXRayPositionerMacro", "PositionerPrimaryAngleDirection", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayPositionerMacro success after verifying PositionerPrimaryAngleDirection --> "+("success" if partial_success else "failure"))

				if "PositionerPrimaryAngleDirection" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["PositionerPrimaryAngleDirection"], 
						StringValueTable_PositionerPrimaryAngleDirection, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayPositionerMacro success after verifying string enumerated values PositionerPrimaryAngleDirection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastXRayPositionerMacro", "PositionerSecondaryAngle", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayPositionerMacro success after verifying PositionerSecondaryAngle --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_BreastXRayDetectorMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"BreastXRayDetectorMacro")

	partial_success = verifyType1(ds, 
			"BreastXRayDetectorMacro", 
			"DetectorPositionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "BreastXRayDetectorMacro success after verifying DetectorPositionSequence" + ("success" if partial_success else "failure")) 
	if "DetectorPositionSequence" in ds:
		DetectorPositionSequence_data = ds.DetectorPositionSequence
		if type(DetectorPositionSequence_data) == Sequence:
			for i1 in range(0, len(DetectorPositionSequence_data)):
				if verbose:
					log.append( " DetectorPositionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DetectorPositionSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"BreastXRayDetectorMacro", "DetectorPrimaryAngle", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayDetectorMacro success after verifying DetectorPrimaryAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastXRayDetectorMacro", "DetectorSecondaryAngle", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayDetectorMacro success after verifying DetectorSecondaryAngle --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_BreastXRayGeometryMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"BreastXRayGeometryMacro")

	partial_success = verifyType1(ds, 
			"BreastXRayGeometryMacro", 
			"XRayGeometrySequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "BreastXRayGeometryMacro success after verifying XRayGeometrySequence" + ("success" if partial_success else "failure")) 
	if "XRayGeometrySequence" in ds:
		XRayGeometrySequence_data = ds.XRayGeometrySequence
		if type(XRayGeometrySequence_data) == Sequence:
			for i1 in range(0, len(XRayGeometrySequence_data)):
				if verbose:
					log.append( " XRayGeometrySequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = XRayGeometrySequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"BreastXRayGeometryMacro", "DistanceSourceToDetector", 
						verbose, log, ElementDictionary, 
						Condition_PresentationIntentTypeIsForProcessing, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayGeometryMacro success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastXRayGeometryMacro", "DistanceSourceToPatient", 
						verbose, log, ElementDictionary, 
						Condition_PresentationIntentTypeIsForProcessing, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayGeometryMacro success after verifying DistanceSourceToPatient --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastXRayGeometryMacro", "DistanceSourceToIsocenter", 
						verbose, log, ElementDictionary, 
						Condition_PresentationIntentTypeIsForProcessing, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayGeometryMacro success after verifying DistanceSourceToIsocenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"BreastXRayGeometryMacro", "DistanceSourceToEntrance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayGeometryMacro success after verifying DistanceSourceToEntrance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastXRayGeometryMacro", "EstimatedRadiographicMagnificationFactor", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayGeometryMacro success after verifying EstimatedRadiographicMagnificationFactor --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_BreastXRayAcquisitionDoseMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"BreastXRayAcquisitionDoseMacro")

	partial_success = verifyType1(ds, 
			"BreastXRayAcquisitionDoseMacro", 
			"XRayAcquisitionDoseSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "BreastXRayAcquisitionDoseMacro success after verifying XRayAcquisitionDoseSequence" + ("success" if partial_success else "failure")) 
	if "XRayAcquisitionDoseSequence" in ds:
		XRayAcquisitionDoseSequence_data = ds.XRayAcquisitionDoseSequence
		if type(XRayAcquisitionDoseSequence_data) == Sequence:
			for i1 in range(0, len(XRayAcquisitionDoseSequence_data)):
				if verbose:
					log.append( " XRayAcquisitionDoseSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = XRayAcquisitionDoseSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"BreastXRayAcquisitionDoseMacro", "ExposureTimeInms", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayAcquisitionDoseMacro success after verifying ExposureTimeInms --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastXRayAcquisitionDoseMacro", "ExposureInmAs", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayAcquisitionDoseMacro success after verifying ExposureInmAs --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"BreastXRayAcquisitionDoseMacro", "RelativeXRayExposure", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayAcquisitionDoseMacro success after verifying RelativeXRayExposure --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"BreastXRayAcquisitionDoseMacro", "HalfValueLayer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayAcquisitionDoseMacro success after verifying HalfValueLayer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastXRayAcquisitionDoseMacro", "OrganDose", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayAcquisitionDoseMacro success after verifying OrganDose --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastXRayAcquisitionDoseMacro", "EntranceDoseInmGy", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayAcquisitionDoseMacro success after verifying EntranceDoseInmGy --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"BreastXRayAcquisitionDoseMacro", "EntranceDoseDerivation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayAcquisitionDoseMacro success after verifying EntranceDoseDerivation --> "+("success" if partial_success else "failure"))

				if "EntranceDoseDerivation" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["EntranceDoseDerivation"], 
						StringValueTable_EntranceDoseDerivation, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayAcquisitionDoseMacro success after verifying string enumerated values EntranceDoseDerivation --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_BreastXRayIsocenterReferenceSystemMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"BreastXRayIsocenterReferenceSystemMacro")

	partial_success = verifyType1(ds, 
			"BreastXRayIsocenterReferenceSystemMacro", 
			"IsocenterReferenceSystemSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "BreastXRayIsocenterReferenceSystemMacro success after verifying IsocenterReferenceSystemSequence" + ("success" if partial_success else "failure")) 
	if "IsocenterReferenceSystemSequence" in ds:
		IsocenterReferenceSystemSequence_data = ds.IsocenterReferenceSystemSequence
		if type(IsocenterReferenceSystemSequence_data) == Sequence:
			for i1 in range(0, len(IsocenterReferenceSystemSequence_data)):
				if verbose:
					log.append( " IsocenterReferenceSystemSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IsocenterReferenceSystemSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "XRaySourceIsocenterPrimaryAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying XRaySourceIsocenterPrimaryAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "XRaySourceIsocenterSecondaryAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying XRaySourceIsocenterSecondaryAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "BreastSupportIsocenterPrimaryAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying BreastSupportIsocenterPrimaryAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "BreastSupportIsocenterSecondaryAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying BreastSupportIsocenterSecondaryAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "BreastSupportXPositionToIsocenter", 
						verbose, log, ElementDictionary, 
						Condition_PresentationIntentTypeIsForProcessing, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying BreastSupportXPositionToIsocenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "BreastSupportYPositionToIsocenter", 
						verbose, log, ElementDictionary, 
						Condition_PresentationIntentTypeIsForProcessing, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying BreastSupportYPositionToIsocenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "BreastSupportZPositionToIsocenter", 
						verbose, log, ElementDictionary, 
						Condition_PresentationIntentTypeIsForProcessing, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying BreastSupportZPositionToIsocenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "DetectorIsocenterPrimaryAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying DetectorIsocenterPrimaryAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "DetectorIsocenterSecondaryAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying DetectorIsocenterSecondaryAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "DetectorXPositionToIsocenter", 
						verbose, log, ElementDictionary, 
						Condition_PresentationIntentTypeIsForProcessing, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying DetectorXPositionToIsocenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "DetectorYPositionToIsocenter", 
						verbose, log, ElementDictionary, 
						Condition_PresentationIntentTypeIsForProcessing, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying DetectorYPositionToIsocenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "DetectorZPositionToIsocenter", 
						verbose, log, ElementDictionary, 
						Condition_PresentationIntentTypeIsForProcessing, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying DetectorZPositionToIsocenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "DetectorActiveAreaTLHCPosition", 
						verbose, log, ElementDictionary, 
						Condition_PresentationIntentTypeIsForProcessing, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying DetectorActiveAreaTLHCPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"BreastXRayIsocenterReferenceSystemMacro", "DetectorActiveAreaOrientation", 
						verbose, log, ElementDictionary, 
						Condition_PresentationIntentTypeIsForProcessing, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " BreastXRayIsocenterReferenceSystemMacro success after verifying DetectorActiveAreaOrientation --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayGridMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayGridMacro")

	partial_success = verifyType1(ds, 
			"XRayGridMacro", 
			"XRayGridSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayGridMacro success after verifying XRayGridSequence" + ("success" if partial_success else "failure")) 
	if "XRayGridSequence" in ds:
		XRayGridSequence_data = ds.XRayGridSequence
		if type(XRayGridSequence_data) == Sequence:
			for i1 in range(0, len(XRayGridSequence_data)):
				if verbose:
					log.append( " XRayGridSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = XRayGridSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"XRayGridMacro", "Grid", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayGridMacro success after verifying Grid --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_XRayGridDescriptionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRayGridMacro success after verifying XRayGridDescriptionMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_XRayFilterMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayFilterMacro")

	partial_success = verifyType1(ds, 
			"XRayFilterMacro", 
			"XRayFilterSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayFilterMacro success after verifying XRayFilterSequence" + ("success" if partial_success else "failure")) 
	if "XRayFilterSequence" in ds:
		XRayFilterSequence_data = ds.XRayFilterSequence
		if type(XRayFilterSequence_data) == Sequence:
			for i1 in range(0, len(XRayFilterSequence_data)):
				if verbose:
					log.append( " XRayFilterSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = XRayFilterSequence_data[i1]
				partial_success =  Macro_XRayFiltrationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRayFilterMacro success after verifying XRayFiltrationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameFunctionalGroupsForBreastProjectionXRayImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForBreastProjectionXRayImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForBreastProjectionXRayImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedDerivationImageMacroInSharedFunctionalGroupSequenceForBreastProjection(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IdentityPixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying IdentityPixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTWithLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying FrameVOILUTWithLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameDisplayShutterMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameDisplayShutterMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying FrameDisplayShutterMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameCharacteristicsMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameCharacteristicsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayFrameCharacteristicsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FieldOfViewSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFieldOfViewMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayFieldOfViewMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FramePixelDataPropertiesSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFramePixelDataPropertiesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayFramePixelDataPropertiesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameDetectorParametersMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameDetectorParametersMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayFrameDetectorParametersMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayCalibrationDeviceUsageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayCalibrationDeviceUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayCalibrationDeviceUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameAcquisitionMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameAcquisitionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayFrameAcquisitionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CollimatorShapeSequenceSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayCollimatorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayCollimatorMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedBreastXRayPositionerMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_BreastXRayPositionerMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying BreastXRayPositionerMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedBreastXRayDetectorMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_BreastXRayDetectorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying BreastXRayDetectorMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayGeometrySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_BreastXRayGeometryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying BreastXRayGeometryMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayAcquisitionDoseSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_BreastXRayAcquisitionDoseMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying BreastXRayAcquisitionDoseMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IsocenterReferenceSystemSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_BreastXRayIsocenterReferenceSystemMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying BreastXRayIsocenterReferenceSystemMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayGridMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayGridMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayGridMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFilterMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFilterMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayFilterMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForBreastProjectionXRayImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedDerivationImageMacroInPerFrameFunctionalGroupSequenceForBreastProjection(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IdentityPixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying IdentityPixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTWithLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying FrameVOILUTWithLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameDisplayShutterMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameDisplayShutterMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying FrameDisplayShutterMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameCharacteristicsMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameCharacteristicsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayFrameCharacteristicsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FieldOfViewSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFieldOfViewMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayFieldOfViewMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FramePixelDataPropertiesSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFramePixelDataPropertiesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayFramePixelDataPropertiesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameDetectorParametersMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameDetectorParametersMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayFrameDetectorParametersMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayCalibrationDeviceUsageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayCalibrationDeviceUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayCalibrationDeviceUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameAcquisitionMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameAcquisitionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayFrameAcquisitionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CollimatorShapeSequenceSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayCollimatorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayCollimatorMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedBreastXRayPositionerMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_BreastXRayPositionerMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying BreastXRayPositionerMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedBreastXRayDetectorMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_BreastXRayDetectorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying BreastXRayDetectorMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayGeometrySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_BreastXRayGeometryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying BreastXRayGeometryMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayAcquisitionDoseSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_BreastXRayAcquisitionDoseMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying BreastXRayAcquisitionDoseMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IsocenterReferenceSystemSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_BreastXRayIsocenterReferenceSystemMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying BreastXRayIsocenterReferenceSystemMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayGridMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayGridMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayGridMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFilterMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFilterMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForBreastProjectionXRayImage success after verifying XRayFilterMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_VLImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"VLImage")

	partial_success =  		verifyType1(ds, 
			"VLImage", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_VLImageType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VLImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2OrRGBorYBRFULL422orYBRPARTIAL420orYBRRCTorYBRICT, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VLImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VLImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VLImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VLImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VLImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOneOrThree, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationNeedsOneSample(ds, parent_ds, root_ds):
		if "SamplesPerPixel" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
				BinaryValueDescription_One, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationNeedsThreeSamples(ds, parent_ds, root_ds):
		if "SamplesPerPixel" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
				BinaryValueDescription_Three, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VLImage", "PlanarConfiguration", 
			verbose, log, ElementDictionary, 
			Condition_SamplesPerPixelGreaterThanOne, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying PlanarConfiguration --> "+("success" if partial_success else "failure"))

	if Condition_SamplesPerPixelGreaterThanOne(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_PlanarConfigurationIsColorByPixel, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VLImage", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"VLImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"VLImage", 
			"ReferencedImageSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue3StereoLOrR, 
			True, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VLImage success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageSequence" in ds:
		ReferencedImageSequence_data = ds.ReferencedImageSequence
		if type(ReferencedImageSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageSequence_data)):
				if verbose:
					log.append( " ReferencedImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VLImage success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType2(ds1, 
						"VLImage", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "VLImage success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " VLImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3C(ds, 
			"VLImage", "WindowCenter", 
			verbose, log, ElementDictionary, 
			Condition_PhotometricInterpretationIsMonochrome2, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying WindowCenter --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VLImage", "WindowWidth", 
			verbose, log, ElementDictionary, 
			Condition_WindowCenterPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying WindowWidth --> "+("success" if partial_success else "failure"))

	if Condition_WindowCenterPresent(ds, parent_ds, root_ds):
		if "WindowWidth" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["WindowWidth"], 
				verbose, log, -1, False)


	if Condition_WindowWidthIsNegative(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Not permitted to be negative - attribute <WindowWidth>"+\
				" = <{}>".format( tag_for_keyword("WindowWidth")))

	partial_success =  		verifyType3(ds, 
			"VLImage", "ImageLaterality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying ImageLaterality --> "+("success" if partial_success else "failure"))

	if "ImageLaterality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageLaterality"], 
			StringValueTable_ImageLaterality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying string enumerated values ImageLaterality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"VLImage", 
			"AnatomicRegionSequence", 
			verbose, log, ElementDictionary, 
			Condition_MultiFrameIODAndNotSpecimen, 
			True, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VLImage success after verifying AnatomicRegionSequence" + ("success" if partial_success else "failure")) 
	if "AnatomicRegionSequence" in ds:
		AnatomicRegionSequence_data = ds.AnatomicRegionSequence
		if type(AnatomicRegionSequence_data) == Sequence:
			for i1 in range(0, len(AnatomicRegionSequence_data)):
				if verbose:
					log.append( " AnatomicRegionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AnatomicRegionSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VLImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"VLImage", 
						"AnatomicRegionModifierSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "VLImage success after verifying AnatomicRegionModifierSequence" + ("success" if partial_success else "failure")) 
				if "AnatomicRegionModifierSequence" in ds1:
					AnatomicRegionModifierSequence_data = ds1.AnatomicRegionModifierSequence
					if type(AnatomicRegionModifierSequence_data) == Sequence:
						for i2 in range(0, len(AnatomicRegionModifierSequence_data)):
							if verbose:
								log.append( " AnatomicRegionModifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AnatomicRegionModifierSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " VLImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_PrimaryAnatomicStructureMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " VLImage success after verifying PrimaryAnatomicStructureMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"VLImage", 
			"ChannelDescriptionCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VLImage success after verifying ChannelDescriptionCodeSequence" + ("success" if partial_success else "failure")) 
	if "ChannelDescriptionCodeSequence" in ds:
		ChannelDescriptionCodeSequence_data = ds.ChannelDescriptionCodeSequence
		if type(ChannelDescriptionCodeSequence_data) == Sequence:
			for i1 in range(0, len(ChannelDescriptionCodeSequence_data)):
				if verbose:
					log.append( " ChannelDescriptionCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ChannelDescriptionCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VLImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"VLImage", "PixelSpacing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying PixelSpacing --> "+("success" if partial_success else "failure"))

	if "PixelSpacing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["PixelSpacing"], 
			verbose, log, -1, False)

	partial_success =  		verifyType3(ds, 
			"VLImage", "ImagerPixelSpacing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLImage success after verifying ImagerPixelSpacing --> "+("success" if partial_success else "failure"))

	if "ImagerPixelSpacing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ImagerPixelSpacing"], 
			verbose, log, -1, False)

	return global_success

def Module_VLEndoscopicSeriesPseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"VLEndoscopicSeriesPseudo")

	partial_success =  		verifyType1(ds, 
			"VLEndoscopicSeriesPseudo", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLEndoscopicSeriesPseudo success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_VLEndoscopyModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLEndoscopicSeriesPseudo success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	return global_success

def Module_VLMicroscopicSeriesPseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"VLMicroscopicSeriesPseudo")

	partial_success =  		verifyType1(ds, 
			"VLMicroscopicSeriesPseudo", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLMicroscopicSeriesPseudo success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_VLMicroscopyModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLMicroscopicSeriesPseudo success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	return global_success

def Module_VLSlideCoordinatesMicroscopicSeriesPseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"VLSlideCoordinatesMicroscopicSeriesPseudo")

	partial_success =  		verifyType1(ds, 
			"VLSlideCoordinatesMicroscopicSeriesPseudo", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLSlideCoordinatesMicroscopicSeriesPseudo success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_VLSlideCoordinatesMicroscopyModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLSlideCoordinatesMicroscopicSeriesPseudo success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	return global_success

def Module_VLPhotographicSeriesPseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"VLPhotographicSeriesPseudo")

	partial_success =  		verifyType1(ds, 
			"VLPhotographicSeriesPseudo", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLPhotographicSeriesPseudo success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_VLPhotographyModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VLPhotographicSeriesPseudo success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SlideCoordinates_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SlideCoordinates")

	partial_success = verifyType2(ds, 
			"SlideCoordinates", 
			"ImageCenterPointCoordinatesSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SlideCoordinates success after verifying ImageCenterPointCoordinatesSequence" + ("success" if partial_success else "failure")) 
	if "ImageCenterPointCoordinatesSequence" in ds:
		ImageCenterPointCoordinatesSequence_data = ds.ImageCenterPointCoordinatesSequence
		if type(ImageCenterPointCoordinatesSequence_data) == Sequence:
			for i1 in range(0, len(ImageCenterPointCoordinatesSequence_data)):
				if verbose:
					log.append( " ImageCenterPointCoordinatesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ImageCenterPointCoordinatesSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SlideCoordinates", "XOffsetInSlideCoordinateSystem", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SlideCoordinates success after verifying XOffsetInSlideCoordinateSystem --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SlideCoordinates", "YOffsetInSlideCoordinateSystem", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SlideCoordinates success after verifying YOffsetInSlideCoordinateSystem --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"SlideCoordinates", "ZOffsetInSlideCoordinateSystem", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SlideCoordinates success after verifying ZOffsetInSlideCoordinateSystem --> "+("success" if partial_success else "failure"))

	return global_success

def Module_OphthalmicPhotographySeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OphthalmicPhotographySeries")

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotographySeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographySeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_OphthalmologyModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographySeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	return global_success

def Module_OphthalmicPhotography8BitImagePseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OphthalmicPhotography8BitImagePseudo")

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotography8BitImagePseudo", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotography8BitImagePseudo success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotography8BitImagePseudo success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotography8BitImagePseudo", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotography8BitImagePseudo success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotography8BitImagePseudo success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotography8BitImagePseudo", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotography8BitImagePseudo success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotography8BitImagePseudo success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	return global_success

def Module_OphthalmicPhotography16BitImagePseudo_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OphthalmicPhotography16BitImagePseudo")

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotography16BitImagePseudo", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotography16BitImagePseudo success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotography16BitImagePseudo success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotography16BitImagePseudo", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotography16BitImagePseudo success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotography16BitImagePseudo success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotography16BitImagePseudo", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotography16BitImagePseudo success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotography16BitImagePseudo success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	return global_success

def Module_OphthalmicPhotographyImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OphthalmicPhotographyImage")

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotographyImage", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_OphthalmologyImageType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue1Derived(ds, parent_ds, root_ds):
		if "ImageType" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["ImageType"], 
				StringValueTable_OphthalmologyImageType3IfDerived, 
				verbose, log, 2)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue1DerivedAndImageTypeValue3MissingOrEmpty(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" A value for Value 3 is required for DERIVED images - attribute <ImageType>")


	if Condition_ImageTypeValue1NotDerivedAndImageTypeValueNotMissingOrEmpty(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" A value for Value 3 may not be present for non-DERIVED images - attribute <ImageType>")


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_OphthalmologyImageType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotographyImage", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotographyImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOneOrThree, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationNeedsOneSample(ds, parent_ds, root_ds):
		if "SamplesPerPixel" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
				BinaryValueDescription_One, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationNeedsThreeSamples(ds, parent_ds, root_ds):
		if "SamplesPerPixel" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
				BinaryValueDescription_Three, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicPhotographyImage", "SamplesPerPixelUsed", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying SamplesPerPixelUsed --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixelUsed" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixelUsed"], 
			BinaryValueDescription_SamplesPerPixelUsedIsTwo, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying binary enumerated values SamplesPerPixelUsed --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotographyImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2OrRGBorYBRFULL422orYBRPARTIAL420orYBRRCTorYBRICT, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotographyImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicPhotographyImage", "PlanarConfiguration", 
			verbose, log, ElementDictionary, 
			Condition_SamplesPerPixelGreaterThanOne, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying PlanarConfiguration --> "+("success" if partial_success else "failure"))

	if Condition_SamplesPerPixelGreaterThanOne(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_PlanarConfigurationIsColorByPixel, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicPhotographyImage", "PixelSpacing", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying PixelSpacing --> "+("success" if partial_success else "failure"))

	if "PixelSpacing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["PixelSpacing"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotographyImage", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotographyImage", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicPhotographyImage", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Original, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2C(ds, 
			"OphthalmicPhotographyImage", 
			"SourceImageSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Derived, 
			False, 
			parent_ds, root_ds, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicPhotographyImage success after verifying SourceImageSequence" + ("success" if partial_success else "failure")) 
	if "SourceImageSequence" in ds:
		SourceImageSequence_data = ds.SourceImageSequence
		if type(SourceImageSequence_data) == Sequence:
			for i1 in range(0, len(SourceImageSequence_data)):
				if verbose:
					log.append( " SourceImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceImageSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicPhotographyImage success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"OphthalmicPhotographyImage", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicPhotographyImage success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OphthalmicPhotographyImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotographyImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicPhotographyImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionRatio" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["LossyImageCompressionRatio"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"OphthalmicPhotographyImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["LossyImageCompressionMethod"], 
				StringValueTable_LossyImageCompressionMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying string defined terms LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))


	if Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" method inconsistent with transfer syntax - attribute <LossyImageCompressionMethod>"+\
				" = <{}>".format( tag_for_keyword("LossyImageCompressionMethod")))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicPhotographyImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			Condition_PhotometricInterpretationIsMonochrome2, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if Condition_PhotometricInterpretationIsMonochrome2(ds, parent_ds, root_ds):
		if "PresentationLUTShape" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
				StringValueTable_IdentityPresentationLUTShape, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OphthalmicPhotographyImage", "CalibrationImage", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying CalibrationImage --> "+("success" if partial_success else "failure"))

	if "CalibrationImage" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CalibrationImage"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying string enumerated values CalibrationImage --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicPhotographyImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OphthalmicPhotographyImage", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyImage success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	return global_success

def Module_OphthalmicPhotographicParameters_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OphthalmicPhotographicParameters")

	partial_success = verifyType1(ds, 
			"OphthalmicPhotographicParameters", 
			"AcquisitionDeviceTypeCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicPhotographicParameters success after verifying AcquisitionDeviceTypeCodeSequence" + ("success" if partial_success else "failure")) 
	if "AcquisitionDeviceTypeCodeSequence" in ds:
		AcquisitionDeviceTypeCodeSequence_data = ds.AcquisitionDeviceTypeCodeSequence
		if type(AcquisitionDeviceTypeCodeSequence_data) == Sequence:
			for i1 in range(0, len(AcquisitionDeviceTypeCodeSequence_data)):
				if verbose:
					log.append( " AcquisitionDeviceTypeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AcquisitionDeviceTypeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicPhotographicParameters success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType2(ds, 
			"OphthalmicPhotographicParameters", 
			"IlluminationTypeCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicPhotographicParameters success after verifying IlluminationTypeCodeSequence" + ("success" if partial_success else "failure")) 
	if "IlluminationTypeCodeSequence" in ds:
		IlluminationTypeCodeSequence_data = ds.IlluminationTypeCodeSequence
		if type(IlluminationTypeCodeSequence_data) == Sequence:
			for i1 in range(0, len(IlluminationTypeCodeSequence_data)):
				if verbose:
					log.append( " IlluminationTypeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IlluminationTypeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicPhotographicParameters success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType2(ds, 
			"OphthalmicPhotographicParameters", 
			"LightPathFilterTypeStackCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicPhotographicParameters success after verifying LightPathFilterTypeStackCodeSequence" + ("success" if partial_success else "failure")) 
	if "LightPathFilterTypeStackCodeSequence" in ds:
		LightPathFilterTypeStackCodeSequence_data = ds.LightPathFilterTypeStackCodeSequence
		if type(LightPathFilterTypeStackCodeSequence_data) == Sequence:
			for i1 in range(0, len(LightPathFilterTypeStackCodeSequence_data)):
				if verbose:
					log.append( " LightPathFilterTypeStackCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = LightPathFilterTypeStackCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicPhotographicParameters success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"OphthalmicPhotographicParameters", "LightPathFilterPassThroughWavelength", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographicParameters success after verifying LightPathFilterPassThroughWavelength --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OphthalmicPhotographicParameters", "LightPathFilterPassBand", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographicParameters success after verifying LightPathFilterPassBand --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"OphthalmicPhotographicParameters", 
			"ImagePathFilterTypeStackCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicPhotographicParameters success after verifying ImagePathFilterTypeStackCodeSequence" + ("success" if partial_success else "failure")) 
	if "ImagePathFilterTypeStackCodeSequence" in ds:
		ImagePathFilterTypeStackCodeSequence_data = ds.ImagePathFilterTypeStackCodeSequence
		if type(ImagePathFilterTypeStackCodeSequence_data) == Sequence:
			for i1 in range(0, len(ImagePathFilterTypeStackCodeSequence_data)):
				if verbose:
					log.append( " ImagePathFilterTypeStackCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ImagePathFilterTypeStackCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicPhotographicParameters success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"OphthalmicPhotographicParameters", "ImagePathFilterPassThroughWavelength", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographicParameters success after verifying ImagePathFilterPassThroughWavelength --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OphthalmicPhotographicParameters", "ImagePathFilterPassBand", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographicParameters success after verifying ImagePathFilterPassBand --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"OphthalmicPhotographicParameters", 
			"LensesCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicPhotographicParameters success after verifying LensesCodeSequence" + ("success" if partial_success else "failure")) 
	if "LensesCodeSequence" in ds:
		LensesCodeSequence_data = ds.LensesCodeSequence
		if type(LensesCodeSequence_data) == Sequence:
			for i1 in range(0, len(LensesCodeSequence_data)):
				if verbose:
					log.append( " LensesCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = LensesCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicPhotographicParameters success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType2(ds, 
			"OphthalmicPhotographicParameters", "DetectorType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographicParameters success after verifying DetectorType --> "+("success" if partial_success else "failure"))

	if "DetectorType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["DetectorType"], 
			StringValueTable_OphthalmologyDetectorType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographicParameters success after verifying string defined terms DetectorType --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"OphthalmicPhotographicParameters", 
			"ChannelDescriptionCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicPhotographicParameters success after verifying ChannelDescriptionCodeSequence" + ("success" if partial_success else "failure")) 
	if "ChannelDescriptionCodeSequence" in ds:
		ChannelDescriptionCodeSequence_data = ds.ChannelDescriptionCodeSequence
		if type(ChannelDescriptionCodeSequence_data) == Sequence:
			for i1 in range(0, len(ChannelDescriptionCodeSequence_data)):
				if verbose:
					log.append( " ChannelDescriptionCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ChannelDescriptionCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicPhotographicParameters success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"OphthalmicPhotographicParameters", "CameraAngleOfView", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographicParameters success after verifying CameraAngleOfView --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_OphthalmicAcquisitionParametersMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"OphthalmicAcquisitionParametersMacro")

	partial_success = verifyType2(ds, 
			"OphthalmicAcquisitionParametersMacro", 
			"RefractiveStateSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAcquisitionParametersMacro success after verifying RefractiveStateSequence" + ("success" if partial_success else "failure")) 
	if "RefractiveStateSequence" in ds:
		RefractiveStateSequence_data = ds.RefractiveStateSequence
		if type(RefractiveStateSequence_data) == Sequence:
			for i1 in range(0, len(RefractiveStateSequence_data)):
				if verbose:
					log.append( " RefractiveStateSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RefractiveStateSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"OphthalmicAcquisitionParametersMacro", "SphericalLensPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAcquisitionParametersMacro success after verifying SphericalLensPower --> "+("success" if partial_success else "failure"))

				if "SphericalLensPower" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["SphericalLensPower"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"OphthalmicAcquisitionParametersMacro", "CylinderLensPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAcquisitionParametersMacro success after verifying CylinderLensPower --> "+("success" if partial_success else "failure"))

				if "CylinderLensPower" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["CylinderLensPower"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"OphthalmicAcquisitionParametersMacro", "CylinderAxis", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAcquisitionParametersMacro success after verifying CylinderAxis --> "+("success" if partial_success else "failure"))

				if "CylinderAxis" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["CylinderAxis"], 
						verbose, log, -1, True)

	partial_success =  		verifyType2(ds, 
			"OphthalmicAcquisitionParametersMacro", "EmmetropicMagnification", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAcquisitionParametersMacro success after verifying EmmetropicMagnification --> "+("success" if partial_success else "failure"))

	if "EmmetropicMagnification" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["EmmetropicMagnification"], 
			verbose, log, -1, True)

	partial_success =  		verifyType2(ds, 
			"OphthalmicAcquisitionParametersMacro", "IntraOcularPressure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAcquisitionParametersMacro success after verifying IntraOcularPressure --> "+("success" if partial_success else "failure"))

	if "IntraOcularPressure" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["IntraOcularPressure"], 
			verbose, log, -1, True)

	partial_success =  		verifyType2(ds, 
			"OphthalmicAcquisitionParametersMacro", "PupilDilated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAcquisitionParametersMacro success after verifying PupilDilated --> "+("success" if partial_success else "failure"))

	if "PupilDilated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PupilDilated"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAcquisitionParametersMacro success after verifying string enumerated values PupilDilated --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2C(ds, 
			"OphthalmicAcquisitionParametersMacro", 
			"MydriaticAgentSequence", 
			verbose, log, ElementDictionary, 
			Condition_PupilDilatedIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAcquisitionParametersMacro success after verifying MydriaticAgentSequence" + ("success" if partial_success else "failure")) 
	if "MydriaticAgentSequence" in ds:
		MydriaticAgentSequence_data = ds.MydriaticAgentSequence
		if type(MydriaticAgentSequence_data) == Sequence:
			for i1 in range(0, len(MydriaticAgentSequence_data)):
				if verbose:
					log.append( " MydriaticAgentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MydriaticAgentSequence_data[i1]
				partial_success = verifyType1(ds1, 
						"OphthalmicAcquisitionParametersMacro", 
						"MydriaticAgentCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAcquisitionParametersMacro success after verifying MydriaticAgentCodeSequence" + ("success" if partial_success else "failure")) 
				if "MydriaticAgentCodeSequence" in ds1:
					MydriaticAgentCodeSequence_data = ds1.MydriaticAgentCodeSequence
					if type(MydriaticAgentCodeSequence_data) == Sequence:
						for i2 in range(0, len(MydriaticAgentCodeSequence_data)):
							if verbose:
								log.append( " MydriaticAgentCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MydriaticAgentCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OphthalmicAcquisitionParametersMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"OphthalmicAcquisitionParametersMacro", "MydriaticAgentConcentration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAcquisitionParametersMacro success after verifying MydriaticAgentConcentration --> "+("success" if partial_success else "failure"))

				if "MydriaticAgentConcentration" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["MydriaticAgentConcentration"], 
						verbose, log, -1, True)

				partial_success = verifyType1C(ds1, 
						"OphthalmicAcquisitionParametersMacro", 
						"MydriaticAgentConcentrationUnitsSequence", 
						verbose, log, ElementDictionary, 
						Condition_MydriaticAgentConcentrationIsPresent, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAcquisitionParametersMacro success after verifying MydriaticAgentConcentrationUnitsSequence" + ("success" if partial_success else "failure")) 
				if "MydriaticAgentConcentrationUnitsSequence" in ds1:
					MydriaticAgentConcentrationUnitsSequence_data = ds1.MydriaticAgentConcentrationUnitsSequence
					if type(MydriaticAgentConcentrationUnitsSequence_data) == Sequence:
						for i2 in range(0, len(MydriaticAgentConcentrationUnitsSequence_data)):
							if verbose:
								log.append( " MydriaticAgentConcentrationUnitsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MydriaticAgentConcentrationUnitsSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OphthalmicAcquisitionParametersMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType2C(ds, 
			"OphthalmicAcquisitionParametersMacro", "DegreeOfDilation", 
			verbose, log, ElementDictionary, 
			Condition_PupilDilatedIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAcquisitionParametersMacro success after verifying DegreeOfDilation --> "+("success" if partial_success else "failure"))

	return global_success

def Module_OphthalmicPhotographyAcquisitionParameters_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OphthalmicPhotographyAcquisitionParameters")

	partial_success =  		verifyType2(ds, 
			"OphthalmicPhotographyAcquisitionParameters", "PatientEyeMovementCommanded", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyAcquisitionParameters success after verifying PatientEyeMovementCommanded --> "+("success" if partial_success else "failure"))

	if "PatientEyeMovementCommanded" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PatientEyeMovementCommanded"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyAcquisitionParameters success after verifying string enumerated values PatientEyeMovementCommanded --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"OphthalmicPhotographyAcquisitionParameters", 
			"PatientEyeMovementCommandCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_PatientEyeMovementCommandedIsYes, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicPhotographyAcquisitionParameters success after verifying PatientEyeMovementCommandCodeSequence" + ("success" if partial_success else "failure")) 
	if "PatientEyeMovementCommandCodeSequence" in ds:
		PatientEyeMovementCommandCodeSequence_data = ds.PatientEyeMovementCommandCodeSequence
		if type(PatientEyeMovementCommandCodeSequence_data) == Sequence:
			for i1 in range(0, len(PatientEyeMovementCommandCodeSequence_data)):
				if verbose:
					log.append( " PatientEyeMovementCommandCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientEyeMovementCommandCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicPhotographyAcquisitionParameters success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType2(ds, 
			"OphthalmicPhotographyAcquisitionParameters", "HorizontalFieldOfView", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPhotographyAcquisitionParameters success after verifying HorizontalFieldOfView --> "+("success" if partial_success else "failure"))

	if "HorizontalFieldOfView" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["HorizontalFieldOfView"], 
			verbose, log, -1, True)

	partial_success =  Macro_OphthalmicAcquisitionParametersMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " OphthalmicPhotographyAcquisitionParameters success after verifying OphthalmicAcquisitionParametersMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_OcularRegionImaged_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OcularRegionImaged")

	partial_success =  		verifyType1(ds, 
			"OcularRegionImaged", "ImageLaterality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OcularRegionImaged success after verifying ImageLaterality --> "+("success" if partial_success else "failure"))

	if "ImageLaterality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageLaterality"], 
			StringValueTable_OphthalmologyImageLaterality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OcularRegionImaged success after verifying string enumerated values ImageLaterality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"OcularRegionImaged", 
			"RelativeImagePositionCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OcularRegionImaged success after verifying RelativeImagePositionCodeSequence" + ("success" if partial_success else "failure")) 
	if "RelativeImagePositionCodeSequence" in ds:
		RelativeImagePositionCodeSequence_data = ds.RelativeImagePositionCodeSequence
		if type(RelativeImagePositionCodeSequence_data) == Sequence:
			for i1 in range(0, len(RelativeImagePositionCodeSequence_data)):
				if verbose:
					log.append( " RelativeImagePositionCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RelativeImagePositionCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OcularRegionImaged success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_GeneralAnatomyMandatoryMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " OcularRegionImaged success after verifying GeneralAnatomyMandatoryMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_StereometricSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"StereometricSeries")

	partial_success =  		verifyType1(ds, 
			"StereometricSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StereometricSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_StereometricModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StereometricSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	return global_success

def Module_StereometricRelationship_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"StereometricRelationship")

	partial_success = verifyType1(ds, 
			"StereometricRelationship", 
			"StereoPairsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "StereometricRelationship success after verifying StereoPairsSequence" + ("success" if partial_success else "failure")) 
	if "StereoPairsSequence" in ds:
		StereoPairsSequence_data = ds.StereoPairsSequence
		if type(StereoPairsSequence_data) == Sequence:
			for i1 in range(0, len(StereoPairsSequence_data)):
				if verbose:
					log.append( " StereoPairsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = StereoPairsSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"StereometricRelationship", "StereoBaselineAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StereometricRelationship success after verifying StereoBaselineAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"StereometricRelationship", "StereoBaselineDisplacement", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StereometricRelationship success after verifying StereoBaselineDisplacement --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"StereometricRelationship", "StereoHorizontalPixelOffset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StereometricRelationship success after verifying StereoHorizontalPixelOffset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"StereometricRelationship", "StereoVerticalPixelOffset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StereometricRelationship success after verifying StereoVerticalPixelOffset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"StereometricRelationship", "StereoRotation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StereometricRelationship success after verifying StereoRotation --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"StereometricRelationship", 
						"LeftImageSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "StereometricRelationship success after verifying LeftImageSequence" + ("success" if partial_success else "failure")) 
				if "LeftImageSequence" in ds1:
					LeftImageSequence_data = ds1.LeftImageSequence
					if type(LeftImageSequence_data) == Sequence:
						for i2 in range(0, len(LeftImageSequence_data)):
							if verbose:
								log.append( " LeftImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = LeftImageSequence_data[i2]
							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " StereometricRelationship success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"StereometricRelationship", 
						"RightImageSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "StereometricRelationship success after verifying RightImageSequence" + ("success" if partial_success else "failure")) 
				if "RightImageSequence" in ds1:
					RightImageSequence_data = ds1.RightImageSequence
					if type(RightImageSequence_data) == Sequence:
						for i2 in range(0, len(RightImageSequence_data)):
							if verbose:
								log.append( " RightImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RightImageSequence_data[i2]
							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " StereometricRelationship success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_OphthalmicTomographySeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OphthalmicTomographySeries")

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographySeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographySeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_OphthalmicTomographyModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographySeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographySeries", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographySeries success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"OphthalmicTomographySeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicTomographySeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicTomographySeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_OphthalmicTomographyImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OphthalmicTomographyImage")

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicTomographyImage", "AcquisitionDuration", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Original, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying AcquisitionDuration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "AcquisitionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying AcquisitionNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8Or12Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7Or11Or15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if "PresentationLUTShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
			StringValueTable_IdentityPresentationLUTShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicTomographyImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionRatio" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["LossyImageCompressionRatio"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"OphthalmicTomographyImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["LossyImageCompressionMethod"], 
				StringValueTable_LossyImageCompressionMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying string defined terms LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))


	if Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" method inconsistent with transfer syntax - attribute <LossyImageCompressionMethod>"+\
				" = <{}>".format( tag_for_keyword("LossyImageCompressionMethod")))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_NoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OphthalmicTomographyImage", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "ConcatenationFrameOffsetNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying ConcatenationFrameOffsetNumber --> "+("success" if partial_success else "failure"))

	if "ConcatenationFrameOffsetNumber" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["ConcatenationFrameOffsetNumber"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying binary enumerated values ConcatenationFrameOffsetNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "InConcatenationNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying InConcatenationNumber --> "+("success" if partial_success else "failure"))

	if "InConcatenationNumber" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["InConcatenationNumber"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying binary enumerated values InConcatenationNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyImage", "InConcatenationTotalNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying InConcatenationTotalNumber --> "+("success" if partial_success else "failure"))

	if "InConcatenationTotalNumber" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["InConcatenationTotalNumber"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying binary enumerated values InConcatenationTotalNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OphthalmicTomographyImage", "ImageComments", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyImage success after verifying ImageComments --> "+("success" if partial_success else "failure"))

	return global_success

def Module_OphthalmicTomographyAcquisitionParameters_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OphthalmicTomographyAcquisitionParameters")

	partial_success =  		verifyType2(ds, 
			"OphthalmicTomographyAcquisitionParameters", "AxialLengthOfTheEye", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyAcquisitionParameters success after verifying AxialLengthOfTheEye --> "+("success" if partial_success else "failure"))

	if "AxialLengthOfTheEye" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["AxialLengthOfTheEye"], 
			verbose, log, -1, True)

	partial_success =  		verifyType2(ds, 
			"OphthalmicTomographyAcquisitionParameters", "HorizontalFieldOfView", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyAcquisitionParameters success after verifying HorizontalFieldOfView --> "+("success" if partial_success else "failure"))

	if "HorizontalFieldOfView" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["HorizontalFieldOfView"], 
			verbose, log, -1, True)

	partial_success =  Macro_OphthalmicAcquisitionParametersMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " OphthalmicTomographyAcquisitionParameters success after verifying OphthalmicAcquisitionParametersMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_OphthalmicTomographyParameters_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OphthalmicTomographyParameters")

	partial_success = verifyType1(ds, 
			"OphthalmicTomographyParameters", 
			"AcquisitionDeviceTypeCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicTomographyParameters success after verifying AcquisitionDeviceTypeCodeSequence" + ("success" if partial_success else "failure")) 
	if "AcquisitionDeviceTypeCodeSequence" in ds:
		AcquisitionDeviceTypeCodeSequence_data = ds.AcquisitionDeviceTypeCodeSequence
		if type(AcquisitionDeviceTypeCodeSequence_data) == Sequence:
			for i1 in range(0, len(AcquisitionDeviceTypeCodeSequence_data)):
				if verbose:
					log.append( " AcquisitionDeviceTypeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AcquisitionDeviceTypeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicTomographyParameters success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType2(ds, 
			"OphthalmicTomographyParameters", 
			"LightPathFilterTypeStackCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicTomographyParameters success after verifying LightPathFilterTypeStackCodeSequence" + ("success" if partial_success else "failure")) 
	if "LightPathFilterTypeStackCodeSequence" in ds:
		LightPathFilterTypeStackCodeSequence_data = ds.LightPathFilterTypeStackCodeSequence
		if type(LightPathFilterTypeStackCodeSequence_data) == Sequence:
			for i1 in range(0, len(LightPathFilterTypeStackCodeSequence_data)):
				if verbose:
					log.append( " LightPathFilterTypeStackCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = LightPathFilterTypeStackCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicTomographyParameters success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"OphthalmicTomographyParameters", "LightPathFilterPassThroughWavelength", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyParameters success after verifying LightPathFilterPassThroughWavelength --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OphthalmicTomographyParameters", "LightPathFilterPassBand", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyParameters success after verifying LightPathFilterPassBand --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicTomographyParameters", "DetectorType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyParameters success after verifying DetectorType --> "+("success" if partial_success else "failure"))

	if "DetectorType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["DetectorType"], 
			StringValueTable_OphthalmicTomographyDetectorType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyParameters success after verifying string defined terms DetectorType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicTomographyParameters", "IlluminationWaveLength", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionDeviceTypeCodeSequenceIsOpticalCoherenceTomographyScanner, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyParameters success after verifying IlluminationWaveLength --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicTomographyParameters", "IlluminationPower", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionDeviceTypeCodeSequenceIsOpticalCoherenceTomographyScanner, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyParameters success after verifying IlluminationPower --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicTomographyParameters", "IlluminationBandwidth", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionDeviceTypeCodeSequenceIsOpticalCoherenceTomographyScanner, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyParameters success after verifying IlluminationBandwidth --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicTomographyParameters", "DepthSpatialResolution", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionDeviceTypeCodeSequenceIsOpticalCoherenceTomographyScanner, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyParameters success after verifying DepthSpatialResolution --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicTomographyParameters", "MaximumDepthDistortion", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionDeviceTypeCodeSequenceIsOpticalCoherenceTomographyScanner, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyParameters success after verifying MaximumDepthDistortion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicTomographyParameters", "AlongScanSpatialResolution", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionDeviceTypeCodeSequenceIsOpticalCoherenceTomographyScanner, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyParameters success after verifying AlongScanSpatialResolution --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicTomographyParameters", "MaximumAlongScanDistortion", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionDeviceTypeCodeSequenceIsOpticalCoherenceTomographyScanner, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyParameters success after verifying MaximumAlongScanDistortion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicTomographyParameters", "AcrossScanSpatialResolution", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionDeviceTypeCodeSequenceIsOpticalCoherenceTomographyScanner, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyParameters success after verifying AcrossScanSpatialResolution --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"OphthalmicTomographyParameters", "MaximumAcrossScanDistortion", 
			verbose, log, ElementDictionary, 
			Condition_AcquisitionDeviceTypeCodeSequenceIsOpticalCoherenceTomographyScanner, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicTomographyParameters success after verifying MaximumAcrossScanDistortion --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_OphthalmicFrameLocationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"OphthalmicFrameLocationMacro")

	partial_success = verifyType1(ds, 
			"OphthalmicFrameLocationMacro", 
			"OphthalmicFrameLocationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicFrameLocationMacro success after verifying OphthalmicFrameLocationSequence" + ("success" if partial_success else "failure")) 
	if "OphthalmicFrameLocationSequence" in ds:
		OphthalmicFrameLocationSequence_data = ds.OphthalmicFrameLocationSequence
		if type(OphthalmicFrameLocationSequence_data) == Sequence:
			for i1 in range(0, len(OphthalmicFrameLocationSequence_data)):
				if verbose:
					log.append( " OphthalmicFrameLocationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OphthalmicFrameLocationSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicFrameLocationMacro success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"OphthalmicFrameLocationMacro", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicFrameLocationMacro success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OphthalmicFrameLocationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1(ds2, 
									"OphthalmicFrameLocationMacro", "CodeValue", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " OphthalmicFrameLocationMacro success after verifying CodeValue --> "+("success" if partial_success else "failure"))

							if "CodeValue" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["CodeValue"], 
									StringValueTable_LocalizerDCMCodeValue, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " OphthalmicFrameLocationMacro success after verifying string defined terms CodeValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"OphthalmicFrameLocationMacro", "ReferenceCoordinates", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicFrameLocationMacro success after verifying ReferenceCoordinates --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"OphthalmicFrameLocationMacro", "DepthOfTransverseImage", 
						verbose, log, ElementDictionary, 
						Condition_OphthalmicImageOrientationIsTransverse, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicFrameLocationMacro success after verifying DepthOfTransverseImage --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"OphthalmicFrameLocationMacro", "OphthalmicImageOrientation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicFrameLocationMacro success after verifying OphthalmicImageOrientation --> "+("success" if partial_success else "failure"))

				if "OphthalmicImageOrientation" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["OphthalmicImageOrientation"], 
						StringValueTable_OphthalmicImageOrientation, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicFrameLocationMacro success after verifying string enumerated values OphthalmicImageOrientation --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiFrameFunctionalGroupsForOphthalmicTomography_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForOphthalmicTomography")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForOphthalmicTomography", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedOphthalmicFrameLocationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_OphthalmicFrameLocationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying OphthalmicFrameLocationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForOphthalmicTomography", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedOphthalmicFrameLocationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_OphthalmicFrameLocationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForOphthalmicTomography success after verifying OphthalmicFrameLocationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_WholeSlideMicroscopySeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"WholeSlideMicroscopySeries")

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopySeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopySeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_VLWholeSlideMicroscopyModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopySeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"WholeSlideMicroscopySeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "WholeSlideMicroscopySeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " WholeSlideMicroscopySeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_WholeSlideMicroscopyImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"WholeSlideMicroscopyImage")

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "ImageType", 
			verbose, log, ElementDictionary, 
			4, 4)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_WholeSlideImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageAndFrameType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_WholeSlideImageType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_WholeSlideImageType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "ImagedVolumeWidth", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying ImagedVolumeWidth --> "+("success" if partial_success else "failure"))

	if "ImagedVolumeWidth" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ImagedVolumeWidth"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "ImagedVolumeHeight", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying ImagedVolumeHeight --> "+("success" if partial_success else "failure"))

	if "ImagedVolumeHeight" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ImagedVolumeHeight"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "ImagedVolumeDepth", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying ImagedVolumeDepth --> "+("success" if partial_success else "failure"))

	if "ImagedVolumeDepth" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ImagedVolumeDepth"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "TotalPixelMatrixColumns", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying TotalPixelMatrixColumns --> "+("success" if partial_success else "failure"))

	if "TotalPixelMatrixColumns" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["TotalPixelMatrixColumns"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "TotalPixelMatrixRows", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying TotalPixelMatrixRows --> "+("success" if partial_success else "failure"))

	if "TotalPixelMatrixRows" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["TotalPixelMatrixRows"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"WholeSlideMicroscopyImage", "TotalPixelMatrixFocalPlanes", 
			verbose, log, ElementDictionary, 
			Condition_DimensionOrganizationTypeIsTILED_FULL, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying TotalPixelMatrixFocalPlanes --> "+("success" if partial_success else "failure"))

	if Condition_DimensionOrganizationTypeIsTILED_FULL(ds, parent_ds, root_ds):
		if "TotalPixelMatrixFocalPlanes" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["TotalPixelMatrixFocalPlanes"], 
				verbose, log, -1, False)

	partial_success = verifyType1(ds, 
			"WholeSlideMicroscopyImage", 
			"TotalPixelMatrixOriginSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "WholeSlideMicroscopyImage success after verifying TotalPixelMatrixOriginSequence" + ("success" if partial_success else "failure")) 
	if "TotalPixelMatrixOriginSequence" in ds:
		TotalPixelMatrixOriginSequence_data = ds.TotalPixelMatrixOriginSequence
		if type(TotalPixelMatrixOriginSequence_data) == Sequence:
			for i1 in range(0, len(TotalPixelMatrixOriginSequence_data)):
				if verbose:
					log.append( " TotalPixelMatrixOriginSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TotalPixelMatrixOriginSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"WholeSlideMicroscopyImage", "XOffsetInSlideCoordinateSystem", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WholeSlideMicroscopyImage success after verifying XOffsetInSlideCoordinateSystem --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"WholeSlideMicroscopyImage", "YOffsetInSlideCoordinateSystem", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WholeSlideMicroscopyImage success after verifying YOffsetInSlideCoordinateSystem --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "ImageOrientationSlide", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying ImageOrientationSlide --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOneOrThree, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationNeedsOneSample(ds, parent_ds, root_ds):
		if "SamplesPerPixel" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
				BinaryValueDescription_One, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationNeedsThreeSamples(ds, parent_ds, root_ds):
		if "SamplesPerPixel" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
				BinaryValueDescription_Three, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2OrRGBorYBRFULL422orYBRRCTorYBRICT, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))


	if Condition_JPEGLossyTransferSyntaxAndThreeSamples(ds, parent_ds, root_ds):
		if "PhotometricInterpretation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
				StringValueTable_PhotometricInterpretationYBRFull422OrRGB, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))


	if Condition_JPEG2000LosslessTransferSyntaxAndThreeSamples(ds, parent_ds, root_ds):
		if "PhotometricInterpretation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
				StringValueTable_PhotometricInterpretationYBRRCTOrRGB, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))


	if Condition_JPEG2000TransferSyntaxAndThreeSamples(ds, parent_ds, root_ds):
		if "PhotometricInterpretation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
				StringValueTable_PhotometricInterpretationYBRRCTOrICTOrRGB, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"WholeSlideMicroscopyImage", "PlanarConfiguration", 
			verbose, log, ElementDictionary, 
			Condition_SamplesPerPixelGreaterThanOne, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying PlanarConfiguration --> "+("success" if partial_success else "failure"))

	if Condition_SamplesPerPixelGreaterThanOne(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_PlanarConfigurationIsColorByPixel, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "NumberOfFrames", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying NumberOfFrames --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3LocalizerOrLabel(ds, parent_ds, root_ds):
		if "NumberOfFrames" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["NumberOfFrames"], 
				BinaryValueDescription_One, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying binary enumerated values NumberOfFrames --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7Or15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"WholeSlideMicroscopyImage", "AcquisitionDuration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying AcquisitionDuration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"WholeSlideMicroscopyImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionRatio" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["LossyImageCompressionRatio"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"WholeSlideMicroscopyImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["LossyImageCompressionMethod"], 
				StringValueTable_LossyImageCompressionMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string defined terms LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))


	if Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" method inconsistent with transfer syntax - attribute <LossyImageCompressionMethod>"+\
				" = <{}>".format( tag_for_keyword("LossyImageCompressionMethod")))

	partial_success =  		verifyType1C(ds, 
			"WholeSlideMicroscopyImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			Condition_PhotometricInterpretationIsMonochrome2, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if Condition_PhotometricInterpretationIsMonochrome2(ds, parent_ds, root_ds):
		if "PresentationLUTShape" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
				StringValueTable_IdentityPresentationLUTShape, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"WholeSlideMicroscopyImage", "RescaleSlope", 
			verbose, log, ElementDictionary, 
			Condition_PhotometricInterpretationIsMonochrome2, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying RescaleSlope --> "+("success" if partial_success else "failure"))

	if Condition_PhotometricInterpretationIsMonochrome2(ds, parent_ds, root_ds):
		if "RescaleSlope" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["RescaleSlope"], 
				BinaryValueDescription_One, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying binary enumerated values RescaleSlope --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"WholeSlideMicroscopyImage", "RescaleIntercept", 
			verbose, log, ElementDictionary, 
			Condition_PhotometricInterpretationIsMonochrome2, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying RescaleIntercept --> "+("success" if partial_success else "failure"))

	if Condition_PhotometricInterpretationIsMonochrome2(ds, parent_ds, root_ds):
		if "RescaleIntercept" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["RescaleIntercept"], 
				BinaryValueDescription_Zero, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying binary enumerated values RescaleIntercept --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "VolumetricProperties", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying VolumetricProperties --> "+("success" if partial_success else "failure"))

	if "VolumetricProperties" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VolumetricProperties"], 
			StringValueTable_VolumetricPropertiesVolume, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string enumerated values VolumetricProperties --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "SpecimenLabelInImage", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying SpecimenLabelInImage --> "+("success" if partial_success else "failure"))

	if "SpecimenLabelInImage" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SpecimenLabelInImage"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string enumerated values SpecimenLabelInImage --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "FocusMethod", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying FocusMethod --> "+("success" if partial_success else "failure"))

	if "FocusMethod" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["FocusMethod"], 
			StringValueTable_WholeSlideFocusMethod, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string enumerated values FocusMethod --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WholeSlideMicroscopyImage", "ExtendedDepthOfField", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying ExtendedDepthOfField --> "+("success" if partial_success else "failure"))

	if "ExtendedDepthOfField" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ExtendedDepthOfField"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying string enumerated values ExtendedDepthOfField --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"WholeSlideMicroscopyImage", "NumberOfFocalPlanes", 
			verbose, log, ElementDictionary, 
			Condition_ExtendedDepthOfFieldIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying NumberOfFocalPlanes --> "+("success" if partial_success else "failure"))

	if Condition_ExtendedDepthOfFieldIsYes(ds, parent_ds, root_ds):
		if "NumberOfFocalPlanes" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["NumberOfFocalPlanes"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"WholeSlideMicroscopyImage", "DistanceBetweenFocalPlanes", 
			verbose, log, ElementDictionary, 
			Condition_ExtendedDepthOfFieldIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying DistanceBetweenFocalPlanes --> "+("success" if partial_success else "failure"))

	if Condition_ExtendedDepthOfFieldIsYes(ds, parent_ds, root_ds):
		if "DistanceBetweenFocalPlanes" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["DistanceBetweenFocalPlanes"], 
				verbose, log, -1, False)

	partial_success =  		verifyType3(ds, 
			"WholeSlideMicroscopyImage", "AcquisitionDeviceProcessingDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying AcquisitionDeviceProcessingDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"WholeSlideMicroscopyImage", "ConvolutionKernel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying ConvolutionKernel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"WholeSlideMicroscopyImage", "RecommendedAbsentPixelCIELabValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WholeSlideMicroscopyImage success after verifying RecommendedAbsentPixelCIELabValue --> "+("success" if partial_success else "failure"))

	return global_success

def Module_OpticalPath_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OpticalPath")

	partial_success =  		verifyType1C(ds, 
			"OpticalPath", "NumberOfOpticalPaths", 
			verbose, log, ElementDictionary, 
			Condition_DimensionOrganizationTypeIsTILED_FULL, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OpticalPath success after verifying NumberOfOpticalPaths --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"OpticalPath", 
			"OpticalPathSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OpticalPath success after verifying OpticalPathSequence" + ("success" if partial_success else "failure")) 
	if "OpticalPathSequence" in ds:
		OpticalPathSequence_data = ds.OpticalPathSequence
		if type(OpticalPathSequence_data) == Sequence:
			for i1 in range(0, len(OpticalPathSequence_data)):
				if verbose:
					log.append( " OpticalPathSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OpticalPathSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"OpticalPath", "OpticalPathIdentifier", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OpticalPath success after verifying OpticalPathIdentifier --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"OpticalPath", "OpticalPathDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OpticalPath success after verifying OpticalPathDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"OpticalPath", 
						"IlluminatorTypeCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OpticalPath success after verifying IlluminatorTypeCodeSequence" + ("success" if partial_success else "failure")) 
				if "IlluminatorTypeCodeSequence" in ds1:
					IlluminatorTypeCodeSequence_data = ds1.IlluminatorTypeCodeSequence
					if type(IlluminatorTypeCodeSequence_data) == Sequence:
						for i2 in range(0, len(IlluminatorTypeCodeSequence_data)):
							if verbose:
								log.append( " IlluminatorTypeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IlluminatorTypeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OpticalPath success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"OpticalPath", "IlluminationWaveLength", 
						verbose, log, ElementDictionary, 
						Condition_IlluminationColorCodeSequenceNotPresent, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OpticalPath success after verifying IlluminationWaveLength --> "+("success" if partial_success else "failure"))


				if Condition_IlluminationWaveLengthInvalid(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" Invalid value - required to be greater than zero - attribute <IlluminationWaveLength>")

				partial_success = verifyType1C(ds1, 
						"OpticalPath", 
						"IlluminationColorCodeSequence", 
						verbose, log, ElementDictionary, 
						Condition_IlluminationWaveLengthNotPresent, 
						True, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OpticalPath success after verifying IlluminationColorCodeSequence" + ("success" if partial_success else "failure")) 
				if "IlluminationColorCodeSequence" in ds1:
					IlluminationColorCodeSequence_data = ds1.IlluminationColorCodeSequence
					if type(IlluminationColorCodeSequence_data) == Sequence:
						for i2 in range(0, len(IlluminationColorCodeSequence_data)):
							if verbose:
								log.append( " IlluminationColorCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IlluminationColorCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OpticalPath success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"OpticalPath", 
						"IlluminationTypeCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OpticalPath success after verifying IlluminationTypeCodeSequence" + ("success" if partial_success else "failure")) 
				if "IlluminationTypeCodeSequence" in ds1:
					IlluminationTypeCodeSequence_data = ds1.IlluminationTypeCodeSequence
					if type(IlluminationTypeCodeSequence_data) == Sequence:
						for i2 in range(0, len(IlluminationTypeCodeSequence_data)):
							if verbose:
								log.append( " IlluminationTypeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IlluminationTypeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OpticalPath success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"OpticalPath", 
						"LightPathFilterTypeStackCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OpticalPath success after verifying LightPathFilterTypeStackCodeSequence" + ("success" if partial_success else "failure")) 
				if "LightPathFilterTypeStackCodeSequence" in ds1:
					LightPathFilterTypeStackCodeSequence_data = ds1.LightPathFilterTypeStackCodeSequence
					if type(LightPathFilterTypeStackCodeSequence_data) == Sequence:
						for i2 in range(0, len(LightPathFilterTypeStackCodeSequence_data)):
							if verbose:
								log.append( " LightPathFilterTypeStackCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = LightPathFilterTypeStackCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OpticalPath success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"OpticalPath", "LightPathFilterPassThroughWavelength", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OpticalPath success after verifying LightPathFilterPassThroughWavelength --> "+("success" if partial_success else "failure"))

				if "LightPathFilterPassThroughWavelength" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["LightPathFilterPassThroughWavelength"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"OpticalPath", "LightPathFilterPassBand", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OpticalPath success after verifying LightPathFilterPassBand --> "+("success" if partial_success else "failure"))

				if "LightPathFilterPassBand" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["LightPathFilterPassBand"], 
						verbose, log, -1, True)

				partial_success = verifyType3(ds1, 
						"OpticalPath", 
						"ImagePathFilterTypeStackCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OpticalPath success after verifying ImagePathFilterTypeStackCodeSequence" + ("success" if partial_success else "failure")) 
				if "ImagePathFilterTypeStackCodeSequence" in ds1:
					ImagePathFilterTypeStackCodeSequence_data = ds1.ImagePathFilterTypeStackCodeSequence
					if type(ImagePathFilterTypeStackCodeSequence_data) == Sequence:
						for i2 in range(0, len(ImagePathFilterTypeStackCodeSequence_data)):
							if verbose:
								log.append( " ImagePathFilterTypeStackCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ImagePathFilterTypeStackCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OpticalPath success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"OpticalPath", "ImagePathFilterPassThroughWavelength", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OpticalPath success after verifying ImagePathFilterPassThroughWavelength --> "+("success" if partial_success else "failure"))

				if "ImagePathFilterPassThroughWavelength" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ImagePathFilterPassThroughWavelength"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"OpticalPath", "ImagePathFilterPassBand", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OpticalPath success after verifying ImagePathFilterPassBand --> "+("success" if partial_success else "failure"))

				if "ImagePathFilterPassBand" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ImagePathFilterPassBand"], 
						verbose, log, -1, True)

				partial_success = verifyType3(ds1, 
						"OpticalPath", 
						"LensesCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OpticalPath success after verifying LensesCodeSequence" + ("success" if partial_success else "failure")) 
				if "LensesCodeSequence" in ds1:
					LensesCodeSequence_data = ds1.LensesCodeSequence
					if type(LensesCodeSequence_data) == Sequence:
						for i2 in range(0, len(LensesCodeSequence_data)):
							if verbose:
								log.append( " LensesCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = LensesCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OpticalPath success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"OpticalPath", "CondenserLensPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OpticalPath success after verifying CondenserLensPower --> "+("success" if partial_success else "failure"))

				if "CondenserLensPower" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["CondenserLensPower"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"OpticalPath", "ObjectiveLensPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OpticalPath success after verifying ObjectiveLensPower --> "+("success" if partial_success else "failure"))

				if "ObjectiveLensPower" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ObjectiveLensPower"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"OpticalPath", "ObjectiveLensNumericalAperture", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OpticalPath success after verifying ObjectiveLensNumericalAperture --> "+("success" if partial_success else "failure"))

				if "ObjectiveLensNumericalAperture" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ObjectiveLensNumericalAperture"], 
						verbose, log, -1, True)

				partial_success = verifyType1C(ds1, 
						"OpticalPath", 
						"ChannelDescriptionCodeSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 3)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OpticalPath success after verifying ChannelDescriptionCodeSequence" + ("success" if partial_success else "failure")) 
				if "ChannelDescriptionCodeSequence" in ds1:
					ChannelDescriptionCodeSequence_data = ds1.ChannelDescriptionCodeSequence
					if type(ChannelDescriptionCodeSequence_data) == Sequence:
						for i2 in range(0, len(ChannelDescriptionCodeSequence_data)):
							if verbose:
								log.append( " ChannelDescriptionCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ChannelDescriptionCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OpticalPath success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"OpticalPath", 
						"PaletteColorLookupTableSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OpticalPath success after verifying PaletteColorLookupTableSequence" + ("success" if partial_success else "failure")) 
				if "PaletteColorLookupTableSequence" in ds1:
					PaletteColorLookupTableSequence_data = ds1.PaletteColorLookupTableSequence
					if type(PaletteColorLookupTableSequence_data) == Sequence:
						for i2 in range(0, len(PaletteColorLookupTableSequence_data)):
							if verbose:
								log.append( " PaletteColorLookupTableSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PaletteColorLookupTableSequence_data[i2]
							partial_success =  Macro_PaletteColorLookupTableMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OpticalPath success after verifying PaletteColorLookupTableMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"OpticalPath", "ICCProfile", 
						verbose, log, ElementDictionary, 
						Condition_NeedICCProfileInOpticalPathSequence, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OpticalPath success after verifying ICCProfile --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"OpticalPath", "ColorSpace", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OpticalPath success after verifying ColorSpace --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PlanePositionSlideMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PlanePositionSlideMacro")

	partial_success = verifyType1(ds, 
			"PlanePositionSlideMacro", 
			"PlanePositionSlideSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PlanePositionSlideMacro success after verifying PlanePositionSlideSequence" + ("success" if partial_success else "failure")) 
	if "PlanePositionSlideSequence" in ds:
		PlanePositionSlideSequence_data = ds.PlanePositionSlideSequence
		if type(PlanePositionSlideSequence_data) == Sequence:
			for i1 in range(0, len(PlanePositionSlideSequence_data)):
				if verbose:
					log.append( " PlanePositionSlideSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PlanePositionSlideSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PlanePositionSlideMacro", "ColumnPositionInTotalImagePixelMatrix", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PlanePositionSlideMacro success after verifying ColumnPositionInTotalImagePixelMatrix --> "+("success" if partial_success else "failure"))

				if "ColumnPositionInTotalImagePixelMatrix" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ColumnPositionInTotalImagePixelMatrix"], 
						verbose, log, -1, False)

				partial_success =  		verifyType1(ds1, 
						"PlanePositionSlideMacro", "RowPositionInTotalImagePixelMatrix", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PlanePositionSlideMacro success after verifying RowPositionInTotalImagePixelMatrix --> "+("success" if partial_success else "failure"))

				if "RowPositionInTotalImagePixelMatrix" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["RowPositionInTotalImagePixelMatrix"], 
						verbose, log, -1, False)

				partial_success =  		verifyType1(ds1, 
						"PlanePositionSlideMacro", "XOffsetInSlideCoordinateSystem", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PlanePositionSlideMacro success after verifying XOffsetInSlideCoordinateSystem --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PlanePositionSlideMacro", "YOffsetInSlideCoordinateSystem", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PlanePositionSlideMacro success after verifying YOffsetInSlideCoordinateSystem --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PlanePositionSlideMacro", "ZOffsetInSlideCoordinateSystem", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PlanePositionSlideMacro success after verifying ZOffsetInSlideCoordinateSystem --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_OpticalPathIdentificationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"OpticalPathIdentificationMacro")

	partial_success = verifyType1(ds, 
			"OpticalPathIdentificationMacro", 
			"OpticalPathIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OpticalPathIdentificationMacro success after verifying OpticalPathIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "OpticalPathIdentificationSequence" in ds:
		OpticalPathIdentificationSequence_data = ds.OpticalPathIdentificationSequence
		if type(OpticalPathIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(OpticalPathIdentificationSequence_data)):
				if verbose:
					log.append( " OpticalPathIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OpticalPathIdentificationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"OpticalPathIdentificationMacro", "OpticalPathIdentifier", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OpticalPathIdentificationMacro success after verifying OpticalPathIdentifier --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_SpecimenReferenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SpecimenReferenceMacro")

	partial_success = verifyType2(ds, 
			"SpecimenReferenceMacro", 
			"SpecimenReferenceSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SpecimenReferenceMacro success after verifying SpecimenReferenceSequence" + ("success" if partial_success else "failure")) 
	if "SpecimenReferenceSequence" in ds:
		SpecimenReferenceSequence_data = ds.SpecimenReferenceSequence
		if type(SpecimenReferenceSequence_data) == Sequence:
			for i1 in range(0, len(SpecimenReferenceSequence_data)):
				if verbose:
					log.append( " SpecimenReferenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SpecimenReferenceSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SpecimenReferenceMacro", "SpecimenUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SpecimenReferenceMacro success after verifying SpecimenUID --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_WholeSlideMicroscopyImageFrameTypeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"WholeSlideMicroscopyImageFrameTypeMacro")

	partial_success = verifyType1(ds, 
			"WholeSlideMicroscopyImageFrameTypeMacro", 
			"WholeSlideMicroscopyImageFrameTypeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "WholeSlideMicroscopyImageFrameTypeMacro success after verifying WholeSlideMicroscopyImageFrameTypeSequence" + ("success" if partial_success else "failure")) 
	if "WholeSlideMicroscopyImageFrameTypeSequence" in ds:
		WholeSlideMicroscopyImageFrameTypeSequence_data = ds.WholeSlideMicroscopyImageFrameTypeSequence
		if type(WholeSlideMicroscopyImageFrameTypeSequence_data) == Sequence:
			for i1 in range(0, len(WholeSlideMicroscopyImageFrameTypeSequence_data)):
				if verbose:
					log.append( " WholeSlideMicroscopyImageFrameTypeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = WholeSlideMicroscopyImageFrameTypeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"WholeSlideMicroscopyImageFrameTypeMacro", "FrameType", 
						verbose, log, ElementDictionary, 
									4, 4)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WholeSlideMicroscopyImageFrameTypeMacro success after verifying FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_WholeSlideImageType1, 
						verbose, log, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WholeSlideMicroscopyImageFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageAndFrameType2, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WholeSlideMicroscopyImageFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_WholeSlideImageType3, 
						verbose, log, 2)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WholeSlideMicroscopyImageFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_WholeSlideImageType4, 
						verbose, log, 3)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WholeSlideMicroscopyImageFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiResolutionNavigation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiResolutionNavigation")

	partial_success = verifyType1(ds, 
			"MultiResolutionNavigation", 
			"ReferencedImageNavigationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiResolutionNavigation success after verifying ReferencedImageNavigationSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageNavigationSequence" in ds:
		ReferencedImageNavigationSequence_data = ds.ReferencedImageNavigationSequence
		if type(ReferencedImageNavigationSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageNavigationSequence_data)):
				if verbose:
					log.append( " ReferencedImageNavigationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageNavigationSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiResolutionNavigation success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"MultiResolutionNavigation", "ReferencedFrameNumber", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiResolutionNavigation success after verifying ReferencedFrameNumber --> "+("success" if partial_success else "failure"))

				if "ReferencedFrameNumber" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ReferencedFrameNumber"], 
						verbose, log, -1, False)

				partial_success =  		verifyType1(ds1, 
						"MultiResolutionNavigation", "TopLeftHandCornerOfLocalizerArea", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiResolutionNavigation success after verifying TopLeftHandCornerOfLocalizerArea --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MultiResolutionNavigation", "BottomRightHandCornerOfLocalizerArea", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiResolutionNavigation success after verifying BottomRightHandCornerOfLocalizerArea --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MultiResolutionNavigation", "PixelSpacing", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiResolutionNavigation success after verifying PixelSpacing --> "+("success" if partial_success else "failure"))

				if "PixelSpacing" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["PixelSpacing"], 
						verbose, log, -1, False)

				partial_success =  		verifyType1(ds1, 
						"MultiResolutionNavigation", "ZOffsetInSlideCoordinateSystem", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiResolutionNavigation success after verifying ZOffsetInSlideCoordinateSystem --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MultiResolutionNavigation", "SamplesPerPixel", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiResolutionNavigation success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MultiResolutionNavigation", "OpticalPathIdentifier", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultiResolutionNavigation success after verifying OpticalPathIdentifier --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SlideLabel_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SlideLabel")

	partial_success =  		verifyType2(ds, 
			"SlideLabel", "BarcodeValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SlideLabel success after verifying BarcodeValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"SlideLabel", "LabelText", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SlideLabel success after verifying LabelText --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiFrameFunctionalGroupsForWholeSlideMicroscopy_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForWholeSlideMicroscopy")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForWholeSlideMicroscopy", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInSharedFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPlanePositionSlideMacroInSharedFunctionalGroupSequenceForWholeSlideMicroscopy(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionSlideMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying PlanePositionSlideMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedOpticalPathIdentificationMacroInSharedFunctionalGroupSequenceForWholeSlideMicroscopy(ds1, parent_ds1, root_ds):
					partial_success =  Macro_OpticalPathIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying OpticalPathIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_SpecimenReferenceMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_SpecimenReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying SpecimenReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_WholeSlideMicroscopyImageFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying WholeSlideMicroscopyImageFrameTypeMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"MultiFrameFunctionalGroupsForWholeSlideMicroscopy", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			Condition_PerFrameFunctionalGroupsSequencePresent, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_FrameContentMacroPresent(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInPerFrameFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPlanePositionSlideMacroInPerFrameFunctionalGroupSequenceForWholeSlideMicroscopy(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionSlideMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying PlanePositionSlideMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedOpticalPathIdentificationMacroInPerFrameFunctionalGroupSequenceForWholeSlideMicroscopy(ds1, parent_ds1, root_ds):
					partial_success =  Macro_OpticalPathIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying OpticalPathIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_SpecimenReferenceMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_SpecimenReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForWholeSlideMicroscopy success after verifying SpecimenReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_LensometryMeasurementsSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"LensometryMeasurementsSeries")

	partial_success =  		verifyType1(ds, 
			"LensometryMeasurementsSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " LensometryMeasurementsSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_LensometryModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " LensometryMeasurementsSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"LensometryMeasurementsSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "LensometryMeasurementsSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " LensometryMeasurementsSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_AutorefractionMeasurementsSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"AutorefractionMeasurementsSeries")

	partial_success =  		verifyType1(ds, 
			"AutorefractionMeasurementsSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " AutorefractionMeasurementsSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_AutorefractionModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " AutorefractionMeasurementsSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"AutorefractionMeasurementsSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "AutorefractionMeasurementsSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " AutorefractionMeasurementsSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_KeratometryMeasurementsSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"KeratometryMeasurementsSeries")

	partial_success =  		verifyType1(ds, 
			"KeratometryMeasurementsSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeratometryMeasurementsSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_KeratometryModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeratometryMeasurementsSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"KeratometryMeasurementsSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeratometryMeasurementsSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " KeratometryMeasurementsSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_SubjectiveRefractionMeasurementsSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SubjectiveRefractionMeasurementsSeries")

	partial_success =  		verifyType1(ds, 
			"SubjectiveRefractionMeasurementsSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SubjectiveRefractionMeasurementsSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_SubjectiveRefractionModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SubjectiveRefractionMeasurementsSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"SubjectiveRefractionMeasurementsSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SubjectiveRefractionMeasurementsSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SubjectiveRefractionMeasurementsSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_VisualAcuityMeasurementsSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"VisualAcuityMeasurementsSeries")

	partial_success =  		verifyType1(ds, 
			"VisualAcuityMeasurementsSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualAcuityMeasurementsSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_VisualAcuityModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualAcuityMeasurementsSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"VisualAcuityMeasurementsSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualAcuityMeasurementsSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualAcuityMeasurementsSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_CylinderSequenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CylinderSequenceMacro")

	partial_success = verifyType1C(ds, 
			"CylinderSequenceMacro", 
			"CylinderSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CylinderSequenceMacro success after verifying CylinderSequence" + ("success" if partial_success else "failure")) 
	if "CylinderSequence" in ds:
		CylinderSequence_data = ds.CylinderSequence
		if type(CylinderSequence_data) == Sequence:
			for i1 in range(0, len(CylinderSequence_data)):
				if verbose:
					log.append( " CylinderSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CylinderSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"CylinderSequenceMacro", "CylinderPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CylinderSequenceMacro success after verifying CylinderPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"CylinderSequenceMacro", "CylinderAxis", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CylinderSequenceMacro success after verifying CylinderAxis --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PrismSequenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PrismSequenceMacro")

	partial_success = verifyType1C(ds, 
			"PrismSequenceMacro", 
			"PrismSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PrismSequenceMacro success after verifying PrismSequence" + ("success" if partial_success else "failure")) 
	if "PrismSequence" in ds:
		PrismSequence_data = ds.PrismSequence
		if type(PrismSequence_data) == Sequence:
			for i1 in range(0, len(PrismSequence_data)):
				if verbose:
					log.append( " PrismSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PrismSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PrismSequenceMacro", "HorizontalPrismPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PrismSequenceMacro success after verifying HorizontalPrismPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PrismSequenceMacro", "HorizontalPrismBase", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PrismSequenceMacro success after verifying HorizontalPrismBase --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PrismSequenceMacro", "VerticalPrismPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PrismSequenceMacro success after verifying VerticalPrismPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PrismSequenceMacro", "VerticalPrismBase", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PrismSequenceMacro success after verifying VerticalPrismBase --> "+("success" if partial_success else "failure"))

	return global_success

def Module_GeneralOphthalmicRefractiveMeasurements_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"GeneralOphthalmicRefractiveMeasurements")

	partial_success =  		verifyType1(ds, 
			"GeneralOphthalmicRefractiveMeasurements", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralOphthalmicRefractiveMeasurements success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"GeneralOphthalmicRefractiveMeasurements", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralOphthalmicRefractiveMeasurements success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"GeneralOphthalmicRefractiveMeasurements", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralOphthalmicRefractiveMeasurements success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralOphthalmicRefractiveMeasurements", "MeasurementLaterality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralOphthalmicRefractiveMeasurements success after verifying MeasurementLaterality --> "+("success" if partial_success else "failure"))

	if "MeasurementLaterality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["MeasurementLaterality"], 
			StringValueTable_OphthalmicRefractiveMeasurementLaterality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralOphthalmicRefractiveMeasurements success after verifying string enumerated values MeasurementLaterality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"GeneralOphthalmicRefractiveMeasurements", "ImageComments", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " GeneralOphthalmicRefractiveMeasurements success after verifying ImageComments --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2C(ds, 
			"GeneralOphthalmicRefractiveMeasurements", 
			"ReferencedRefractiveMeasurementsSequence", 
			verbose, log, ElementDictionary, 
			Condition_VisualAcuityTypeCodeSequencePresent, 
			False, 
			parent_ds, root_ds, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GeneralOphthalmicRefractiveMeasurements success after verifying ReferencedRefractiveMeasurementsSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedRefractiveMeasurementsSequence" in ds:
		ReferencedRefractiveMeasurementsSequence_data = ds.ReferencedRefractiveMeasurementsSequence
		if type(ReferencedRefractiveMeasurementsSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedRefractiveMeasurementsSequence_data)):
				if verbose:
					log.append( " ReferencedRefractiveMeasurementsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedRefractiveMeasurementsSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " GeneralOphthalmicRefractiveMeasurements success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_LensometryMeasurements_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"LensometryMeasurements")

	partial_success =  		verifyType2(ds, 
			"LensometryMeasurements", "LensDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " LensometryMeasurements success after verifying LensDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"LensometryMeasurements", 
			"RightLensSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "LensometryMeasurements success after verifying RightLensSequence" + ("success" if partial_success else "failure")) 
	if "RightLensSequence" in ds:
		RightLensSequence_data = ds.RightLensSequence
		if type(RightLensSequence_data) == Sequence:
			for i1 in range(0, len(RightLensSequence_data)):
				if verbose:
					log.append( " RightLensSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RightLensSequence_data[i1]
				partial_success =  Macro_LensometryMeasurementsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " LensometryMeasurements success after verifying LensometryMeasurementsMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"LensometryMeasurements", 
			"LeftLensSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "LensometryMeasurements success after verifying LeftLensSequence" + ("success" if partial_success else "failure")) 
	if "LeftLensSequence" in ds:
		LeftLensSequence_data = ds.LeftLensSequence
		if type(LeftLensSequence_data) == Sequence:
			for i1 in range(0, len(LeftLensSequence_data)):
				if verbose:
					log.append( " LeftLensSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = LeftLensSequence_data[i1]
				partial_success =  Macro_LensometryMeasurementsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " LensometryMeasurements success after verifying LensometryMeasurementsMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"LensometryMeasurements", 
			"UnspecifiedLateralityLensSequence", 
			verbose, log, ElementDictionary, 
			Condition_RightLensSequenceAndLeftLensSequenceAbsent, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "LensometryMeasurements success after verifying UnspecifiedLateralityLensSequence" + ("success" if partial_success else "failure")) 
	if "UnspecifiedLateralityLensSequence" in ds:
		UnspecifiedLateralityLensSequence_data = ds.UnspecifiedLateralityLensSequence
		if type(UnspecifiedLateralityLensSequence_data) == Sequence:
			for i1 in range(0, len(UnspecifiedLateralityLensSequence_data)):
				if verbose:
					log.append( " UnspecifiedLateralityLensSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = UnspecifiedLateralityLensSequence_data[i1]
				partial_success =  Macro_LensometryMeasurementsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " LensometryMeasurements success after verifying LensometryMeasurementsMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_LensometryMeasurementsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"LensometryMeasurementsMacro")

	partial_success =  		verifyType1(ds, 
			"LensometryMeasurementsMacro", "SpherePower", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " LensometryMeasurementsMacro success after verifying SpherePower --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_CylinderSequenceMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " LensometryMeasurementsMacro success after verifying CylinderSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"LensometryMeasurementsMacro", 
			"AddNearSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "LensometryMeasurementsMacro success after verifying AddNearSequence" + ("success" if partial_success else "failure")) 
	if "AddNearSequence" in ds:
		AddNearSequence_data = ds.AddNearSequence
		if type(AddNearSequence_data) == Sequence:
			for i1 in range(0, len(AddNearSequence_data)):
				if verbose:
					log.append( " AddNearSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AddNearSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"LensometryMeasurementsMacro", "AddPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " LensometryMeasurementsMacro success after verifying AddPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"LensometryMeasurementsMacro", "ViewingDistance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " LensometryMeasurementsMacro success after verifying ViewingDistance --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"LensometryMeasurementsMacro", 
			"AddIntermediateSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "LensometryMeasurementsMacro success after verifying AddIntermediateSequence" + ("success" if partial_success else "failure")) 
	if "AddIntermediateSequence" in ds:
		AddIntermediateSequence_data = ds.AddIntermediateSequence
		if type(AddIntermediateSequence_data) == Sequence:
			for i1 in range(0, len(AddIntermediateSequence_data)):
				if verbose:
					log.append( " AddIntermediateSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AddIntermediateSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"LensometryMeasurementsMacro", "AddPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " LensometryMeasurementsMacro success after verifying AddPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"LensometryMeasurementsMacro", "ViewingDistance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " LensometryMeasurementsMacro success after verifying ViewingDistance --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_PrismSequenceMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " LensometryMeasurementsMacro success after verifying PrismSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"LensometryMeasurementsMacro", "LensSegmentType", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " LensometryMeasurementsMacro success after verifying LensSegmentType --> "+("success" if partial_success else "failure"))

	if "LensSegmentType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LensSegmentType"], 
			StringValueTable_LensSegmentType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " LensometryMeasurementsMacro success after verifying string enumerated values LensSegmentType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"LensometryMeasurementsMacro", "OpticalTransmittance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " LensometryMeasurementsMacro success after verifying OpticalTransmittance --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"LensometryMeasurementsMacro", "ChannelWidth", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " LensometryMeasurementsMacro success after verifying ChannelWidth --> "+("success" if partial_success else "failure"))

	return global_success

def Module_AutorefractionMeasurements_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"AutorefractionMeasurements")

	partial_success = verifyType1C(ds, 
			"AutorefractionMeasurements", 
			"AutorefractionRightEyeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "AutorefractionMeasurements success after verifying AutorefractionRightEyeSequence" + ("success" if partial_success else "failure")) 
	if "AutorefractionRightEyeSequence" in ds:
		AutorefractionRightEyeSequence_data = ds.AutorefractionRightEyeSequence
		if type(AutorefractionRightEyeSequence_data) == Sequence:
			for i1 in range(0, len(AutorefractionRightEyeSequence_data)):
				if verbose:
					log.append( " AutorefractionRightEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AutorefractionRightEyeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"AutorefractionMeasurements", "SpherePower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AutorefractionMeasurements success after verifying SpherePower --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_CylinderSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " AutorefractionMeasurements success after verifying CylinderSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"AutorefractionMeasurements", "PupilSize", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AutorefractionMeasurements success after verifying PupilSize --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"AutorefractionMeasurements", "CornealSize", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AutorefractionMeasurements success after verifying CornealSize --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"AutorefractionMeasurements", 
			"AutorefractionLeftEyeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "AutorefractionMeasurements success after verifying AutorefractionLeftEyeSequence" + ("success" if partial_success else "failure")) 
	if "AutorefractionLeftEyeSequence" in ds:
		AutorefractionLeftEyeSequence_data = ds.AutorefractionLeftEyeSequence
		if type(AutorefractionLeftEyeSequence_data) == Sequence:
			for i1 in range(0, len(AutorefractionLeftEyeSequence_data)):
				if verbose:
					log.append( " AutorefractionLeftEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AutorefractionLeftEyeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"AutorefractionMeasurements", "SpherePower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AutorefractionMeasurements success after verifying SpherePower --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_CylinderSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " AutorefractionMeasurements success after verifying CylinderSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"AutorefractionMeasurements", "PupilSize", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AutorefractionMeasurements success after verifying PupilSize --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"AutorefractionMeasurements", "CornealSize", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " AutorefractionMeasurements success after verifying CornealSize --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"AutorefractionMeasurements", "DistancePupillaryDistance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " AutorefractionMeasurements success after verifying DistancePupillaryDistance --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"AutorefractionMeasurements", "NearPupillaryDistance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " AutorefractionMeasurements success after verifying NearPupillaryDistance --> "+("success" if partial_success else "failure"))

	return global_success

def Module_KeratometryMeasurements_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"KeratometryMeasurements")

	partial_success = verifyType1C(ds, 
			"KeratometryMeasurements", 
			"KeratometryRightEyeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeratometryMeasurements success after verifying KeratometryRightEyeSequence" + ("success" if partial_success else "failure")) 
	if "KeratometryRightEyeSequence" in ds:
		KeratometryRightEyeSequence_data = ds.KeratometryRightEyeSequence
		if type(KeratometryRightEyeSequence_data) == Sequence:
			for i1 in range(0, len(KeratometryRightEyeSequence_data)):
				if verbose:
					log.append( " KeratometryRightEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = KeratometryRightEyeSequence_data[i1]
				partial_success =  Macro_KeratometricMeasurementsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " KeratometryMeasurements success after verifying KeratometricMeasurementsMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"KeratometryMeasurements", 
			"KeratometryLeftEyeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeratometryMeasurements success after verifying KeratometryLeftEyeSequence" + ("success" if partial_success else "failure")) 
	if "KeratometryLeftEyeSequence" in ds:
		KeratometryLeftEyeSequence_data = ds.KeratometryLeftEyeSequence
		if type(KeratometryLeftEyeSequence_data) == Sequence:
			for i1 in range(0, len(KeratometryLeftEyeSequence_data)):
				if verbose:
					log.append( " KeratometryLeftEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = KeratometryLeftEyeSequence_data[i1]
				partial_success =  Macro_KeratometricMeasurementsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " KeratometryMeasurements success after verifying KeratometricMeasurementsMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_KeratometricMeasurementsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"KeratometricMeasurementsMacro")

	partial_success = verifyType1(ds, 
			"KeratometricMeasurementsMacro", 
			"SteepKeratometricAxisSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeratometricMeasurementsMacro success after verifying SteepKeratometricAxisSequence" + ("success" if partial_success else "failure")) 
	if "SteepKeratometricAxisSequence" in ds:
		SteepKeratometricAxisSequence_data = ds.SteepKeratometricAxisSequence
		if type(SteepKeratometricAxisSequence_data) == Sequence:
			for i1 in range(0, len(SteepKeratometricAxisSequence_data)):
				if verbose:
					log.append( " SteepKeratometricAxisSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SteepKeratometricAxisSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"KeratometricMeasurementsMacro", "RadiusOfCurvature", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeratometricMeasurementsMacro success after verifying RadiusOfCurvature --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"KeratometricMeasurementsMacro", "KeratometricPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeratometricMeasurementsMacro success after verifying KeratometricPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"KeratometricMeasurementsMacro", "KeratometricAxis", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeratometricMeasurementsMacro success after verifying KeratometricAxis --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"KeratometricMeasurementsMacro", 
			"FlatKeratometricAxisSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeratometricMeasurementsMacro success after verifying FlatKeratometricAxisSequence" + ("success" if partial_success else "failure")) 
	if "FlatKeratometricAxisSequence" in ds:
		FlatKeratometricAxisSequence_data = ds.FlatKeratometricAxisSequence
		if type(FlatKeratometricAxisSequence_data) == Sequence:
			for i1 in range(0, len(FlatKeratometricAxisSequence_data)):
				if verbose:
					log.append( " FlatKeratometricAxisSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FlatKeratometricAxisSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"KeratometricMeasurementsMacro", "RadiusOfCurvature", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeratometricMeasurementsMacro success after verifying RadiusOfCurvature --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"KeratometricMeasurementsMacro", "KeratometricPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeratometricMeasurementsMacro success after verifying KeratometricPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"KeratometricMeasurementsMacro", "KeratometricAxis", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeratometricMeasurementsMacro success after verifying KeratometricAxis --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SubjectiveRefractionMeasurements_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SubjectiveRefractionMeasurements")

	partial_success = verifyType1C(ds, 
			"SubjectiveRefractionMeasurements", 
			"SubjectiveRefractionRightEyeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SubjectiveRefractionMeasurements success after verifying SubjectiveRefractionRightEyeSequence" + ("success" if partial_success else "failure")) 
	if "SubjectiveRefractionRightEyeSequence" in ds:
		SubjectiveRefractionRightEyeSequence_data = ds.SubjectiveRefractionRightEyeSequence
		if type(SubjectiveRefractionRightEyeSequence_data) == Sequence:
			for i1 in range(0, len(SubjectiveRefractionRightEyeSequence_data)):
				if verbose:
					log.append( " SubjectiveRefractionRightEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SubjectiveRefractionRightEyeSequence_data[i1]
				partial_success =  Macro_SubjectiveRefractionMeasurementsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SubjectiveRefractionMeasurements success after verifying SubjectiveRefractionMeasurementsMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"SubjectiveRefractionMeasurements", 
			"SubjectiveRefractionLeftEyeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SubjectiveRefractionMeasurements success after verifying SubjectiveRefractionLeftEyeSequence" + ("success" if partial_success else "failure")) 
	if "SubjectiveRefractionLeftEyeSequence" in ds:
		SubjectiveRefractionLeftEyeSequence_data = ds.SubjectiveRefractionLeftEyeSequence
		if type(SubjectiveRefractionLeftEyeSequence_data) == Sequence:
			for i1 in range(0, len(SubjectiveRefractionLeftEyeSequence_data)):
				if verbose:
					log.append( " SubjectiveRefractionLeftEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SubjectiveRefractionLeftEyeSequence_data[i1]
				partial_success =  Macro_SubjectiveRefractionMeasurementsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SubjectiveRefractionMeasurements success after verifying SubjectiveRefractionMeasurementsMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"SubjectiveRefractionMeasurements", "DistancePupillaryDistance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SubjectiveRefractionMeasurements success after verifying DistancePupillaryDistance --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SubjectiveRefractionMeasurements", "NearPupillaryDistance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SubjectiveRefractionMeasurements success after verifying NearPupillaryDistance --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SubjectiveRefractionMeasurements", "IntermediatePupillaryDistance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SubjectiveRefractionMeasurements success after verifying IntermediatePupillaryDistance --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SubjectiveRefractionMeasurements", "OtherPupillaryDistance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SubjectiveRefractionMeasurements success after verifying OtherPupillaryDistance --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_SubjectiveRefractionMeasurementsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SubjectiveRefractionMeasurementsMacro")

	partial_success =  		verifyType1(ds, 
			"SubjectiveRefractionMeasurementsMacro", "SpherePower", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SubjectiveRefractionMeasurementsMacro success after verifying SpherePower --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_CylinderSequenceMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SubjectiveRefractionMeasurementsMacro success after verifying CylinderSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_PrismSequenceMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SubjectiveRefractionMeasurementsMacro success after verifying PrismSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"SubjectiveRefractionMeasurementsMacro", 
			"AddNearSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SubjectiveRefractionMeasurementsMacro success after verifying AddNearSequence" + ("success" if partial_success else "failure")) 
	if "AddNearSequence" in ds:
		AddNearSequence_data = ds.AddNearSequence
		if type(AddNearSequence_data) == Sequence:
			for i1 in range(0, len(AddNearSequence_data)):
				if verbose:
					log.append( " AddNearSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AddNearSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SubjectiveRefractionMeasurementsMacro", "AddPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SubjectiveRefractionMeasurementsMacro success after verifying AddPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SubjectiveRefractionMeasurementsMacro", "ViewingDistance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SubjectiveRefractionMeasurementsMacro success after verifying ViewingDistance --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"SubjectiveRefractionMeasurementsMacro", 
			"AddIntermediateSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SubjectiveRefractionMeasurementsMacro success after verifying AddIntermediateSequence" + ("success" if partial_success else "failure")) 
	if "AddIntermediateSequence" in ds:
		AddIntermediateSequence_data = ds.AddIntermediateSequence
		if type(AddIntermediateSequence_data) == Sequence:
			for i1 in range(0, len(AddIntermediateSequence_data)):
				if verbose:
					log.append( " AddIntermediateSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AddIntermediateSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SubjectiveRefractionMeasurementsMacro", "AddPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SubjectiveRefractionMeasurementsMacro success after verifying AddPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SubjectiveRefractionMeasurementsMacro", "ViewingDistance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SubjectiveRefractionMeasurementsMacro success after verifying ViewingDistance --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"SubjectiveRefractionMeasurementsMacro", 
			"AddOtherSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SubjectiveRefractionMeasurementsMacro success after verifying AddOtherSequence" + ("success" if partial_success else "failure")) 
	if "AddOtherSequence" in ds:
		AddOtherSequence_data = ds.AddOtherSequence
		if type(AddOtherSequence_data) == Sequence:
			for i1 in range(0, len(AddOtherSequence_data)):
				if verbose:
					log.append( " AddOtherSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AddOtherSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SubjectiveRefractionMeasurementsMacro", "AddPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SubjectiveRefractionMeasurementsMacro success after verifying AddPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SubjectiveRefractionMeasurementsMacro", "ViewingDistance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SubjectiveRefractionMeasurementsMacro success after verifying ViewingDistance --> "+("success" if partial_success else "failure"))

	return global_success

def Module_VisualAcuityMeasurements_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"VisualAcuityMeasurements")

	partial_success =  		verifyType1(ds, 
			"VisualAcuityMeasurements", "ViewingDistanceType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualAcuityMeasurements success after verifying ViewingDistanceType --> "+("success" if partial_success else "failure"))

	if "ViewingDistanceType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ViewingDistanceType"], 
			StringValueTable_ViewingDistanceType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualAcuityMeasurements success after verifying string enumerated values ViewingDistanceType --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"VisualAcuityMeasurements", 
			"VisualAcuityTypeCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying VisualAcuityTypeCodeSequence" + ("success" if partial_success else "failure")) 
	if "VisualAcuityTypeCodeSequence" in ds:
		VisualAcuityTypeCodeSequence_data = ds.VisualAcuityTypeCodeSequence
		if type(VisualAcuityTypeCodeSequence_data) == Sequence:
			for i1 in range(0, len(VisualAcuityTypeCodeSequence_data)):
				if verbose:
					log.append( " VisualAcuityTypeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VisualAcuityTypeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualAcuityMeasurements success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"VisualAcuityMeasurements", "BackgroundColor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualAcuityMeasurements success after verifying BackgroundColor --> "+("success" if partial_success else "failure"))

	if "BackgroundColor" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["BackgroundColor"], 
			StringValueTable_VisualAcuityMeasurementsBackgroundColor, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualAcuityMeasurements success after verifying string defined terms BackgroundColor --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualAcuityMeasurements", "Optotype", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualAcuityMeasurements success after verifying Optotype --> "+("success" if partial_success else "failure"))

	if "Optotype" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["Optotype"], 
			StringValueTable_Optotype, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualAcuityMeasurements success after verifying string defined terms Optotype --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VisualAcuityMeasurements", "OptotypeDetailedDefinition", 
			verbose, log, ElementDictionary, 
			Condition_OptotypeIsLettersNumbersOrPictures, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualAcuityMeasurements success after verifying OptotypeDetailedDefinition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualAcuityMeasurements", "OptotypePresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualAcuityMeasurements success after verifying OptotypePresentation --> "+("success" if partial_success else "failure"))

	if "OptotypePresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["OptotypePresentation"], 
			StringValueTable_OptotypePresentation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualAcuityMeasurements success after verifying string enumerated values OptotypePresentation --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"VisualAcuityMeasurements", 
			"VisualAcuityRightEyeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying VisualAcuityRightEyeSequence" + ("success" if partial_success else "failure")) 
	if "VisualAcuityRightEyeSequence" in ds:
		VisualAcuityRightEyeSequence_data = ds.VisualAcuityRightEyeSequence
		if type(VisualAcuityRightEyeSequence_data) == Sequence:
			for i1 in range(0, len(VisualAcuityRightEyeSequence_data)):
				if verbose:
					log.append( " VisualAcuityRightEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VisualAcuityRightEyeSequence_data[i1]
				partial_success =  Macro_VisualAcuityMeasurementsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualAcuityMeasurements success after verifying VisualAcuityMeasurementsMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"VisualAcuityMeasurements", 
			"VisualAcuityLeftEyeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying VisualAcuityLeftEyeSequence" + ("success" if partial_success else "failure")) 
	if "VisualAcuityLeftEyeSequence" in ds:
		VisualAcuityLeftEyeSequence_data = ds.VisualAcuityLeftEyeSequence
		if type(VisualAcuityLeftEyeSequence_data) == Sequence:
			for i1 in range(0, len(VisualAcuityLeftEyeSequence_data)):
				if verbose:
					log.append( " VisualAcuityLeftEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VisualAcuityLeftEyeSequence_data[i1]
				partial_success =  Macro_VisualAcuityMeasurementsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualAcuityMeasurements success after verifying VisualAcuityMeasurementsMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"VisualAcuityMeasurements", 
			"VisualAcuityBothEyesOpenSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualAcuityMeasurements success after verifying VisualAcuityBothEyesOpenSequence" + ("success" if partial_success else "failure")) 
	if "VisualAcuityBothEyesOpenSequence" in ds:
		VisualAcuityBothEyesOpenSequence_data = ds.VisualAcuityBothEyesOpenSequence
		if type(VisualAcuityBothEyesOpenSequence_data) == Sequence:
			for i1 in range(0, len(VisualAcuityBothEyesOpenSequence_data)):
				if verbose:
					log.append( " VisualAcuityBothEyesOpenSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VisualAcuityBothEyesOpenSequence_data[i1]
				partial_success =  Macro_VisualAcuityMeasurementsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualAcuityMeasurements success after verifying VisualAcuityMeasurementsMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_VisualAcuityMeasurementsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"VisualAcuityMeasurementsMacro")

	partial_success =  		verifyType1(ds, 
			"VisualAcuityMeasurementsMacro", "DecimalVisualAcuity", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualAcuityMeasurementsMacro success after verifying DecimalVisualAcuity --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"VisualAcuityMeasurementsMacro", "VisualAcuityModifiers", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualAcuityMeasurementsMacro success after verifying VisualAcuityModifiers --> "+("success" if partial_success else "failure"))

	return global_success

def Module_OphthalmicAxialMeasurementsSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OphthalmicAxialMeasurementsSeries")

	partial_success =  		verifyType1(ds, 
			"OphthalmicAxialMeasurementsSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialMeasurementsSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_OphthalmicAxialMeasurementsModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialMeasurementsSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"OphthalmicAxialMeasurementsSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialMeasurementsSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicAxialMeasurementsSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_OphthalmicAxialMeasurements_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OphthalmicAxialMeasurements")

	partial_success =  		verifyType1(ds, 
			"OphthalmicAxialMeasurements", "OphthalmicAxialMeasurementsDeviceType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialMeasurements success after verifying OphthalmicAxialMeasurementsDeviceType --> "+("success" if partial_success else "failure"))

	if "OphthalmicAxialMeasurementsDeviceType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["OphthalmicAxialMeasurementsDeviceType"], 
			StringValueTable_OphthalmicAxialMeasurementsDeviceType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialMeasurements success after verifying string defined terms OphthalmicAxialMeasurementsDeviceType --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"OphthalmicAxialMeasurements", 
			"OphthalmicUltrasoundMethodCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_OphthalmicAxialMeasurementsDeviceTypeIsUltrasound, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying OphthalmicUltrasoundMethodCodeSequence" + ("success" if partial_success else "failure")) 
	if "OphthalmicUltrasoundMethodCodeSequence" in ds:
		OphthalmicUltrasoundMethodCodeSequence_data = ds.OphthalmicUltrasoundMethodCodeSequence
		if type(OphthalmicUltrasoundMethodCodeSequence_data) == Sequence:
			for i1 in range(0, len(OphthalmicUltrasoundMethodCodeSequence_data)):
				if verbose:
					log.append( " OphthalmicUltrasoundMethodCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OphthalmicUltrasoundMethodCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicAxialMeasurements success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"OphthalmicAxialMeasurements", 
			"AnteriorChamberDepthDefinitionCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying AnteriorChamberDepthDefinitionCodeSequence" + ("success" if partial_success else "failure")) 
	if "AnteriorChamberDepthDefinitionCodeSequence" in ds:
		AnteriorChamberDepthDefinitionCodeSequence_data = ds.AnteriorChamberDepthDefinitionCodeSequence
		if type(AnteriorChamberDepthDefinitionCodeSequence_data) == Sequence:
			for i1 in range(0, len(AnteriorChamberDepthDefinitionCodeSequence_data)):
				if verbose:
					log.append( " AnteriorChamberDepthDefinitionCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AnteriorChamberDepthDefinitionCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicAxialMeasurements success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"OphthalmicAxialMeasurements", 
			"OphthalmicAxialMeasurementsRightEyeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying OphthalmicAxialMeasurementsRightEyeSequence" + ("success" if partial_success else "failure")) 
	if "OphthalmicAxialMeasurementsRightEyeSequence" in ds:
		OphthalmicAxialMeasurementsRightEyeSequence_data = ds.OphthalmicAxialMeasurementsRightEyeSequence
		if type(OphthalmicAxialMeasurementsRightEyeSequence_data) == Sequence:
			for i1 in range(0, len(OphthalmicAxialMeasurementsRightEyeSequence_data)):
				if verbose:
					log.append( " OphthalmicAxialMeasurementsRightEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OphthalmicAxialMeasurementsRightEyeSequence_data[i1]
				partial_success =  Macro_OphthalmicAxialMeasurementsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicAxialMeasurements success after verifying OphthalmicAxialMeasurementsMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_OphthalmicAxialMeasurementsSelectedMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicAxialMeasurements success after verifying OphthalmicAxialMeasurementsSelectedMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"OphthalmicAxialMeasurements", 
			"OphthalmicAxialMeasurementsLeftEyeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialMeasurements success after verifying OphthalmicAxialMeasurementsLeftEyeSequence" + ("success" if partial_success else "failure")) 
	if "OphthalmicAxialMeasurementsLeftEyeSequence" in ds:
		OphthalmicAxialMeasurementsLeftEyeSequence_data = ds.OphthalmicAxialMeasurementsLeftEyeSequence
		if type(OphthalmicAxialMeasurementsLeftEyeSequence_data) == Sequence:
			for i1 in range(0, len(OphthalmicAxialMeasurementsLeftEyeSequence_data)):
				if verbose:
					log.append( " OphthalmicAxialMeasurementsLeftEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OphthalmicAxialMeasurementsLeftEyeSequence_data[i1]
				partial_success =  Macro_OphthalmicAxialMeasurementsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicAxialMeasurements success after verifying OphthalmicAxialMeasurementsMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_OphthalmicAxialMeasurementsSelectedMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicAxialMeasurements success after verifying OphthalmicAxialMeasurementsSelectedMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_OphthalmicAxialMeasurementsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"OphthalmicAxialMeasurementsMacro")

	partial_success = verifyType1(ds, 
			"OphthalmicAxialMeasurementsMacro", 
			"LensStatusCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialMeasurementsMacro success after verifying LensStatusCodeSequence" + ("success" if partial_success else "failure")) 
	if "LensStatusCodeSequence" in ds:
		LensStatusCodeSequence_data = ds.LensStatusCodeSequence
		if type(LensStatusCodeSequence_data) == Sequence:
			for i1 in range(0, len(LensStatusCodeSequence_data)):
				if verbose:
					log.append( " LensStatusCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = LensStatusCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicAxialMeasurementsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"OphthalmicAxialMeasurementsMacro", "LensStatusDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialMeasurementsMacro success after verifying LensStatusDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"OphthalmicAxialMeasurementsMacro", 
			"VitreousStatusCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialMeasurementsMacro success after verifying VitreousStatusCodeSequence" + ("success" if partial_success else "failure")) 
	if "VitreousStatusCodeSequence" in ds:
		VitreousStatusCodeSequence_data = ds.VitreousStatusCodeSequence
		if type(VitreousStatusCodeSequence_data) == Sequence:
			for i1 in range(0, len(VitreousStatusCodeSequence_data)):
				if verbose:
					log.append( " VitreousStatusCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VitreousStatusCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicAxialMeasurementsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"OphthalmicAxialMeasurementsMacro", "VitreousStatusDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialMeasurementsMacro success after verifying VitreousStatusDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"OphthalmicAxialMeasurementsMacro", "PupilDilated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialMeasurementsMacro success after verifying PupilDilated --> "+("success" if partial_success else "failure"))

	if "PupilDilated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PupilDilated"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialMeasurementsMacro success after verifying string enumerated values PupilDilated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"OphthalmicAxialMeasurementsMacro", "DegreeOfDilation", 
			verbose, log, ElementDictionary, 
			Condition_PupilDilatedIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialMeasurementsMacro success after verifying DegreeOfDilation --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2C(ds, 
			"OphthalmicAxialMeasurementsMacro", 
			"MydriaticAgentSequence", 
			verbose, log, ElementDictionary, 
			Condition_PupilDilatedIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialMeasurementsMacro success after verifying MydriaticAgentSequence" + ("success" if partial_success else "failure")) 
	if "MydriaticAgentSequence" in ds:
		MydriaticAgentSequence_data = ds.MydriaticAgentSequence
		if type(MydriaticAgentSequence_data) == Sequence:
			for i1 in range(0, len(MydriaticAgentSequence_data)):
				if verbose:
					log.append( " MydriaticAgentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MydriaticAgentSequence_data[i1]
				partial_success = verifyType1(ds1, 
						"OphthalmicAxialMeasurementsMacro", 
						"MydriaticAgentCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAxialMeasurementsMacro success after verifying MydriaticAgentCodeSequence" + ("success" if partial_success else "failure")) 
				if "MydriaticAgentCodeSequence" in ds1:
					MydriaticAgentCodeSequence_data = ds1.MydriaticAgentCodeSequence
					if type(MydriaticAgentCodeSequence_data) == Sequence:
						for i2 in range(0, len(MydriaticAgentCodeSequence_data)):
							if verbose:
								log.append( " MydriaticAgentCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MydriaticAgentCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OphthalmicAxialMeasurementsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"OphthalmicAxialMeasurementsMacro", "MydriaticAgentConcentration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAxialMeasurementsMacro success after verifying MydriaticAgentConcentration --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"OphthalmicAxialMeasurementsMacro", 
						"MydriaticAgentConcentrationUnitsSequence", 
						verbose, log, ElementDictionary, 
						Condition_MydriaticAgentConcentrationPresent, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAxialMeasurementsMacro success after verifying MydriaticAgentConcentrationUnitsSequence" + ("success" if partial_success else "failure")) 
				if "MydriaticAgentConcentrationUnitsSequence" in ds1:
					MydriaticAgentConcentrationUnitsSequence_data = ds1.MydriaticAgentConcentrationUnitsSequence
					if type(MydriaticAgentConcentrationUnitsSequence_data) == Sequence:
						for i2 in range(0, len(MydriaticAgentConcentrationUnitsSequence_data)):
							if verbose:
								log.append( " MydriaticAgentConcentrationUnitsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MydriaticAgentConcentrationUnitsSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OphthalmicAxialMeasurementsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"OphthalmicAxialMeasurementsMacro", 
			"OphthalmicAxialLengthMeasurementsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialLengthMeasurementsSequence" + ("success" if partial_success else "failure")) 
	if "OphthalmicAxialLengthMeasurementsSequence" in ds:
		OphthalmicAxialLengthMeasurementsSequence_data = ds.OphthalmicAxialLengthMeasurementsSequence
		if type(OphthalmicAxialLengthMeasurementsSequence_data) == Sequence:
			for i1 in range(0, len(OphthalmicAxialLengthMeasurementsSequence_data)):
				if verbose:
					log.append( " OphthalmicAxialLengthMeasurementsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OphthalmicAxialLengthMeasurementsSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"OphthalmicAxialMeasurementsMacro", "OphthalmicAxialLengthMeasurementsType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialLengthMeasurementsType --> "+("success" if partial_success else "failure"))

				if "OphthalmicAxialLengthMeasurementsType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["OphthalmicAxialLengthMeasurementsType"], 
						StringValueTable_OphthalmicAxialLengthMeasurementsType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAxialMeasurementsMacro success after verifying string enumerated values OphthalmicAxialLengthMeasurementsType --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"OphthalmicAxialMeasurementsMacro", 
						"OphthalmicAxialLengthMeasurementsTotalLengthSequence", 
						verbose, log, ElementDictionary, 
						Condition_OphthalmicAxialLengthMeasurementsTypeIsTotalLength, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialLengthMeasurementsTotalLengthSequence" + ("success" if partial_success else "failure")) 
				if "OphthalmicAxialLengthMeasurementsTotalLengthSequence" in ds1:
					OphthalmicAxialLengthMeasurementsTotalLengthSequence_data = ds1.OphthalmicAxialLengthMeasurementsTotalLengthSequence
					if type(OphthalmicAxialLengthMeasurementsTotalLengthSequence_data) == Sequence:
						for i2 in range(0, len(OphthalmicAxialLengthMeasurementsTotalLengthSequence_data)):
							if verbose:
								log.append( " OphthalmicAxialLengthMeasurementsTotalLengthSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OphthalmicAxialLengthMeasurementsTotalLengthSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"OphthalmicAxialMeasurementsMacro", "OphthalmicAxialLength", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialLength --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"OphthalmicAxialMeasurementsMacro", "OphthalmicAxialLengthMeasurementModified", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialLengthMeasurementModified --> "+("success" if partial_success else "failure"))

							if "OphthalmicAxialLengthMeasurementModified" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["OphthalmicAxialLengthMeasurementModified"], 
									StringValueTable_YesNoFull, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " OphthalmicAxialMeasurementsMacro success after verifying string enumerated values OphthalmicAxialLengthMeasurementModified --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1(ds2, 
									"OphthalmicAxialMeasurementsMacro", 
									"ReferencedOphthalmicAxialLengthMeasurementQCImageSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "OphthalmicAxialMeasurementsMacro success after verifying ReferencedOphthalmicAxialLengthMeasurementQCImageSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedOphthalmicAxialLengthMeasurementQCImageSequence" in ds2:
								ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data = ds2.ReferencedOphthalmicAxialLengthMeasurementQCImageSequence
								if type(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data)):
										if verbose:
											log.append( " ReferencedOphthalmicAxialLengthMeasurementQCImageSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data[i3]
										partial_success =  Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  Macro_OphthalmicAxialMeasurementsRelatedInformationMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialMeasurementsRelatedInformationMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"OphthalmicAxialMeasurementsMacro", 
						"OphthalmicAxialLengthMeasurementsLengthSummationSequence", 
						verbose, log, ElementDictionary, 
						Condition_OphthalmicAxialLengthMeasurementsTypeIsLengthSummation, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialLengthMeasurementsLengthSummationSequence" + ("success" if partial_success else "failure")) 
				if "OphthalmicAxialLengthMeasurementsLengthSummationSequence" in ds1:
					OphthalmicAxialLengthMeasurementsLengthSummationSequence_data = ds1.OphthalmicAxialLengthMeasurementsLengthSummationSequence
					if type(OphthalmicAxialLengthMeasurementsLengthSummationSequence_data) == Sequence:
						for i2 in range(0, len(OphthalmicAxialLengthMeasurementsLengthSummationSequence_data)):
							if verbose:
								log.append( " OphthalmicAxialLengthMeasurementsLengthSummationSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OphthalmicAxialLengthMeasurementsLengthSummationSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"OphthalmicAxialMeasurementsMacro", "OphthalmicAxialLength", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialLength --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"OphthalmicAxialMeasurementsMacro", "OphthalmicAxialLengthMeasurementModified", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialLengthMeasurementModified --> "+("success" if partial_success else "failure"))

							if "OphthalmicAxialLengthMeasurementModified" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["OphthalmicAxialLengthMeasurementModified"], 
									StringValueTable_YesNoFull, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " OphthalmicAxialMeasurementsMacro success after verifying string enumerated values OphthalmicAxialLengthMeasurementModified --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1(ds2, 
									"OphthalmicAxialMeasurementsMacro", 
									"ReferencedOphthalmicAxialLengthMeasurementQCImageSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "OphthalmicAxialMeasurementsMacro success after verifying ReferencedOphthalmicAxialLengthMeasurementQCImageSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedOphthalmicAxialLengthMeasurementQCImageSequence" in ds2:
								ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data = ds2.ReferencedOphthalmicAxialLengthMeasurementQCImageSequence
								if type(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data)):
										if verbose:
											log.append( " ReferencedOphthalmicAxialLengthMeasurementQCImageSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data[i3]
										partial_success =  Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1(ds2, 
									"OphthalmicAxialMeasurementsMacro", 
									"OphthalmicAxialLengthMeasurementsSegmentalLengthSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialLengthMeasurementsSegmentalLengthSequence" + ("success" if partial_success else "failure")) 
							if "OphthalmicAxialLengthMeasurementsSegmentalLengthSequence" in ds2:
								OphthalmicAxialLengthMeasurementsSegmentalLengthSequence_data = ds2.OphthalmicAxialLengthMeasurementsSegmentalLengthSequence
								if type(OphthalmicAxialLengthMeasurementsSegmentalLengthSequence_data) == Sequence:
									for i3 in range(0, len(OphthalmicAxialLengthMeasurementsSegmentalLengthSequence_data)):
										if verbose:
											log.append( " OphthalmicAxialLengthMeasurementsSegmentalLengthSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = OphthalmicAxialLengthMeasurementsSegmentalLengthSequence_data[i3]
										partial_success =  Macro_OphthalmicAxialLengthSegmentalMeasurementsMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialLengthSegmentalMeasurementsMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"OphthalmicAxialMeasurementsMacro", 
						"OphthalmicAxialLengthMeasurementsSegmentalLengthSequence", 
						verbose, log, ElementDictionary, 
						Condition_OphthalmicAxialLengthMeasurementsTypeIsSegmentalLength, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialLengthMeasurementsSegmentalLengthSequence" + ("success" if partial_success else "failure")) 
				if "OphthalmicAxialLengthMeasurementsSegmentalLengthSequence" in ds1:
					OphthalmicAxialLengthMeasurementsSegmentalLengthSequence_data = ds1.OphthalmicAxialLengthMeasurementsSegmentalLengthSequence
					if type(OphthalmicAxialLengthMeasurementsSegmentalLengthSequence_data) == Sequence:
						for i2 in range(0, len(OphthalmicAxialLengthMeasurementsSegmentalLengthSequence_data)):
							if verbose:
								log.append( " OphthalmicAxialLengthMeasurementsSegmentalLengthSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OphthalmicAxialLengthMeasurementsSegmentalLengthSequence_data[i2]
							partial_success =  Macro_OphthalmicAxialLengthSegmentalMeasurementsMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OphthalmicAxialMeasurementsMacro success after verifying OphthalmicAxialLengthSegmentalMeasurementsMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_OphthalmicAxialLengthSegmentalMeasurementsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"OphthalmicAxialLengthSegmentalMeasurementsMacro")

	partial_success =  		verifyType1(ds, 
			"OphthalmicAxialLengthSegmentalMeasurementsMacro", "OphthalmicAxialLength", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialLengthSegmentalMeasurementsMacro success after verifying OphthalmicAxialLength --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicAxialLengthSegmentalMeasurementsMacro", "OphthalmicAxialLengthMeasurementModified", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialLengthSegmentalMeasurementsMacro success after verifying OphthalmicAxialLengthMeasurementModified --> "+("success" if partial_success else "failure"))

	if "OphthalmicAxialLengthMeasurementModified" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["OphthalmicAxialLengthMeasurementModified"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialLengthSegmentalMeasurementsMacro success after verifying string enumerated values OphthalmicAxialLengthMeasurementModified --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"OphthalmicAxialLengthSegmentalMeasurementsMacro", 
			"OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialLengthSegmentalMeasurementsMacro success after verifying OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence" + ("success" if partial_success else "failure")) 
	if "OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence" in ds:
		OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_data = ds.OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence
		if type(OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_data) == Sequence:
			for i1 in range(0, len(OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_data)):
				if verbose:
					log.append( " OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicAxialLengthSegmentalMeasurementsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_OphthalmicAxialMeasurementsRelatedInformationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " OphthalmicAxialLengthSegmentalMeasurementsMacro success after verifying OphthalmicAxialMeasurementsRelatedInformationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_OphthalmicAxialMeasurementsRelatedInformationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"OphthalmicAxialMeasurementsRelatedInformationMacro")

	partial_success = verifyType1C(ds, 
			"OphthalmicAxialMeasurementsRelatedInformationMacro", 
			"UltrasoundOphthalmicAxialLengthMeasurementsSequence", 
			verbose, log, ElementDictionary, 
			Condition_OphthalmicAxialMeasurementsDeviceTypeIsUltrasound, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialMeasurementsRelatedInformationMacro success after verifying UltrasoundOphthalmicAxialLengthMeasurementsSequence" + ("success" if partial_success else "failure")) 
	if "UltrasoundOphthalmicAxialLengthMeasurementsSequence" in ds:
		UltrasoundOphthalmicAxialLengthMeasurementsSequence_data = ds.UltrasoundOphthalmicAxialLengthMeasurementsSequence
		if type(UltrasoundOphthalmicAxialLengthMeasurementsSequence_data) == Sequence:
			for i1 in range(0, len(UltrasoundOphthalmicAxialLengthMeasurementsSequence_data)):
				if verbose:
					log.append( " UltrasoundOphthalmicAxialLengthMeasurementsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = UltrasoundOphthalmicAxialLengthMeasurementsSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"OphthalmicAxialMeasurementsRelatedInformationMacro", "OphthalmicAxialLengthVelocity", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAxialMeasurementsRelatedInformationMacro success after verifying OphthalmicAxialLengthVelocity --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"OphthalmicAxialMeasurementsRelatedInformationMacro", "ObserverType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAxialMeasurementsRelatedInformationMacro success after verifying ObserverType --> "+("success" if partial_success else "failure"))

				if "ObserverType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ObserverType"], 
						StringValueTable_OphthalmicAxialMeasurementsObserverType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAxialMeasurementsRelatedInformationMacro success after verifying string enumerated values ObserverType --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"OphthalmicAxialMeasurementsRelatedInformationMacro", 
						"OphthalmicAxialLengthDataSourceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAxialMeasurementsRelatedInformationMacro success after verifying OphthalmicAxialLengthDataSourceCodeSequence" + ("success" if partial_success else "failure")) 
				if "OphthalmicAxialLengthDataSourceCodeSequence" in ds1:
					OphthalmicAxialLengthDataSourceCodeSequence_data = ds1.OphthalmicAxialLengthDataSourceCodeSequence
					if type(OphthalmicAxialLengthDataSourceCodeSequence_data) == Sequence:
						for i2 in range(0, len(OphthalmicAxialLengthDataSourceCodeSequence_data)):
							if verbose:
								log.append( " OphthalmicAxialLengthDataSourceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OphthalmicAxialLengthDataSourceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OphthalmicAxialMeasurementsRelatedInformationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"OphthalmicAxialMeasurementsRelatedInformationMacro", "OphthalmicAxialLengthDataSourceDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAxialMeasurementsRelatedInformationMacro success after verifying OphthalmicAxialLengthDataSourceDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"OphthalmicAxialMeasurementsRelatedInformationMacro", 
			"OpticalOphthalmicAxialLengthMeasurementsSequence", 
			verbose, log, ElementDictionary, 
			Condition_OphthalmicAxialMeasurementsDeviceTypeIsOptical, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialMeasurementsRelatedInformationMacro success after verifying OpticalOphthalmicAxialLengthMeasurementsSequence" + ("success" if partial_success else "failure")) 
	if "OpticalOphthalmicAxialLengthMeasurementsSequence" in ds:
		OpticalOphthalmicAxialLengthMeasurementsSequence_data = ds.OpticalOphthalmicAxialLengthMeasurementsSequence
		if type(OpticalOphthalmicAxialLengthMeasurementsSequence_data) == Sequence:
			for i1 in range(0, len(OpticalOphthalmicAxialLengthMeasurementsSequence_data)):
				if verbose:
					log.append( " OpticalOphthalmicAxialLengthMeasurementsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OpticalOphthalmicAxialLengthMeasurementsSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"OphthalmicAxialMeasurementsRelatedInformationMacro", "SignalToNoiseRatio", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAxialMeasurementsRelatedInformationMacro success after verifying SignalToNoiseRatio --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"OphthalmicAxialMeasurementsRelatedInformationMacro", 
						"OphthalmicAxialLengthDataSourceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAxialMeasurementsRelatedInformationMacro success after verifying OphthalmicAxialLengthDataSourceCodeSequence" + ("success" if partial_success else "failure")) 
				if "OphthalmicAxialLengthDataSourceCodeSequence" in ds1:
					OphthalmicAxialLengthDataSourceCodeSequence_data = ds1.OphthalmicAxialLengthDataSourceCodeSequence
					if type(OphthalmicAxialLengthDataSourceCodeSequence_data) == Sequence:
						for i2 in range(0, len(OphthalmicAxialLengthDataSourceCodeSequence_data)):
							if verbose:
								log.append( " OphthalmicAxialLengthDataSourceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OphthalmicAxialLengthDataSourceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OphthalmicAxialMeasurementsRelatedInformationMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"OphthalmicAxialMeasurementsRelatedInformationMacro", "OphthalmicAxialLengthDataSourceDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAxialMeasurementsRelatedInformationMacro success after verifying OphthalmicAxialLengthDataSourceDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_OphthalmicAxialMeasurementsSelectedMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"OphthalmicAxialMeasurementsSelectedMacro")

	partial_success = verifyType1C(ds, 
			"OphthalmicAxialMeasurementsSelectedMacro", 
			"UltrasoundSelectedOphthalmicAxialLengthSequence", 
			verbose, log, ElementDictionary, 
			Condition_OphthalmicAxialMeasurementsDeviceTypeIsUltrasound, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying UltrasoundSelectedOphthalmicAxialLengthSequence" + ("success" if partial_success else "failure")) 
	if "UltrasoundSelectedOphthalmicAxialLengthSequence" in ds:
		UltrasoundSelectedOphthalmicAxialLengthSequence_data = ds.UltrasoundSelectedOphthalmicAxialLengthSequence
		if type(UltrasoundSelectedOphthalmicAxialLengthSequence_data) == Sequence:
			for i1 in range(0, len(UltrasoundSelectedOphthalmicAxialLengthSequence_data)):
				if verbose:
					log.append( " UltrasoundSelectedOphthalmicAxialLengthSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = UltrasoundSelectedOphthalmicAxialLengthSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"OphthalmicAxialMeasurementsSelectedMacro", "OphthalmicAxialLength", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialLength --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"OphthalmicAxialMeasurementsSelectedMacro", 
						"OphthalmicAxialLengthSelectionMethodCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialLengthSelectionMethodCodeSequence" + ("success" if partial_success else "failure")) 
				if "OphthalmicAxialLengthSelectionMethodCodeSequence" in ds1:
					OphthalmicAxialLengthSelectionMethodCodeSequence_data = ds1.OphthalmicAxialLengthSelectionMethodCodeSequence
					if type(OphthalmicAxialLengthSelectionMethodCodeSequence_data) == Sequence:
						for i2 in range(0, len(OphthalmicAxialLengthSelectionMethodCodeSequence_data)):
							if verbose:
								log.append( " OphthalmicAxialLengthSelectionMethodCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OphthalmicAxialLengthSelectionMethodCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OphthalmicAxialMeasurementsSelectedMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"OphthalmicAxialMeasurementsSelectedMacro", 
						"ReferencedOphthalmicAxialLengthMeasurementQCImageSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying ReferencedOphthalmicAxialLengthMeasurementQCImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedOphthalmicAxialLengthMeasurementQCImageSequence" in ds1:
					ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data = ds1.ReferencedOphthalmicAxialLengthMeasurementQCImageSequence
					if type(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data)):
							if verbose:
								log.append( " ReferencedOphthalmicAxialLengthMeasurementQCImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data[i2]
							partial_success =  Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"OphthalmicAxialMeasurementsSelectedMacro", 
						"OphthalmicAxialLengthQualityMetricSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialLengthQualityMetricSequence" + ("success" if partial_success else "failure")) 
				if "OphthalmicAxialLengthQualityMetricSequence" in ds1:
					OphthalmicAxialLengthQualityMetricSequence_data = ds1.OphthalmicAxialLengthQualityMetricSequence
					if type(OphthalmicAxialLengthQualityMetricSequence_data) == Sequence:
						for i2 in range(0, len(OphthalmicAxialLengthQualityMetricSequence_data)):
							if verbose:
								log.append( " OphthalmicAxialLengthQualityMetricSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OphthalmicAxialLengthQualityMetricSequence_data[i2]
							partial_success =  Macro_OphthalmicAxialLengthQualityMetricMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialLengthQualityMetricMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"OphthalmicAxialMeasurementsSelectedMacro", 
						"SelectedSegmentalOphthalmicAxialLengthSequence", 
						verbose, log, ElementDictionary, 
						Condition_OphthalmicAxialLengthMeasurementsTypeAboveIsLengthSummation, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying SelectedSegmentalOphthalmicAxialLengthSequence" + ("success" if partial_success else "failure")) 
				if "SelectedSegmentalOphthalmicAxialLengthSequence" in ds1:
					SelectedSegmentalOphthalmicAxialLengthSequence_data = ds1.SelectedSegmentalOphthalmicAxialLengthSequence
					if type(SelectedSegmentalOphthalmicAxialLengthSequence_data) == Sequence:
						for i2 in range(0, len(SelectedSegmentalOphthalmicAxialLengthSequence_data)):
							if verbose:
								log.append( " SelectedSegmentalOphthalmicAxialLengthSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SelectedSegmentalOphthalmicAxialLengthSequence_data[i2]
							partial_success = verifyType1(ds2, 
									"OphthalmicAxialMeasurementsSelectedMacro", 
									"OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence" + ("success" if partial_success else "failure")) 
							if "OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence" in ds2:
								OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_data = ds2.OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence
								if type(OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_data) == Sequence:
									for i3 in range(0, len(OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_data)):
										if verbose:
											log.append( " OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " OphthalmicAxialMeasurementsSelectedMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"OphthalmicAxialMeasurementsSelectedMacro", 
			"OpticalSelectedOphthalmicAxialLengthSequence", 
			verbose, log, ElementDictionary, 
			Condition_OphthalmicAxialMeasurementsDeviceTypeIsOptical, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying OpticalSelectedOphthalmicAxialLengthSequence" + ("success" if partial_success else "failure")) 
	if "OpticalSelectedOphthalmicAxialLengthSequence" in ds:
		OpticalSelectedOphthalmicAxialLengthSequence_data = ds.OpticalSelectedOphthalmicAxialLengthSequence
		if type(OpticalSelectedOphthalmicAxialLengthSequence_data) == Sequence:
			for i1 in range(0, len(OpticalSelectedOphthalmicAxialLengthSequence_data)):
				if verbose:
					log.append( " OpticalSelectedOphthalmicAxialLengthSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OpticalSelectedOphthalmicAxialLengthSequence_data[i1]
				partial_success = verifyType1C(ds1, 
						"OphthalmicAxialMeasurementsSelectedMacro", 
						"SelectedTotalOphthalmicAxialLengthSequence", 
						verbose, log, ElementDictionary, 
						Condition_OphthalmicAxialLengthMeasurementsTypeAboveIsTotalLength, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying SelectedTotalOphthalmicAxialLengthSequence" + ("success" if partial_success else "failure")) 
				if "SelectedTotalOphthalmicAxialLengthSequence" in ds1:
					SelectedTotalOphthalmicAxialLengthSequence_data = ds1.SelectedTotalOphthalmicAxialLengthSequence
					if type(SelectedTotalOphthalmicAxialLengthSequence_data) == Sequence:
						for i2 in range(0, len(SelectedTotalOphthalmicAxialLengthSequence_data)):
							if verbose:
								log.append( " SelectedTotalOphthalmicAxialLengthSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SelectedTotalOphthalmicAxialLengthSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"OphthalmicAxialMeasurementsSelectedMacro", "OphthalmicAxialLength", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialLength --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1(ds2, 
									"OphthalmicAxialMeasurementsSelectedMacro", 
									"ReferencedOphthalmicAxialLengthMeasurementQCImageSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying ReferencedOphthalmicAxialLengthMeasurementQCImageSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedOphthalmicAxialLengthMeasurementQCImageSequence" in ds2:
								ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data = ds2.ReferencedOphthalmicAxialLengthMeasurementQCImageSequence
								if type(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data)):
										if verbose:
											log.append( " ReferencedOphthalmicAxialLengthMeasurementQCImageSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data[i3]
										partial_success =  Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1(ds2, 
									"OphthalmicAxialMeasurementsSelectedMacro", 
									"OphthalmicAxialLengthQualityMetricSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialLengthQualityMetricSequence" + ("success" if partial_success else "failure")) 
							if "OphthalmicAxialLengthQualityMetricSequence" in ds2:
								OphthalmicAxialLengthQualityMetricSequence_data = ds2.OphthalmicAxialLengthQualityMetricSequence
								if type(OphthalmicAxialLengthQualityMetricSequence_data) == Sequence:
									for i3 in range(0, len(OphthalmicAxialLengthQualityMetricSequence_data)):
										if verbose:
											log.append( " OphthalmicAxialLengthQualityMetricSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = OphthalmicAxialLengthQualityMetricSequence_data[i3]
										partial_success =  Macro_OphthalmicAxialLengthQualityMetricMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialLengthQualityMetricMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"OphthalmicAxialMeasurementsSelectedMacro", 
						"SelectedSegmentalOphthalmicAxialLengthSequence", 
						verbose, log, ElementDictionary, 
						Condition_OphthalmicAxialLengthMeasurementsTypeAboveIsSegmentalLength, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying SelectedSegmentalOphthalmicAxialLengthSequence" + ("success" if partial_success else "failure")) 
				if "SelectedSegmentalOphthalmicAxialLengthSequence" in ds1:
					SelectedSegmentalOphthalmicAxialLengthSequence_data = ds1.SelectedSegmentalOphthalmicAxialLengthSequence
					if type(SelectedSegmentalOphthalmicAxialLengthSequence_data) == Sequence:
						for i2 in range(0, len(SelectedSegmentalOphthalmicAxialLengthSequence_data)):
							if verbose:
								log.append( " SelectedSegmentalOphthalmicAxialLengthSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SelectedSegmentalOphthalmicAxialLengthSequence_data[i2]
							partial_success = verifyType1(ds2, 
									"OphthalmicAxialMeasurementsSelectedMacro", 
									"OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence" + ("success" if partial_success else "failure")) 
							if "OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence" in ds2:
								OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_data = ds2.OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence
								if type(OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_data) == Sequence:
									for i3 in range(0, len(OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_data)):
										if verbose:
											log.append( " OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " OphthalmicAxialMeasurementsSelectedMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1(ds2, 
									"OphthalmicAxialMeasurementsSelectedMacro", "OphthalmicAxialLength", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialLength --> "+("success" if partial_success else "failure"))

							partial_success = verifyType3(ds2, 
									"OphthalmicAxialMeasurementsSelectedMacro", 
									"ReferencedOphthalmicAxialLengthMeasurementQCImageSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying ReferencedOphthalmicAxialLengthMeasurementQCImageSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedOphthalmicAxialLengthMeasurementQCImageSequence" in ds2:
								ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data = ds2.ReferencedOphthalmicAxialLengthMeasurementQCImageSequence
								if type(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data)):
										if verbose:
											log.append( " ReferencedOphthalmicAxialLengthMeasurementQCImageSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedOphthalmicAxialLengthMeasurementQCImageSequence_data[i3]
										partial_success =  Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType3(ds2, 
									"OphthalmicAxialMeasurementsSelectedMacro", 
									"OphthalmicAxialLengthQualityMetricSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialLengthQualityMetricSequence" + ("success" if partial_success else "failure")) 
							if "OphthalmicAxialLengthQualityMetricSequence" in ds2:
								OphthalmicAxialLengthQualityMetricSequence_data = ds2.OphthalmicAxialLengthQualityMetricSequence
								if type(OphthalmicAxialLengthQualityMetricSequence_data) == Sequence:
									for i3 in range(0, len(OphthalmicAxialLengthQualityMetricSequence_data)):
										if verbose:
											log.append( " OphthalmicAxialLengthQualityMetricSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = OphthalmicAxialLengthQualityMetricSequence_data[i3]
										partial_success =  Macro_OphthalmicAxialLengthQualityMetricMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " OphthalmicAxialMeasurementsSelectedMacro success after verifying OphthalmicAxialLengthQualityMetricMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_OphthalmicAxialLengthQualityMetricMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"OphthalmicAxialLengthQualityMetricMacro")

	partial_success = verifyType1(ds, 
			"OphthalmicAxialLengthQualityMetricMacro", 
			"ConceptNameCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialLengthQualityMetricMacro success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
	if "ConceptNameCodeSequence" in ds:
		ConceptNameCodeSequence_data = ds.ConceptNameCodeSequence
		if type(ConceptNameCodeSequence_data) == Sequence:
			for i1 in range(0, len(ConceptNameCodeSequence_data)):
				if verbose:
					log.append( " ConceptNameCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConceptNameCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicAxialLengthQualityMetricMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"OphthalmicAxialLengthQualityMetricMacro", "NumericValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialLengthQualityMetricMacro success after verifying NumericValue --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"OphthalmicAxialLengthQualityMetricMacro", 
			"MeasurementUnitsCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicAxialLengthQualityMetricMacro success after verifying MeasurementUnitsCodeSequence" + ("success" if partial_success else "failure")) 
	if "MeasurementUnitsCodeSequence" in ds:
		MeasurementUnitsCodeSequence_data = ds.MeasurementUnitsCodeSequence
		if type(MeasurementUnitsCodeSequence_data) == Sequence:
			for i1 in range(0, len(MeasurementUnitsCodeSequence_data)):
				if verbose:
					log.append( " MeasurementUnitsCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MeasurementUnitsCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicAxialLengthQualityMetricMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_IntraocularLensCalculationsSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IntraocularLensCalculationsSeries")

	partial_success =  		verifyType1(ds, 
			"IntraocularLensCalculationsSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntraocularLensCalculationsSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_IntraocularLensCalculationsModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntraocularLensCalculationsSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"IntraocularLensCalculationsSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntraocularLensCalculationsSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IntraocularLensCalculationsSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_IntraocularLensCalculations_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IntraocularLensCalculations")

	partial_success = verifyType1C(ds, 
			"IntraocularLensCalculations", 
			"IntraocularLensCalculationsRightEyeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntraocularLensCalculations success after verifying IntraocularLensCalculationsRightEyeSequence" + ("success" if partial_success else "failure")) 
	if "IntraocularLensCalculationsRightEyeSequence" in ds:
		IntraocularLensCalculationsRightEyeSequence_data = ds.IntraocularLensCalculationsRightEyeSequence
		if type(IntraocularLensCalculationsRightEyeSequence_data) == Sequence:
			for i1 in range(0, len(IntraocularLensCalculationsRightEyeSequence_data)):
				if verbose:
					log.append( " IntraocularLensCalculationsRightEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IntraocularLensCalculationsRightEyeSequence_data[i1]
				partial_success =  Macro_IntraocularLensCalculationsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IntraocularLensCalculations success after verifying IntraocularLensCalculationsMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"IntraocularLensCalculations", 
			"IntraocularLensCalculationsLeftEyeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntraocularLensCalculations success after verifying IntraocularLensCalculationsLeftEyeSequence" + ("success" if partial_success else "failure")) 
	if "IntraocularLensCalculationsLeftEyeSequence" in ds:
		IntraocularLensCalculationsLeftEyeSequence_data = ds.IntraocularLensCalculationsLeftEyeSequence
		if type(IntraocularLensCalculationsLeftEyeSequence_data) == Sequence:
			for i1 in range(0, len(IntraocularLensCalculationsLeftEyeSequence_data)):
				if verbose:
					log.append( " IntraocularLensCalculationsLeftEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IntraocularLensCalculationsLeftEyeSequence_data[i1]
				partial_success =  Macro_IntraocularLensCalculationsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IntraocularLensCalculations success after verifying IntraocularLensCalculationsMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_IntraocularLensCalculationsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"IntraocularLensCalculationsMacro")

	partial_success =  		verifyType1(ds, 
			"IntraocularLensCalculationsMacro", "TargetRefraction", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntraocularLensCalculationsMacro success after verifying TargetRefraction --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"IntraocularLensCalculationsMacro", "RefractiveProcedureOccurred", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntraocularLensCalculationsMacro success after verifying RefractiveProcedureOccurred --> "+("success" if partial_success else "failure"))

	if "RefractiveProcedureOccurred" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RefractiveProcedureOccurred"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntraocularLensCalculationsMacro success after verifying string enumerated values RefractiveProcedureOccurred --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2C(ds, 
			"IntraocularLensCalculationsMacro", 
			"RefractiveSurgeryTypeCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_RefractiveProcedureOccurredIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntraocularLensCalculationsMacro success after verifying RefractiveSurgeryTypeCodeSequence" + ("success" if partial_success else "failure")) 
	if "RefractiveSurgeryTypeCodeSequence" in ds:
		RefractiveSurgeryTypeCodeSequence_data = ds.RefractiveSurgeryTypeCodeSequence
		if type(RefractiveSurgeryTypeCodeSequence_data) == Sequence:
			for i1 in range(0, len(RefractiveSurgeryTypeCodeSequence_data)):
				if verbose:
					log.append( " RefractiveSurgeryTypeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RefractiveSurgeryTypeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IntraocularLensCalculationsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType2C(ds, 
			"IntraocularLensCalculationsMacro", 
			"RefractiveErrorBeforeRefractiveSurgeryCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_RefractiveProcedureOccurredIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntraocularLensCalculationsMacro success after verifying RefractiveErrorBeforeRefractiveSurgeryCodeSequence" + ("success" if partial_success else "failure")) 
	if "RefractiveErrorBeforeRefractiveSurgeryCodeSequence" in ds:
		RefractiveErrorBeforeRefractiveSurgeryCodeSequence_data = ds.RefractiveErrorBeforeRefractiveSurgeryCodeSequence
		if type(RefractiveErrorBeforeRefractiveSurgeryCodeSequence_data) == Sequence:
			for i1 in range(0, len(RefractiveErrorBeforeRefractiveSurgeryCodeSequence_data)):
				if verbose:
					log.append( " RefractiveErrorBeforeRefractiveSurgeryCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RefractiveErrorBeforeRefractiveSurgeryCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IntraocularLensCalculationsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"IntraocularLensCalculationsMacro", 
			"CornealSizeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntraocularLensCalculationsMacro success after verifying CornealSizeSequence" + ("success" if partial_success else "failure")) 
	if "CornealSizeSequence" in ds:
		CornealSizeSequence_data = ds.CornealSizeSequence
		if type(CornealSizeSequence_data) == Sequence:
			for i1 in range(0, len(CornealSizeSequence_data)):
				if verbose:
					log.append( " CornealSizeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CornealSizeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IntraocularLensCalculationsMacro", "CornealSize", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntraocularLensCalculationsMacro success after verifying CornealSize --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"IntraocularLensCalculationsMacro", 
						"SourceOfCornealSizeDataCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IntraocularLensCalculationsMacro success after verifying SourceOfCornealSizeDataCodeSequence" + ("success" if partial_success else "failure")) 
				if "SourceOfCornealSizeDataCodeSequence" in ds1:
					SourceOfCornealSizeDataCodeSequence_data = ds1.SourceOfCornealSizeDataCodeSequence
					if type(SourceOfCornealSizeDataCodeSequence_data) == Sequence:
						for i2 in range(0, len(SourceOfCornealSizeDataCodeSequence_data)):
							if verbose:
								log.append( " SourceOfCornealSizeDataCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SourceOfCornealSizeDataCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IntraocularLensCalculationsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"IntraocularLensCalculationsMacro", 
						"ReferencedSOPSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IntraocularLensCalculationsMacro success after verifying ReferencedSOPSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedSOPSequence" in ds1:
					ReferencedSOPSequence_data = ds1.ReferencedSOPSequence
					if type(ReferencedSOPSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedSOPSequence_data)):
							if verbose:
								log.append( " ReferencedSOPSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedSOPSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IntraocularLensCalculationsMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"IntraocularLensCalculationsMacro", 
			"LensThicknessSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntraocularLensCalculationsMacro success after verifying LensThicknessSequence" + ("success" if partial_success else "failure")) 
	if "LensThicknessSequence" in ds:
		LensThicknessSequence_data = ds.LensThicknessSequence
		if type(LensThicknessSequence_data) == Sequence:
			for i1 in range(0, len(LensThicknessSequence_data)):
				if verbose:
					log.append( " LensThicknessSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = LensThicknessSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IntraocularLensCalculationsMacro", "LensThickness", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntraocularLensCalculationsMacro success after verifying LensThickness --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"IntraocularLensCalculationsMacro", 
						"SourceOfLensThicknessDataCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IntraocularLensCalculationsMacro success after verifying SourceOfLensThicknessDataCodeSequence" + ("success" if partial_success else "failure")) 
				if "SourceOfLensThicknessDataCodeSequence" in ds1:
					SourceOfLensThicknessDataCodeSequence_data = ds1.SourceOfLensThicknessDataCodeSequence
					if type(SourceOfLensThicknessDataCodeSequence_data) == Sequence:
						for i2 in range(0, len(SourceOfLensThicknessDataCodeSequence_data)):
							if verbose:
								log.append( " SourceOfLensThicknessDataCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SourceOfLensThicknessDataCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IntraocularLensCalculationsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"IntraocularLensCalculationsMacro", 
						"ReferencedSOPSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IntraocularLensCalculationsMacro success after verifying ReferencedSOPSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedSOPSequence" in ds1:
					ReferencedSOPSequence_data = ds1.ReferencedSOPSequence
					if type(ReferencedSOPSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedSOPSequence_data)):
							if verbose:
								log.append( " ReferencedSOPSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedSOPSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IntraocularLensCalculationsMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"IntraocularLensCalculationsMacro", 
			"AnteriorChamberDepthSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntraocularLensCalculationsMacro success after verifying AnteriorChamberDepthSequence" + ("success" if partial_success else "failure")) 
	if "AnteriorChamberDepthSequence" in ds:
		AnteriorChamberDepthSequence_data = ds.AnteriorChamberDepthSequence
		if type(AnteriorChamberDepthSequence_data) == Sequence:
			for i1 in range(0, len(AnteriorChamberDepthSequence_data)):
				if verbose:
					log.append( " AnteriorChamberDepthSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AnteriorChamberDepthSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IntraocularLensCalculationsMacro", "AnteriorChamberDepth", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntraocularLensCalculationsMacro success after verifying AnteriorChamberDepth --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"IntraocularLensCalculationsMacro", 
						"SourceOfAnteriorChamberDepthDataCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IntraocularLensCalculationsMacro success after verifying SourceOfAnteriorChamberDepthDataCodeSequence" + ("success" if partial_success else "failure")) 
				if "SourceOfAnteriorChamberDepthDataCodeSequence" in ds1:
					SourceOfAnteriorChamberDepthDataCodeSequence_data = ds1.SourceOfAnteriorChamberDepthDataCodeSequence
					if type(SourceOfAnteriorChamberDepthDataCodeSequence_data) == Sequence:
						for i2 in range(0, len(SourceOfAnteriorChamberDepthDataCodeSequence_data)):
							if verbose:
								log.append( " SourceOfAnteriorChamberDepthDataCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SourceOfAnteriorChamberDepthDataCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IntraocularLensCalculationsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"IntraocularLensCalculationsMacro", 
						"ReferencedSOPSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IntraocularLensCalculationsMacro success after verifying ReferencedSOPSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedSOPSequence" in ds1:
					ReferencedSOPSequence_data = ds1.ReferencedSOPSequence
					if type(ReferencedSOPSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedSOPSequence_data)):
							if verbose:
								log.append( " ReferencedSOPSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedSOPSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IntraocularLensCalculationsMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType2(ds, 
			"IntraocularLensCalculationsMacro", 
			"RefractiveStateSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntraocularLensCalculationsMacro success after verifying RefractiveStateSequence" + ("success" if partial_success else "failure")) 
	if "RefractiveStateSequence" in ds:
		RefractiveStateSequence_data = ds.RefractiveStateSequence
		if type(RefractiveStateSequence_data) == Sequence:
			for i1 in range(0, len(RefractiveStateSequence_data)):
				if verbose:
					log.append( " RefractiveStateSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RefractiveStateSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IntraocularLensCalculationsMacro", "SphericalLensPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntraocularLensCalculationsMacro success after verifying SphericalLensPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"IntraocularLensCalculationsMacro", "CylinderLensPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntraocularLensCalculationsMacro success after verifying CylinderLensPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"IntraocularLensCalculationsMacro", "CylinderAxis", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IntraocularLensCalculationsMacro success after verifying CylinderAxis --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"IntraocularLensCalculationsMacro", 
						"SourceOfRefractiveMeasurementsSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IntraocularLensCalculationsMacro success after verifying SourceOfRefractiveMeasurementsSequence" + ("success" if partial_success else "failure")) 
				if "SourceOfRefractiveMeasurementsSequence" in ds1:
					SourceOfRefractiveMeasurementsSequence_data = ds1.SourceOfRefractiveMeasurementsSequence
					if type(SourceOfRefractiveMeasurementsSequence_data) == Sequence:
						for i2 in range(0, len(SourceOfRefractiveMeasurementsSequence_data)):
							if verbose:
								log.append( " SourceOfRefractiveMeasurementsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SourceOfRefractiveMeasurementsSequence_data[i2]
							partial_success = verifyType1(ds2, 
									"IntraocularLensCalculationsMacro", 
									"SourceOfRefractiveMeasurementsCodeSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "IntraocularLensCalculationsMacro success after verifying SourceOfRefractiveMeasurementsCodeSequence" + ("success" if partial_success else "failure")) 
							if "SourceOfRefractiveMeasurementsCodeSequence" in ds2:
								SourceOfRefractiveMeasurementsCodeSequence_data = ds2.SourceOfRefractiveMeasurementsCodeSequence
								if type(SourceOfRefractiveMeasurementsCodeSequence_data) == Sequence:
									for i3 in range(0, len(SourceOfRefractiveMeasurementsCodeSequence_data)):
										if verbose:
											log.append( " SourceOfRefractiveMeasurementsCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = SourceOfRefractiveMeasurementsCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " IntraocularLensCalculationsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1C(ds2, 
									"IntraocularLensCalculationsMacro", 
									"ReferencedSOPSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "IntraocularLensCalculationsMacro success after verifying ReferencedSOPSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedSOPSequence" in ds2:
								ReferencedSOPSequence_data = ds2.ReferencedSOPSequence
								if type(ReferencedSOPSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedSOPSequence_data)):
										if verbose:
											log.append( " ReferencedSOPSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedSOPSequence_data[i3]
										partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " IntraocularLensCalculationsMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_KeratometryMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " IntraocularLensCalculationsMacro success after verifying KeratometryMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"IntraocularLensCalculationsMacro", 
			"IOLFormulaCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IntraocularLensCalculationsMacro success after verifying IOLFormulaCodeSequence" + ("success" if partial_success else "failure")) 
	if "IOLFormulaCodeSequence" in ds:
		IOLFormulaCodeSequence_data = ds.IOLFormulaCodeSequence
		if type(IOLFormulaCodeSequence_data) == Sequence:
			for i1 in range(0, len(IOLFormulaCodeSequence_data)):
				if verbose:
					log.append( " IOLFormulaCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IOLFormulaCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IntraocularLensCalculationsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"IntraocularLensCalculationsMacro", "IOLFormulaDetail", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IntraocularLensCalculationsMacro success after verifying IOLFormulaDetail --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_IOLOphthalmicAxialLengthMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " IntraocularLensCalculationsMacro success after verifying IOLOphthalmicAxialLengthMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_CalculatedIOLMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " IntraocularLensCalculationsMacro success after verifying CalculatedIOLMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_KeratometryMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"KeratometryMacro")

	partial_success = verifyType1(ds, 
			"KeratometryMacro", 
			"SteepKeratometricAxisSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeratometryMacro success after verifying SteepKeratometricAxisSequence" + ("success" if partial_success else "failure")) 
	if "SteepKeratometricAxisSequence" in ds:
		SteepKeratometricAxisSequence_data = ds.SteepKeratometricAxisSequence
		if type(SteepKeratometricAxisSequence_data) == Sequence:
			for i1 in range(0, len(SteepKeratometricAxisSequence_data)):
				if verbose:
					log.append( " SteepKeratometricAxisSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SteepKeratometricAxisSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"KeratometryMacro", "RadiusOfCurvature", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeratometryMacro success after verifying RadiusOfCurvature --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"KeratometryMacro", "KeratometricPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeratometryMacro success after verifying KeratometricPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"KeratometryMacro", "KeratometricAxis", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeratometryMacro success after verifying KeratometricAxis --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"KeratometryMacro", 
			"FlatKeratometricAxisSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeratometryMacro success after verifying FlatKeratometricAxisSequence" + ("success" if partial_success else "failure")) 
	if "FlatKeratometricAxisSequence" in ds:
		FlatKeratometricAxisSequence_data = ds.FlatKeratometricAxisSequence
		if type(FlatKeratometricAxisSequence_data) == Sequence:
			for i1 in range(0, len(FlatKeratometricAxisSequence_data)):
				if verbose:
					log.append( " FlatKeratometricAxisSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FlatKeratometricAxisSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"KeratometryMacro", "RadiusOfCurvature", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeratometryMacro success after verifying RadiusOfCurvature --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"KeratometryMacro", "KeratometricPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeratometryMacro success after verifying KeratometricPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"KeratometryMacro", "KeratometricAxis", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeratometryMacro success after verifying KeratometricAxis --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"KeratometryMacro", 
			"KeratometryMeasurementTypeCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeratometryMacro success after verifying KeratometryMeasurementTypeCodeSequence" + ("success" if partial_success else "failure")) 
	if "KeratometryMeasurementTypeCodeSequence" in ds:
		KeratometryMeasurementTypeCodeSequence_data = ds.KeratometryMeasurementTypeCodeSequence
		if type(KeratometryMeasurementTypeCodeSequence_data) == Sequence:
			for i1 in range(0, len(KeratometryMeasurementTypeCodeSequence_data)):
				if verbose:
					log.append( " KeratometryMeasurementTypeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = KeratometryMeasurementTypeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " KeratometryMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType2(ds, 
			"KeratometryMacro", "KeratometerIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeratometryMacro success after verifying KeratometerIndex --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_IOLOphthalmicAxialLengthMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"IOLOphthalmicAxialLengthMacro")

	partial_success = verifyType1(ds, 
			"IOLOphthalmicAxialLengthMacro", 
			"OphthalmicAxialLengthSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IOLOphthalmicAxialLengthMacro success after verifying OphthalmicAxialLengthSequence" + ("success" if partial_success else "failure")) 
	if "OphthalmicAxialLengthSequence" in ds:
		OphthalmicAxialLengthSequence_data = ds.OphthalmicAxialLengthSequence
		if type(OphthalmicAxialLengthSequence_data) == Sequence:
			for i1 in range(0, len(OphthalmicAxialLengthSequence_data)):
				if verbose:
					log.append( " OphthalmicAxialLengthSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OphthalmicAxialLengthSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IOLOphthalmicAxialLengthMacro", "OphthalmicAxialLength", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IOLOphthalmicAxialLengthMacro success after verifying OphthalmicAxialLength --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"IOLOphthalmicAxialLengthMacro", 
						"OphthalmicAxialLengthSelectionMethodCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IOLOphthalmicAxialLengthMacro success after verifying OphthalmicAxialLengthSelectionMethodCodeSequence" + ("success" if partial_success else "failure")) 
				if "OphthalmicAxialLengthSelectionMethodCodeSequence" in ds1:
					OphthalmicAxialLengthSelectionMethodCodeSequence_data = ds1.OphthalmicAxialLengthSelectionMethodCodeSequence
					if type(OphthalmicAxialLengthSelectionMethodCodeSequence_data) == Sequence:
						for i2 in range(0, len(OphthalmicAxialLengthSelectionMethodCodeSequence_data)):
							if verbose:
								log.append( " OphthalmicAxialLengthSelectionMethodCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OphthalmicAxialLengthSelectionMethodCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IOLOphthalmicAxialLengthMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"IOLOphthalmicAxialLengthMacro", 
						"SourceOfOphthalmicAxialLengthCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IOLOphthalmicAxialLengthMacro success after verifying SourceOfOphthalmicAxialLengthCodeSequence" + ("success" if partial_success else "failure")) 
				if "SourceOfOphthalmicAxialLengthCodeSequence" in ds1:
					SourceOfOphthalmicAxialLengthCodeSequence_data = ds1.SourceOfOphthalmicAxialLengthCodeSequence
					if type(SourceOfOphthalmicAxialLengthCodeSequence_data) == Sequence:
						for i2 in range(0, len(SourceOfOphthalmicAxialLengthCodeSequence_data)):
							if verbose:
								log.append( " SourceOfOphthalmicAxialLengthCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SourceOfOphthalmicAxialLengthCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IOLOphthalmicAxialLengthMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"IOLOphthalmicAxialLengthMacro", 
						"ReferencedSOPSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IOLOphthalmicAxialLengthMacro success after verifying ReferencedSOPSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedSOPSequence" in ds1:
					ReferencedSOPSequence_data = ds1.ReferencedSOPSequence
					if type(ReferencedSOPSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedSOPSequence_data)):
							if verbose:
								log.append( " ReferencedSOPSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedSOPSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IOLOphthalmicAxialLengthMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"IOLOphthalmicAxialLengthMacro", 
						"OphthalmicUltrasoundMethodCodeSequence", 
						verbose, log, ElementDictionary, 
						Condition_OphthalmicAxialMeasurementsDeviceTypeIsUltrasound, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IOLOphthalmicAxialLengthMacro success after verifying OphthalmicUltrasoundMethodCodeSequence" + ("success" if partial_success else "failure")) 
				if "OphthalmicUltrasoundMethodCodeSequence" in ds1:
					OphthalmicUltrasoundMethodCodeSequence_data = ds1.OphthalmicUltrasoundMethodCodeSequence
					if type(OphthalmicUltrasoundMethodCodeSequence_data) == Sequence:
						for i2 in range(0, len(OphthalmicUltrasoundMethodCodeSequence_data)):
							if verbose:
								log.append( " OphthalmicUltrasoundMethodCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OphthalmicUltrasoundMethodCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IOLOphthalmicAxialLengthMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_CalculatedIOLMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CalculatedIOLMacro")

	partial_success =  		verifyType1(ds, 
			"CalculatedIOLMacro", "IOLManufacturer", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CalculatedIOLMacro success after verifying IOLManufacturer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CalculatedIOLMacro", "ImplantName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CalculatedIOLMacro success after verifying ImplantName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"CalculatedIOLMacro", 
			"LensConstantSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CalculatedIOLMacro success after verifying LensConstantSequence" + ("success" if partial_success else "failure")) 
	if "LensConstantSequence" in ds:
		LensConstantSequence_data = ds.LensConstantSequence
		if type(LensConstantSequence_data) == Sequence:
			for i1 in range(0, len(LensConstantSequence_data)):
				if verbose:
					log.append( " LensConstantSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = LensConstantSequence_data[i1]
				partial_success = verifyType1(ds1, 
						"CalculatedIOLMacro", 
						"ConceptNameCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "CalculatedIOLMacro success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
				if "ConceptNameCodeSequence" in ds1:
					ConceptNameCodeSequence_data = ds1.ConceptNameCodeSequence
					if type(ConceptNameCodeSequence_data) == Sequence:
						for i2 in range(0, len(ConceptNameCodeSequence_data)):
							if verbose:
								log.append( " ConceptNameCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ConceptNameCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " CalculatedIOLMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"CalculatedIOLMacro", "NumericValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CalculatedIOLMacro success after verifying NumericValue --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"CalculatedIOLMacro", 
			"IOLPowerSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CalculatedIOLMacro success after verifying IOLPowerSequence" + ("success" if partial_success else "failure")) 
	if "IOLPowerSequence" in ds:
		IOLPowerSequence_data = ds.IOLPowerSequence
		if type(IOLPowerSequence_data) == Sequence:
			for i1 in range(0, len(IOLPowerSequence_data)):
				if verbose:
					log.append( " IOLPowerSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IOLPowerSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"CalculatedIOLMacro", "IOLPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CalculatedIOLMacro success after verifying IOLPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"CalculatedIOLMacro", "PredictedRefractiveError", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CalculatedIOLMacro success after verifying PredictedRefractiveError --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"CalculatedIOLMacro", "ImplantPartNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CalculatedIOLMacro success after verifying ImplantPartNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"CalculatedIOLMacro", "IOLPowerForExactEmmetropia", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CalculatedIOLMacro success after verifying IOLPowerForExactEmmetropia --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"CalculatedIOLMacro", "IOLPowerForExactTargetRefraction", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CalculatedIOLMacro success after verifying IOLPowerForExactTargetRefraction --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro")

	partial_success =  		verifyType1(ds, 
			"OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro", "ReferencedSOPClassUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro success after verifying ReferencedSOPClassUID --> "+("success" if partial_success else "failure"))

	if "ReferencedSOPClassUID" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ReferencedSOPClassUID"], 
			StringValueTable_OphthalmicAxialMeasurementsQualityImageSOPClassUIDs, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro success after verifying string enumerated values ReferencedSOPClassUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro", "ReferencedSOPInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro success after verifying ReferencedSOPInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro", "ReferencedFrameNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicAxialMeasurementsQualityImageSOPInstanceReferenceMacro success after verifying ReferencedFrameNumber --> "+("success" if partial_success else "failure"))

	return global_success

def Module_VisualFieldStaticPerimetryMeasurementsSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"VisualFieldStaticPerimetryMeasurementsSeries")

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryMeasurementsSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryMeasurementsSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_OphthalmicVisualFieldModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryMeasurementsSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"VisualFieldStaticPerimetryMeasurementsSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryMeasurementsSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualFieldStaticPerimetryMeasurementsSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"VisualFieldStaticPerimetryMeasurementsSeries", 
			"RequestAttributesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryMeasurementsSeries success after verifying RequestAttributesSequence" + ("success" if partial_success else "failure")) 
	if "RequestAttributesSequence" in ds:
		RequestAttributesSequence_data = ds.RequestAttributesSequence
		if type(RequestAttributesSequence_data) == Sequence:
			for i1 in range(0, len(RequestAttributesSequence_data)):
				if verbose:
					log.append( " RequestAttributesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RequestAttributesSequence_data[i1]
				partial_success =  Macro_RequestAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualFieldStaticPerimetryMeasurementsSeries success after verifying RequestAttributesMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_PerformedProcedureStepSummaryMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " VisualFieldStaticPerimetryMeasurementsSeries success after verifying PerformedProcedureStepSummaryMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_VisualFieldStaticPerimetryTestParameters_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"VisualFieldStaticPerimetryTestParameters")

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestParameters", "VisualFieldHorizontalExtent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestParameters success after verifying VisualFieldHorizontalExtent --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestParameters", "VisualFieldVerticalExtent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestParameters success after verifying VisualFieldVerticalExtent --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestParameters", "VisualFieldShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestParameters success after verifying VisualFieldShape --> "+("success" if partial_success else "failure"))

	if "VisualFieldShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VisualFieldShape"], 
			StringValueTable_VisualFieldShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestParameters success after verifying string enumerated values VisualFieldShape --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestParameters", 
			"ScreeningTestModeCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			True, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryTestParameters success after verifying ScreeningTestModeCodeSequence" + ("success" if partial_success else "failure")) 
	if "ScreeningTestModeCodeSequence" in ds:
		ScreeningTestModeCodeSequence_data = ds.ScreeningTestModeCodeSequence
		if type(ScreeningTestModeCodeSequence_data) == Sequence:
			for i1 in range(0, len(ScreeningTestModeCodeSequence_data)):
				if verbose:
					log.append( " ScreeningTestModeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ScreeningTestModeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualFieldStaticPerimetryTestParameters success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestParameters", "MaximumStimulusLuminance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestParameters success after verifying MaximumStimulusLuminance --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestParameters", "BackgroundLuminance", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestParameters success after verifying BackgroundLuminance --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"VisualFieldStaticPerimetryTestParameters", 
			"StimulusColorCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryTestParameters success after verifying StimulusColorCodeSequence" + ("success" if partial_success else "failure")) 
	if "StimulusColorCodeSequence" in ds:
		StimulusColorCodeSequence_data = ds.StimulusColorCodeSequence
		if type(StimulusColorCodeSequence_data) == Sequence:
			for i1 in range(0, len(StimulusColorCodeSequence_data)):
				if verbose:
					log.append( " StimulusColorCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = StimulusColorCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualFieldStaticPerimetryTestParameters success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"VisualFieldStaticPerimetryTestParameters", 
			"BackgroundIlluminationColorCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryTestParameters success after verifying BackgroundIlluminationColorCodeSequence" + ("success" if partial_success else "failure")) 
	if "BackgroundIlluminationColorCodeSequence" in ds:
		BackgroundIlluminationColorCodeSequence_data = ds.BackgroundIlluminationColorCodeSequence
		if type(BackgroundIlluminationColorCodeSequence_data) == Sequence:
			for i1 in range(0, len(BackgroundIlluminationColorCodeSequence_data)):
				if verbose:
					log.append( " BackgroundIlluminationColorCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = BackgroundIlluminationColorCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualFieldStaticPerimetryTestParameters success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestParameters", "StimulusArea", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestParameters success after verifying StimulusArea --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestParameters", "StimulusPresentationTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestParameters success after verifying StimulusPresentationTime --> "+("success" if partial_success else "failure"))

	return global_success

def Module_VisualFieldStaticPerimetryTestReliability_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"VisualFieldStaticPerimetryTestReliability")

	partial_success = verifyType1(ds, 
			"VisualFieldStaticPerimetryTestReliability", 
			"FixationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryTestReliability success after verifying FixationSequence" + ("success" if partial_success else "failure")) 
	if "FixationSequence" in ds:
		FixationSequence_data = ds.FixationSequence
		if type(FixationSequence_data) == Sequence:
			for i1 in range(0, len(FixationSequence_data)):
				if verbose:
					log.append( " FixationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FixationSequence_data[i1]
				partial_success = verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestReliability", 
						"FixationMonitoringCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "VisualFieldStaticPerimetryTestReliability success after verifying FixationMonitoringCodeSequence" + ("success" if partial_success else "failure")) 
				if "FixationMonitoringCodeSequence" in ds1:
					FixationMonitoringCodeSequence_data = ds1.FixationMonitoringCodeSequence
					if type(FixationMonitoringCodeSequence_data) == Sequence:
						for i2 in range(0, len(FixationMonitoringCodeSequence_data)):
							if verbose:
								log.append( " FixationMonitoringCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = FixationMonitoringCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " VisualFieldStaticPerimetryTestReliability success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "FixationCheckedQuantity", 
						verbose, log, ElementDictionary, 
						0, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying FixationCheckedQuantity --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "PatientNotProperlyFixatedQuantity", 
						verbose, log, ElementDictionary, 
						0, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying PatientNotProperlyFixatedQuantity --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "ExcessiveFixationLossesDataFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying ExcessiveFixationLossesDataFlag --> "+("success" if partial_success else "failure"))

				if "ExcessiveFixationLossesDataFlag" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ExcessiveFixationLossesDataFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying string enumerated values ExcessiveFixationLossesDataFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "ExcessiveFixationLosses", 
						verbose, log, ElementDictionary, 
						Condition_ExcessiveFixationLossesDataFlagIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying ExcessiveFixationLosses --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"VisualFieldStaticPerimetryTestReliability", 
			"VisualFieldCatchTrialSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryTestReliability success after verifying VisualFieldCatchTrialSequence" + ("success" if partial_success else "failure")) 
	if "VisualFieldCatchTrialSequence" in ds:
		VisualFieldCatchTrialSequence_data = ds.VisualFieldCatchTrialSequence
		if type(VisualFieldCatchTrialSequence_data) == Sequence:
			for i1 in range(0, len(VisualFieldCatchTrialSequence_data)):
				if verbose:
					log.append( " VisualFieldCatchTrialSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VisualFieldCatchTrialSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "CatchTrialsDataFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying CatchTrialsDataFlag --> "+("success" if partial_success else "failure"))

				if "CatchTrialsDataFlag" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CatchTrialsDataFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying string enumerated values CatchTrialsDataFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "NegativeCatchTrialsQuantity", 
						verbose, log, ElementDictionary, 
						Condition_CatchTrialsDataFlagIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying NegativeCatchTrialsQuantity --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "FalseNegativesQuantity", 
						verbose, log, ElementDictionary, 
						Condition_CatchTrialsDataFlagIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying FalseNegativesQuantity --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "FalseNegativesEstimateFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying FalseNegativesEstimateFlag --> "+("success" if partial_success else "failure"))

				if "FalseNegativesEstimateFlag" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FalseNegativesEstimateFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying string enumerated values FalseNegativesEstimateFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "FalseNegativesEstimate", 
						verbose, log, ElementDictionary, 
						Condition_FalseNegativesEstimateFlagIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying FalseNegativesEstimate --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "ExcessiveFalseNegativesDataFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying ExcessiveFalseNegativesDataFlag --> "+("success" if partial_success else "failure"))

				if "ExcessiveFalseNegativesDataFlag" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ExcessiveFalseNegativesDataFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying string enumerated values ExcessiveFalseNegativesDataFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "ExcessiveFalseNegatives", 
						verbose, log, ElementDictionary, 
						Condition_ExcessiveFalseNegativesDataFlagIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying ExcessiveFalseNegatives --> "+("success" if partial_success else "failure"))

				if Condition_ExcessiveFalseNegativesDataFlagIsYes(ds1, parent_ds1, root_ds):
					if "ExcessiveFalseNegatives" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["ExcessiveFalseNegatives"], 
							StringValueTable_YesNoFull, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying string enumerated values ExcessiveFalseNegatives --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "PositiveCatchTrialsQuantity", 
						verbose, log, ElementDictionary, 
						Condition_CatchTrialsDataFlagIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying PositiveCatchTrialsQuantity --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "FalsePositivesQuantity", 
						verbose, log, ElementDictionary, 
						Condition_CatchTrialsDataFlagIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying FalsePositivesQuantity --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "FalsePositivesEstimateFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying FalsePositivesEstimateFlag --> "+("success" if partial_success else "failure"))

				if "FalsePositivesEstimateFlag" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FalsePositivesEstimateFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying string enumerated values FalsePositivesEstimateFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "FalsePositivesEstimate", 
						verbose, log, ElementDictionary, 
						Condition_FalsePositivesEstimateFlagIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying FalsePositivesEstimate --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "ExcessiveFalsePositivesDataFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying ExcessiveFalsePositivesDataFlag --> "+("success" if partial_success else "failure"))

				if "ExcessiveFalsePositivesDataFlag" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ExcessiveFalsePositivesDataFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying string enumerated values ExcessiveFalsePositivesDataFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestReliability", "ExcessiveFalsePositives", 
						verbose, log, ElementDictionary, 
						Condition_ExcessiveFalsePositivesDataFlagIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying ExcessiveFalsePositives --> "+("success" if partial_success else "failure"))

				if Condition_ExcessiveFalsePositivesDataFlagIsYes(ds1, parent_ds1, root_ds):
					if "ExcessiveFalsePositives" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["ExcessiveFalsePositives"], 
							StringValueTable_YesNoFull, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying string enumerated values ExcessiveFalsePositives --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"VisualFieldStaticPerimetryTestReliability", "StimuliRetestingQuantity", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestReliability success after verifying StimuliRetestingQuantity --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"VisualFieldStaticPerimetryTestReliability", "PatientReliabilityIndicator", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestReliability success after verifying PatientReliabilityIndicator --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"VisualFieldStaticPerimetryTestReliability", "CommentsOnPatientPerformanceOfVisualField", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestReliability success after verifying CommentsOnPatientPerformanceOfVisualField --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"VisualFieldStaticPerimetryTestReliability", 
			"VisualFieldTestReliabilityGlobalIndexSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryTestReliability success after verifying VisualFieldTestReliabilityGlobalIndexSequence" + ("success" if partial_success else "failure")) 
	if "VisualFieldTestReliabilityGlobalIndexSequence" in ds:
		VisualFieldTestReliabilityGlobalIndexSequence_data = ds.VisualFieldTestReliabilityGlobalIndexSequence
		if type(VisualFieldTestReliabilityGlobalIndexSequence_data) == Sequence:
			for i1 in range(0, len(VisualFieldTestReliabilityGlobalIndexSequence_data)):
				if verbose:
					log.append( " VisualFieldTestReliabilityGlobalIndexSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VisualFieldTestReliabilityGlobalIndexSequence_data[i1]
				partial_success =  Macro_OphthalmicVisualFieldGlobalIndexMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualFieldStaticPerimetryTestReliability success after verifying OphthalmicVisualFieldGlobalIndexMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_OphthalmicVisualFieldGlobalIndexMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"OphthalmicVisualFieldGlobalIndexMacro")

	partial_success = verifyType1(ds, 
			"OphthalmicVisualFieldGlobalIndexMacro", 
			"DataObservationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicVisualFieldGlobalIndexMacro success after verifying DataObservationSequence" + ("success" if partial_success else "failure")) 
	if "DataObservationSequence" in ds:
		DataObservationSequence_data = ds.DataObservationSequence
		if type(DataObservationSequence_data) == Sequence:
			for i1 in range(0, len(DataObservationSequence_data)):
				if verbose:
					log.append( " DataObservationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DataObservationSequence_data[i1]
				partial_success =  Macro_ContentItemMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicVisualFieldGlobalIndexMacro success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"OphthalmicVisualFieldGlobalIndexMacro", "IndexNormalsFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicVisualFieldGlobalIndexMacro success after verifying IndexNormalsFlag --> "+("success" if partial_success else "failure"))

	if "IndexNormalsFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["IndexNormalsFlag"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicVisualFieldGlobalIndexMacro success after verifying string enumerated values IndexNormalsFlag --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"OphthalmicVisualFieldGlobalIndexMacro", 
			"IndexProbabilitySequence", 
			verbose, log, ElementDictionary, 
			Condition_IndexNormalsFlagIsYes, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicVisualFieldGlobalIndexMacro success after verifying IndexProbabilitySequence" + ("success" if partial_success else "failure")) 
	if "IndexProbabilitySequence" in ds:
		IndexProbabilitySequence_data = ds.IndexProbabilitySequence
		if type(IndexProbabilitySequence_data) == Sequence:
			for i1 in range(0, len(IndexProbabilitySequence_data)):
				if verbose:
					log.append( " IndexProbabilitySequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IndexProbabilitySequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"OphthalmicVisualFieldGlobalIndexMacro", "IndexProbability", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicVisualFieldGlobalIndexMacro success after verifying IndexProbability --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_AlgorithmIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicVisualFieldGlobalIndexMacro success after verifying AlgorithmIdentificationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_VisualFieldStaticPerimetryTestMeasurements_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"VisualFieldStaticPerimetryTestMeasurements")

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "MeasurementLaterality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying MeasurementLaterality --> "+("success" if partial_success else "failure"))

	if "MeasurementLaterality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["MeasurementLaterality"], 
			StringValueTable_VisualFieldStaticPerimetryTestMeasurementLaterality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying string enumerated values MeasurementLaterality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "PresentedVisualStimuliDataFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying PresentedVisualStimuliDataFlag --> "+("success" if partial_success else "failure"))

	if "PresentedVisualStimuliDataFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentedVisualStimuliDataFlag"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying string enumerated values PresentedVisualStimuliDataFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "NumberOfVisualStimuli", 
			verbose, log, ElementDictionary, 
			Condition_PresentedVisualStimuliDataFlagIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying NumberOfVisualStimuli --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "VisualFieldTestDuration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying VisualFieldTestDuration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "FovealSensitivityMeasured", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying FovealSensitivityMeasured --> "+("success" if partial_success else "failure"))

	if "FovealSensitivityMeasured" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["FovealSensitivityMeasured"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying string enumerated values FovealSensitivityMeasured --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "FovealSensitivity", 
			verbose, log, ElementDictionary, 
			Condition_FovealSensitivityMeasuredIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying FovealSensitivity --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "FovealPointNormativeDataFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying FovealPointNormativeDataFlag --> "+("success" if partial_success else "failure"))

	if "FovealPointNormativeDataFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["FovealPointNormativeDataFlag"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying string enumerated values FovealPointNormativeDataFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "FovealPointProbabilityValue", 
			verbose, log, ElementDictionary, 
			Condition_FovealPointNormativeDataFlagIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying FovealPointProbabilityValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "ScreeningBaselineMeasured", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying ScreeningBaselineMeasured --> "+("success" if partial_success else "failure"))

	if "ScreeningBaselineMeasured" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ScreeningBaselineMeasured"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying string enumerated values ScreeningBaselineMeasured --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", 
			"ScreeningBaselineMeasuredSequence", 
			verbose, log, ElementDictionary, 
			Condition_ScreeningBaselineMeasuredIsYes, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryTestMeasurements success after verifying ScreeningBaselineMeasuredSequence" + ("success" if partial_success else "failure")) 
	if "ScreeningBaselineMeasuredSequence" in ds:
		ScreeningBaselineMeasuredSequence_data = ds.ScreeningBaselineMeasuredSequence
		if type(ScreeningBaselineMeasuredSequence_data) == Sequence:
			for i1 in range(0, len(ScreeningBaselineMeasuredSequence_data)):
				if verbose:
					log.append( " ScreeningBaselineMeasuredSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ScreeningBaselineMeasuredSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestMeasurements", "ScreeningBaselineType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying ScreeningBaselineType --> "+("success" if partial_success else "failure"))

				if "ScreeningBaselineType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ScreeningBaselineType"], 
						StringValueTable_VisualFieldStaticPerimetryTestMeasurementsScreeningBaselineType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying string enumerated values ScreeningBaselineType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestMeasurements", "ScreeningBaselineValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying ScreeningBaselineValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "BlindSpotLocalized", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying BlindSpotLocalized --> "+("success" if partial_success else "failure"))

	if "BlindSpotLocalized" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BlindSpotLocalized"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying string enumerated values BlindSpotLocalized --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "BlindSpotXCoordinate", 
			verbose, log, ElementDictionary, 
			Condition_BlindSpotLocalizedIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying BlindSpotXCoordinate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "BlindSpotYCoordinate", 
			verbose, log, ElementDictionary, 
			Condition_BlindSpotLocalizedIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying BlindSpotYCoordinate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "MinimumSensitivityValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying MinimumSensitivityValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", "TestPointNormalsDataFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying TestPointNormalsDataFlag --> "+("success" if partial_success else "failure"))

	if "TestPointNormalsDataFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["TestPointNormalsDataFlag"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying string enumerated values TestPointNormalsDataFlag --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", 
			"TestPointNormalsSequence", 
			verbose, log, ElementDictionary, 
			Condition_TestPointNormalsDataFlagIsYes, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryTestMeasurements success after verifying TestPointNormalsSequence" + ("success" if partial_success else "failure")) 
	if "TestPointNormalsSequence" in ds:
		TestPointNormalsSequence_data = ds.TestPointNormalsSequence
		if type(TestPointNormalsSequence_data) == Sequence:
			for i1 in range(0, len(TestPointNormalsSequence_data)):
				if verbose:
					log.append( " TestPointNormalsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TestPointNormalsSequence_data[i1]
				partial_success =  Macro_DataSetIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying DataSetIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", 
			"AgeCorrectedSensitivityDeviationAlgorithmSequence", 
			verbose, log, ElementDictionary, 
			Condition_TestPointNormalsDataFlagIsYes, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryTestMeasurements success after verifying AgeCorrectedSensitivityDeviationAlgorithmSequence" + ("success" if partial_success else "failure")) 
	if "AgeCorrectedSensitivityDeviationAlgorithmSequence" in ds:
		AgeCorrectedSensitivityDeviationAlgorithmSequence_data = ds.AgeCorrectedSensitivityDeviationAlgorithmSequence
		if type(AgeCorrectedSensitivityDeviationAlgorithmSequence_data) == Sequence:
			for i1 in range(0, len(AgeCorrectedSensitivityDeviationAlgorithmSequence_data)):
				if verbose:
					log.append( " AgeCorrectedSensitivityDeviationAlgorithmSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AgeCorrectedSensitivityDeviationAlgorithmSequence_data[i1]
				partial_success =  Macro_AlgorithmIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying AlgorithmIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", 
			"GeneralizedDefectSensitivityDeviationAlgorithmSequence", 
			verbose, log, ElementDictionary, 
			Condition_TestPointNormalsDataFlagIsYes, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryTestMeasurements success after verifying GeneralizedDefectSensitivityDeviationAlgorithmSequence" + ("success" if partial_success else "failure")) 
	if "GeneralizedDefectSensitivityDeviationAlgorithmSequence" in ds:
		GeneralizedDefectSensitivityDeviationAlgorithmSequence_data = ds.GeneralizedDefectSensitivityDeviationAlgorithmSequence
		if type(GeneralizedDefectSensitivityDeviationAlgorithmSequence_data) == Sequence:
			for i1 in range(0, len(GeneralizedDefectSensitivityDeviationAlgorithmSequence_data)):
				if verbose:
					log.append( " GeneralizedDefectSensitivityDeviationAlgorithmSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = GeneralizedDefectSensitivityDeviationAlgorithmSequence_data[i1]
				partial_success =  Macro_AlgorithmIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying AlgorithmIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"VisualFieldStaticPerimetryTestMeasurements", 
			"VisualFieldTestPointSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryTestMeasurements success after verifying VisualFieldTestPointSequence" + ("success" if partial_success else "failure")) 
	if "VisualFieldTestPointSequence" in ds:
		VisualFieldTestPointSequence_data = ds.VisualFieldTestPointSequence
		if type(VisualFieldTestPointSequence_data) == Sequence:
			for i1 in range(0, len(VisualFieldTestPointSequence_data)):
				if verbose:
					log.append( " VisualFieldTestPointSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VisualFieldTestPointSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestMeasurements", "VisualFieldTestPointXCoordinate", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying VisualFieldTestPointXCoordinate --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestMeasurements", "VisualFieldTestPointYCoordinate", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying VisualFieldTestPointYCoordinate --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestMeasurements", "StimulusResults", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying StimulusResults --> "+("success" if partial_success else "failure"))

				if "StimulusResults" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["StimulusResults"], 
						StringValueTable_VisualFieldStaticPerimetryTestMeasurementsStimulusResults, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying string enumerated values StimulusResults --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestMeasurements", "SensitivityValue", 
						verbose, log, ElementDictionary, 
						0, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying SensitivityValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"VisualFieldStaticPerimetryTestMeasurements", "RetestStimulusSeen", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying RetestStimulusSeen --> "+("success" if partial_success else "failure"))

				if "RetestStimulusSeen" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["RetestStimulusSeen"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying string enumerated values RetestStimulusSeen --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"VisualFieldStaticPerimetryTestMeasurements", "RetestSensitivityValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying RetestSensitivityValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"VisualFieldStaticPerimetryTestMeasurements", "QuantifiedDefect", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying QuantifiedDefect --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestMeasurements", 
						"VisualFieldTestPointNormalsSequence", 
						verbose, log, ElementDictionary, 
						Condition_TestPointNormalsDataFlagIsYes, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "VisualFieldStaticPerimetryTestMeasurements success after verifying VisualFieldTestPointNormalsSequence" + ("success" if partial_success else "failure")) 
				if "VisualFieldTestPointNormalsSequence" in ds1:
					VisualFieldTestPointNormalsSequence_data = ds1.VisualFieldTestPointNormalsSequence
					if type(VisualFieldTestPointNormalsSequence_data) == Sequence:
						for i2 in range(0, len(VisualFieldTestPointNormalsSequence_data)):
							if verbose:
								log.append( " VisualFieldTestPointNormalsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = VisualFieldTestPointNormalsSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"VisualFieldStaticPerimetryTestMeasurements", "AgeCorrectedSensitivityDeviationValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying AgeCorrectedSensitivityDeviationValue --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"VisualFieldStaticPerimetryTestMeasurements", "AgeCorrectedSensitivityDeviationProbabilityValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying AgeCorrectedSensitivityDeviationProbabilityValue --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"VisualFieldStaticPerimetryTestMeasurements", "GeneralizedDefectCorrectedSensitivityDeviationFlag", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying GeneralizedDefectCorrectedSensitivityDeviationFlag --> "+("success" if partial_success else "failure"))

							if "GeneralizedDefectCorrectedSensitivityDeviationFlag" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["GeneralizedDefectCorrectedSensitivityDeviationFlag"], 
									StringValueTable_YesNoFull, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying string enumerated values GeneralizedDefectCorrectedSensitivityDeviationFlag --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"VisualFieldStaticPerimetryTestMeasurements", "GeneralizedDefectCorrectedSensitivityDeviationValue", 
									verbose, log, ElementDictionary, 
									Condition_GeneralizedDefectCorrectedSensitivityDeviationFlagIsYes, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying GeneralizedDefectCorrectedSensitivityDeviationValue --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"VisualFieldStaticPerimetryTestMeasurements", "GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue", 
									verbose, log, ElementDictionary, 
									Condition_GeneralizedDefectCorrectedSensitivityDeviationFlagIsYes, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " VisualFieldStaticPerimetryTestMeasurements success after verifying GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue --> "+("success" if partial_success else "failure"))

	return global_success

def Module_VisualFieldStaticPerimetryTestResults_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"VisualFieldStaticPerimetryTestResults")

	partial_success =  		verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestResults", "VisualFieldMeanSensitivity", 
			verbose, log, ElementDictionary, 
			0, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying VisualFieldMeanSensitivity --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestResults", "VisualFieldTestNormalsFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying VisualFieldTestNormalsFlag --> "+("success" if partial_success else "failure"))

	if "VisualFieldTestNormalsFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VisualFieldTestNormalsFlag"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying string enumerated values VisualFieldTestNormalsFlag --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestResults", 
			"ResultsNormalsSequence", 
			verbose, log, ElementDictionary, 
			Condition_VisualFieldTestNormalsFlagIsYes, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryTestResults success after verifying ResultsNormalsSequence" + ("success" if partial_success else "failure")) 
	if "ResultsNormalsSequence" in ds:
		ResultsNormalsSequence_data = ds.ResultsNormalsSequence
		if type(ResultsNormalsSequence_data) == Sequence:
			for i1 in range(0, len(ResultsNormalsSequence_data)):
				if verbose:
					log.append( " ResultsNormalsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ResultsNormalsSequence_data[i1]
				partial_success =  Macro_DataSetIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualFieldStaticPerimetryTestResults success after verifying DataSetIdentificationMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestResults", "GlobalDeviationFromNormal", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestResults success after verifying GlobalDeviationFromNormal --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestResults", "GlobalDeviationProbabilityNormalsFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestResults success after verifying GlobalDeviationProbabilityNormalsFlag --> "+("success" if partial_success else "failure"))

				if "GlobalDeviationProbabilityNormalsFlag" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["GlobalDeviationProbabilityNormalsFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestResults success after verifying string enumerated values GlobalDeviationProbabilityNormalsFlag --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestResults", 
						"GlobalDeviationProbabilitySequence", 
						verbose, log, ElementDictionary, 
						Condition_GlobalDeviationProbabilityNormalsFlagIsYes, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "VisualFieldStaticPerimetryTestResults success after verifying GlobalDeviationProbabilitySequence" + ("success" if partial_success else "failure")) 
				if "GlobalDeviationProbabilitySequence" in ds1:
					GlobalDeviationProbabilitySequence_data = ds1.GlobalDeviationProbabilitySequence
					if type(GlobalDeviationProbabilitySequence_data) == Sequence:
						for i2 in range(0, len(GlobalDeviationProbabilitySequence_data)):
							if verbose:
								log.append( " GlobalDeviationProbabilitySequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = GlobalDeviationProbabilitySequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"VisualFieldStaticPerimetryTestResults", "GlobalDeviationProbability", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " VisualFieldStaticPerimetryTestResults success after verifying GlobalDeviationProbability --> "+("success" if partial_success else "failure"))

							partial_success =  Macro_AlgorithmIdentificationMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " VisualFieldStaticPerimetryTestResults success after verifying AlgorithmIdentificationMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestResults", "LocalizedDeviationFromNormal", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestResults success after verifying LocalizedDeviationFromNormal --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"VisualFieldStaticPerimetryTestResults", "LocalDeviationProbabilityNormalsFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestResults success after verifying LocalDeviationProbabilityNormalsFlag --> "+("success" if partial_success else "failure"))

				if "LocalDeviationProbabilityNormalsFlag" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["LocalDeviationProbabilityNormalsFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " VisualFieldStaticPerimetryTestResults success after verifying string enumerated values LocalDeviationProbabilityNormalsFlag --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"VisualFieldStaticPerimetryTestResults", 
						"LocalizedDeviationProbabilitySequence", 
						verbose, log, ElementDictionary, 
						Condition_LocalDeviationProbabilityNormalsFlagIsYes, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "VisualFieldStaticPerimetryTestResults success after verifying LocalizedDeviationProbabilitySequence" + ("success" if partial_success else "failure")) 
				if "LocalizedDeviationProbabilitySequence" in ds1:
					LocalizedDeviationProbabilitySequence_data = ds1.LocalizedDeviationProbabilitySequence
					if type(LocalizedDeviationProbabilitySequence_data) == Sequence:
						for i2 in range(0, len(LocalizedDeviationProbabilitySequence_data)):
							if verbose:
								log.append( " LocalizedDeviationProbabilitySequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = LocalizedDeviationProbabilitySequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"VisualFieldStaticPerimetryTestResults", "LocalizedDeviationProbability", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " VisualFieldStaticPerimetryTestResults success after verifying LocalizedDeviationProbability --> "+("success" if partial_success else "failure"))

							partial_success =  Macro_AlgorithmIdentificationMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " VisualFieldStaticPerimetryTestResults success after verifying AlgorithmIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestResults", "ShortTermFluctuationCalculated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying ShortTermFluctuationCalculated --> "+("success" if partial_success else "failure"))

	if "ShortTermFluctuationCalculated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ShortTermFluctuationCalculated"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying string enumerated values ShortTermFluctuationCalculated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestResults", "ShortTermFluctuation", 
			verbose, log, ElementDictionary, 
			Condition_ShortTermFluctuationCalculatedIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying ShortTermFluctuation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestResults", "ShortTermFluctuationProbabilityCalculated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying ShortTermFluctuationProbabilityCalculated --> "+("success" if partial_success else "failure"))

	if "ShortTermFluctuationProbabilityCalculated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ShortTermFluctuationProbabilityCalculated"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying string enumerated values ShortTermFluctuationProbabilityCalculated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestResults", "ShortTermFluctuationProbability", 
			verbose, log, ElementDictionary, 
			Condition_ShortTermFluctuationProbabilityCalculatedIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying ShortTermFluctuationProbability --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestResults", "CorrectedLocalizedDeviationFromNormalCalculated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying CorrectedLocalizedDeviationFromNormalCalculated --> "+("success" if partial_success else "failure"))

	if "CorrectedLocalizedDeviationFromNormalCalculated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CorrectedLocalizedDeviationFromNormalCalculated"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying string enumerated values CorrectedLocalizedDeviationFromNormalCalculated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestResults", "CorrectedLocalizedDeviationFromNormal", 
			verbose, log, ElementDictionary, 
			Condition_CorrectedLocalizedDeviationFromNormalCalculatedIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying CorrectedLocalizedDeviationFromNormal --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"VisualFieldStaticPerimetryTestResults", "CorrectedLocalizedDeviationFromNormalProbabilityCalculated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying CorrectedLocalizedDeviationFromNormalProbabilityCalculated --> "+("success" if partial_success else "failure"))

	if "CorrectedLocalizedDeviationFromNormalProbabilityCalculated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CorrectedLocalizedDeviationFromNormalProbabilityCalculated"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying string enumerated values CorrectedLocalizedDeviationFromNormalProbabilityCalculated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"VisualFieldStaticPerimetryTestResults", "CorrectedLocalizedDeviationFromNormalProbability", 
			verbose, log, ElementDictionary, 
			Condition_CorrectedLocalizedDeviationFromNormalProbabilityCalculatedIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " VisualFieldStaticPerimetryTestResults success after verifying CorrectedLocalizedDeviationFromNormalProbability --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"VisualFieldStaticPerimetryTestResults", 
			"VisualFieldGlobalResultsIndexSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "VisualFieldStaticPerimetryTestResults success after verifying VisualFieldGlobalResultsIndexSequence" + ("success" if partial_success else "failure")) 
	if "VisualFieldGlobalResultsIndexSequence" in ds:
		VisualFieldGlobalResultsIndexSequence_data = ds.VisualFieldGlobalResultsIndexSequence
		if type(VisualFieldGlobalResultsIndexSequence_data) == Sequence:
			for i1 in range(0, len(VisualFieldGlobalResultsIndexSequence_data)):
				if verbose:
					log.append( " VisualFieldGlobalResultsIndexSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VisualFieldGlobalResultsIndexSequence_data[i1]
				partial_success =  Macro_OphthalmicVisualFieldGlobalIndexMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " VisualFieldStaticPerimetryTestResults success after verifying OphthalmicVisualFieldGlobalIndexMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_OphthalmicPatientClinicalInformationandTestLensParameters_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OphthalmicPatientClinicalInformationandTestLensParameters")

	partial_success = verifyType1C(ds, 
			"OphthalmicPatientClinicalInformationandTestLensParameters", 
			"OphthalmicPatientClinicalInformationLeftEyeSequence", 
			verbose, log, ElementDictionary, 
			Condition_MeasurementLateralityLeftOrBoth, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicPatientClinicalInformationandTestLensParameters success after verifying OphthalmicPatientClinicalInformationLeftEyeSequence" + ("success" if partial_success else "failure")) 
	if "OphthalmicPatientClinicalInformationLeftEyeSequence" in ds:
		OphthalmicPatientClinicalInformationLeftEyeSequence_data = ds.OphthalmicPatientClinicalInformationLeftEyeSequence
		if type(OphthalmicPatientClinicalInformationLeftEyeSequence_data) == Sequence:
			for i1 in range(0, len(OphthalmicPatientClinicalInformationLeftEyeSequence_data)):
				if verbose:
					log.append( " OphthalmicPatientClinicalInformationLeftEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OphthalmicPatientClinicalInformationLeftEyeSequence_data[i1]
				partial_success =  Macro_OphthalmicPatientClinicalInformationandTestLensParametersMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicPatientClinicalInformationandTestLensParameters success after verifying OphthalmicPatientClinicalInformationandTestLensParametersMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"OphthalmicPatientClinicalInformationandTestLensParameters", 
			"OphthalmicPatientClinicalInformationRightEyeSequence", 
			verbose, log, ElementDictionary, 
			Condition_MeasurementLateralityRightOrBoth, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicPatientClinicalInformationandTestLensParameters success after verifying OphthalmicPatientClinicalInformationRightEyeSequence" + ("success" if partial_success else "failure")) 
	if "OphthalmicPatientClinicalInformationRightEyeSequence" in ds:
		OphthalmicPatientClinicalInformationRightEyeSequence_data = ds.OphthalmicPatientClinicalInformationRightEyeSequence
		if type(OphthalmicPatientClinicalInformationRightEyeSequence_data) == Sequence:
			for i1 in range(0, len(OphthalmicPatientClinicalInformationRightEyeSequence_data)):
				if verbose:
					log.append( " OphthalmicPatientClinicalInformationRightEyeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = OphthalmicPatientClinicalInformationRightEyeSequence_data[i1]
				partial_success =  Macro_OphthalmicPatientClinicalInformationandTestLensParametersMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicPatientClinicalInformationandTestLensParameters success after verifying OphthalmicPatientClinicalInformationandTestLensParametersMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_OphthalmicPatientClinicalInformationandTestLensParametersMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"OphthalmicPatientClinicalInformationandTestLensParametersMacro")

	partial_success = verifyType2(ds, 
			"OphthalmicPatientClinicalInformationandTestLensParametersMacro", 
			"RefractiveParametersUsedOnPatientSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicPatientClinicalInformationandTestLensParametersMacro success after verifying RefractiveParametersUsedOnPatientSequence" + ("success" if partial_success else "failure")) 
	if "RefractiveParametersUsedOnPatientSequence" in ds:
		RefractiveParametersUsedOnPatientSequence_data = ds.RefractiveParametersUsedOnPatientSequence
		if type(RefractiveParametersUsedOnPatientSequence_data) == Sequence:
			for i1 in range(0, len(RefractiveParametersUsedOnPatientSequence_data)):
				if verbose:
					log.append( " RefractiveParametersUsedOnPatientSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RefractiveParametersUsedOnPatientSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"OphthalmicPatientClinicalInformationandTestLensParametersMacro", "SphericalLensPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicPatientClinicalInformationandTestLensParametersMacro success after verifying SphericalLensPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"OphthalmicPatientClinicalInformationandTestLensParametersMacro", "CylinderLensPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicPatientClinicalInformationandTestLensParametersMacro success after verifying CylinderLensPower --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"OphthalmicPatientClinicalInformationandTestLensParametersMacro", "CylinderAxis", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " OphthalmicPatientClinicalInformationandTestLensParametersMacro success after verifying CylinderAxis --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"OphthalmicPatientClinicalInformationandTestLensParametersMacro", "PupilSize", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPatientClinicalInformationandTestLensParametersMacro success after verifying PupilSize --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"OphthalmicPatientClinicalInformationandTestLensParametersMacro", "PupilDilated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPatientClinicalInformationandTestLensParametersMacro success after verifying PupilDilated --> "+("success" if partial_success else "failure"))

	if "PupilDilated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PupilDilated"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPatientClinicalInformationandTestLensParametersMacro success after verifying string enumerated values PupilDilated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"OphthalmicPatientClinicalInformationandTestLensParametersMacro", "IntraOcularPressure", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OphthalmicPatientClinicalInformationandTestLensParametersMacro success after verifying IntraOcularPressure --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"OphthalmicPatientClinicalInformationandTestLensParametersMacro", 
			"VisualAcuityMeasurementSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "OphthalmicPatientClinicalInformationandTestLensParametersMacro success after verifying VisualAcuityMeasurementSequence" + ("success" if partial_success else "failure")) 
	if "VisualAcuityMeasurementSequence" in ds:
		VisualAcuityMeasurementSequence_data = ds.VisualAcuityMeasurementSequence
		if type(VisualAcuityMeasurementSequence_data) == Sequence:
			for i1 in range(0, len(VisualAcuityMeasurementSequence_data)):
				if verbose:
					log.append( " VisualAcuityMeasurementSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VisualAcuityMeasurementSequence_data[i1]
				partial_success =  Macro_VisualAcuityMeasurementsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " OphthalmicPatientClinicalInformationandTestLensParametersMacro success after verifying VisualAcuityMeasurementsMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_Synchronization_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"Synchronization")

	partial_success =  		verifyType1(ds, 
			"Synchronization", "SynchronizationFrameOfReferenceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Synchronization success after verifying SynchronizationFrameOfReferenceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"Synchronization", "SynchronizationTrigger", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Synchronization success after verifying SynchronizationTrigger --> "+("success" if partial_success else "failure"))

	if "SynchronizationTrigger" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SynchronizationTrigger"], 
			StringValueTable_SynchronizationTrigger, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Synchronization success after verifying string enumerated values SynchronizationTrigger --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Synchronization", "TriggerSourceOrType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Synchronization success after verifying TriggerSourceOrType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"Synchronization", "SynchronizationChannel", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Synchronization success after verifying SynchronizationChannel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"Synchronization", "AcquisitionTimeSynchronized", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Synchronization success after verifying AcquisitionTimeSynchronized --> "+("success" if partial_success else "failure"))

	if "AcquisitionTimeSynchronized" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["AcquisitionTimeSynchronized"], 
			StringValueTable_YesNoLetter, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Synchronization success after verifying string enumerated values AcquisitionTimeSynchronized --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Synchronization", "TimeSource", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Synchronization success after verifying TimeSource --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Synchronization", "TimeDistributionProtocol", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Synchronization success after verifying TimeDistributionProtocol --> "+("success" if partial_success else "failure"))

	if "TimeDistributionProtocol" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["TimeDistributionProtocol"], 
			StringValueTable_TimeDistributionProtocol, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Synchronization success after verifying string enumerated values TimeDistributionProtocol --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"Synchronization", "NTPSourceAddress", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Synchronization success after verifying NTPSourceAddress --> "+("success" if partial_success else "failure"))

	return global_success

def Module_WaveformIdentification_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"WaveformIdentification")

	partial_success =  		verifyType1(ds, 
			"WaveformIdentification", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WaveformIdentification success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WaveformIdentification", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WaveformIdentification success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WaveformIdentification", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WaveformIdentification success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"WaveformIdentification", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " WaveformIdentification success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"WaveformIdentification", 
			"ReferencedInstanceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "WaveformIdentification success after verifying ReferencedInstanceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedInstanceSequence" in ds:
		ReferencedInstanceSequence_data = ds.ReferencedInstanceSequence
		if type(ReferencedInstanceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedInstanceSequence_data)):
				if verbose:
					log.append( " ReferencedInstanceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedInstanceSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " WaveformIdentification success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"WaveformIdentification", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "WaveformIdentification success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " WaveformIdentification success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_Waveform_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"Waveform")

	partial_success = verifyType1(ds, 
			"Waveform", 
			"WaveformSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Waveform success after verifying WaveformSequence" + ("success" if partial_success else "failure")) 
	if "WaveformSequence" in ds:
		WaveformSequence_data = ds.WaveformSequence
		if type(WaveformSequence_data) == Sequence:
			for i1 in range(0, len(WaveformSequence_data)):
				if verbose:
					log.append( " WaveformSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = WaveformSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"Waveform", "MultiplexGroupTimeOffset", 
						verbose, log, ElementDictionary, 
						Condition_AcquisitionTimeSynchronizedIsY, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying MultiplexGroupTimeOffset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"Waveform", "TriggerTimeOffset", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying TriggerTimeOffset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"Waveform", "TriggerSamplePosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying TriggerSamplePosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"Waveform", "WaveformOriginality", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying WaveformOriginality --> "+("success" if partial_success else "failure"))

				if "WaveformOriginality" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["WaveformOriginality"], 
						StringValueTable_WaveformOriginality, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying string enumerated values WaveformOriginality --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"Waveform", "NumberOfWaveformChannels", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying NumberOfWaveformChannels --> "+("success" if partial_success else "failure"))

				if "NumberOfWaveformChannels" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["NumberOfWaveformChannels"], 
						verbose, log, -1, False)

				partial_success =  		verifyType1(ds1, 
						"Waveform", "NumberOfWaveformSamples", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying NumberOfWaveformSamples --> "+("success" if partial_success else "failure"))

				if "NumberOfWaveformSamples" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["NumberOfWaveformSamples"], 
						verbose, log, -1, False)

				partial_success =  		verifyType1(ds1, 
						"Waveform", "SamplingFrequency", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying SamplingFrequency --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"Waveform", "MultiplexGroupLabel", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying MultiplexGroupLabel --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"Waveform", 
						"ChannelDefinitionSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "Waveform success after verifying ChannelDefinitionSequence" + ("success" if partial_success else "failure")) 
				if "ChannelDefinitionSequence" in ds1:
					ChannelDefinitionSequence_data = ds1.ChannelDefinitionSequence
					if type(ChannelDefinitionSequence_data) == Sequence:
						for i2 in range(0, len(ChannelDefinitionSequence_data)):
							if verbose:
								log.append( " ChannelDefinitionSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ChannelDefinitionSequence_data[i2]
							partial_success =  		verifyType3(ds2, 
									"Waveform", "WaveformChannelNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying WaveformChannelNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"Waveform", "ChannelLabel", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying ChannelLabel --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"Waveform", "ChannelStatus", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying ChannelStatus --> "+("success" if partial_success else "failure"))

							if "ChannelStatus" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["ChannelStatus"], 
									StringValueTable_ChannelStatus, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying string defined terms ChannelStatus --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1(ds2, 
									"Waveform", 
									"ChannelSourceSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "Waveform success after verifying ChannelSourceSequence" + ("success" if partial_success else "failure")) 
							if "ChannelSourceSequence" in ds2:
								ChannelSourceSequence_data = ds2.ChannelSourceSequence
								if type(ChannelSourceSequence_data) == Sequence:
									for i3 in range(0, len(ChannelSourceSequence_data)):
										if verbose:
											log.append( " ChannelSourceSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ChannelSourceSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " Waveform success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1C(ds2, 
									"Waveform", 
									"ChannelSourceModifiersSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "Waveform success after verifying ChannelSourceModifiersSequence" + ("success" if partial_success else "failure")) 
							if "ChannelSourceModifiersSequence" in ds2:
								ChannelSourceModifiersSequence_data = ds2.ChannelSourceModifiersSequence
								if type(ChannelSourceModifiersSequence_data) == Sequence:
									for i3 in range(0, len(ChannelSourceModifiersSequence_data)):
										if verbose:
											log.append( " ChannelSourceModifiersSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ChannelSourceModifiersSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " Waveform success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType3(ds2, 
									"Waveform", 
									"SourceWaveformSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "Waveform success after verifying SourceWaveformSequence" + ("success" if partial_success else "failure")) 
							if "SourceWaveformSequence" in ds2:
								SourceWaveformSequence_data = ds2.SourceWaveformSequence
								if type(SourceWaveformSequence_data) == Sequence:
									for i3 in range(0, len(SourceWaveformSequence_data)):
										if verbose:
											log.append( " SourceWaveformSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = SourceWaveformSequence_data[i3]
										partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " Waveform success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
										partial_success =  		verifyType1(ds3, 
												"Waveform", "ReferencedWaveformChannels", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " Waveform success after verifying ReferencedWaveformChannels --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"Waveform", "ChannelDerivationDescription", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying ChannelDerivationDescription --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"Waveform", "ChannelSensitivity", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying ChannelSensitivity --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"Waveform", 
									"ChannelSensitivityUnitsSequence", 
									verbose, log, ElementDictionary, 
									Condition_ChannelSensitivityIsPresent, 
									False, 
									parent_ds2, root_ds2, 
									1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "Waveform success after verifying ChannelSensitivityUnitsSequence" + ("success" if partial_success else "failure")) 
							if "ChannelSensitivityUnitsSequence" in ds2:
								ChannelSensitivityUnitsSequence_data = ds2.ChannelSensitivityUnitsSequence
								if type(ChannelSensitivityUnitsSequence_data) == Sequence:
									for i3 in range(0, len(ChannelSensitivityUnitsSequence_data)):
										if verbose:
											log.append( " ChannelSensitivityUnitsSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ChannelSensitivityUnitsSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " Waveform success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1C(ds2, 
									"Waveform", "ChannelSensitivityCorrectionFactor", 
									verbose, log, ElementDictionary, 
									Condition_ChannelSensitivityIsPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying ChannelSensitivityCorrectionFactor --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"Waveform", "ChannelBaseline", 
									verbose, log, ElementDictionary, 
									Condition_ChannelSensitivityIsPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying ChannelBaseline --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"Waveform", "ChannelTimeSkew", 
									verbose, log, ElementDictionary, 
									Condition_ChannelSampleSkewNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying ChannelTimeSkew --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"Waveform", "ChannelSampleSkew", 
									verbose, log, ElementDictionary, 
									Condition_ChannelTimeSkewNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying ChannelSampleSkew --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"Waveform", "ChannelOffset", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying ChannelOffset --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"Waveform", "WaveformBitsStored", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying WaveformBitsStored --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"Waveform", "FilterLowFrequency", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying FilterLowFrequency --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"Waveform", "FilterHighFrequency", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying FilterHighFrequency --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"Waveform", "NotchFilterFrequency", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying NotchFilterFrequency --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"Waveform", "NotchFilterBandwidth", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying NotchFilterBandwidth --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"Waveform", "ChannelMinimumValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying ChannelMinimumValue --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"Waveform", "ChannelMaximumValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying ChannelMaximumValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"Waveform", "WaveformBitsAllocated", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying WaveformBitsAllocated --> "+("success" if partial_success else "failure"))

				if "WaveformBitsAllocated" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["WaveformBitsAllocated"], 
						BinaryValueDescription_BitsAre8Or16, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying binary enumerated values WaveformBitsAllocated --> "+("success" if partial_success else "failure"))


				if Condition_WaveformSampleInterpretationNeeds8Bit(ds1, parent_ds1, root_ds):
					if "WaveformBitsAllocated" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues_uint16(ds1["WaveformBitsAllocated"], 
							BinaryValueDescription_BitsAre8, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying binary enumerated values WaveformBitsAllocated --> "+("success" if partial_success else "failure"))


				if Condition_WaveformSampleInterpretationNeeds16Bit(ds1, parent_ds1, root_ds):
					if "WaveformBitsAllocated" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues_uint16(ds1["WaveformBitsAllocated"], 
							BinaryValueDescription_BitsAre16, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying binary enumerated values WaveformBitsAllocated --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"Waveform", "WaveformSampleInterpretation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying WaveformSampleInterpretation --> "+("success" if partial_success else "failure"))

				if "WaveformSampleInterpretation" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["WaveformSampleInterpretation"], 
						StringValueTable_WaveformSampleInterpretation, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying string enumerated values WaveformSampleInterpretation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"Waveform", "WaveformPaddingValue", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying WaveformPaddingValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"Waveform", "WaveformData", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying WaveformData --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"Waveform", "WaveformDataDisplayScale", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying WaveformDataDisplayScale --> "+("success" if partial_success else "failure"))

				if "WaveformDataDisplayScale" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["WaveformDataDisplayScale"], 
						verbose, log, -1, False)

				partial_success =  		verifyType3(ds1, 
						"Waveform", "WaveformDisplayBackgroundCIELabValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Waveform success after verifying WaveformDisplayBackgroundCIELabValue --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"Waveform", 
						"WaveformPresentationGroupSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "Waveform success after verifying WaveformPresentationGroupSequence" + ("success" if partial_success else "failure")) 
				if "WaveformPresentationGroupSequence" in ds1:
					WaveformPresentationGroupSequence_data = ds1.WaveformPresentationGroupSequence
					if type(WaveformPresentationGroupSequence_data) == Sequence:
						for i2 in range(0, len(WaveformPresentationGroupSequence_data)):
							if verbose:
								log.append( " WaveformPresentationGroupSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = WaveformPresentationGroupSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"Waveform", "PresentationGroupNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " Waveform success after verifying PresentationGroupNumber --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1(ds2, 
									"Waveform", 
									"ChannelDisplaySequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "Waveform success after verifying ChannelDisplaySequence" + ("success" if partial_success else "failure")) 
							if "ChannelDisplaySequence" in ds2:
								ChannelDisplaySequence_data = ds2.ChannelDisplaySequence
								if type(ChannelDisplaySequence_data) == Sequence:
									for i3 in range(0, len(ChannelDisplaySequence_data)):
										if verbose:
											log.append( " ChannelDisplaySequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ChannelDisplaySequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"Waveform", "ReferencedWaveformChannels", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " Waveform success after verifying ReferencedWaveformChannels --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"Waveform", "ChannelOffset", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " Waveform success after verifying ChannelOffset --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"Waveform", "ChannelRecommendedDisplayCIELabValue", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " Waveform success after verifying ChannelRecommendedDisplayCIELabValue --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1(ds3, 
												"Waveform", "ChannelPosition", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " Waveform success after verifying ChannelPosition --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType3(ds3, 
												"Waveform", "DisplayShadingFlag", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " Waveform success after verifying DisplayShadingFlag --> "+("success" if partial_success else "failure"))

										if "DisplayShadingFlag" not in ds3: 
											partial_success = False 
										else:
											partial_success = verifyEnumValues(ds3["DisplayShadingFlag"], 
												StringValueTable_DisplayShadingFlag, 
												verbose, log, -1)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " Waveform success after verifying string enumerated values DisplayShadingFlag --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1C(ds3, 
												"Waveform", "FractionalChannelDisplayScale", 
												verbose, log, ElementDictionary, 
												Condition_AbsoluteChannelDisplayScaleIsNotPresent, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " Waveform success after verifying FractionalChannelDisplayScale --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1C(ds3, 
												"Waveform", "AbsoluteChannelDisplayScale", 
												verbose, log, ElementDictionary, 
												Condition_FractionalChannelDisplayScaleIsNotPresent, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " Waveform success after verifying AbsoluteChannelDisplayScale --> "+("success" if partial_success else "failure"))

	return global_success

def Module_WaveformAnnotation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"WaveformAnnotation")

	partial_success = verifyType1(ds, 
			"WaveformAnnotation", 
			"WaveformAnnotationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "WaveformAnnotation success after verifying WaveformAnnotationSequence" + ("success" if partial_success else "failure")) 
	if "WaveformAnnotationSequence" in ds:
		WaveformAnnotationSequence_data = ds.WaveformAnnotationSequence
		if type(WaveformAnnotationSequence_data) == Sequence:
			for i1 in range(0, len(WaveformAnnotationSequence_data)):
				if verbose:
					log.append( " WaveformAnnotationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = WaveformAnnotationSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"WaveformAnnotation", "UnformattedTextValue", 
						verbose, log, ElementDictionary, 
						Condition_ConceptNameCodeSequenceNotPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WaveformAnnotation success after verifying UnformattedTextValue --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"WaveformAnnotation", 
						"ConceptNameCodeSequence", 
						verbose, log, ElementDictionary, 
						Condition_UnformattedTextValueNotPresent, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "WaveformAnnotation success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
				if "ConceptNameCodeSequence" in ds1:
					ConceptNameCodeSequence_data = ds1.ConceptNameCodeSequence
					if type(ConceptNameCodeSequence_data) == Sequence:
						for i2 in range(0, len(ConceptNameCodeSequence_data)):
							if verbose:
								log.append( " ConceptNameCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ConceptNameCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " WaveformAnnotation success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1C(ds2, 
									"WaveformAnnotation", 
									"ModifierCodeSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "WaveformAnnotation success after verifying ModifierCodeSequence" + ("success" if partial_success else "failure")) 
							if "ModifierCodeSequence" in ds2:
								ModifierCodeSequence_data = ds2.ModifierCodeSequence
								if type(ModifierCodeSequence_data) == Sequence:
									for i3 in range(0, len(ModifierCodeSequence_data)):
										if verbose:
											log.append( " ModifierCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ModifierCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " WaveformAnnotation success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"WaveformAnnotation", 
						"ConceptCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "WaveformAnnotation success after verifying ConceptCodeSequence" + ("success" if partial_success else "failure")) 
				if "ConceptCodeSequence" in ds1:
					ConceptCodeSequence_data = ds1.ConceptCodeSequence
					if type(ConceptCodeSequence_data) == Sequence:
						for i2 in range(0, len(ConceptCodeSequence_data)):
							if verbose:
								log.append( " ConceptCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ConceptCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " WaveformAnnotation success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1C(ds2, 
									"WaveformAnnotation", 
									"ModifierCodeSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "WaveformAnnotation success after verifying ModifierCodeSequence" + ("success" if partial_success else "failure")) 
							if "ModifierCodeSequence" in ds2:
								ModifierCodeSequence_data = ds2.ModifierCodeSequence
								if type(ModifierCodeSequence_data) == Sequence:
									for i3 in range(0, len(ModifierCodeSequence_data)):
										if verbose:
											log.append( " ModifierCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ModifierCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " WaveformAnnotation success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"WaveformAnnotation", "NumericValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WaveformAnnotation success after verifying NumericValue --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"WaveformAnnotation", 
						"MeasurementUnitsCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "WaveformAnnotation success after verifying MeasurementUnitsCodeSequence" + ("success" if partial_success else "failure")) 
				if "MeasurementUnitsCodeSequence" in ds1:
					MeasurementUnitsCodeSequence_data = ds1.MeasurementUnitsCodeSequence
					if type(MeasurementUnitsCodeSequence_data) == Sequence:
						for i2 in range(0, len(MeasurementUnitsCodeSequence_data)):
							if verbose:
								log.append( " MeasurementUnitsCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MeasurementUnitsCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " WaveformAnnotation success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"WaveformAnnotation", "ReferencedWaveformChannels", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WaveformAnnotation success after verifying ReferencedWaveformChannels --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"WaveformAnnotation", "TemporalRangeType", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WaveformAnnotation success after verifying TemporalRangeType --> "+("success" if partial_success else "failure"))

				if "TemporalRangeType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["TemporalRangeType"], 
						StringValueTable_TemporalRangeTypeForWaveformAnnotation, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WaveformAnnotation success after verifying string enumerated values TemporalRangeType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"WaveformAnnotation", "ReferencedSamplePositions", 
						verbose, log, ElementDictionary, 
						Condition_AnnotationNeedsReferencedSamplePositions, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WaveformAnnotation success after verifying ReferencedSamplePositions --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"WaveformAnnotation", "ReferencedTimeOffsets", 
						verbose, log, ElementDictionary, 
						Condition_AnnotationNeedsReferencedTimeOffsets, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WaveformAnnotation success after verifying ReferencedTimeOffsets --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"WaveformAnnotation", "ReferencedDateTime", 
						verbose, log, ElementDictionary, 
						Condition_AnnotationNeedsReferencedDateTime, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WaveformAnnotation success after verifying ReferencedDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"WaveformAnnotation", "AnnotationGroupNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WaveformAnnotation success after verifying AnnotationGroupNumber --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"HierarchicalSOPInstanceReferenceMacro")

	partial_success =  		verifyType1(ds, 
			"HierarchicalSOPInstanceReferenceMacro", "StudyInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HierarchicalSOPInstanceReferenceMacro success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"HierarchicalSOPInstanceReferenceMacro", 
			"ReferencedSeriesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HierarchicalSOPInstanceReferenceMacro success after verifying ReferencedSeriesSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSeriesSequence" in ds:
		ReferencedSeriesSequence_data = ds.ReferencedSeriesSequence
		if type(ReferencedSeriesSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSeriesSequence_data)):
				if verbose:
					log.append( " ReferencedSeriesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSeriesSequence_data[i1]
				partial_success =  Macro_HierarchicalSeriesReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " HierarchicalSOPInstanceReferenceMacro success after verifying HierarchicalSeriesReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro")

	partial_success =  		verifyType1(ds, 
			"HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro", "StudyInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro", 
			"ReferencedSeriesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro success after verifying ReferencedSeriesSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSeriesSequence" in ds:
		ReferencedSeriesSequence_data = ds.ReferencedSeriesSequence
		if type(ReferencedSeriesSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSeriesSequence_data)):
				if verbose:
					log.append( " ReferencedSeriesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSeriesSequence_data[i1]
				partial_success =  Macro_HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro success after verifying HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_HierarchicalSeriesReferenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"HierarchicalSeriesReferenceMacro")

	partial_success =  		verifyType1(ds, 
			"HierarchicalSeriesReferenceMacro", "SeriesInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HierarchicalSeriesReferenceMacro success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"HierarchicalSeriesReferenceMacro", "RetrieveAETitle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HierarchicalSeriesReferenceMacro success after verifying RetrieveAETitle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"HierarchicalSeriesReferenceMacro", "RetrieveLocationUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HierarchicalSeriesReferenceMacro success after verifying RetrieveLocationUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"HierarchicalSeriesReferenceMacro", "StorageMediaFileSetID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HierarchicalSeriesReferenceMacro success after verifying StorageMediaFileSetID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"HierarchicalSeriesReferenceMacro", "StorageMediaFileSetUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HierarchicalSeriesReferenceMacro success after verifying StorageMediaFileSetUID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"HierarchicalSeriesReferenceMacro", 
			"ReferencedSOPSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HierarchicalSeriesReferenceMacro success after verifying ReferencedSOPSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSOPSequence" in ds:
		ReferencedSOPSequence_data = ds.ReferencedSOPSequence
		if type(ReferencedSOPSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSOPSequence_data)):
				if verbose:
					log.append( " ReferencedSOPSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSOPSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " HierarchicalSeriesReferenceMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"HierarchicalSeriesReferenceMacro", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HierarchicalSeriesReferenceMacro success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " HierarchicalSeriesReferenceMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"HierarchicalSeriesReferenceMacro", 
						"ReferencedDigitalSignatureSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HierarchicalSeriesReferenceMacro success after verifying ReferencedDigitalSignatureSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedDigitalSignatureSequence" in ds1:
					ReferencedDigitalSignatureSequence_data = ds1.ReferencedDigitalSignatureSequence
					if type(ReferencedDigitalSignatureSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedDigitalSignatureSequence_data)):
							if verbose:
								log.append( " ReferencedDigitalSignatureSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedDigitalSignatureSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"HierarchicalSeriesReferenceMacro", "DigitalSignatureUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceMacro success after verifying DigitalSignatureUID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HierarchicalSeriesReferenceMacro", "Signature", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceMacro success after verifying Signature --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"HierarchicalSeriesReferenceMacro", 
						"ReferencedSOPInstanceMACSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HierarchicalSeriesReferenceMacro success after verifying ReferencedSOPInstanceMACSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedSOPInstanceMACSequence" in ds1:
					ReferencedSOPInstanceMACSequence_data = ds1.ReferencedSOPInstanceMACSequence
					if type(ReferencedSOPInstanceMACSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedSOPInstanceMACSequence_data)):
							if verbose:
								log.append( " ReferencedSOPInstanceMACSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedSOPInstanceMACSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"HierarchicalSeriesReferenceMacro", "MACCalculationTransferSyntaxUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceMacro success after verifying MACCalculationTransferSyntaxUID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HierarchicalSeriesReferenceMacro", "MACAlgorithm", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceMacro success after verifying MACAlgorithm --> "+("success" if partial_success else "failure"))

							if "MACAlgorithm" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["MACAlgorithm"], 
									StringValueTable_MACAlgorithm, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceMacro success after verifying string defined terms MACAlgorithm --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HierarchicalSeriesReferenceMacro", "DataElementsSigned", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceMacro success after verifying DataElementsSigned --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HierarchicalSeriesReferenceMacro", "MAC", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceMacro success after verifying MAC --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro")

	partial_success =  		verifyType1(ds, 
			"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", "SeriesInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", "RetrieveAETitle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying RetrieveAETitle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", "RetrieveLocationUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying RetrieveLocationUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", "StorageMediaFileSetID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying StorageMediaFileSetID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", "StorageMediaFileSetUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying StorageMediaFileSetUID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", 
			"ReferencedSOPSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying ReferencedSOPSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSOPSequence" in ds:
		ReferencedSOPSequence_data = ds.ReferencedSOPSequence
		if type(ReferencedSOPSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSOPSequence_data)):
				if verbose:
					log.append( " ReferencedSOPSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSOPSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", 
						"ReferencedDigitalSignatureSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying ReferencedDigitalSignatureSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedDigitalSignatureSequence" in ds1:
					ReferencedDigitalSignatureSequence_data = ds1.ReferencedDigitalSignatureSequence
					if type(ReferencedDigitalSignatureSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedDigitalSignatureSequence_data)):
							if verbose:
								log.append( " ReferencedDigitalSignatureSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedDigitalSignatureSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", "DigitalSignatureUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying DigitalSignatureUID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", "Signature", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying Signature --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", 
						"ReferencedSOPInstanceMACSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying ReferencedSOPInstanceMACSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedSOPInstanceMACSequence" in ds1:
					ReferencedSOPInstanceMACSequence_data = ds1.ReferencedSOPInstanceMACSequence
					if type(ReferencedSOPInstanceMACSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedSOPInstanceMACSequence_data)):
							if verbose:
								log.append( " ReferencedSOPInstanceMACSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedSOPInstanceMACSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", "MACCalculationTransferSyntaxUID", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying MACCalculationTransferSyntaxUID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", "MACAlgorithm", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying MACAlgorithm --> "+("success" if partial_success else "failure"))

							if "MACAlgorithm" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["MACAlgorithm"], 
									StringValueTable_MACAlgorithm, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying string defined terms MACAlgorithm --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", "DataElementsSigned", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying DataElementsSigned --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro", "MAC", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HierarchicalSeriesReferenceIHEXDSIManifestProfileMacro success after verifying MAC --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_IdentifiedPersonOrDeviceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"IdentifiedPersonOrDeviceMacro")

	partial_success =  		verifyType1(ds, 
			"IdentifiedPersonOrDeviceMacro", "ObserverType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IdentifiedPersonOrDeviceMacro success after verifying ObserverType --> "+("success" if partial_success else "failure"))

	if "ObserverType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ObserverType"], 
			StringValueTable_ObserverType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IdentifiedPersonOrDeviceMacro success after verifying string enumerated values ObserverType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IdentifiedPersonOrDeviceMacro", "PersonName", 
			verbose, log, ElementDictionary, 
			Condition_ObserverTypeIsPerson, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IdentifiedPersonOrDeviceMacro success after verifying PersonName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2C(ds, 
			"IdentifiedPersonOrDeviceMacro", 
			"PersonIdentificationCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_ObserverTypeIsPerson, 
			False, 
			parent_ds, root_ds, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IdentifiedPersonOrDeviceMacro success after verifying PersonIdentificationCodeSequence" + ("success" if partial_success else "failure")) 
	if "PersonIdentificationCodeSequence" in ds:
		PersonIdentificationCodeSequence_data = ds.PersonIdentificationCodeSequence
		if type(PersonIdentificationCodeSequence_data) == Sequence:
			for i1 in range(0, len(PersonIdentificationCodeSequence_data)):
				if verbose:
					log.append( " PersonIdentificationCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PersonIdentificationCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IdentifiedPersonOrDeviceMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType2C(ds, 
			"IdentifiedPersonOrDeviceMacro", "StationName", 
			verbose, log, ElementDictionary, 
			Condition_ObserverTypeIsDevice, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IdentifiedPersonOrDeviceMacro success after verifying StationName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IdentifiedPersonOrDeviceMacro", "DeviceUID", 
			verbose, log, ElementDictionary, 
			Condition_ObserverTypeIsDevice, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IdentifiedPersonOrDeviceMacro success after verifying DeviceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IdentifiedPersonOrDeviceMacro", "Manufacturer", 
			verbose, log, ElementDictionary, 
			Condition_ObserverTypeIsDevice, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IdentifiedPersonOrDeviceMacro success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IdentifiedPersonOrDeviceMacro", "ManufacturerModelName", 
			verbose, log, ElementDictionary, 
			Condition_ObserverTypeIsDevice, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IdentifiedPersonOrDeviceMacro success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"IdentifiedPersonOrDeviceMacro", "StationAETitle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IdentifiedPersonOrDeviceMacro success after verifying StationAETitle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"IdentifiedPersonOrDeviceMacro", "InstitutionName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IdentifiedPersonOrDeviceMacro success after verifying InstitutionName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"IdentifiedPersonOrDeviceMacro", 
			"InstitutionCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IdentifiedPersonOrDeviceMacro success after verifying InstitutionCodeSequence" + ("success" if partial_success else "failure")) 
	if "InstitutionCodeSequence" in ds:
		InstitutionCodeSequence_data = ds.InstitutionCodeSequence
		if type(InstitutionCodeSequence_data) == Sequence:
			for i1 in range(0, len(InstitutionCodeSequence_data)):
				if verbose:
					log.append( " InstitutionCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = InstitutionCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IdentifiedPersonOrDeviceMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"IdentifiedPersonOrDeviceMacro", "InstitutionalDepartmentName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IdentifiedPersonOrDeviceMacro success after verifying InstitutionalDepartmentName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"IdentifiedPersonOrDeviceMacro", 
			"InstitutionalDepartmentTypeCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IdentifiedPersonOrDeviceMacro success after verifying InstitutionalDepartmentTypeCodeSequence" + ("success" if partial_success else "failure")) 
	if "InstitutionalDepartmentTypeCodeSequence" in ds:
		InstitutionalDepartmentTypeCodeSequence_data = ds.InstitutionalDepartmentTypeCodeSequence
		if type(InstitutionalDepartmentTypeCodeSequence_data) == Sequence:
			for i1 in range(0, len(InstitutionalDepartmentTypeCodeSequence_data)):
				if verbose:
					log.append( " InstitutionalDepartmentTypeCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = InstitutionalDepartmentTypeCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IdentifiedPersonOrDeviceMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_NumericMeasurementMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"NumericMeasurementMacro")

	partial_success = verifyType2(ds, 
			"NumericMeasurementMacro", 
			"MeasuredValueSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "NumericMeasurementMacro success after verifying MeasuredValueSequence" + ("success" if partial_success else "failure")) 
	if "MeasuredValueSequence" in ds:
		MeasuredValueSequence_data = ds.MeasuredValueSequence
		if type(MeasuredValueSequence_data) == Sequence:
			for i1 in range(0, len(MeasuredValueSequence_data)):
				if verbose:
					log.append( " MeasuredValueSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MeasuredValueSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"NumericMeasurementMacro", "NumericValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NumericMeasurementMacro success after verifying NumericValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"NumericMeasurementMacro", "FloatingPointValue", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NumericMeasurementMacro success after verifying FloatingPointValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"NumericMeasurementMacro", "RationalNumeratorValue", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NumericMeasurementMacro success after verifying RationalNumeratorValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"NumericMeasurementMacro", "RationalDenominatorValue", 
						verbose, log, ElementDictionary, 
						Condition_RationalNumeratorValueIsPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " NumericMeasurementMacro success after verifying RationalDenominatorValue --> "+("success" if partial_success else "failure"))

				if Condition_RationalNumeratorValueIsPresent(ds1, parent_ds1, root_ds):
					if "RationalDenominatorValue" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["RationalDenominatorValue"], 
							verbose, log, -1, False)

				partial_success = verifyType1(ds1, 
						"NumericMeasurementMacro", 
						"MeasurementUnitsCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "NumericMeasurementMacro success after verifying MeasurementUnitsCodeSequence" + ("success" if partial_success else "failure")) 
				if "MeasurementUnitsCodeSequence" in ds1:
					MeasurementUnitsCodeSequence_data = ds1.MeasurementUnitsCodeSequence
					if type(MeasurementUnitsCodeSequence_data) == Sequence:
						for i2 in range(0, len(MeasurementUnitsCodeSequence_data)):
							if verbose:
								log.append( " MeasurementUnitsCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MeasurementUnitsCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " NumericMeasurementMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"NumericMeasurementMacro", 
			"NumericValueQualifierCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "NumericMeasurementMacro success after verifying NumericValueQualifierCodeSequence" + ("success" if partial_success else "failure")) 
	if "NumericValueQualifierCodeSequence" in ds:
		NumericValueQualifierCodeSequence_data = ds.NumericValueQualifierCodeSequence
		if type(NumericValueQualifierCodeSequence_data) == Sequence:
			for i1 in range(0, len(NumericValueQualifierCodeSequence_data)):
				if verbose:
					log.append( " NumericValueQualifierCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = NumericValueQualifierCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " NumericMeasurementMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_CodeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CodeMacro")

	partial_success = verifyType1(ds, 
			"CodeMacro", 
			"ConceptCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CodeMacro success after verifying ConceptCodeSequence" + ("success" if partial_success else "failure")) 
	if "ConceptCodeSequence" in ds:
		ConceptCodeSequence_data = ds.ConceptCodeSequence
		if type(ConceptCodeSequence_data) == Sequence:
			for i1 in range(0, len(ConceptCodeSequence_data)):
				if verbose:
					log.append( " ConceptCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConceptCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " CodeMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_CompositeObjectReferenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CompositeObjectReferenceMacro")

	partial_success = verifyType1(ds, 
			"CompositeObjectReferenceMacro", 
			"ReferencedSOPSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CompositeObjectReferenceMacro success after verifying ReferencedSOPSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSOPSequence" in ds:
		ReferencedSOPSequence_data = ds.ReferencedSOPSequence
		if type(ReferencedSOPSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSOPSequence_data)):
				if verbose:
					log.append( " ReferencedSOPSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSOPSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " CompositeObjectReferenceMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_ImageReferenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ImageReferenceMacro")

	partial_success = verifyType1(ds, 
			"ImageReferenceMacro", 
			"ReferencedSOPSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ImageReferenceMacro success after verifying ReferencedSOPSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSOPSequence" in ds:
		ReferencedSOPSequence_data = ds.ReferencedSOPSequence
		if type(ReferencedSOPSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSOPSequence_data)):
				if verbose:
					log.append( " ReferencedSOPSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSOPSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ImageReferenceMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"ImageReferenceMacro", "ReferencedFrameNumber", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ImageReferenceMacro success after verifying ReferencedFrameNumber --> "+("success" if partial_success else "failure"))

				if "ReferencedFrameNumber" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ReferencedFrameNumber"], 
						verbose, log, -1, False)


				if Condition_ReferencedFrameNumberPresentAndReferencedSOPClassUIDIsNotMultiFrame(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" May not be present for Referenced SOP Class that is not multi-frame - attribute <ReferencedFrameNumber>")

				partial_success =  		verifyType1C(ds1, 
						"ImageReferenceMacro", "ReferencedSegmentNumber", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ImageReferenceMacro success after verifying ReferencedSegmentNumber --> "+("success" if partial_success else "failure"))

				if "ReferencedSegmentNumber" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ReferencedSegmentNumber"], 
						verbose, log, -1, False)


				if Condition_ReferencedSegmentNumberPresentAndReferencedSOPClassUIDIsNotSegmentationOrSurfaceSegmentation(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" May not be present for Referenced SOP Class that is not segmentation - attribute <ReferencedSegmentNumber>")


				if Condition_ReferencedFrameNumberAndReferencedSegmentNumberPresent(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" May not be present when ReferencedFrameNumber is present - attribute <ReferencedSegmentNumber>")

				partial_success = verifyType3(ds1, 
						"ImageReferenceMacro", 
						"ReferencedSOPSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "ImageReferenceMacro success after verifying ReferencedSOPSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedSOPSequence" in ds1:
					ReferencedSOPSequence_data = ds1.ReferencedSOPSequence
					if type(ReferencedSOPSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedSOPSequence_data)):
							if verbose:
								log.append( " ReferencedSOPSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedSOPSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " ImageReferenceMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"ImageReferenceMacro", 
						"ReferencedRealWorldValueMappingInstanceSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "ImageReferenceMacro success after verifying ReferencedRealWorldValueMappingInstanceSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedRealWorldValueMappingInstanceSequence" in ds1:
					ReferencedRealWorldValueMappingInstanceSequence_data = ds1.ReferencedRealWorldValueMappingInstanceSequence
					if type(ReferencedRealWorldValueMappingInstanceSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedRealWorldValueMappingInstanceSequence_data)):
							if verbose:
								log.append( " ReferencedRealWorldValueMappingInstanceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedRealWorldValueMappingInstanceSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " ImageReferenceMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"ImageReferenceMacro", 
						"IconImageSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "ImageReferenceMacro success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
				if "IconImageSequence" in ds1:
					IconImageSequence_data = ds1.IconImageSequence
					if type(IconImageSequence_data) == Sequence:
						for i2 in range(0, len(IconImageSequence_data)):
							if verbose:
								log.append( " IconImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IconImageSequence_data[i2]
							partial_success =  Macro_IconImageSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " ImageReferenceMacro success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_WaveformReferenceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"WaveformReferenceMacro")

	partial_success = verifyType1(ds, 
			"WaveformReferenceMacro", 
			"ReferencedSOPSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "WaveformReferenceMacro success after verifying ReferencedSOPSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSOPSequence" in ds:
		ReferencedSOPSequence_data = ds.ReferencedSOPSequence
		if type(ReferencedSOPSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSOPSequence_data)):
				if verbose:
					log.append( " ReferencedSOPSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSOPSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " WaveformReferenceMacro success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"WaveformReferenceMacro", "ReferencedWaveformChannels", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " WaveformReferenceMacro success after verifying ReferencedWaveformChannels --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_SpatialCoordinatesMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SpatialCoordinatesMacro")

	partial_success =  		verifyType1(ds, 
			"SpatialCoordinatesMacro", "GraphicData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialCoordinatesMacro success after verifying GraphicData --> "+("success" if partial_success else "failure"))


	if not Condition_GraphicTypeIsPOINT(ds, parent_ds, root_ds):
		if "GraphicData" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyVM(ds["name"], 
				"SpatialCoordinatesMacro", "GraphicData", log, ElementDictionary, 2, 2, "GraphicTypeIsPOINT")


	if not Condition_GraphicTypeIsCIRCLE(ds, parent_ds, root_ds):
		if "GraphicData" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyVM(ds["name"], 
				"SpatialCoordinatesMacro", "GraphicData", log, ElementDictionary, 4, 4, "GraphicTypeIsCIRCLE")


	if not Condition_GraphicTypeIsELLIPSE(ds, parent_ds, root_ds):
		if "GraphicData" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyVM(ds["name"], 
				"SpatialCoordinatesMacro", "GraphicData", log, ElementDictionary, 8, 8, "GraphicTypeIsELLIPSE")

	partial_success =  		verifyType1(ds, 
			"SpatialCoordinatesMacro", "GraphicType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialCoordinatesMacro success after verifying GraphicType --> "+("success" if partial_success else "failure"))

	if "GraphicType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["GraphicType"], 
			StringValueTable_SRGraphicType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialCoordinatesMacro success after verifying string enumerated values GraphicType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SpatialCoordinatesMacro", "PixelOriginInterpretation", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialCoordinatesMacro success after verifying PixelOriginInterpretation --> "+("success" if partial_success else "failure"))

	if "PixelOriginInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PixelOriginInterpretation"], 
			StringValueTable_PixelOriginInterpretation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialCoordinatesMacro success after verifying string enumerated values PixelOriginInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SpatialCoordinatesMacro", "FiducialUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialCoordinatesMacro success after verifying FiducialUID --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_SpatialCoordinates3DMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"SpatialCoordinates3DMacro")

	partial_success =  		verifyType3(ds, 
			"SpatialCoordinates3DMacro", "ReferencedFrameOfReferenceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialCoordinates3DMacro success after verifying ReferencedFrameOfReferenceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SpatialCoordinates3DMacro", "GraphicData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialCoordinates3DMacro success after verifying GraphicData --> "+("success" if partial_success else "failure"))


	if not Condition_GraphicTypeIsPOINT(ds, parent_ds, root_ds):
		if "GraphicData" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyVM(ds["name"], 
				"SpatialCoordinates3DMacro", "GraphicData", log, ElementDictionary, 3, 3, "GraphicTypeIsPOINT")


	if not Condition_GraphicTypeIsELLIPSE(ds, parent_ds, root_ds):
		if "GraphicData" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyVM(ds["name"], 
				"SpatialCoordinates3DMacro", "GraphicData", log, ElementDictionary, 12, 12, "GraphicTypeIsELLIPSE")


	if not Condition_GraphicTypeIsELLIPSOID(ds, parent_ds, root_ds):
		if "GraphicData" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyVM(ds["name"], 
				"SpatialCoordinates3DMacro", "GraphicData", log, ElementDictionary, 18, 18, "GraphicTypeIsELLIPSOID")

	partial_success =  		verifyType1(ds, 
			"SpatialCoordinates3DMacro", "GraphicType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialCoordinates3DMacro success after verifying GraphicType --> "+("success" if partial_success else "failure"))

	if "GraphicType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["GraphicType"], 
			StringValueTable_SRGraphicType3D, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialCoordinates3DMacro success after verifying string enumerated values GraphicType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SpatialCoordinates3DMacro", "FiducialUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialCoordinates3DMacro success after verifying FiducialUID --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_TemporalCoordinatesMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"TemporalCoordinatesMacro")

	partial_success =  		verifyType1(ds, 
			"TemporalCoordinatesMacro", "TemporalRangeType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " TemporalCoordinatesMacro success after verifying TemporalRangeType --> "+("success" if partial_success else "failure"))

	if "TemporalRangeType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["TemporalRangeType"], 
			StringValueTable_TemporalRangeType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " TemporalCoordinatesMacro success after verifying string enumerated values TemporalRangeType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"TemporalCoordinatesMacro", "ReferencedSamplePositions", 
			verbose, log, ElementDictionary, 
			Condition_NoReferencedDateTimeOrReferencedTimeOffsets, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " TemporalCoordinatesMacro success after verifying ReferencedSamplePositions --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"TemporalCoordinatesMacro", "ReferencedTimeOffsets", 
			verbose, log, ElementDictionary, 
			Condition_NoReferencedDateTimeOrReferencedSamplePositions, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " TemporalCoordinatesMacro success after verifying ReferencedTimeOffsets --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"TemporalCoordinatesMacro", "ReferencedDateTime", 
			verbose, log, ElementDictionary, 
			Condition_NoReferencedTimeOffsetsOrReferencedSamplePositions, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " TemporalCoordinatesMacro success after verifying ReferencedDateTime --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_ContainerMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ContainerMacro")

	partial_success =  		verifyType1(ds, 
			"ContainerMacro", "ContinuityOfContent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContainerMacro success after verifying ContinuityOfContent --> "+("success" if partial_success else "failure"))

	if "ContinuityOfContent" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ContinuityOfContent"], 
			StringValueTable_ContinuityOfContent, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ContainerMacro success after verifying string enumerated values ContinuityOfContent --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"ContainerMacro", 
			"ContentTemplateSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ContainerMacro success after verifying ContentTemplateSequence" + ("success" if partial_success else "failure")) 
	if "ContentTemplateSequence" in ds:
		ContentTemplateSequence_data = ds.ContentTemplateSequence
		if type(ContentTemplateSequence_data) == Sequence:
			for i1 in range(0, len(ContentTemplateSequence_data)):
				if verbose:
					log.append( " ContentTemplateSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContentTemplateSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"ContainerMacro", "MappingResource", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContainerMacro success after verifying MappingResource --> "+("success" if partial_success else "failure"))

				if "MappingResource" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["MappingResource"], 
						StringValueTable_SRTemplateMappingResource, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContainerMacro success after verifying string defined terms MappingResource --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"ContainerMacro", "MappingResourceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContainerMacro success after verifying MappingResourceUID --> "+("success" if partial_success else "failure"))

				if "MappingResourceUID" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["MappingResourceUID"], 
						StringValueTable_MappingResourceUIDs, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContainerMacro success after verifying string defined terms MappingResourceUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"ContainerMacro", "TemplateIdentifier", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ContainerMacro success after verifying TemplateIdentifier --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_DocumentContentMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"DocumentContentMacro")

	partial_success =  		verifyType1(ds, 
			"DocumentContentMacro", "ValueType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying ValueType --> "+("success" if partial_success else "failure"))

	if "ValueType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ValueType"], 
			StringValueTable_SRValueTypes, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying string enumerated values ValueType --> "+("success" if partial_success else "failure"))


	if Condition_BasicTextSRStorageInstance(ds, parent_ds, root_ds):
		if "ValueType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ValueType"], 
				StringValueTable_BasicTextSRValueTypes, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying string enumerated values ValueType --> "+("success" if partial_success else "failure"))


	if Condition_EnhancedSRStorageInstance(ds, parent_ds, root_ds):
		if "ValueType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ValueType"], 
				StringValueTable_EnhancedAndComprehensiveSRValueTypes, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying string enumerated values ValueType --> "+("success" if partial_success else "failure"))


	if Condition_ComprehensiveSRStorageInstance(ds, parent_ds, root_ds):
		if "ValueType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ValueType"], 
				StringValueTable_EnhancedAndComprehensiveSRValueTypes, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying string enumerated values ValueType --> "+("success" if partial_success else "failure"))


	if Condition_KeyObjectSelectionDocumentStorageInstance(ds, parent_ds, root_ds):
		if "ValueType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ValueType"], 
				StringValueTable_KeyObjectSelectionDocumentValueTypes, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying string enumerated values ValueType --> "+("success" if partial_success else "failure"))


	if Condition_MammographyCADSRStorageInstance(ds, parent_ds, root_ds):
		if "ValueType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ValueType"], 
				StringValueTable_MammographyCADSRValueTypes, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying string enumerated values ValueType --> "+("success" if partial_success else "failure"))


	if Condition_ChestCADSRStorageInstance(ds, parent_ds, root_ds):
		if "ValueType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ValueType"], 
				StringValueTable_ChestCADSRValueTypes, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying string enumerated values ValueType --> "+("success" if partial_success else "failure"))


	if Condition_ProcedureLogStorageInstance(ds, parent_ds, root_ds):
		if "ValueType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ValueType"], 
				StringValueTable_ProcedureLogValueTypes, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying string enumerated values ValueType --> "+("success" if partial_success else "failure"))


	if Condition_XRayRadiationDoseSRStorageInstance(ds, parent_ds, root_ds):
		if "ValueType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ValueType"], 
				StringValueTable_XRayRadiationDoseSRValueTypes, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying string enumerated values ValueType --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"DocumentContentMacro", 
			"ConceptNameCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_NeedConceptName, 
			True, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DocumentContentMacro success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
	if "ConceptNameCodeSequence" in ds:
		ConceptNameCodeSequence_data = ds.ConceptNameCodeSequence
		if type(ConceptNameCodeSequence_data) == Sequence:
			for i1 in range(0, len(ConceptNameCodeSequence_data)):
				if verbose:
					log.append( " ConceptNameCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConceptNameCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DocumentContentMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"DocumentContentMacro", "TextValue", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsText, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying TextValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DocumentContentMacro", "DateTime", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsDateTime, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying DateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DocumentContentMacro", "Date", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsDate, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying Date --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DocumentContentMacro", "Time", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsTime, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying Time --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DocumentContentMacro", "PersonName", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsPersonName, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying PersonName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"DocumentContentMacro", "UID", 
			verbose, log, ElementDictionary, 
			Condition_ValueTypeIsUID, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentContentMacro success after verifying UID --> "+("success" if partial_success else "failure"))

	if Condition_ValueTypeIsNum(ds, parent_ds, root_ds):
		partial_success =  Macro_NumericMeasurementMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DocumentContentMacro success after verifying NumericMeasurementMacro"+ ("success" if partial_success else "failure" ))
	if Condition_ValueTypeIsCode(ds, parent_ds, root_ds):
		partial_success =  Macro_CodeMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DocumentContentMacro success after verifying CodeMacro"+ ("success" if partial_success else "failure" ))
	if Condition_ValueTypeIsComposite(ds, parent_ds, root_ds):
		partial_success =  Macro_CompositeObjectReferenceMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DocumentContentMacro success after verifying CompositeObjectReferenceMacro"+ ("success" if partial_success else "failure" ))
	if Condition_ValueTypeIsImage(ds, parent_ds, root_ds):
		partial_success =  Macro_ImageReferenceMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DocumentContentMacro success after verifying ImageReferenceMacro"+ ("success" if partial_success else "failure" ))
	if Condition_ValueTypeIsWaveform(ds, parent_ds, root_ds):
		partial_success =  Macro_WaveformReferenceMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DocumentContentMacro success after verifying WaveformReferenceMacro"+ ("success" if partial_success else "failure" ))
	if Condition_ValueTypeIsSpatialCoordinates(ds, parent_ds, root_ds):
		partial_success =  Macro_SpatialCoordinatesMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DocumentContentMacro success after verifying SpatialCoordinatesMacro"+ ("success" if partial_success else "failure" ))
	if Condition_ValueTypeIsSpatialCoordinates3D(ds, parent_ds, root_ds):
		partial_success =  Macro_SpatialCoordinates3DMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DocumentContentMacro success after verifying SpatialCoordinates3DMacro"+ ("success" if partial_success else "failure" ))
	if Condition_ValueTypeIsContainer(ds, parent_ds, root_ds):
		partial_success =  Macro_ContainerMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DocumentContentMacro success after verifying ContainerMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_DocumentRelationshipMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"DocumentRelationshipMacro")

	partial_success =  		verifyType1C(ds, 
			"DocumentRelationshipMacro", "ObservationDateTime", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentRelationshipMacro success after verifying ObservationDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"DocumentRelationshipMacro", "ObservationUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " DocumentRelationshipMacro success after verifying ObservationUID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"DocumentRelationshipMacro", 
			"ContentSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DocumentRelationshipMacro success after verifying ContentSequence" + ("success" if partial_success else "failure")) 
	if "ContentSequence" in ds:
		ContentSequence_data = ds.ContentSequence
		if type(ContentSequence_data) == Sequence:
			for i1 in range(0, len(ContentSequence_data)):
				if verbose:
					log.append( " ContentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContentSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"DocumentRelationshipMacro", "RelationshipType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DocumentRelationshipMacro success after verifying RelationshipType --> "+("success" if partial_success else "failure"))

				if "RelationshipType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["RelationshipType"], 
						StringValueTable_SRRelationshipType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DocumentRelationshipMacro success after verifying string defined terms RelationshipType --> "+("success" if partial_success else "failure"))

				if Condition_RelationshipByValue(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DocumentRelationshipMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DocumentRelationshipMacro success after verifying DocumentRelationshipMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RelationshipByValue(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DocumentContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " DocumentRelationshipMacro success after verifying DocumentContentMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"DocumentRelationshipMacro", "ReferencedContentItemIdentifier", 
						verbose, log, ElementDictionary, 
						Condition_RelationshipByReference, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DocumentRelationshipMacro success after verifying ReferencedContentItemIdentifier --> "+("success" if partial_success else "failure"))

				if Condition_RelationshipByReference(ds1, parent_ds1, root_ds):
					if "ReferencedContentItemIdentifier" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["ReferencedContentItemIdentifier"], 
							verbose, log, -1, False)

	return global_success

def Module_SRDocumentSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SRDocumentSeries")

	partial_success =  		verifyType1(ds, 
			"SRDocumentSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_SRModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SRDocumentSeries", "SeriesInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentSeries success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SRDocumentSeries", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentSeries success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SRDocumentSeries", "SeriesDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentSeries success after verifying SeriesDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SRDocumentSeries", "SeriesTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentSeries success after verifying SeriesTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SRDocumentSeries", "ProtocolName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentSeries success after verifying ProtocolName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SRDocumentSeries", "SeriesDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentSeries success after verifying SeriesDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"SRDocumentSeries", 
			"SeriesDescriptionCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentSeries success after verifying SeriesDescriptionCodeSequence" + ("success" if partial_success else "failure")) 
	if "SeriesDescriptionCodeSequence" in ds:
		SeriesDescriptionCodeSequence_data = ds.SeriesDescriptionCodeSequence
		if type(SeriesDescriptionCodeSequence_data) == Sequence:
			for i1 in range(0, len(SeriesDescriptionCodeSequence_data)):
				if verbose:
					log.append( " SeriesDescriptionCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SeriesDescriptionCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SRDocumentSeries success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType2(ds, 
			"SRDocumentSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SRDocumentSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_SRDocumentGeneral_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SRDocumentGeneral")

	partial_success =  		verifyType1(ds, 
			"SRDocumentGeneral", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentGeneral success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SRDocumentGeneral", "PreliminaryFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentGeneral success after verifying PreliminaryFlag --> "+("success" if partial_success else "failure"))

	if "PreliminaryFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PreliminaryFlag"], 
			StringValueTable_PreliminaryFlag, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentGeneral success after verifying string enumerated values PreliminaryFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SRDocumentGeneral", "CompletionFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentGeneral success after verifying CompletionFlag --> "+("success" if partial_success else "failure"))

	if "CompletionFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CompletionFlag"], 
			StringValueTable_CompletionFlag, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentGeneral success after verifying string enumerated values CompletionFlag --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"SRDocumentGeneral", "CompletionFlagDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentGeneral success after verifying CompletionFlagDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SRDocumentGeneral", "VerificationFlag", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentGeneral success after verifying VerificationFlag --> "+("success" if partial_success else "failure"))

	if "VerificationFlag" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VerificationFlag"], 
			StringValueTable_VerificationFlag, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentGeneral success after verifying string enumerated values VerificationFlag --> "+("success" if partial_success else "failure"))


	if Condition_VerificationFlagIsVerifiedAndCompletionFlagIsNotComplete(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Only permitted to be VERIFIED if CompletionFlag is COMPLETE - attribute <VerificationFlag>")

	partial_success =  		verifyType1(ds, 
			"SRDocumentGeneral", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentGeneral success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SRDocumentGeneral", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SRDocumentGeneral success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"SRDocumentGeneral", 
			"VerifyingObserverSequence", 
			verbose, log, ElementDictionary, 
			Condition_VerificationFlagIsVerified, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentGeneral success after verifying VerifyingObserverSequence" + ("success" if partial_success else "failure")) 
	if "VerifyingObserverSequence" in ds:
		VerifyingObserverSequence_data = ds.VerifyingObserverSequence
		if type(VerifyingObserverSequence_data) == Sequence:
			for i1 in range(0, len(VerifyingObserverSequence_data)):
				if verbose:
					log.append( " VerifyingObserverSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VerifyingObserverSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SRDocumentGeneral", "VerifyingObserverName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying VerifyingObserverName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"SRDocumentGeneral", 
						"VerifyingObserverIdentificationCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SRDocumentGeneral success after verifying VerifyingObserverIdentificationCodeSequence" + ("success" if partial_success else "failure")) 
				if "VerifyingObserverIdentificationCodeSequence" in ds1:
					VerifyingObserverIdentificationCodeSequence_data = ds1.VerifyingObserverIdentificationCodeSequence
					if type(VerifyingObserverIdentificationCodeSequence_data) == Sequence:
						for i2 in range(0, len(VerifyingObserverIdentificationCodeSequence_data)):
							if verbose:
								log.append( " VerifyingObserverIdentificationCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = VerifyingObserverIdentificationCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SRDocumentGeneral success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"SRDocumentGeneral", "VerifyingOrganization", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying VerifyingOrganization --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SRDocumentGeneral", "VerificationDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying VerificationDateTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"SRDocumentGeneral", 
			"AuthorObserverSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentGeneral success after verifying AuthorObserverSequence" + ("success" if partial_success else "failure")) 
	if "AuthorObserverSequence" in ds:
		AuthorObserverSequence_data = ds.AuthorObserverSequence
		if type(AuthorObserverSequence_data) == Sequence:
			for i1 in range(0, len(AuthorObserverSequence_data)):
				if verbose:
					log.append( " AuthorObserverSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AuthorObserverSequence_data[i1]
				partial_success =  Macro_IdentifiedPersonOrDeviceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SRDocumentGeneral success after verifying IdentifiedPersonOrDeviceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"SRDocumentGeneral", 
			"ParticipantSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentGeneral success after verifying ParticipantSequence" + ("success" if partial_success else "failure")) 
	if "ParticipantSequence" in ds:
		ParticipantSequence_data = ds.ParticipantSequence
		if type(ParticipantSequence_data) == Sequence:
			for i1 in range(0, len(ParticipantSequence_data)):
				if verbose:
					log.append( " ParticipantSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ParticipantSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SRDocumentGeneral", "ParticipationType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying ParticipationType --> "+("success" if partial_success else "failure"))

				if "ParticipationType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ParticipationType"], 
						StringValueTable_ParticipationType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying string defined terms ParticipationType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"SRDocumentGeneral", "ParticipationDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying ParticipationDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_IdentifiedPersonOrDeviceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SRDocumentGeneral success after verifying IdentifiedPersonOrDeviceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"SRDocumentGeneral", 
			"CustodialOrganizationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentGeneral success after verifying CustodialOrganizationSequence" + ("success" if partial_success else "failure")) 
	if "CustodialOrganizationSequence" in ds:
		CustodialOrganizationSequence_data = ds.CustodialOrganizationSequence
		if type(CustodialOrganizationSequence_data) == Sequence:
			for i1 in range(0, len(CustodialOrganizationSequence_data)):
				if verbose:
					log.append( " CustodialOrganizationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CustodialOrganizationSequence_data[i1]
				partial_success =  		verifyType2(ds1, 
						"SRDocumentGeneral", "InstitutionName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying InstitutionName --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"SRDocumentGeneral", 
						"InstitutionCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SRDocumentGeneral success after verifying InstitutionCodeSequence" + ("success" if partial_success else "failure")) 
				if "InstitutionCodeSequence" in ds1:
					InstitutionCodeSequence_data = ds1.InstitutionCodeSequence
					if type(InstitutionCodeSequence_data) == Sequence:
						for i2 in range(0, len(InstitutionCodeSequence_data)):
							if verbose:
								log.append( " InstitutionCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = InstitutionCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SRDocumentGeneral success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"SRDocumentGeneral", 
						"ResponsibleGroupCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SRDocumentGeneral success after verifying ResponsibleGroupCodeSequence" + ("success" if partial_success else "failure")) 
				if "ResponsibleGroupCodeSequence" in ds1:
					ResponsibleGroupCodeSequence_data = ds1.ResponsibleGroupCodeSequence
					if type(ResponsibleGroupCodeSequence_data) == Sequence:
						for i2 in range(0, len(ResponsibleGroupCodeSequence_data)):
							if verbose:
								log.append( " ResponsibleGroupCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ResponsibleGroupCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SRDocumentGeneral success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"SRDocumentGeneral", 
			"PredecessorDocumentsSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentGeneral success after verifying PredecessorDocumentsSequence" + ("success" if partial_success else "failure")) 
	if "PredecessorDocumentsSequence" in ds:
		PredecessorDocumentsSequence_data = ds.PredecessorDocumentsSequence
		if type(PredecessorDocumentsSequence_data) == Sequence:
			for i1 in range(0, len(PredecessorDocumentsSequence_data)):
				if verbose:
					log.append( " PredecessorDocumentsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PredecessorDocumentsSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SRDocumentGeneral success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"SRDocumentGeneral", 
			"IdenticalDocumentsSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentGeneral success after verifying IdenticalDocumentsSequence" + ("success" if partial_success else "failure")) 
	if "IdenticalDocumentsSequence" in ds:
		IdenticalDocumentsSequence_data = ds.IdenticalDocumentsSequence
		if type(IdenticalDocumentsSequence_data) == Sequence:
			for i1 in range(0, len(IdenticalDocumentsSequence_data)):
				if verbose:
					log.append( " IdenticalDocumentsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IdenticalDocumentsSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SRDocumentGeneral success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"SRDocumentGeneral", 
			"ReferencedRequestSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentGeneral success after verifying ReferencedRequestSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedRequestSequence" in ds:
		ReferencedRequestSequence_data = ds.ReferencedRequestSequence
		if type(ReferencedRequestSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedRequestSequence_data)):
				if verbose:
					log.append( " ReferencedRequestSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedRequestSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SRDocumentGeneral", "StudyInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"SRDocumentGeneral", 
						"ReferencedStudySequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SRDocumentGeneral success after verifying ReferencedStudySequence" + ("success" if partial_success else "failure")) 
				if "ReferencedStudySequence" in ds1:
					ReferencedStudySequence_data = ds1.ReferencedStudySequence
					if type(ReferencedStudySequence_data) == Sequence:
						for i2 in range(0, len(ReferencedStudySequence_data)):
							if verbose:
								log.append( " ReferencedStudySequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedStudySequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SRDocumentGeneral success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"SRDocumentGeneral", "AccessionNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying AccessionNumber --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SRDocumentGeneral", 
						"IssuerOfAccessionNumberSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SRDocumentGeneral success after verifying IssuerOfAccessionNumberSequence" + ("success" if partial_success else "failure")) 
				if "IssuerOfAccessionNumberSequence" in ds1:
					IssuerOfAccessionNumberSequence_data = ds1.IssuerOfAccessionNumberSequence
					if type(IssuerOfAccessionNumberSequence_data) == Sequence:
						for i2 in range(0, len(IssuerOfAccessionNumberSequence_data)):
							if verbose:
								log.append( " IssuerOfAccessionNumberSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IssuerOfAccessionNumberSequence_data[i2]
							partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SRDocumentGeneral success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"SRDocumentGeneral", "PlacerOrderNumberImagingServiceRequest", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying PlacerOrderNumberImagingServiceRequest --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SRDocumentGeneral", 
						"OrderPlacerIdentifierSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SRDocumentGeneral success after verifying OrderPlacerIdentifierSequence" + ("success" if partial_success else "failure")) 
				if "OrderPlacerIdentifierSequence" in ds1:
					OrderPlacerIdentifierSequence_data = ds1.OrderPlacerIdentifierSequence
					if type(OrderPlacerIdentifierSequence_data) == Sequence:
						for i2 in range(0, len(OrderPlacerIdentifierSequence_data)):
							if verbose:
								log.append( " OrderPlacerIdentifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OrderPlacerIdentifierSequence_data[i2]
							partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SRDocumentGeneral success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"SRDocumentGeneral", "FillerOrderNumberImagingServiceRequest", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying FillerOrderNumberImagingServiceRequest --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SRDocumentGeneral", 
						"OrderFillerIdentifierSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SRDocumentGeneral success after verifying OrderFillerIdentifierSequence" + ("success" if partial_success else "failure")) 
				if "OrderFillerIdentifierSequence" in ds1:
					OrderFillerIdentifierSequence_data = ds1.OrderFillerIdentifierSequence
					if type(OrderFillerIdentifierSequence_data) == Sequence:
						for i2 in range(0, len(OrderFillerIdentifierSequence_data)):
							if verbose:
								log.append( " OrderFillerIdentifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OrderFillerIdentifierSequence_data[i2]
							partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SRDocumentGeneral success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"SRDocumentGeneral", "RequestedProcedureID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying RequestedProcedureID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"SRDocumentGeneral", "RequestedProcedureDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying RequestedProcedureDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"SRDocumentGeneral", 
						"RequestedProcedureCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SRDocumentGeneral success after verifying RequestedProcedureCodeSequence" + ("success" if partial_success else "failure")) 
				if "RequestedProcedureCodeSequence" in ds1:
					RequestedProcedureCodeSequence_data = ds1.RequestedProcedureCodeSequence
					if type(RequestedProcedureCodeSequence_data) == Sequence:
						for i2 in range(0, len(RequestedProcedureCodeSequence_data)):
							if verbose:
								log.append( " RequestedProcedureCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RequestedProcedureCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SRDocumentGeneral success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"SRDocumentGeneral", "ReasonForTheRequestedProcedure", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SRDocumentGeneral success after verifying ReasonForTheRequestedProcedure --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"SRDocumentGeneral", 
						"ReasonForRequestedProcedureCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SRDocumentGeneral success after verifying ReasonForRequestedProcedureCodeSequence" + ("success" if partial_success else "failure")) 
				if "ReasonForRequestedProcedureCodeSequence" in ds1:
					ReasonForRequestedProcedureCodeSequence_data = ds1.ReasonForRequestedProcedureCodeSequence
					if type(ReasonForRequestedProcedureCodeSequence_data) == Sequence:
						for i2 in range(0, len(ReasonForRequestedProcedureCodeSequence_data)):
							if verbose:
								log.append( " ReasonForRequestedProcedureCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReasonForRequestedProcedureCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SRDocumentGeneral success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType2(ds, 
			"SRDocumentGeneral", 
			"PerformedProcedureCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentGeneral success after verifying PerformedProcedureCodeSequence" + ("success" if partial_success else "failure")) 
	if "PerformedProcedureCodeSequence" in ds:
		PerformedProcedureCodeSequence_data = ds.PerformedProcedureCodeSequence
		if type(PerformedProcedureCodeSequence_data) == Sequence:
			for i1 in range(0, len(PerformedProcedureCodeSequence_data)):
				if verbose:
					log.append( " PerformedProcedureCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerformedProcedureCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SRDocumentGeneral success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"SRDocumentGeneral", 
			"CurrentRequestedProcedureEvidenceSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentGeneral success after verifying CurrentRequestedProcedureEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "CurrentRequestedProcedureEvidenceSequence" in ds:
		CurrentRequestedProcedureEvidenceSequence_data = ds.CurrentRequestedProcedureEvidenceSequence
		if type(CurrentRequestedProcedureEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(CurrentRequestedProcedureEvidenceSequence_data)):
				if verbose:
					log.append( " CurrentRequestedProcedureEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CurrentRequestedProcedureEvidenceSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SRDocumentGeneral success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"SRDocumentGeneral", 
			"PertinentOtherEvidenceSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentGeneral success after verifying PertinentOtherEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "PertinentOtherEvidenceSequence" in ds:
		PertinentOtherEvidenceSequence_data = ds.PertinentOtherEvidenceSequence
		if type(PertinentOtherEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(PertinentOtherEvidenceSequence_data)):
				if verbose:
					log.append( " PertinentOtherEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PertinentOtherEvidenceSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SRDocumentGeneral success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"SRDocumentGeneral", 
			"ReferencedInstanceSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SRDocumentGeneral success after verifying ReferencedInstanceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedInstanceSequence" in ds:
		ReferencedInstanceSequence_data = ds.ReferencedInstanceSequence
		if type(ReferencedInstanceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedInstanceSequence_data)):
				if verbose:
					log.append( " ReferencedInstanceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedInstanceSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SRDocumentGeneral success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"SRDocumentGeneral", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SRDocumentGeneral success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SRDocumentGeneral success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_SRDocumentContent_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SRDocumentContent")

	partial_success =  Macro_DocumentContentMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SRDocumentContent success after verifying DocumentContentMacro"+ ("success" if partial_success else "failure" ))

	if Condition_ConceptNameCodeSequenceNotPresent(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" ConceptNameCodeSequence is required for root content item (in top level dataset) - attribute <ConceptNameCodeSequence>")

	partial_success =  Macro_DocumentRelationshipMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " SRDocumentContent success after verifying DocumentRelationshipMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_KeyObjectDocumentSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"KeyObjectDocumentSeries")

	partial_success =  		verifyType1(ds, 
			"KeyObjectDocumentSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocumentSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_KOModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocumentSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"KeyObjectDocumentSeries", "SeriesInstanceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocumentSeries success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"KeyObjectDocumentSeries", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocumentSeries success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"KeyObjectDocumentSeries", "SeriesDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocumentSeries success after verifying SeriesDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"KeyObjectDocumentSeries", "SeriesTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocumentSeries success after verifying SeriesTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"KeyObjectDocumentSeries", "ProtocolName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocumentSeries success after verifying ProtocolName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"KeyObjectDocumentSeries", "SeriesDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocumentSeries success after verifying SeriesDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"KeyObjectDocumentSeries", 
			"SeriesDescriptionCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeyObjectDocumentSeries success after verifying SeriesDescriptionCodeSequence" + ("success" if partial_success else "failure")) 
	if "SeriesDescriptionCodeSequence" in ds:
		SeriesDescriptionCodeSequence_data = ds.SeriesDescriptionCodeSequence
		if type(SeriesDescriptionCodeSequence_data) == Sequence:
			for i1 in range(0, len(SeriesDescriptionCodeSequence_data)):
				if verbose:
					log.append( " SeriesDescriptionCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SeriesDescriptionCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " KeyObjectDocumentSeries success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType2(ds, 
			"KeyObjectDocumentSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeyObjectDocumentSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " KeyObjectDocumentSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_KeyObjectDocument_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"KeyObjectDocument")

	partial_success =  		verifyType1(ds, 
			"KeyObjectDocument", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocument success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"KeyObjectDocument", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocument success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"KeyObjectDocument", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " KeyObjectDocument success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"KeyObjectDocument", 
			"ReferencedRequestSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeyObjectDocument success after verifying ReferencedRequestSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedRequestSequence" in ds:
		ReferencedRequestSequence_data = ds.ReferencedRequestSequence
		if type(ReferencedRequestSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedRequestSequence_data)):
				if verbose:
					log.append( " ReferencedRequestSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedRequestSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"KeyObjectDocument", "StudyInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeyObjectDocument success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"KeyObjectDocument", 
						"ReferencedStudySequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "KeyObjectDocument success after verifying ReferencedStudySequence" + ("success" if partial_success else "failure")) 
				if "ReferencedStudySequence" in ds1:
					ReferencedStudySequence_data = ds1.ReferencedStudySequence
					if type(ReferencedStudySequence_data) == Sequence:
						for i2 in range(0, len(ReferencedStudySequence_data)):
							if verbose:
								log.append( " ReferencedStudySequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedStudySequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " KeyObjectDocument success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"KeyObjectDocument", "AccessionNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeyObjectDocument success after verifying AccessionNumber --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"KeyObjectDocument", 
						"IssuerOfAccessionNumberSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "KeyObjectDocument success after verifying IssuerOfAccessionNumberSequence" + ("success" if partial_success else "failure")) 
				if "IssuerOfAccessionNumberSequence" in ds1:
					IssuerOfAccessionNumberSequence_data = ds1.IssuerOfAccessionNumberSequence
					if type(IssuerOfAccessionNumberSequence_data) == Sequence:
						for i2 in range(0, len(IssuerOfAccessionNumberSequence_data)):
							if verbose:
								log.append( " IssuerOfAccessionNumberSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IssuerOfAccessionNumberSequence_data[i2]
							partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " KeyObjectDocument success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"KeyObjectDocument", "PlacerOrderNumberImagingServiceRequest", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeyObjectDocument success after verifying PlacerOrderNumberImagingServiceRequest --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"KeyObjectDocument", 
						"OrderPlacerIdentifierSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "KeyObjectDocument success after verifying OrderPlacerIdentifierSequence" + ("success" if partial_success else "failure")) 
				if "OrderPlacerIdentifierSequence" in ds1:
					OrderPlacerIdentifierSequence_data = ds1.OrderPlacerIdentifierSequence
					if type(OrderPlacerIdentifierSequence_data) == Sequence:
						for i2 in range(0, len(OrderPlacerIdentifierSequence_data)):
							if verbose:
								log.append( " OrderPlacerIdentifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OrderPlacerIdentifierSequence_data[i2]
							partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " KeyObjectDocument success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"KeyObjectDocument", "FillerOrderNumberImagingServiceRequest", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeyObjectDocument success after verifying FillerOrderNumberImagingServiceRequest --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"KeyObjectDocument", 
						"OrderFillerIdentifierSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "KeyObjectDocument success after verifying OrderFillerIdentifierSequence" + ("success" if partial_success else "failure")) 
				if "OrderFillerIdentifierSequence" in ds1:
					OrderFillerIdentifierSequence_data = ds1.OrderFillerIdentifierSequence
					if type(OrderFillerIdentifierSequence_data) == Sequence:
						for i2 in range(0, len(OrderFillerIdentifierSequence_data)):
							if verbose:
								log.append( " OrderFillerIdentifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OrderFillerIdentifierSequence_data[i2]
							partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " KeyObjectDocument success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"KeyObjectDocument", "RequestedProcedureID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeyObjectDocument success after verifying RequestedProcedureID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"KeyObjectDocument", "RequestedProcedureDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeyObjectDocument success after verifying RequestedProcedureDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"KeyObjectDocument", 
						"RequestedProcedureCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "KeyObjectDocument success after verifying RequestedProcedureCodeSequence" + ("success" if partial_success else "failure")) 
				if "RequestedProcedureCodeSequence" in ds1:
					RequestedProcedureCodeSequence_data = ds1.RequestedProcedureCodeSequence
					if type(RequestedProcedureCodeSequence_data) == Sequence:
						for i2 in range(0, len(RequestedProcedureCodeSequence_data)):
							if verbose:
								log.append( " RequestedProcedureCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RequestedProcedureCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " KeyObjectDocument success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"KeyObjectDocument", "ReasonForTheRequestedProcedure", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " KeyObjectDocument success after verifying ReasonForTheRequestedProcedure --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"KeyObjectDocument", 
						"ReasonForRequestedProcedureCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "KeyObjectDocument success after verifying ReasonForRequestedProcedureCodeSequence" + ("success" if partial_success else "failure")) 
				if "ReasonForRequestedProcedureCodeSequence" in ds1:
					ReasonForRequestedProcedureCodeSequence_data = ds1.ReasonForRequestedProcedureCodeSequence
					if type(ReasonForRequestedProcedureCodeSequence_data) == Sequence:
						for i2 in range(0, len(ReasonForRequestedProcedureCodeSequence_data)):
							if verbose:
								log.append( " ReasonForRequestedProcedureCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReasonForRequestedProcedureCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " KeyObjectDocument success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"KeyObjectDocument", 
			"CurrentRequestedProcedureEvidenceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeyObjectDocument success after verifying CurrentRequestedProcedureEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "CurrentRequestedProcedureEvidenceSequence" in ds:
		CurrentRequestedProcedureEvidenceSequence_data = ds.CurrentRequestedProcedureEvidenceSequence
		if type(CurrentRequestedProcedureEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(CurrentRequestedProcedureEvidenceSequence_data)):
				if verbose:
					log.append( " CurrentRequestedProcedureEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CurrentRequestedProcedureEvidenceSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " KeyObjectDocument success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"KeyObjectDocument", 
			"IdenticalDocumentsSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "KeyObjectDocument success after verifying IdenticalDocumentsSequence" + ("success" if partial_success else "failure")) 
	if "IdenticalDocumentsSequence" in ds:
		IdenticalDocumentsSequence_data = ds.IdenticalDocumentsSequence
		if type(IdenticalDocumentsSequence_data) == Sequence:
			for i1 in range(0, len(IdenticalDocumentsSequence_data)):
				if verbose:
					log.append( " IdenticalDocumentsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IdenticalDocumentsSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " KeyObjectDocument success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_IHEXDSIManifestProfile_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IHEXDSIManifestProfile")

	partial_success = verifyType1(ds, 
			"IHEXDSIManifestProfile", 
			"CurrentRequestedProcedureEvidenceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IHEXDSIManifestProfile success after verifying CurrentRequestedProcedureEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "CurrentRequestedProcedureEvidenceSequence" in ds:
		CurrentRequestedProcedureEvidenceSequence_data = ds.CurrentRequestedProcedureEvidenceSequence
		if type(CurrentRequestedProcedureEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(CurrentRequestedProcedureEvidenceSequence_data)):
				if verbose:
					log.append( " CurrentRequestedProcedureEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CurrentRequestedProcedureEvidenceSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IHEXDSIManifestProfile success after verifying HierarchicalSOPInstanceReferenceIHEXDSIManifestProfileMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_IHEREMProfile_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IHEREMProfile")

	partial_success =  		verifyType1(ds, 
			"IHEREMProfile", "SeriesDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEREMProfile success after verifying SeriesDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"IHEREMProfile", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IHEREMProfile success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IHEREMProfile success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"IHEREMProfile", 
			"PerformedProcedureCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IHEREMProfile success after verifying PerformedProcedureCodeSequence" + ("success" if partial_success else "failure")) 
	if "PerformedProcedureCodeSequence" in ds:
		PerformedProcedureCodeSequence_data = ds.PerformedProcedureCodeSequence
		if type(PerformedProcedureCodeSequence_data) == Sequence:
			for i1 in range(0, len(PerformedProcedureCodeSequence_data)):
				if verbose:
					log.append( " PerformedProcedureCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerformedProcedureCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IHEREMProfile success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"IHEREMProfile", 
			"ReferencedRequestSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IHEREMProfile success after verifying ReferencedRequestSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedRequestSequence" in ds:
		ReferencedRequestSequence_data = ds.ReferencedRequestSequence
		if type(ReferencedRequestSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedRequestSequence_data)):
				if verbose:
					log.append( " ReferencedRequestSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedRequestSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"IHEREMProfile", "StudyInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IHEREMProfile success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"IHEREMProfile", 
						"ReferencedStudySequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IHEREMProfile success after verifying ReferencedStudySequence" + ("success" if partial_success else "failure")) 
				if "ReferencedStudySequence" in ds1:
					ReferencedStudySequence_data = ds1.ReferencedStudySequence
					if type(ReferencedStudySequence_data) == Sequence:
						for i2 in range(0, len(ReferencedStudySequence_data)):
							if verbose:
								log.append( " ReferencedStudySequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedStudySequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IHEREMProfile success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"IHEREMProfile", "AccessionNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IHEREMProfile success after verifying AccessionNumber --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"IHEREMProfile", 
						"IssuerOfAccessionNumberSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IHEREMProfile success after verifying IssuerOfAccessionNumberSequence" + ("success" if partial_success else "failure")) 
				if "IssuerOfAccessionNumberSequence" in ds1:
					IssuerOfAccessionNumberSequence_data = ds1.IssuerOfAccessionNumberSequence
					if type(IssuerOfAccessionNumberSequence_data) == Sequence:
						for i2 in range(0, len(IssuerOfAccessionNumberSequence_data)):
							if verbose:
								log.append( " IssuerOfAccessionNumberSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = IssuerOfAccessionNumberSequence_data[i2]
							partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IHEREMProfile success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"IHEREMProfile", "PlacerOrderNumberImagingServiceRequest", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IHEREMProfile success after verifying PlacerOrderNumberImagingServiceRequest --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"IHEREMProfile", 
						"OrderPlacerIdentifierSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IHEREMProfile success after verifying OrderPlacerIdentifierSequence" + ("success" if partial_success else "failure")) 
				if "OrderPlacerIdentifierSequence" in ds1:
					OrderPlacerIdentifierSequence_data = ds1.OrderPlacerIdentifierSequence
					if type(OrderPlacerIdentifierSequence_data) == Sequence:
						for i2 in range(0, len(OrderPlacerIdentifierSequence_data)):
							if verbose:
								log.append( " OrderPlacerIdentifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OrderPlacerIdentifierSequence_data[i2]
							partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IHEREMProfile success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"IHEREMProfile", "FillerOrderNumberImagingServiceRequest", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IHEREMProfile success after verifying FillerOrderNumberImagingServiceRequest --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"IHEREMProfile", 
						"OrderFillerIdentifierSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IHEREMProfile success after verifying OrderFillerIdentifierSequence" + ("success" if partial_success else "failure")) 
				if "OrderFillerIdentifierSequence" in ds1:
					OrderFillerIdentifierSequence_data = ds1.OrderFillerIdentifierSequence
					if type(OrderFillerIdentifierSequence_data) == Sequence:
						for i2 in range(0, len(OrderFillerIdentifierSequence_data)):
							if verbose:
								log.append( " OrderFillerIdentifierSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OrderFillerIdentifierSequence_data[i2]
							partial_success =  Macro_HL7v2HierarchicDesignatorMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IHEREMProfile success after verifying HL7v2HierarchicDesignatorMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"IHEREMProfile", "RequestedProcedureID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IHEREMProfile success after verifying RequestedProcedureID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"IHEREMProfile", "RequestedProcedureDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IHEREMProfile success after verifying RequestedProcedureDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"IHEREMProfile", 
						"RequestedProcedureCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IHEREMProfile success after verifying RequestedProcedureCodeSequence" + ("success" if partial_success else "failure")) 
				if "RequestedProcedureCodeSequence" in ds1:
					RequestedProcedureCodeSequence_data = ds1.RequestedProcedureCodeSequence
					if type(RequestedProcedureCodeSequence_data) == Sequence:
						for i2 in range(0, len(RequestedProcedureCodeSequence_data)):
							if verbose:
								log.append( " RequestedProcedureCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = RequestedProcedureCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IHEREMProfile success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"IHEREMProfile", "ReasonForTheRequestedProcedure", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " IHEREMProfile success after verifying ReasonForTheRequestedProcedure --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"IHEREMProfile", 
						"ReasonForRequestedProcedureCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "IHEREMProfile success after verifying ReasonForRequestedProcedureCodeSequence" + ("success" if partial_success else "failure")) 
				if "ReasonForRequestedProcedureCodeSequence" in ds1:
					ReasonForRequestedProcedureCodeSequence_data = ds1.ReasonForRequestedProcedureCodeSequence
					if type(ReasonForRequestedProcedureCodeSequence_data) == Sequence:
						for i2 in range(0, len(ReasonForRequestedProcedureCodeSequence_data)):
							if verbose:
								log.append( " ReasonForRequestedProcedureCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReasonForRequestedProcedureCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " IHEREMProfile success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"IHEREMProfile", "AdmittingDiagnosesDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEREMProfile success after verifying AdmittingDiagnosesDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"IHEREMProfile", 
			"AdmittingDiagnosesCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "IHEREMProfile success after verifying AdmittingDiagnosesCodeSequence" + ("success" if partial_success else "failure")) 
	if "AdmittingDiagnosesCodeSequence" in ds:
		AdmittingDiagnosesCodeSequence_data = ds.AdmittingDiagnosesCodeSequence
		if type(AdmittingDiagnosesCodeSequence_data) == Sequence:
			for i1 in range(0, len(AdmittingDiagnosesCodeSequence_data)):
				if verbose:
					log.append( " AdmittingDiagnosesCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AdmittingDiagnosesCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " IHEREMProfile success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"IHEREMProfile", "PatientWeight", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEREMProfile success after verifying PatientWeight --> "+("success" if partial_success else "failure"))

	if "PatientWeight" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["PatientWeight"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"IHEREMProfile", "PatientSize", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEREMProfile success after verifying PatientSize --> "+("success" if partial_success else "failure"))

	if "PatientSize" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["PatientSize"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"IHEREMProfile", "PatientAge", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEREMProfile success after verifying PatientAge --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"IHEREMProfile", "PatientSex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IHEREMProfile success after verifying PatientSex --> "+("success" if partial_success else "failure"))

	return global_success

def Module_BitmapDisplayShutter_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"BitmapDisplayShutter")

	partial_success =  		verifyType1(ds, 
			"BitmapDisplayShutter", "ShutterShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BitmapDisplayShutter success after verifying ShutterShape --> "+("success" if partial_success else "failure"))

	if "ShutterShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ShutterShape"], 
			StringValueTable_BitmapShutterShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BitmapDisplayShutter success after verifying string enumerated values ShutterShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"BitmapDisplayShutter", "ShutterOverlayGroup", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BitmapDisplayShutter success after verifying ShutterOverlayGroup --> "+("success" if partial_success else "failure"))

	if "ShutterOverlayGroup" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["ShutterOverlayGroup"], 
			BinaryValueDescription_AllPossibleOverlayGroups, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BitmapDisplayShutter success after verifying binary enumerated values ShutterOverlayGroup --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"BitmapDisplayShutter", "ShutterPresentationValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BitmapDisplayShutter success after verifying ShutterPresentationValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"BitmapDisplayShutter", "ShutterPresentationColorCIELabValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " BitmapDisplayShutter success after verifying ShutterPresentationColorCIELabValue --> "+("success" if partial_success else "failure"))

	return global_success

def Module_DisplayedArea_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"DisplayedArea")

	partial_success = verifyType1(ds, 
			"DisplayedArea", 
			"DisplayedAreaSelectionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "DisplayedArea success after verifying DisplayedAreaSelectionSequence" + ("success" if partial_success else "failure")) 
	if "DisplayedAreaSelectionSequence" in ds:
		DisplayedAreaSelectionSequence_data = ds.DisplayedAreaSelectionSequence
		if type(DisplayedAreaSelectionSequence_data) == Sequence:
			for i1 in range(0, len(DisplayedAreaSelectionSequence_data)):
				if verbose:
					log.append( " DisplayedAreaSelectionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DisplayedAreaSelectionSequence_data[i1]
				partial_success = verifyType1C(ds1, 
						"DisplayedArea", 
						"ReferencedImageSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "DisplayedArea success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedImageSequence" in ds1:
					ReferencedImageSequence_data = ds1.ReferencedImageSequence
					if type(ReferencedImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedImageSequence_data)):
							if verbose:
								log.append( " ReferencedImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedImageSequence_data[i2]
							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " DisplayedArea success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"DisplayedArea", "PixelOriginInterpretation", 
						verbose, log, ElementDictionary, 
						Condition_VLWholeSlideMicroscopyImageInstance, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DisplayedArea success after verifying PixelOriginInterpretation --> "+("success" if partial_success else "failure"))

				if Condition_VLWholeSlideMicroscopyImageInstance(ds1, parent_ds1, root_ds):
					if "PixelOriginInterpretation" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["PixelOriginInterpretation"], 
							StringValueTable_PixelOriginInterpretation, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " DisplayedArea success after verifying string enumerated values PixelOriginInterpretation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DisplayedArea", "DisplayedAreaTopLeftHandCorner", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DisplayedArea success after verifying DisplayedAreaTopLeftHandCorner --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DisplayedArea", "DisplayedAreaBottomRightHandCorner", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DisplayedArea success after verifying DisplayedAreaBottomRightHandCorner --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"DisplayedArea", "PresentationSizeMode", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DisplayedArea success after verifying PresentationSizeMode --> "+("success" if partial_success else "failure"))

				if "PresentationSizeMode" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["PresentationSizeMode"], 
						StringValueTable_PresentationSizeMode, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DisplayedArea success after verifying string enumerated values PresentationSizeMode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"DisplayedArea", "PresentationPixelSpacing", 
						verbose, log, ElementDictionary, 
						Condition_RequirePresentationPixelSpacing, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DisplayedArea success after verifying PresentationPixelSpacing --> "+("success" if partial_success else "failure"))

				if Condition_RequirePresentationPixelSpacing(ds1, parent_ds1, root_ds):
					if "PresentationPixelSpacing" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["PresentationPixelSpacing"], 
							verbose, log, -1, False)

				partial_success =  		verifyType1C(ds1, 
						"DisplayedArea", "PresentationPixelAspectRatio", 
						verbose, log, ElementDictionary, 
						Condition_RequirePresentationPixelAspectRatio, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DisplayedArea success after verifying PresentationPixelAspectRatio --> "+("success" if partial_success else "failure"))

				if Condition_RequirePresentationPixelAspectRatio(ds1, parent_ds1, root_ds):
					if "PresentationPixelAspectRatio" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["PresentationPixelAspectRatio"], 
							verbose, log, -1, False)

				partial_success =  		verifyType1C(ds1, 
						"DisplayedArea", "PresentationPixelMagnificationRatio", 
						verbose, log, ElementDictionary, 
						Condition_RequirePresentationPixelMagnificationRatio, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " DisplayedArea success after verifying PresentationPixelMagnificationRatio --> "+("success" if partial_success else "failure"))

				if Condition_RequirePresentationPixelMagnificationRatio(ds1, parent_ds1, root_ds):
					if "PresentationPixelMagnificationRatio" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["PresentationPixelMagnificationRatio"], 
							verbose, log, -1, False)

	return global_success

def Module_GraphicAnnotation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"GraphicAnnotation")

	partial_success = verifyType1(ds, 
			"GraphicAnnotation", 
			"GraphicAnnotationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GraphicAnnotation success after verifying GraphicAnnotationSequence" + ("success" if partial_success else "failure")) 
	if "GraphicAnnotationSequence" in ds:
		GraphicAnnotationSequence_data = ds.GraphicAnnotationSequence
		if type(GraphicAnnotationSequence_data) == Sequence:
			for i1 in range(0, len(GraphicAnnotationSequence_data)):
				if verbose:
					log.append( " GraphicAnnotationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = GraphicAnnotationSequence_data[i1]
				partial_success = verifyType1C(ds1, 
						"GraphicAnnotation", 
						"ReferencedImageSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "GraphicAnnotation success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedImageSequence" in ds1:
					ReferencedImageSequence_data = ds1.ReferencedImageSequence
					if type(ReferencedImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedImageSequence_data)):
							if verbose:
								log.append( " ReferencedImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedImageSequence_data[i2]
							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " GraphicAnnotation success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1(ds1, 
						"GraphicAnnotation", "GraphicLayer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " GraphicAnnotation success after verifying GraphicLayer --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"GraphicAnnotation", 
						"TextObjectSequence", 
						verbose, log, ElementDictionary, 
						Condition_RequireTextObjectSequence, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "GraphicAnnotation success after verifying TextObjectSequence" + ("success" if partial_success else "failure")) 
				if "TextObjectSequence" in ds1:
					TextObjectSequence_data = ds1.TextObjectSequence
					if type(TextObjectSequence_data) == Sequence:
						for i2 in range(0, len(TextObjectSequence_data)):
							if verbose:
								log.append( " TextObjectSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = TextObjectSequence_data[i2]
							partial_success =  		verifyType1C(ds2, 
									"GraphicAnnotation", "BoundingBoxAnnotationUnits", 
									verbose, log, ElementDictionary, 
									Condition_BoundingBoxTopLeftHandCornerOrBottomRightHandCornerPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying BoundingBoxAnnotationUnits --> "+("success" if partial_success else "failure"))

							if Condition_BoundingBoxTopLeftHandCornerOrBottomRightHandCornerPresent(ds2, parent_ds2, root_ds):
								if "BoundingBoxAnnotationUnits" not in ds2: 
									partial_success = False 
								else:
									partial_success = verifyEnumValues(ds2["BoundingBoxAnnotationUnits"], 
										StringValueTable_AnnotationUnits, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying string enumerated values BoundingBoxAnnotationUnits --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"GraphicAnnotation", "AnchorPointAnnotationUnits", 
									verbose, log, ElementDictionary, 
									Condition_AnchorPointPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying AnchorPointAnnotationUnits --> "+("success" if partial_success else "failure"))

							if Condition_AnchorPointPresent(ds2, parent_ds2, root_ds):
								if "AnchorPointAnnotationUnits" not in ds2: 
									partial_success = False 
								else:
									partial_success = verifyEnumValues(ds2["AnchorPointAnnotationUnits"], 
										StringValueTable_AnnotationUnits, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying string enumerated values AnchorPointAnnotationUnits --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"GraphicAnnotation", "UnformattedTextValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying UnformattedTextValue --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"GraphicAnnotation", "BoundingBoxTopLeftHandCorner", 
									verbose, log, ElementDictionary, 
									Condition_BoundingBoxNeeded, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying BoundingBoxTopLeftHandCorner --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"GraphicAnnotation", "BoundingBoxBottomRightHandCorner", 
									verbose, log, ElementDictionary, 
									Condition_BoundingBoxNeeded, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying BoundingBoxBottomRightHandCorner --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"GraphicAnnotation", "BoundingBoxTextHorizontalJustification", 
									verbose, log, ElementDictionary, 
									Condition_BoundingBoxTopLeftHandCornerPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying BoundingBoxTextHorizontalJustification --> "+("success" if partial_success else "failure"))

							if Condition_BoundingBoxTopLeftHandCornerPresent(ds2, parent_ds2, root_ds):
								if "BoundingBoxTextHorizontalJustification" not in ds2: 
									partial_success = False 
								else:
									partial_success = verifyEnumValues(ds2["BoundingBoxTextHorizontalJustification"], 
										StringValueTable_BoundingBoxTextHorizontalJustification, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying string enumerated values BoundingBoxTextHorizontalJustification --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"GraphicAnnotation", "AnchorPoint", 
									verbose, log, ElementDictionary, 
									Condition_AnchorPointNeeded, 
									True, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying AnchorPoint --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"GraphicAnnotation", "AnchorPointVisibility", 
									verbose, log, ElementDictionary, 
									Condition_AnchorPointPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying AnchorPointVisibility --> "+("success" if partial_success else "failure"))

							if Condition_AnchorPointPresent(ds2, parent_ds2, root_ds):
								if "AnchorPointVisibility" not in ds2: 
									partial_success = False 
								else:
									partial_success = verifyEnumValues(ds2["AnchorPointVisibility"], 
										StringValueTable_YesNoLetter, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying string enumerated values AnchorPointVisibility --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"GraphicAnnotation", "TrackingID", 
									verbose, log, ElementDictionary, 
									Condition_TrackingUIDIsPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying TrackingID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"GraphicAnnotation", "TrackingUID", 
									verbose, log, ElementDictionary, 
									Condition_TrackingIDIsPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying TrackingUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"GraphicAnnotation", 
						"GraphicObjectSequence", 
						verbose, log, ElementDictionary, 
						Condition_RequireGraphicObjectSequence, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "GraphicAnnotation success after verifying GraphicObjectSequence" + ("success" if partial_success else "failure")) 
				if "GraphicObjectSequence" in ds1:
					GraphicObjectSequence_data = ds1.GraphicObjectSequence
					if type(GraphicObjectSequence_data) == Sequence:
						for i2 in range(0, len(GraphicObjectSequence_data)):
							if verbose:
								log.append( " GraphicObjectSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = GraphicObjectSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"GraphicAnnotation", "GraphicAnnotationUnits", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying GraphicAnnotationUnits --> "+("success" if partial_success else "failure"))

							if "GraphicAnnotationUnits" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["GraphicAnnotationUnits"], 
									StringValueTable_AnnotationUnits, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying string enumerated values GraphicAnnotationUnits --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"GraphicAnnotation", "GraphicDimensions", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying GraphicDimensions --> "+("success" if partial_success else "failure"))

							if "GraphicDimensions" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues_uint16(ds2["GraphicDimensions"], 
									BinaryValueDescription_Two, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying binary enumerated values GraphicDimensions --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"GraphicAnnotation", "NumberOfGraphicPoints", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying NumberOfGraphicPoints --> "+("success" if partial_success else "failure"))

							if "NumberOfGraphicPoints" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyNotZero(ds2["NumberOfGraphicPoints"], 
									verbose, log, -1, False)

							partial_success =  		verifyType1(ds2, 
									"GraphicAnnotation", "GraphicData", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying GraphicData --> "+("success" if partial_success else "failure"))


							if not Condition_GraphicTypeIsPOINT(ds2, parent_ds2, root_ds):
								if "GraphicData" not in ds2: 
									partial_success = False 
								else: 
									partial_success = verifyVM(ds2["name"], 
										"GraphicAnnotation", "GraphicData", log, ElementDictionary, 2, 2, "GraphicTypeIsPOINT")


							if not Condition_GraphicTypeIsCIRCLE(ds2, parent_ds2, root_ds):
								if "GraphicData" not in ds2: 
									partial_success = False 
								else: 
									partial_success = verifyVM(ds2["name"], 
										"GraphicAnnotation", "GraphicData", log, ElementDictionary, 4, 4, "GraphicTypeIsCIRCLE")


							if not Condition_GraphicTypeIsELLIPSE(ds2, parent_ds2, root_ds):
								if "GraphicData" not in ds2: 
									partial_success = False 
								else: 
									partial_success = verifyVM(ds2["name"], 
										"GraphicAnnotation", "GraphicData", log, ElementDictionary, 8, 8, "GraphicTypeIsELLIPSE")

							partial_success =  		verifyType1(ds2, 
									"GraphicAnnotation", "GraphicType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying GraphicType --> "+("success" if partial_success else "failure"))

							if "GraphicType" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["GraphicType"], 
									StringValueTable_GraphicType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying string enumerated values GraphicType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"GraphicAnnotation", "GraphicFilled", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying GraphicFilled --> "+("success" if partial_success else "failure"))

							if "GraphicFilled" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["GraphicFilled"], 
									StringValueTable_YesNoLetter, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying string enumerated values GraphicFilled --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"GraphicAnnotation", "TrackingID", 
									verbose, log, ElementDictionary, 
									Condition_TrackingUIDIsPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying TrackingID --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"GraphicAnnotation", "TrackingUID", 
									verbose, log, ElementDictionary, 
									Condition_TrackingIDIsPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " GraphicAnnotation success after verifying TrackingUID --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SpatialTransformation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SpatialTransformation")

	partial_success =  		verifyType1(ds, 
			"SpatialTransformation", "ImageRotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialTransformation success after verifying ImageRotation --> "+("success" if partial_success else "failure"))

	if "ImageRotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["ImageRotation"], 
			BinaryValueDescription_ImageRotationValues, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialTransformation success after verifying binary enumerated values ImageRotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"SpatialTransformation", "ImageHorizontalFlip", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialTransformation success after verifying ImageHorizontalFlip --> "+("success" if partial_success else "failure"))

	if "ImageHorizontalFlip" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageHorizontalFlip"], 
			StringValueTable_YesNoLetter, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SpatialTransformation success after verifying string enumerated values ImageHorizontalFlip --> "+("success" if partial_success else "failure"))

	return global_success

def Module_GraphicLayer_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"GraphicLayer")

	partial_success = verifyType1(ds, 
			"GraphicLayer", 
			"GraphicLayerSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "GraphicLayer success after verifying GraphicLayerSequence" + ("success" if partial_success else "failure")) 
	if "GraphicLayerSequence" in ds:
		GraphicLayerSequence_data = ds.GraphicLayerSequence
		if type(GraphicLayerSequence_data) == Sequence:
			for i1 in range(0, len(GraphicLayerSequence_data)):
				if verbose:
					log.append( " GraphicLayerSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = GraphicLayerSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"GraphicLayer", "GraphicLayer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " GraphicLayer success after verifying GraphicLayer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"GraphicLayer", "GraphicLayerOrder", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " GraphicLayer success after verifying GraphicLayerOrder --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"GraphicLayer", "GraphicLayerRecommendedDisplayGrayscaleValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " GraphicLayer success after verifying GraphicLayerRecommendedDisplayGrayscaleValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"GraphicLayer", "GraphicLayerRecommendedDisplayCIELabValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " GraphicLayer success after verifying GraphicLayerRecommendedDisplayCIELabValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"GraphicLayer", "GraphicLayerDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " GraphicLayer success after verifying GraphicLayerDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SoftcopyPresentationLUT_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SoftcopyPresentationLUT")

	partial_success = verifyType1C(ds, 
			"SoftcopyPresentationLUT", 
			"PresentationLUTSequence", 
			verbose, log, ElementDictionary, 
			Condition_PresentationLUTShapeNotPresent, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SoftcopyPresentationLUT success after verifying PresentationLUTSequence" + ("success" if partial_success else "failure")) 
	if "PresentationLUTSequence" in ds:
		PresentationLUTSequence_data = ds.PresentationLUTSequence
		if type(PresentationLUTSequence_data) == Sequence:
			for i1 in range(0, len(PresentationLUTSequence_data)):
				if verbose:
					log.append( " PresentationLUTSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PresentationLUTSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"SoftcopyPresentationLUT", "LUTDescriptor", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SoftcopyPresentationLUT success after verifying LUTDescriptor --> "+("success" if partial_success else "failure"))


				if "LUTDescriptor" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["LUTDescriptor"], 
						BinaryValueDescription_BitsAre8To16, 
						verbose, log, 2)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SoftcopyPresentationLUT success after verifying binary enumerated values LUTDescriptor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"SoftcopyPresentationLUT", "LUTExplanation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SoftcopyPresentationLUT success after verifying LUTExplanation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"SoftcopyPresentationLUT", "LUTData", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " SoftcopyPresentationLUT success after verifying LUTData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"SoftcopyPresentationLUT", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			Condition_PresentationLUTSequenceNotPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " SoftcopyPresentationLUT success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if Condition_PresentationLUTSequenceNotPresent(ds, parent_ds, root_ds):
		if "PresentationLUTShape" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
				StringValueTable_SoftcopyPresentationLUTShape, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " SoftcopyPresentationLUT success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	return global_success

def Module_OverlayActivation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"OverlayActivation")

	partial_success =  		verifyType2C(ds, 
			"OverlayActivation", "OverlayActivationLayer", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " OverlayActivation success after verifying OverlayActivationLayer --> "+("success" if partial_success else "failure"))

	return global_success

def Module_SoftcopyVOILUT_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"SoftcopyVOILUT")

	partial_success = verifyType1(ds, 
			"SoftcopyVOILUT", 
			"SoftcopyVOILUTSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "SoftcopyVOILUT success after verifying SoftcopyVOILUTSequence" + ("success" if partial_success else "failure")) 
	if "SoftcopyVOILUTSequence" in ds:
		SoftcopyVOILUTSequence_data = ds.SoftcopyVOILUTSequence
		if type(SoftcopyVOILUTSequence_data) == Sequence:
			for i1 in range(0, len(SoftcopyVOILUTSequence_data)):
				if verbose:
					log.append( " SoftcopyVOILUTSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SoftcopyVOILUTSequence_data[i1]
				partial_success = verifyType1C(ds1, 
						"SoftcopyVOILUT", 
						"ReferencedImageSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "SoftcopyVOILUT success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedImageSequence" in ds1:
					ReferencedImageSequence_data = ds1.ReferencedImageSequence
					if type(ReferencedImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedImageSequence_data)):
							if verbose:
								log.append( " ReferencedImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedImageSequence_data[i2]
							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " SoftcopyVOILUT success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_VOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " SoftcopyVOILUT success after verifying VOILUTMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_PresentationSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"PresentationSeries")

	partial_success =  		verifyType1(ds, 
			"PresentationSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PresentationSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_PresentationStateModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PresentationSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	return global_success

def Module_PresentationStateIdentification_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"PresentationStateIdentification")

	partial_success =  		verifyType1(ds, 
			"PresentationStateIdentification", "PresentationCreationDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PresentationStateIdentification success after verifying PresentationCreationDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"PresentationStateIdentification", "PresentationCreationTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PresentationStateIdentification success after verifying PresentationCreationTime --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " PresentationStateIdentification success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_PresentationStateRelationshipMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PresentationStateRelationshipMacro")

	partial_success = verifyType1(ds, 
			"PresentationStateRelationshipMacro", 
			"ReferencedSeriesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PresentationStateRelationshipMacro success after verifying ReferencedSeriesSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSeriesSequence" in ds:
		ReferencedSeriesSequence_data = ds.ReferencedSeriesSequence
		if type(ReferencedSeriesSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSeriesSequence_data)):
				if verbose:
					log.append( " ReferencedSeriesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSeriesSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PresentationStateRelationshipMacro", "SeriesInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PresentationStateRelationshipMacro success after verifying SeriesInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"PresentationStateRelationshipMacro", 
						"ReferencedImageSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "PresentationStateRelationshipMacro success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedImageSequence" in ds1:
					ReferencedImageSequence_data = ds1.ReferencedImageSequence
					if type(ReferencedImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedImageSequence_data)):
							if verbose:
								log.append( " ReferencedImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedImageSequence_data[i2]
							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " PresentationStateRelationshipMacro success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_PresentationStateRelationship_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"PresentationStateRelationship")

	partial_success =  Macro_PresentationStateRelationshipMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " PresentationStateRelationship success after verifying PresentationStateRelationshipMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_PresentationStateShutter_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"PresentationStateShutter")

	partial_success =  		verifyType1C(ds, 
			"PresentationStateShutter", "ShutterPresentationValue", 
			verbose, log, ElementDictionary, 
			Condition_DisplayOrBitmapDisplayShutterModulePresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PresentationStateShutter success after verifying ShutterPresentationValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PresentationStateShutter", "ShutterPresentationColorCIELabValue", 
			verbose, log, ElementDictionary, 
			Condition_DisplayOrBitmapDisplayShutterModulePresentAndNotGrayscaleSoftcopyPresentationState, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PresentationStateShutter success after verifying ShutterPresentationColorCIELabValue --> "+("success" if partial_success else "failure"))

	return global_success

def Module_PresentationStateMask_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"PresentationStateMask")

	partial_success = verifyType1C(ds, 
			"PresentationStateMask", 
			"MaskSubtractionSequence", 
			verbose, log, ElementDictionary, 
			Condition_MaskModulePresent, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PresentationStateMask success after verifying MaskSubtractionSequence" + ("success" if partial_success else "failure")) 
	if "MaskSubtractionSequence" in ds:
		MaskSubtractionSequence_data = ds.MaskSubtractionSequence
		if type(MaskSubtractionSequence_data) == Sequence:
			for i1 in range(0, len(MaskSubtractionSequence_data)):
				if verbose:
					log.append( " MaskSubtractionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MaskSubtractionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PresentationStateMask", "MaskOperation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PresentationStateMask success after verifying MaskOperation --> "+("success" if partial_success else "failure"))

				if "MaskOperation" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["MaskOperation"], 
						StringValueTable_MaskOperationForPresentationState, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PresentationStateMask success after verifying string enumerated values MaskOperation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PresentationStateMask", "ContrastFrameAveraging", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PresentationStateMask success after verifying ContrastFrameAveraging --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"PresentationStateMask", "RecommendedViewingMode", 
			verbose, log, ElementDictionary, 
			Condition_MaskModulePresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PresentationStateMask success after verifying RecommendedViewingMode --> "+("success" if partial_success else "failure"))

	if Condition_MaskModulePresent(ds, parent_ds, root_ds):
		if "RecommendedViewingMode" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["RecommendedViewingMode"], 
				StringValueTable_RecommendedViewingMode, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " PresentationStateMask success after verifying string enumerated values RecommendedViewingMode --> "+("success" if partial_success else "failure"))

	return global_success

def Module_PresentationStateBlending_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"PresentationStateBlending")

	partial_success = verifyType1(ds, 
			"PresentationStateBlending", 
			"BlendingSequence", 
			verbose, log, ElementDictionary, 
			2, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PresentationStateBlending success after verifying BlendingSequence" + ("success" if partial_success else "failure")) 
	if "BlendingSequence" in ds:
		BlendingSequence_data = ds.BlendingSequence
		if type(BlendingSequence_data) == Sequence:
			for i1 in range(0, len(BlendingSequence_data)):
				if verbose:
					log.append( " BlendingSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = BlendingSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PresentationStateBlending", "BlendingPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PresentationStateBlending success after verifying BlendingPosition --> "+("success" if partial_success else "failure"))

				if "BlendingPosition" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["BlendingPosition"], 
						StringValueTable_BlendingPosition, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PresentationStateBlending success after verifying string enumerated values BlendingPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"PresentationStateBlending", "StudyInstanceUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PresentationStateBlending success after verifying StudyInstanceUID --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_PresentationStateRelationshipMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PresentationStateBlending success after verifying PresentationStateRelationshipMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_ModalityLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PresentationStateBlending success after verifying ModalityLUTMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"PresentationStateBlending", 
						"SoftcopyVOILUTSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "PresentationStateBlending success after verifying SoftcopyVOILUTSequence" + ("success" if partial_success else "failure")) 
				if "SoftcopyVOILUTSequence" in ds1:
					SoftcopyVOILUTSequence_data = ds1.SoftcopyVOILUTSequence
					if type(SoftcopyVOILUTSequence_data) == Sequence:
						for i2 in range(0, len(SoftcopyVOILUTSequence_data)):
							if verbose:
								log.append( " SoftcopyVOILUTSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SoftcopyVOILUTSequence_data[i2]
							partial_success = verifyType1C(ds2, 
									"PresentationStateBlending", 
									"ReferencedImageSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "PresentationStateBlending success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedImageSequence" in ds2:
								ReferencedImageSequence_data = ds2.ReferencedImageSequence
								if type(ReferencedImageSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedImageSequence_data)):
										if verbose:
											log.append( " ReferencedImageSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedImageSequence_data[i3]
										partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " PresentationStateBlending success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  Macro_VOILUTMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " PresentationStateBlending success after verifying VOILUTMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"PresentationStateBlending", "RelativeOpacity", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " PresentationStateBlending success after verifying RelativeOpacity --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"PresentationStateBlending", 
			"ReferencedSpatialRegistrationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PresentationStateBlending success after verifying ReferencedSpatialRegistrationSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedSpatialRegistrationSequence" in ds:
		ReferencedSpatialRegistrationSequence_data = ds.ReferencedSpatialRegistrationSequence
		if type(ReferencedSpatialRegistrationSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedSpatialRegistrationSequence_data)):
				if verbose:
					log.append( " ReferencedSpatialRegistrationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedSpatialRegistrationSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " PresentationStateBlending success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_ICCProfile_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ICCProfile")

	partial_success =  		verifyType1(ds, 
			"ICCProfile", "ICCProfile", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ICCProfile success after verifying ICCProfile --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ICCProfile", "ColorSpace", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ICCProfile success after verifying ColorSpace --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_HangingProtocolSelectorAttributeContextMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"HangingProtocolSelectorAttributeContextMacro")

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeContextMacro", "SelectorSequencePointer", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeContextMacro success after verifying SelectorSequencePointer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeContextMacro", "FunctionalGroupPointer", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeContextMacro success after verifying FunctionalGroupPointer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeContextMacro", "SelectorSequencePointerPrivateCreator", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeContextMacro success after verifying SelectorSequencePointerPrivateCreator --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeContextMacro", "FunctionalGroupPrivateCreator", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeContextMacro success after verifying FunctionalGroupPrivateCreator --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeContextMacro", "SelectorAttributePrivateCreator", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeContextMacro success after verifying SelectorAttributePrivateCreator --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_HangingProtocolSelectorAttributeValueMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"HangingProtocolSelectorAttributeValueMacro")

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorATValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsAT, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorATValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorCSValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsCS, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorCSValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorISValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsIS, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorISValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorLOValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsLO, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorLOValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorLTValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsLT, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorLTValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorPNValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsPN, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorPNValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorSHValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsSH, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorSHValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorSTValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsST, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorSTValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorUTValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsUT, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorUTValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorDSValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsDS, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorDSValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorFDValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsFD, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorFDValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorFLValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsFL, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorFLValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorULValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsUL, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorULValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorUSValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsUS, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorUSValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorSLValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsSL, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorSLValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", "SelectorSSValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsSS, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying SelectorSSValue --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"HangingProtocolSelectorAttributeValueMacro", 
			"SelectorCodeSequenceValue", 
			verbose, log, ElementDictionary, 
			Condition_SelectorAttributeVRIsSQ, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HangingProtocolSelectorAttributeValueMacro success after verifying SelectorCodeSequenceValue" + ("success" if partial_success else "failure")) 
	if "SelectorCodeSequenceValue" in ds:
		SelectorCodeSequenceValue_data = ds.SelectorCodeSequenceValue
		if type(SelectorCodeSequenceValue_data) == Sequence:
			for i1 in range(0, len(SelectorCodeSequenceValue_data)):
				if verbose:
					log.append( " SelectorCodeSequenceValue item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SelectorCodeSequenceValue_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " HangingProtocolSelectorAttributeValueMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_HangingProtocolDefinition_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"HangingProtocolDefinition")

	partial_success =  		verifyType1(ds, 
			"HangingProtocolDefinition", "HangingProtocolName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDefinition success after verifying HangingProtocolName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"HangingProtocolDefinition", "HangingProtocolDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDefinition success after verifying HangingProtocolDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"HangingProtocolDefinition", "HangingProtocolLevel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDefinition success after verifying HangingProtocolLevel --> "+("success" if partial_success else "failure"))

	if "HangingProtocolLevel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["HangingProtocolLevel"], 
			StringValueTable_HangingProtocolLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDefinition success after verifying string enumerated values HangingProtocolLevel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"HangingProtocolDefinition", "HangingProtocolCreator", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDefinition success after verifying HangingProtocolCreator --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"HangingProtocolDefinition", "HangingProtocolCreationDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDefinition success after verifying HangingProtocolCreationDateTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"HangingProtocolDefinition", 
			"HangingProtocolDefinitionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HangingProtocolDefinition success after verifying HangingProtocolDefinitionSequence" + ("success" if partial_success else "failure")) 
	if "HangingProtocolDefinitionSequence" in ds:
		HangingProtocolDefinitionSequence_data = ds.HangingProtocolDefinitionSequence
		if type(HangingProtocolDefinitionSequence_data) == Sequence:
			for i1 in range(0, len(HangingProtocolDefinitionSequence_data)):
				if verbose:
					log.append( " HangingProtocolDefinitionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = HangingProtocolDefinitionSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"HangingProtocolDefinition", "Modality", 
						verbose, log, ElementDictionary, 
						Condition_AnatomicRegionSequenceNotPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDefinition success after verifying Modality --> "+("success" if partial_success else "failure"))

				if Condition_AnatomicRegionSequenceNotPresent(ds1, parent_ds1, root_ds):
					if "Modality" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["Modality"], 
							StringValueTable_Modality, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDefinition success after verifying string defined terms Modality --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"HangingProtocolDefinition", 
						"AnatomicRegionSequence", 
						verbose, log, ElementDictionary, 
						Condition_ModalityNotPresent, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HangingProtocolDefinition success after verifying AnatomicRegionSequence" + ("success" if partial_success else "failure")) 
				if "AnatomicRegionSequence" in ds1:
					AnatomicRegionSequence_data = ds1.AnatomicRegionSequence
					if type(AnatomicRegionSequence_data) == Sequence:
						for i2 in range(0, len(AnatomicRegionSequence_data)):
							if verbose:
								log.append( " AnatomicRegionSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AnatomicRegionSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " HangingProtocolDefinition success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2C(ds1, 
						"HangingProtocolDefinition", "Laterality", 
						verbose, log, ElementDictionary, 
						Condition_AnatomicRegionSequencePresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDefinition success after verifying Laterality --> "+("success" if partial_success else "failure"))

				if Condition_AnatomicRegionSequencePresent(ds1, parent_ds1, root_ds):
					if "Laterality" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["Laterality"], 
							StringValueTable_ImageLaterality, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDefinition success after verifying string defined terms Laterality --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"HangingProtocolDefinition", 
						"ProcedureCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HangingProtocolDefinition success after verifying ProcedureCodeSequence" + ("success" if partial_success else "failure")) 
				if "ProcedureCodeSequence" in ds1:
					ProcedureCodeSequence_data = ds1.ProcedureCodeSequence
					if type(ProcedureCodeSequence_data) == Sequence:
						for i2 in range(0, len(ProcedureCodeSequence_data)):
							if verbose:
								log.append( " ProcedureCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ProcedureCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " HangingProtocolDefinition success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType2(ds1, 
						"HangingProtocolDefinition", 
						"ReasonForRequestedProcedureCodeSequence", 
						verbose, log, ElementDictionary, 
									0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HangingProtocolDefinition success after verifying ReasonForRequestedProcedureCodeSequence" + ("success" if partial_success else "failure")) 
				if "ReasonForRequestedProcedureCodeSequence" in ds1:
					ReasonForRequestedProcedureCodeSequence_data = ds1.ReasonForRequestedProcedureCodeSequence
					if type(ReasonForRequestedProcedureCodeSequence_data) == Sequence:
						for i2 in range(0, len(ReasonForRequestedProcedureCodeSequence_data)):
							if verbose:
								log.append( " ReasonForRequestedProcedureCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReasonForRequestedProcedureCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " HangingProtocolDefinition success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"HangingProtocolDefinition", "NumberOfPriorsReferenced", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDefinition success after verifying NumberOfPriorsReferenced --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"HangingProtocolDefinition", 
			"ImageSetsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HangingProtocolDefinition success after verifying ImageSetsSequence" + ("success" if partial_success else "failure")) 
	if "ImageSetsSequence" in ds:
		ImageSetsSequence_data = ds.ImageSetsSequence
		if type(ImageSetsSequence_data) == Sequence:
			for i1 in range(0, len(ImageSetsSequence_data)):
				if verbose:
					log.append( " ImageSetsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ImageSetsSequence_data[i1]
				partial_success = verifyType1(ds1, 
						"HangingProtocolDefinition", 
						"ImageSetSelectorSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HangingProtocolDefinition success after verifying ImageSetSelectorSequence" + ("success" if partial_success else "failure")) 
				if "ImageSetSelectorSequence" in ds1:
					ImageSetSelectorSequence_data = ds1.ImageSetSelectorSequence
					if type(ImageSetSelectorSequence_data) == Sequence:
						for i2 in range(0, len(ImageSetSelectorSequence_data)):
							if verbose:
								log.append( " ImageSetSelectorSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ImageSetSelectorSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"HangingProtocolDefinition", "ImageSetSelectorUsageFlag", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying ImageSetSelectorUsageFlag --> "+("success" if partial_success else "failure"))

							if "ImageSetSelectorUsageFlag" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["ImageSetSelectorUsageFlag"], 
									StringValueTable_ImageSetSelectorUsageFlag, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying string enumerated values ImageSetSelectorUsageFlag --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HangingProtocolDefinition", "SelectorAttribute", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying SelectorAttribute --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HangingProtocolDefinition", "SelectorAttributeVR", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying SelectorAttributeVR --> "+("success" if partial_success else "failure"))

							if "SelectorAttributeVR" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["SelectorAttributeVR"], 
									StringValueTable_SelectorAttributeVR, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying string enumerated values SelectorAttributeVR --> "+("success" if partial_success else "failure"))

							partial_success =  Macro_HangingProtocolSelectorAttributeContextMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " HangingProtocolDefinition success after verifying HangingProtocolSelectorAttributeContextMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  Macro_HangingProtocolSelectorAttributeValueMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " HangingProtocolDefinition success after verifying HangingProtocolSelectorAttributeValueMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1(ds2, 
									"HangingProtocolDefinition", "SelectorValueNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying SelectorValueNumber --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"HangingProtocolDefinition", 
						"TimeBasedImageSetsSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HangingProtocolDefinition success after verifying TimeBasedImageSetsSequence" + ("success" if partial_success else "failure")) 
				if "TimeBasedImageSetsSequence" in ds1:
					TimeBasedImageSetsSequence_data = ds1.TimeBasedImageSetsSequence
					if type(TimeBasedImageSetsSequence_data) == Sequence:
						for i2 in range(0, len(TimeBasedImageSetsSequence_data)):
							if verbose:
								log.append( " TimeBasedImageSetsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = TimeBasedImageSetsSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"HangingProtocolDefinition", "ImageSetNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying ImageSetNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HangingProtocolDefinition", "ImageSetSelectorCategory", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying ImageSetSelectorCategory --> "+("success" if partial_success else "failure"))

							if "ImageSetSelectorCategory" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["ImageSetSelectorCategory"], 
									StringValueTable_ImageSetSelectorCategory, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying string enumerated values ImageSetSelectorCategory --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDefinition", "RelativeTime", 
									verbose, log, ElementDictionary, 
									Condition_ImageSetSelectorCategoryIsRelativeTime, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying RelativeTime --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDefinition", "RelativeTimeUnits", 
									verbose, log, ElementDictionary, 
									Condition_RelativeTimePresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying RelativeTimeUnits --> "+("success" if partial_success else "failure"))

							if Condition_RelativeTimePresent(ds2, parent_ds2, root_ds):
								if "RelativeTimeUnits" not in ds2: 
									partial_success = False 
								else:
									partial_success = verifyEnumValues(ds2["RelativeTimeUnits"], 
										StringValueTable_RelativeTimeUnits, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying string enumerated values RelativeTimeUnits --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDefinition", "AbstractPriorValue", 
									verbose, log, ElementDictionary, 
									Condition_ImageSetSelectorCategoryIsAbstractPriorAndAbstractPriorCodeSequenceNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying AbstractPriorValue --> "+("success" if partial_success else "failure"))

							partial_success = verifyType1C(ds2, 
									"HangingProtocolDefinition", 
									"AbstractPriorCodeSequence", 
									verbose, log, ElementDictionary, 
									Condition_ImageSetSelectorCategoryIsAbstractPriorAndAbstractPriorValueNotPresent, 
									False, 
									parent_ds2, root_ds2, 
									1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "HangingProtocolDefinition success after verifying AbstractPriorCodeSequence" + ("success" if partial_success else "failure")) 
							if "AbstractPriorCodeSequence" in ds2:
								AbstractPriorCodeSequence_data = ds2.AbstractPriorCodeSequence
								if type(AbstractPriorCodeSequence_data) == Sequence:
									for i3 in range(0, len(AbstractPriorCodeSequence_data)):
										if verbose:
											log.append( " AbstractPriorCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = AbstractPriorCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " HangingProtocolDefinition success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType3(ds2, 
									"HangingProtocolDefinition", "ImageSetLabel", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDefinition success after verifying ImageSetLabel --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"HangingProtocolDefinition", 
			"HangingProtocolUserIdentificationCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HangingProtocolDefinition success after verifying HangingProtocolUserIdentificationCodeSequence" + ("success" if partial_success else "failure")) 
	if "HangingProtocolUserIdentificationCodeSequence" in ds:
		HangingProtocolUserIdentificationCodeSequence_data = ds.HangingProtocolUserIdentificationCodeSequence
		if type(HangingProtocolUserIdentificationCodeSequence_data) == Sequence:
			for i1 in range(0, len(HangingProtocolUserIdentificationCodeSequence_data)):
				if verbose:
					log.append( " HangingProtocolUserIdentificationCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = HangingProtocolUserIdentificationCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " HangingProtocolDefinition success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"HangingProtocolDefinition", "HangingProtocolUserGroupName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDefinition success after verifying HangingProtocolUserGroupName --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"HangingProtocolDefinition", 
			"SourceHangingProtocolSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HangingProtocolDefinition success after verifying SourceHangingProtocolSequence" + ("success" if partial_success else "failure")) 
	if "SourceHangingProtocolSequence" in ds:
		SourceHangingProtocolSequence_data = ds.SourceHangingProtocolSequence
		if type(SourceHangingProtocolSequence_data) == Sequence:
			for i1 in range(0, len(SourceHangingProtocolSequence_data)):
				if verbose:
					log.append( " SourceHangingProtocolSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceHangingProtocolSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " HangingProtocolDefinition success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_HangingProtocolEnvironment_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"HangingProtocolEnvironment")

	partial_success =  		verifyType2(ds, 
			"HangingProtocolEnvironment", "NumberOfScreens", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolEnvironment success after verifying NumberOfScreens --> "+("success" if partial_success else "failure"))

	partial_success = verifyType2(ds, 
			"HangingProtocolEnvironment", 
			"NominalScreenDefinitionSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HangingProtocolEnvironment success after verifying NominalScreenDefinitionSequence" + ("success" if partial_success else "failure")) 
	if "NominalScreenDefinitionSequence" in ds:
		NominalScreenDefinitionSequence_data = ds.NominalScreenDefinitionSequence
		if type(NominalScreenDefinitionSequence_data) == Sequence:
			for i1 in range(0, len(NominalScreenDefinitionSequence_data)):
				if verbose:
					log.append( " NominalScreenDefinitionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = NominalScreenDefinitionSequence_data[i1]
				partial_success =  Macro_ScreenSpecificationsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " HangingProtocolEnvironment success after verifying ScreenSpecificationsMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_ScreenSpecificationsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ScreenSpecificationsMacro")

	partial_success =  		verifyType1(ds, 
			"ScreenSpecificationsMacro", "NumberOfVerticalPixels", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ScreenSpecificationsMacro success after verifying NumberOfVerticalPixels --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ScreenSpecificationsMacro", "NumberOfHorizontalPixels", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ScreenSpecificationsMacro success after verifying NumberOfHorizontalPixels --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"ScreenSpecificationsMacro", "DisplayEnvironmentSpatialPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ScreenSpecificationsMacro success after verifying DisplayEnvironmentSpatialPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ScreenSpecificationsMacro", "ScreenMinimumGrayscaleBitDepth", 
			verbose, log, ElementDictionary, 
			Condition_ScreenMinimumColorBitDepthNotPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ScreenSpecificationsMacro success after verifying ScreenMinimumGrayscaleBitDepth --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"ScreenSpecificationsMacro", "ScreenMinimumColorBitDepth", 
			verbose, log, ElementDictionary, 
			Condition_ScreenMinimumGrayscaleBitDepthNotPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ScreenSpecificationsMacro success after verifying ScreenMinimumColorBitDepth --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"ScreenSpecificationsMacro", "ApplicationMaximumRepaintTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " ScreenSpecificationsMacro success after verifying ApplicationMaximumRepaintTime --> "+("success" if partial_success else "failure"))

	return global_success

def Module_HangingProtocolDisplay_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"HangingProtocolDisplay")

	partial_success = verifyType1(ds, 
			"HangingProtocolDisplay", 
			"DisplaySetsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HangingProtocolDisplay success after verifying DisplaySetsSequence" + ("success" if partial_success else "failure")) 
	if "DisplaySetsSequence" in ds:
		DisplaySetsSequence_data = ds.DisplaySetsSequence
		if type(DisplaySetsSequence_data) == Sequence:
			for i1 in range(0, len(DisplaySetsSequence_data)):
				if verbose:
					log.append( " DisplaySetsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DisplaySetsSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"HangingProtocolDisplay", "DisplaySetNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying DisplaySetNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "DisplaySetLabel", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying DisplaySetLabel --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"HangingProtocolDisplay", "DisplaySetPresentationGroup", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying DisplaySetPresentationGroup --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"HangingProtocolDisplay", "ImageSetNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying ImageSetNumber --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"HangingProtocolDisplay", 
						"ImageBoxesSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HangingProtocolDisplay success after verifying ImageBoxesSequence" + ("success" if partial_success else "failure")) 
				if "ImageBoxesSequence" in ds1:
					ImageBoxesSequence_data = ds1.ImageBoxesSequence
					if type(ImageBoxesSequence_data) == Sequence:
						for i2 in range(0, len(ImageBoxesSequence_data)):
							if verbose:
								log.append( " ImageBoxesSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ImageBoxesSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"HangingProtocolDisplay", "ImageBoxNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying ImageBoxNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HangingProtocolDisplay", "DisplayEnvironmentSpatialPosition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying DisplayEnvironmentSpatialPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HangingProtocolDisplay", "ImageBoxLayoutType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying ImageBoxLayoutType --> "+("success" if partial_success else "failure"))

							if "ImageBoxLayoutType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["ImageBoxLayoutType"], 
									StringValueTable_ImageBoxLayoutTypeForHangingProtocol, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying string defined terms ImageBoxLayoutType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "ImageBoxTileHorizontalDimension", 
									verbose, log, ElementDictionary, 
									Condition_ImageBoxLayoutTypeIsTiled, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying ImageBoxTileHorizontalDimension --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "ImageBoxTileVerticalDimension", 
									verbose, log, ElementDictionary, 
									Condition_ImageBoxLayoutTypeIsTiled, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying ImageBoxTileVerticalDimension --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "ImageBoxScrollDirection", 
									verbose, log, ElementDictionary, 
									Condition_ImageBoxLayoutTypeIsTiledAndMoreThanOneTile, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying ImageBoxScrollDirection --> "+("success" if partial_success else "failure"))

							if Condition_ImageBoxLayoutTypeIsTiledAndMoreThanOneTile(ds2, parent_ds2, root_ds):
								if "ImageBoxScrollDirection" not in ds2: 
									partial_success = False 
								else:
									partial_success = verifyEnumValues(ds2["ImageBoxScrollDirection"], 
										StringValueTable_ImageBoxScrollDirection, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying string enumerated values ImageBoxScrollDirection --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"HangingProtocolDisplay", "ImageBoxSmallScrollType", 
									verbose, log, ElementDictionary, 
									Condition_ImageBoxLayoutTypeIsTiledAndMoreThanOneTile, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying ImageBoxSmallScrollType --> "+("success" if partial_success else "failure"))

							if Condition_ImageBoxLayoutTypeIsTiledAndMoreThanOneTile(ds2, parent_ds2, root_ds):
								if "ImageBoxSmallScrollType" not in ds2: 
									partial_success = False 
								else:
									partial_success = verifyEnumValues(ds2["ImageBoxSmallScrollType"], 
										StringValueTable_ImageBoxScrollType, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying string enumerated values ImageBoxSmallScrollType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "ImageBoxSmallScrollAmount", 
									verbose, log, ElementDictionary, 
									Condition_ImageBoxSmallScrollTypePresentWithValue, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying ImageBoxSmallScrollAmount --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2C(ds2, 
									"HangingProtocolDisplay", "ImageBoxLargeScrollType", 
									verbose, log, ElementDictionary, 
									Condition_ImageBoxLayoutTypeIsTiledAndMoreThanOneTile, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying ImageBoxLargeScrollType --> "+("success" if partial_success else "failure"))

							if Condition_ImageBoxLayoutTypeIsTiledAndMoreThanOneTile(ds2, parent_ds2, root_ds):
								if "ImageBoxLargeScrollType" not in ds2: 
									partial_success = False 
								else:
									partial_success = verifyEnumValues(ds2["ImageBoxLargeScrollType"], 
										StringValueTable_ImageBoxScrollType, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying string enumerated values ImageBoxLargeScrollType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "ImageBoxLargeScrollAmount", 
									verbose, log, ElementDictionary, 
									Condition_ImageBoxLargeScrollTypePresentWithValue, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying ImageBoxLargeScrollAmount --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"HangingProtocolDisplay", "ImageBoxOverlapPriority", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying ImageBoxOverlapPriority --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "PreferredPlaybackSequencing", 
									verbose, log, ElementDictionary, 
									Condition_ImageBoxLayoutTypeIsCine, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying PreferredPlaybackSequencing --> "+("success" if partial_success else "failure"))

							if Condition_ImageBoxLayoutTypeIsCine(ds2, parent_ds2, root_ds):
								if "PreferredPlaybackSequencing" not in ds2: 
									partial_success = False 
								else:
									partial_success = verifyEnumValues_uint16(ds2["PreferredPlaybackSequencing"], 
										BinaryValueDescription_PreferredPlaybackSequencingForHangingProtocol, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying binary enumerated values PreferredPlaybackSequencing --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "RecommendedDisplayFrameRate", 
									verbose, log, ElementDictionary, 
									Condition_ImageBoxLayoutTypeIsCineAndCineRelativeToRealTimeNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying RecommendedDisplayFrameRate --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "CineRelativeToRealTime", 
									verbose, log, ElementDictionary, 
									Condition_ImageBoxLayoutTypeIsCineAndRecommendedDisplayFrameRateNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying CineRelativeToRealTime --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"HangingProtocolDisplay", 
						"FilterOperationsSequence", 
						verbose, log, ElementDictionary, 
									0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HangingProtocolDisplay success after verifying FilterOperationsSequence" + ("success" if partial_success else "failure")) 
				if "FilterOperationsSequence" in ds1:
					FilterOperationsSequence_data = ds1.FilterOperationsSequence
					if type(FilterOperationsSequence_data) == Sequence:
						for i2 in range(0, len(FilterOperationsSequence_data)):
							if verbose:
								log.append( " FilterOperationsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = FilterOperationsSequence_data[i2]
							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "FilterByCategory", 
									verbose, log, ElementDictionary, 
									Condition_SelectorAttributeNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying FilterByCategory --> "+("success" if partial_success else "failure"))

							if Condition_SelectorAttributeNotPresent(ds2, parent_ds2, root_ds):
								if "FilterByCategory" not in ds2: 
									partial_success = False 
								else: 
									partial_success = verifyDefinedTerms(ds2["FilterByCategory"], 
										StringValueTable_FilterByCategory, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying string defined terms FilterByCategory --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "FilterByAttributePresence", 
									verbose, log, ElementDictionary, 
									Condition_SelectorAttributePresentAndFilterByOperatorNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying FilterByAttributePresence --> "+("success" if partial_success else "failure"))

							if Condition_SelectorAttributePresentAndFilterByOperatorNotPresent(ds2, parent_ds2, root_ds):
								if "FilterByAttributePresence" not in ds2: 
									partial_success = False 
								else: 
									partial_success = verifyDefinedTerms(ds2["FilterByAttributePresence"], 
										StringValueTable_FilterByAttributePresence, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying string defined terms FilterByAttributePresence --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "SelectorAttribute", 
									verbose, log, ElementDictionary, 
									Condition_FilterByCategoryNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying SelectorAttribute --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "SelectorAttributeVR", 
									verbose, log, ElementDictionary, 
									Condition_SelectorAttributeOrFilterByCategoryAndFilterByOperatorPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying SelectorAttributeVR --> "+("success" if partial_success else "failure"))

							partial_success =  Macro_HangingProtocolSelectorAttributeContextMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " HangingProtocolDisplay success after verifying HangingProtocolSelectorAttributeContextMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  Macro_HangingProtocolSelectorAttributeValueMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " HangingProtocolDisplay success after verifying HangingProtocolSelectorAttributeValueMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "SelectorValueNumber", 
									verbose, log, ElementDictionary, 
									Condition_SelectorAttributeAndFilterByOperatorPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying SelectorValueNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "FilterByOperator", 
									verbose, log, ElementDictionary, 
									Condition_SelectorAttributePresentAndFilterByAttributePresenceNotPresentOrFilterByCategoryPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying FilterByOperator --> "+("success" if partial_success else "failure"))

							if Condition_SelectorAttributePresentAndFilterByAttributePresenceNotPresentOrFilterByCategoryPresent(ds2, parent_ds2, root_ds):
								if "FilterByOperator" not in ds2: 
									partial_success = False 
								else:
									partial_success = verifyEnumValues(ds2["FilterByOperator"], 
										StringValueTable_FilterByOperator, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying string enumerated values FilterByOperator --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType3(ds2, 
									"HangingProtocolDisplay", "ImageSetSelectorUsageFlag", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying ImageSetSelectorUsageFlag --> "+("success" if partial_success else "failure"))

							if "ImageSetSelectorUsageFlag" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["ImageSetSelectorUsageFlag"], 
									StringValueTable_ImageSetSelectorUsageFlag, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying string enumerated values ImageSetSelectorUsageFlag --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2(ds1, 
						"HangingProtocolDisplay", 
						"SortingOperationsSequence", 
						verbose, log, ElementDictionary, 
									0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "HangingProtocolDisplay success after verifying SortingOperationsSequence" + ("success" if partial_success else "failure")) 
				if "SortingOperationsSequence" in ds1:
					SortingOperationsSequence_data = ds1.SortingOperationsSequence
					if type(SortingOperationsSequence_data) == Sequence:
						for i2 in range(0, len(SortingOperationsSequence_data)):
							if verbose:
								log.append( " SortingOperationsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SortingOperationsSequence_data[i2]
							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "SelectorAttribute", 
									verbose, log, ElementDictionary, 
									Condition_SortByCategoryNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying SelectorAttribute --> "+("success" if partial_success else "failure"))

							partial_success =  Macro_HangingProtocolSelectorAttributeContextMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " HangingProtocolDisplay success after verifying HangingProtocolSelectorAttributeContextMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "SelectorValueNumber", 
									verbose, log, ElementDictionary, 
									Condition_SelectorAttributePresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying SelectorValueNumber --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"HangingProtocolDisplay", "SortByCategory", 
									verbose, log, ElementDictionary, 
									Condition_SelectorAttributeNotPresent, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying SortByCategory --> "+("success" if partial_success else "failure"))

							if Condition_SelectorAttributeNotPresent(ds2, parent_ds2, root_ds):
								if "SortByCategory" not in ds2: 
									partial_success = False 
								else: 
									partial_success = verifyDefinedTerms(ds2["SortByCategory"], 
										StringValueTable_SortByCategory, 
										verbose, log, -1)
								global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying string defined terms SortByCategory --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"HangingProtocolDisplay", "SortingDirection", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying SortingDirection --> "+("success" if partial_success else "failure"))

							if "SortingDirection" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["SortingDirection"], 
									StringValueTable_SortingDirection, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " HangingProtocolDisplay success after verifying string enumerated values SortingDirection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "BlendingOperationType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying BlendingOperationType --> "+("success" if partial_success else "failure"))

				if "BlendingOperationType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["BlendingOperationType"], 
						StringValueTable_BlendingOperationType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying string defined terms BlendingOperationType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "ReformattingOperationType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying ReformattingOperationType --> "+("success" if partial_success else "failure"))

				if "ReformattingOperationType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ReformattingOperationType"], 
						StringValueTable_ReformattingOperationType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying string defined terms ReformattingOperationType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"HangingProtocolDisplay", "ReformattingThickness", 
						verbose, log, ElementDictionary, 
						Condition_ReformattingOperationTypeIsSlabOrMPR, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying ReformattingThickness --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"HangingProtocolDisplay", "ReformattingInterval", 
						verbose, log, ElementDictionary, 
						Condition_ReformattingOperationTypeIsSlabOrMPR, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying ReformattingInterval --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"HangingProtocolDisplay", "ReformattingOperationInitialViewDirection", 
						verbose, log, ElementDictionary, 
						Condition_ReformattingOperationTypeIsMPROr3D, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying ReformattingOperationInitialViewDirection --> "+("success" if partial_success else "failure"))

				if Condition_ReformattingOperationTypeIsMPROr3D(ds1, parent_ds1, root_ds):
					if "ReformattingOperationInitialViewDirection" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["ReformattingOperationInitialViewDirection"], 
							StringValueTable_ReformattingOperationInitialViewDirection, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying string defined terms ReformattingOperationInitialViewDirection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"HangingProtocolDisplay", "ThreeDRenderingType", 
						verbose, log, ElementDictionary, 
						Condition_ReformattingOperationTypeIs3D, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying ThreeDRenderingType --> "+("success" if partial_success else "failure"))

				if Condition_ReformattingOperationTypeIs3D(ds1, parent_ds1, root_ds):
					if "ThreeDRenderingType" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["ThreeDRenderingType"], 
							StringValueTable_ThreeDRenderingType, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying string defined terms ThreeDRenderingType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "DisplaySetPatientOrientation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying DisplaySetPatientOrientation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "DisplaySetHorizontalJustification", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying DisplaySetHorizontalJustification --> "+("success" if partial_success else "failure"))

				if "DisplaySetHorizontalJustification" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["DisplaySetHorizontalJustification"], 
						StringValueTable_DisplaySetHorizontalJustification, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying string enumerated values DisplaySetHorizontalJustification --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "DisplaySetVerticalJustification", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying DisplaySetVerticalJustification --> "+("success" if partial_success else "failure"))

				if "DisplaySetVerticalJustification" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["DisplaySetVerticalJustification"], 
						StringValueTable_DisplaySetVerticalJustification, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying string enumerated values DisplaySetVerticalJustification --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "VOIType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying VOIType --> "+("success" if partial_success else "failure"))

				if "VOIType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["VOIType"], 
						StringValueTable_VOIType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying string defined terms VOIType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "PseudoColorType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying PseudoColorType --> "+("success" if partial_success else "failure"))

				if "PseudoColorType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["PseudoColorType"], 
						StringValueTable_PseudoColorType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying string defined terms PseudoColorType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "ShowGrayscaleInverted", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying ShowGrayscaleInverted --> "+("success" if partial_success else "failure"))

				if "ShowGrayscaleInverted" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ShowGrayscaleInverted"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying string defined terms ShowGrayscaleInverted --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "ShowImageTrueSizeFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying ShowImageTrueSizeFlag --> "+("success" if partial_success else "failure"))

				if "ShowImageTrueSizeFlag" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ShowImageTrueSizeFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying string defined terms ShowImageTrueSizeFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "ShowGraphicAnnotationFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying ShowGraphicAnnotationFlag --> "+("success" if partial_success else "failure"))

				if "ShowGraphicAnnotationFlag" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ShowGraphicAnnotationFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying string defined terms ShowGraphicAnnotationFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "ShowPatientDemographicsFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying ShowPatientDemographicsFlag --> "+("success" if partial_success else "failure"))

				if "ShowPatientDemographicsFlag" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ShowPatientDemographicsFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying string defined terms ShowPatientDemographicsFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "ShowAcquisitionTechniquesFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying ShowAcquisitionTechniquesFlag --> "+("success" if partial_success else "failure"))

				if "ShowAcquisitionTechniquesFlag" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ShowAcquisitionTechniquesFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying string defined terms ShowAcquisitionTechniquesFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"HangingProtocolDisplay", "DisplaySetPresentationGroupDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying DisplaySetPresentationGroupDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"HangingProtocolDisplay", "PartialDataDisplayHandling", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDisplay success after verifying PartialDataDisplayHandling --> "+("success" if partial_success else "failure"))

	if "PartialDataDisplayHandling" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PartialDataDisplayHandling"], 
			StringValueTable_PartialDataDisplayHandling, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " HangingProtocolDisplay success after verifying string enumerated values PartialDataDisplayHandling --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"HangingProtocolDisplay", 
			"SynchronizedScrollingSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HangingProtocolDisplay success after verifying SynchronizedScrollingSequence" + ("success" if partial_success else "failure")) 
	if "SynchronizedScrollingSequence" in ds:
		SynchronizedScrollingSequence_data = ds.SynchronizedScrollingSequence
		if type(SynchronizedScrollingSequence_data) == Sequence:
			for i1 in range(0, len(SynchronizedScrollingSequence_data)):
				if verbose:
					log.append( " SynchronizedScrollingSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SynchronizedScrollingSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"HangingProtocolDisplay", "DisplaySetScrollingGroup", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying DisplaySetScrollingGroup --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"HangingProtocolDisplay", 
			"NavigationIndicatorSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "HangingProtocolDisplay success after verifying NavigationIndicatorSequence" + ("success" if partial_success else "failure")) 
	if "NavigationIndicatorSequence" in ds:
		NavigationIndicatorSequence_data = ds.NavigationIndicatorSequence
		if type(NavigationIndicatorSequence_data) == Sequence:
			for i1 in range(0, len(NavigationIndicatorSequence_data)):
				if verbose:
					log.append( " NavigationIndicatorSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = NavigationIndicatorSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"HangingProtocolDisplay", "NavigationDisplaySet", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying NavigationDisplaySet --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"HangingProtocolDisplay", "ReferenceDisplaySets", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " HangingProtocolDisplay success after verifying ReferenceDisplaySets --> "+("success" if partial_success else "failure"))

	return global_success

def Module_ColorPaletteDefinition_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ColorPaletteDefinition")

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " ColorPaletteDefinition success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_StructuredDisplay_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"StructuredDisplay")

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " StructuredDisplay success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"StructuredDisplay", "PresentationCreationDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StructuredDisplay success after verifying PresentationCreationDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"StructuredDisplay", "PresentationCreationTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StructuredDisplay success after verifying PresentationCreationTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"StructuredDisplay", "NumberOfScreens", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StructuredDisplay success after verifying NumberOfScreens --> "+("success" if partial_success else "failure"))


	if Condition_BasicStructuredDisplayInstance(ds, parent_ds, root_ds):
		if "NumberOfScreens" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["NumberOfScreens"], 
				BinaryValueDescription_One, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " StructuredDisplay success after verifying binary enumerated values NumberOfScreens --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"StructuredDisplay", 
			"NominalScreenDefinitionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "StructuredDisplay success after verifying NominalScreenDefinitionSequence" + ("success" if partial_success else "failure")) 
	if "NominalScreenDefinitionSequence" in ds:
		NominalScreenDefinitionSequence_data = ds.NominalScreenDefinitionSequence
		if type(NominalScreenDefinitionSequence_data) == Sequence:
			for i1 in range(0, len(NominalScreenDefinitionSequence_data)):
				if verbose:
					log.append( " NominalScreenDefinitionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = NominalScreenDefinitionSequence_data[i1]
				partial_success =  Macro_ScreenSpecificationsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " StructuredDisplay success after verifying ScreenSpecificationsMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"StructuredDisplay", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "StructuredDisplay success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " StructuredDisplay success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"StructuredDisplay", "StructuredDisplayBackgroundCIELabValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StructuredDisplay success after verifying StructuredDisplayBackgroundCIELabValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"StructuredDisplay", "EmptyImageBoxCIELabValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StructuredDisplay success after verifying EmptyImageBoxCIELabValue --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"StructuredDisplay", "HangingProtocolName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StructuredDisplay success after verifying HangingProtocolName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"StructuredDisplay", "HangingProtocolCreator", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " StructuredDisplay success after verifying HangingProtocolCreator --> "+("success" if partial_success else "failure"))

	return global_success

def Module_StructuredDisplayImageBox_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"StructuredDisplayImageBox")

	partial_success = verifyType1(ds, 
			"StructuredDisplayImageBox", 
			"StructuredDisplayImageBoxSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "StructuredDisplayImageBox success after verifying StructuredDisplayImageBoxSequence" + ("success" if partial_success else "failure")) 
	if "StructuredDisplayImageBoxSequence" in ds:
		StructuredDisplayImageBoxSequence_data = ds.StructuredDisplayImageBoxSequence
		if type(StructuredDisplayImageBoxSequence_data) == Sequence:
			for i1 in range(0, len(StructuredDisplayImageBoxSequence_data)):
				if verbose:
					log.append( " StructuredDisplayImageBoxSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = StructuredDisplayImageBoxSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"StructuredDisplayImageBox", "DisplayEnvironmentSpatialPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying DisplayEnvironmentSpatialPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"StructuredDisplayImageBox", "ImageBoxNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying ImageBoxNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"StructuredDisplayImageBox", "ImageBoxLayoutType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying ImageBoxLayoutType --> "+("success" if partial_success else "failure"))

				if "ImageBoxLayoutType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ImageBoxLayoutType"], 
						StringValueTable_ImageBoxLayoutTypeForStructuredDisplay, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying string defined terms ImageBoxLayoutType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"StructuredDisplayImageBox", "ImageBoxOverlapPriority", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying ImageBoxOverlapPriority --> "+("success" if partial_success else "failure"))


				if Condition_ImageBoxOverlapPriorityValueNot1To100(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" Is not a positive integer in the range 1 to 100 - attribute <ImageBoxOverlapPriority>"+\
							" = <{}>".format( tag_for_keyword("ImageBoxOverlapPriority")))

				partial_success =  		verifyType3(ds1, 
						"StructuredDisplayImageBox", "DisplaySetHorizontalJustification", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying DisplaySetHorizontalJustification --> "+("success" if partial_success else "failure"))

				if "DisplaySetHorizontalJustification" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["DisplaySetHorizontalJustification"], 
						StringValueTable_DisplaySetHorizontalJustification, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying string enumerated values DisplaySetHorizontalJustification --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"StructuredDisplayImageBox", "DisplaySetVerticalJustification", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying DisplaySetVerticalJustification --> "+("success" if partial_success else "failure"))

				if "DisplaySetVerticalJustification" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["DisplaySetVerticalJustification"], 
						StringValueTable_DisplaySetVerticalJustification, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying string enumerated values DisplaySetVerticalJustification --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"StructuredDisplayImageBox", "PreferredPlaybackSequencing", 
						verbose, log, ElementDictionary, 
						Condition_ImageBoxLayoutTypeIsCine, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying PreferredPlaybackSequencing --> "+("success" if partial_success else "failure"))

				if Condition_ImageBoxLayoutTypeIsCine(ds1, parent_ds1, root_ds):
					if "PreferredPlaybackSequencing" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues_uint16(ds1["PreferredPlaybackSequencing"], 
							BinaryValueDescription_PreferredPlaybackSequencingForStructuredDisplay, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying binary enumerated values PreferredPlaybackSequencing --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"StructuredDisplayImageBox", "RecommendedDisplayFrameRate", 
						verbose, log, ElementDictionary, 
						Condition_ImageBoxLayoutTypeIsCineAndCineRelativeToRealTimeNotPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying RecommendedDisplayFrameRate --> "+("success" if partial_success else "failure"))


				if Condition_RecommendedDisplayFrameRateNotGreaterThanZero(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" Is not greater than 0 - attribute <RecommendedDisplayFrameRate>"+\
							" = <{}>".format( tag_for_keyword("RecommendedDisplayFrameRate")))

				partial_success =  		verifyType1C(ds1, 
						"StructuredDisplayImageBox", "CineRelativeToRealTime", 
						verbose, log, ElementDictionary, 
						Condition_ImageBoxLayoutTypeIsCineAndRecommendedDisplayFrameRateNotPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying CineRelativeToRealTime --> "+("success" if partial_success else "failure"))


				if Condition_CineRelativeToRealTimeNotGreaterThanZero(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" Is not greater than 0 - attribute <CineRelativeToRealTime>"+\
							" = <{}>".format( tag_for_keyword("CineRelativeToRealTime")))

				partial_success =  		verifyType1C(ds1, 
						"StructuredDisplayImageBox", "InitialCineRunState", 
						verbose, log, ElementDictionary, 
						Condition_ImageBoxLayoutTypeIsCine, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying InitialCineRunState --> "+("success" if partial_success else "failure"))

				if Condition_ImageBoxLayoutTypeIsCine(ds1, parent_ds1, root_ds):
					if "InitialCineRunState" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["InitialCineRunState"], 
							StringValueTable_InitialCineRunState, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying string defined terms InitialCineRunState --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"StructuredDisplayImageBox", "StartTrim", 
						verbose, log, ElementDictionary, 
						Condition_ImageBoxLayoutTypeIsCine, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying StartTrim --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"StructuredDisplayImageBox", "StopTrim", 
						verbose, log, ElementDictionary, 
						Condition_ImageBoxLayoutTypeIsCine, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying StopTrim --> "+("success" if partial_success else "failure"))

				partial_success = verifyType2C(ds1, 
						"StructuredDisplayImageBox", 
						"ReferencedFirstFrameSequence", 
						verbose, log, ElementDictionary, 
						Condition_ImageBoxLayoutTypeIsStack, 
						False, 
						parent_ds1, root_ds1, 
						0, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "StructuredDisplayImageBox success after verifying ReferencedFirstFrameSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedFirstFrameSequence" in ds1:
					ReferencedFirstFrameSequence_data = ds1.ReferencedFirstFrameSequence
					if type(ReferencedFirstFrameSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedFirstFrameSequence_data)):
							if verbose:
								log.append( " ReferencedFirstFrameSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedFirstFrameSequence_data[i2]
							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " StructuredDisplayImageBox success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType2C(ds1, 
						"StructuredDisplayImageBox", 
						"ReferencedImageSequence", 
						verbose, log, ElementDictionary, 
						Condition_NoReferencedPresentationStateOrStereometricInstanceOrInstance, 
						False, 
						parent_ds1, root_ds1, 
						0, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "StructuredDisplayImageBox success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedImageSequence" in ds1:
					ReferencedImageSequence_data = ds1.ReferencedImageSequence
					if type(ReferencedImageSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedImageSequence_data)):
							if verbose:
								log.append( " ReferencedImageSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedImageSequence_data[i2]
							partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " StructuredDisplayImageBox success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1C(ds2, 
									"StructuredDisplayImageBox", 
									"ReferencedPresentationStateSequence", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds2, 
									1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "StructuredDisplayImageBox success after verifying ReferencedPresentationStateSequence" + ("success" if partial_success else "failure")) 
							if "ReferencedPresentationStateSequence" in ds2:
								ReferencedPresentationStateSequence_data = ds2.ReferencedPresentationStateSequence
								if type(ReferencedPresentationStateSequence_data) == Sequence:
									for i3 in range(0, len(ReferencedPresentationStateSequence_data)):
										if verbose:
											log.append( " ReferencedPresentationStateSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ReferencedPresentationStateSequence_data[i3]
										partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " StructuredDisplayImageBox success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"StructuredDisplayImageBox", 
						"ReferencedPresentationStateSequence", 
						verbose, log, ElementDictionary, 
						Condition_NoReferencedImageOrStereometricInstanceOrInstance, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "StructuredDisplayImageBox success after verifying ReferencedPresentationStateSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedPresentationStateSequence" in ds1:
					ReferencedPresentationStateSequence_data = ds1.ReferencedPresentationStateSequence
					if type(ReferencedPresentationStateSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedPresentationStateSequence_data)):
							if verbose:
								log.append( " ReferencedPresentationStateSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedPresentationStateSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " StructuredDisplayImageBox success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"StructuredDisplayImageBox", 
						"ReferencedInstanceSequence", 
						verbose, log, ElementDictionary, 
						Condition_NoReferencedPresentationStateOrStereometricInstanceOrImage, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "StructuredDisplayImageBox success after verifying ReferencedInstanceSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedInstanceSequence" in ds1:
					ReferencedInstanceSequence_data = ds1.ReferencedInstanceSequence
					if type(ReferencedInstanceSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedInstanceSequence_data)):
							if verbose:
								log.append( " ReferencedInstanceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedInstanceSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " StructuredDisplayImageBox success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"StructuredDisplayImageBox", 
						"ReferencedStereometricInstanceSequence", 
						verbose, log, ElementDictionary, 
						Condition_NoReferencedPresentationStateOrInstanceOrImage, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "StructuredDisplayImageBox success after verifying ReferencedStereometricInstanceSequence" + ("success" if partial_success else "failure")) 
				if "ReferencedStereometricInstanceSequence" in ds1:
					ReferencedStereometricInstanceSequence_data = ds1.ReferencedStereometricInstanceSequence
					if type(ReferencedStereometricInstanceSequence_data) == Sequence:
						for i2 in range(0, len(ReferencedStereometricInstanceSequence_data)):
							if verbose:
								log.append( " ReferencedStereometricInstanceSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ReferencedStereometricInstanceSequence_data[i2]
							partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " StructuredDisplayImageBox success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"StructuredDisplayImageBox", 
			"ImageBoxSynchronizationSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "StructuredDisplayImageBox success after verifying ImageBoxSynchronizationSequence" + ("success" if partial_success else "failure")) 
	if "ImageBoxSynchronizationSequence" in ds:
		ImageBoxSynchronizationSequence_data = ds.ImageBoxSynchronizationSequence
		if type(ImageBoxSynchronizationSequence_data) == Sequence:
			for i1 in range(0, len(ImageBoxSynchronizationSequence_data)):
				if verbose:
					log.append( " ImageBoxSynchronizationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ImageBoxSynchronizationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"StructuredDisplayImageBox", "SynchronizedImageBoxList", 
						verbose, log, ElementDictionary, 
									2, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying SynchronizedImageBoxList --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"StructuredDisplayImageBox", "TypeOfSynchronization", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying TypeOfSynchronization --> "+("success" if partial_success else "failure"))

				if "TypeOfSynchronization" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["TypeOfSynchronization"], 
						StringValueTable_TypeOfSynchronizationBetweenImageBoxes, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayImageBox success after verifying string enumerated values TypeOfSynchronization --> "+("success" if partial_success else "failure"))

	return global_success

def Module_StructuredDisplayAnnotation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"StructuredDisplayAnnotation")

	partial_success = verifyType1(ds, 
			"StructuredDisplayAnnotation", 
			"StructuredDisplayTextBoxSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "StructuredDisplayAnnotation success after verifying StructuredDisplayTextBoxSequence" + ("success" if partial_success else "failure")) 
	if "StructuredDisplayTextBoxSequence" in ds:
		StructuredDisplayTextBoxSequence_data = ds.StructuredDisplayTextBoxSequence
		if type(StructuredDisplayTextBoxSequence_data) == Sequence:
			for i1 in range(0, len(StructuredDisplayTextBoxSequence_data)):
				if verbose:
					log.append( " StructuredDisplayTextBoxSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = StructuredDisplayTextBoxSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"StructuredDisplayAnnotation", "UnformattedTextValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayAnnotation success after verifying UnformattedTextValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"StructuredDisplayAnnotation", "DisplayEnvironmentSpatialPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayAnnotation success after verifying DisplayEnvironmentSpatialPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"StructuredDisplayAnnotation", "BoundingBoxTextHorizontalJustification", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayAnnotation success after verifying BoundingBoxTextHorizontalJustification --> "+("success" if partial_success else "failure"))

				if "BoundingBoxTextHorizontalJustification" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["BoundingBoxTextHorizontalJustification"], 
						StringValueTable_BoundingBoxTextHorizontalJustification, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayAnnotation success after verifying string enumerated values BoundingBoxTextHorizontalJustification --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"StructuredDisplayAnnotation", "GraphicLayerRecommendedDisplayCIELabValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " StructuredDisplayAnnotation success after verifying GraphicLayerRecommendedDisplayCIELabValue --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_CommonCTMRImageDescriptionImageLevelMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CommonCTMRImageDescriptionImageLevelMacro")

	partial_success =  		verifyType1(ds, 
			"CommonCTMRImageDescriptionImageLevelMacro", "PixelPresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacro success after verifying PixelPresentation --> "+("success" if partial_success else "failure"))

	if "PixelPresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PixelPresentation"], 
			StringValueTable_CommonCTMRPixelPresentationImageLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacro success after verifying string enumerated values PixelPresentation --> "+("success" if partial_success else "failure"))


	if Condition_EnhancedMRColorImageInstance(ds, parent_ds, root_ds):
		if "PixelPresentation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PixelPresentation"], 
				StringValueTable_PixelPresentationTrueColor, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacro success after verifying string enumerated values PixelPresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CommonCTMRImageDescriptionImageLevelMacro", "VolumetricProperties", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacro success after verifying VolumetricProperties --> "+("success" if partial_success else "failure"))

	if "VolumetricProperties" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VolumetricProperties"], 
			StringValueTable_CommonCTMRVolumetricPropertiesImageLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacro success after verifying string enumerated values VolumetricProperties --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CommonCTMRImageDescriptionImageLevelMacro", "VolumeBasedCalculationTechnique", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacro success after verifying VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	if "VolumeBasedCalculationTechnique" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["VolumeBasedCalculationTechnique"], 
			StringValueTable_CommonCTMRVolumeBasedCalculationTechniqueImageLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacro success after verifying string defined terms VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_CommonCTMRImageDescriptionFrameLevelMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CommonCTMRImageDescriptionFrameLevelMacro")

	partial_success =  		verifyType1(ds, 
			"CommonCTMRImageDescriptionFrameLevelMacro", "PixelPresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionFrameLevelMacro success after verifying PixelPresentation --> "+("success" if partial_success else "failure"))

	if "PixelPresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PixelPresentation"], 
			StringValueTable_CommonCTMRPixelPresentationFrameLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionFrameLevelMacro success after verifying string enumerated values PixelPresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CommonCTMRImageDescriptionFrameLevelMacro", "VolumetricProperties", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionFrameLevelMacro success after verifying VolumetricProperties --> "+("success" if partial_success else "failure"))

	if "VolumetricProperties" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VolumetricProperties"], 
			StringValueTable_CommonCTMRVolumetricPropertiesFrameLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionFrameLevelMacro success after verifying string enumerated values VolumetricProperties --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CommonCTMRImageDescriptionFrameLevelMacro", "VolumeBasedCalculationTechnique", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionFrameLevelMacro success after verifying VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	if "VolumeBasedCalculationTechnique" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["VolumeBasedCalculationTechnique"], 
			StringValueTable_CommonCTMRVolumeBasedCalculationTechniqueFrameLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionFrameLevelMacro success after verifying string defined terms VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRImageDescriptionImageLevelMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRImageDescriptionImageLevelMacro")

	partial_success =  		verifyType1C(ds, 
			"MRImageDescriptionImageLevelMacro", "ComplexImageComponent", 
			verbose, log, ElementDictionary, 
			Condition_NotLegacyConvertedMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageDescriptionImageLevelMacro success after verifying ComplexImageComponent --> "+("success" if partial_success else "failure"))

	if Condition_NotLegacyConvertedMR(ds, parent_ds, root_ds):
		if "ComplexImageComponent" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ComplexImageComponent"], 
				StringValueTable_EnhancedMRComplexImageComponentImageLevel, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageDescriptionImageLevelMacro success after verifying string enumerated values ComplexImageComponent --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRImageDescriptionImageLevelMacro", "AcquisitionContrast", 
			verbose, log, ElementDictionary, 
			Condition_NotLegacyConvertedMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageDescriptionImageLevelMacro success after verifying AcquisitionContrast --> "+("success" if partial_success else "failure"))

	if Condition_NotLegacyConvertedMR(ds, parent_ds, root_ds):
		if "AcquisitionContrast" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["AcquisitionContrast"], 
				StringValueTable_EnhancedMRAcquisitionContrastImageLevel, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageDescriptionImageLevelMacro success after verifying string enumerated values AcquisitionContrast --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRImageDescriptionFrameLevelMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRImageDescriptionFrameLevelMacro")

	partial_success =  		verifyType1C(ds, 
			"MRImageDescriptionFrameLevelMacro", "ComplexImageComponent", 
			verbose, log, ElementDictionary, 
			Condition_NotLegacyConvertedMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageDescriptionFrameLevelMacro success after verifying ComplexImageComponent --> "+("success" if partial_success else "failure"))

	if Condition_NotLegacyConvertedMR(ds, parent_ds, root_ds):
		if "ComplexImageComponent" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ComplexImageComponent"], 
				StringValueTable_EnhancedMRComplexImageComponentFrameLevel, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageDescriptionFrameLevelMacro success after verifying string enumerated values ComplexImageComponent --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRImageDescriptionFrameLevelMacro", "AcquisitionContrast", 
			verbose, log, ElementDictionary, 
			Condition_NotLegacyConvertedMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageDescriptionFrameLevelMacro success after verifying AcquisitionContrast --> "+("success" if partial_success else "failure"))

	if Condition_NotLegacyConvertedMR(ds, parent_ds, root_ds):
		if "AcquisitionContrast" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["AcquisitionContrast"], 
				StringValueTable_EnhancedMRAcquisitionContrastFrameLevel, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageDescriptionFrameLevelMacro success after verifying string enumerated values AcquisitionContrast --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRSpectroscopyDescriptionImageLevelMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRSpectroscopyDescriptionImageLevelMacro")

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyDescriptionImageLevelMacro", "VolumetricProperties", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionImageLevelMacro success after verifying VolumetricProperties --> "+("success" if partial_success else "failure"))

	if "VolumetricProperties" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VolumetricProperties"], 
			StringValueTable_CommonCTMRVolumetricPropertiesImageLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionImageLevelMacro success after verifying string enumerated values VolumetricProperties --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyDescriptionImageLevelMacro", "VolumeBasedCalculationTechnique", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionImageLevelMacro success after verifying VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	if "VolumeBasedCalculationTechnique" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["VolumeBasedCalculationTechnique"], 
			StringValueTable_MRSpectroscopyVolumeBasedCalculationTechniqueImageLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionImageLevelMacro success after verifying string defined terms VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyDescriptionImageLevelMacro", "ComplexImageComponent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionImageLevelMacro success after verifying ComplexImageComponent --> "+("success" if partial_success else "failure"))

	if "ComplexImageComponent" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ComplexImageComponent"], 
			StringValueTable_MRSpectroscopyComplexImageComponentImageLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionImageLevelMacro success after verifying string enumerated values ComplexImageComponent --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyDescriptionImageLevelMacro", "AcquisitionContrast", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionImageLevelMacro success after verifying AcquisitionContrast --> "+("success" if partial_success else "failure"))

	if "AcquisitionContrast" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["AcquisitionContrast"], 
			StringValueTable_MRSpectroscopyAcquisitionContrastImageLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionImageLevelMacro success after verifying string enumerated values AcquisitionContrast --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRSpectroscopyDescriptionFrameLevelMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRSpectroscopyDescriptionFrameLevelMacro")

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyDescriptionFrameLevelMacro", "VolumetricProperties", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionFrameLevelMacro success after verifying VolumetricProperties --> "+("success" if partial_success else "failure"))

	if "VolumetricProperties" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VolumetricProperties"], 
			StringValueTable_CommonCTMRVolumetricPropertiesFrameLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionFrameLevelMacro success after verifying string enumerated values VolumetricProperties --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyDescriptionFrameLevelMacro", "VolumeBasedCalculationTechnique", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionFrameLevelMacro success after verifying VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	if "VolumeBasedCalculationTechnique" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["VolumeBasedCalculationTechnique"], 
			StringValueTable_MRSpectroscopyVolumeBasedCalculationTechniqueFrameLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionFrameLevelMacro success after verifying string defined terms VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyDescriptionFrameLevelMacro", "ComplexImageComponent", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionFrameLevelMacro success after verifying ComplexImageComponent --> "+("success" if partial_success else "failure"))

	if "ComplexImageComponent" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ComplexImageComponent"], 
			StringValueTable_MRSpectroscopyComplexImageComponentFrameLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionFrameLevelMacro success after verifying string enumerated values ComplexImageComponent --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyDescriptionFrameLevelMacro", "AcquisitionContrast", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionFrameLevelMacro success after verifying AcquisitionContrast --> "+("success" if partial_success else "failure"))

	if "AcquisitionContrast" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["AcquisitionContrast"], 
			StringValueTable_MRSpectroscopyAcquisitionContrastFrameLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyDescriptionFrameLevelMacro success after verifying string enumerated values AcquisitionContrast --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRImageFrameTypeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRImageFrameTypeMacro")

	partial_success = verifyType1(ds, 
			"MRImageFrameTypeMacro", 
			"MRImageFrameTypeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRImageFrameTypeMacro success after verifying MRImageFrameTypeSequence" + ("success" if partial_success else "failure")) 
	if "MRImageFrameTypeSequence" in ds:
		MRImageFrameTypeSequence_data = ds.MRImageFrameTypeSequence
		if type(MRImageFrameTypeSequence_data) == Sequence:
			for i1 in range(0, len(MRImageFrameTypeSequence_data)):
				if verbose:
					log.append( " MRImageFrameTypeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRImageFrameTypeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MRImageFrameTypeMacro", "FrameType", 
						verbose, log, ElementDictionary, 
									4, 4)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImageFrameTypeMacro success after verifying FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedFrameType1, 
						verbose, log, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImageFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageAndFrameType2, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImageFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_EnhancedMRImageAndFrameType3, 
						verbose, log, 2)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImageFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_EnhancedMRFrameType4, 
						verbose, log, 3)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImageFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_CommonCTMRImageDescriptionFrameLevelMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MRImageFrameTypeMacro success after verifying CommonCTMRImageDescriptionFrameLevelMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_MRImageDescriptionFrameLevelMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MRImageFrameTypeMacro success after verifying MRImageDescriptionFrameLevelMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_MRTimingAndRelatedParametersMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRTimingAndRelatedParametersMacro")

	partial_success = verifyType1(ds, 
			"MRTimingAndRelatedParametersMacro", 
			"MRTimingAndRelatedParametersSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRTimingAndRelatedParametersMacro success after verifying MRTimingAndRelatedParametersSequence" + ("success" if partial_success else "failure")) 
	if "MRTimingAndRelatedParametersSequence" in ds:
		MRTimingAndRelatedParametersSequence_data = ds.MRTimingAndRelatedParametersSequence
		if type(MRTimingAndRelatedParametersSequence_data) == Sequence:
			for i1 in range(0, len(MRTimingAndRelatedParametersSequence_data)):
				if verbose:
					log.append( " MRTimingAndRelatedParametersSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRTimingAndRelatedParametersSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"MRTimingAndRelatedParametersMacro", "RepetitionTime", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRTimingAndRelatedParametersMacro success after verifying RepetitionTime --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "RepetitionTime" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["RepetitionTime"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"MRTimingAndRelatedParametersMacro", "FlipAngle", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRTimingAndRelatedParametersMacro success after verifying FlipAngle --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "FlipAngle" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["FlipAngle"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"MRTimingAndRelatedParametersMacro", "EchoTrainLength", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRTimingAndRelatedParametersMacro success after verifying EchoTrainLength --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "EchoTrainLength" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["EchoTrainLength"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"MRTimingAndRelatedParametersMacro", "RFEchoTrainLength", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRTimingAndRelatedParametersMacro success after verifying RFEchoTrainLength --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRTimingAndRelatedParametersMacro", "GradientEchoTrainLength", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRTimingAndRelatedParametersMacro success after verifying GradientEchoTrainLength --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"MRTimingAndRelatedParametersMacro", 
						"SpecificAbsorptionRateSequence", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "MRTimingAndRelatedParametersMacro success after verifying SpecificAbsorptionRateSequence" + ("success" if partial_success else "failure")) 
				if "SpecificAbsorptionRateSequence" in ds1:
					SpecificAbsorptionRateSequence_data = ds1.SpecificAbsorptionRateSequence
					if type(SpecificAbsorptionRateSequence_data) == Sequence:
						for i2 in range(0, len(SpecificAbsorptionRateSequence_data)):
							if verbose:
								log.append( " SpecificAbsorptionRateSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = SpecificAbsorptionRateSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"MRTimingAndRelatedParametersMacro", "SpecificAbsorptionRateDefinition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRTimingAndRelatedParametersMacro success after verifying SpecificAbsorptionRateDefinition --> "+("success" if partial_success else "failure"))

							if "SpecificAbsorptionRateDefinition" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["SpecificAbsorptionRateDefinition"], 
									StringValueTable_SpecificAbsorptionRateDefinition, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRTimingAndRelatedParametersMacro success after verifying string defined terms SpecificAbsorptionRateDefinition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"MRTimingAndRelatedParametersMacro", "SpecificAbsorptionRateValue", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRTimingAndRelatedParametersMacro success after verifying SpecificAbsorptionRateValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRTimingAndRelatedParametersMacro", "GradientOutputType", 
						verbose, log, ElementDictionary, 
						Condition_GradientOutputIsPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRTimingAndRelatedParametersMacro success after verifying GradientOutputType --> "+("success" if partial_success else "failure"))

				if Condition_GradientOutputIsPresent(ds1, parent_ds1, root_ds):
					if "GradientOutputType" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["GradientOutputType"], 
							StringValueTable_GradientOutputType, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRTimingAndRelatedParametersMacro success after verifying string defined terms GradientOutputType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRTimingAndRelatedParametersMacro", "GradientOutput", 
						verbose, log, ElementDictionary, 
						Condition_GradientOutputTypeIsPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRTimingAndRelatedParametersMacro success after verifying GradientOutput --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"MRTimingAndRelatedParametersMacro", 
						"OperatingModeSequence", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "MRTimingAndRelatedParametersMacro success after verifying OperatingModeSequence" + ("success" if partial_success else "failure")) 
				if "OperatingModeSequence" in ds1:
					OperatingModeSequence_data = ds1.OperatingModeSequence
					if type(OperatingModeSequence_data) == Sequence:
						for i2 in range(0, len(OperatingModeSequence_data)):
							if verbose:
								log.append( " OperatingModeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = OperatingModeSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"MRTimingAndRelatedParametersMacro", "OperatingModeType", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRTimingAndRelatedParametersMacro success after verifying OperatingModeType --> "+("success" if partial_success else "failure"))

							if "OperatingModeType" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["OperatingModeType"], 
									StringValueTable_OperatingModeType, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRTimingAndRelatedParametersMacro success after verifying string defined terms OperatingModeType --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"MRTimingAndRelatedParametersMacro", "OperatingMode", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRTimingAndRelatedParametersMacro success after verifying OperatingMode --> "+("success" if partial_success else "failure"))

							if "OperatingMode" not in ds2: 
								partial_success = False 
							else: 
								partial_success = verifyDefinedTerms(ds2["OperatingMode"], 
									StringValueTable_OperatingMode, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRTimingAndRelatedParametersMacro success after verifying string defined terms OperatingMode --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRFOVGeometryMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRFOVGeometryMacro")

	partial_success = verifyType1(ds, 
			"MRFOVGeometryMacro", 
			"MRFOVGeometrySequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRFOVGeometryMacro success after verifying MRFOVGeometrySequence" + ("success" if partial_success else "failure")) 
	if "MRFOVGeometrySequence" in ds:
		MRFOVGeometrySequence_data = ds.MRFOVGeometrySequence
		if type(MRFOVGeometrySequence_data) == Sequence:
			for i1 in range(0, len(MRFOVGeometrySequence_data)):
				if verbose:
					log.append( " MRFOVGeometrySequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRFOVGeometrySequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"MRFOVGeometryMacro", "InPlanePhaseEncodingDirection", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRFOVGeometryMacro success after verifying InPlanePhaseEncodingDirection --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "InPlanePhaseEncodingDirection" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["InPlanePhaseEncodingDirection"], 
							StringValueTable_InplanePhaseEncodingDirection, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRFOVGeometryMacro success after verifying string enumerated values InPlanePhaseEncodingDirection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRFOVGeometryMacro", "MRAcquisitionFrequencyEncodingSteps", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRFOVGeometryMacro success after verifying MRAcquisitionFrequencyEncodingSteps --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRFOVGeometryMacro", "MRAcquisitionPhaseEncodingStepsInPlane", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRFOVGeometryMacro success after verifying MRAcquisitionPhaseEncodingStepsInPlane --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRFOVGeometryMacro", "MRAcquisitionPhaseEncodingStepsOutOfPlane", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRFOVGeometryMacro success after verifying MRAcquisitionPhaseEncodingStepsOutOfPlane --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRFOVGeometryMacro", "PercentSampling", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRFOVGeometryMacro success after verifying PercentSampling --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "PercentSampling" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["PercentSampling"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"MRFOVGeometryMacro", "PercentPhaseFieldOfView", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRFOVGeometryMacro success after verifying PercentPhaseFieldOfView --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "PercentPhaseFieldOfView" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["PercentPhaseFieldOfView"], 
							verbose, log, -1, True)

	return global_success

def Macro_MREchoMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MREchoMacro")

	partial_success = verifyType1(ds, 
			"MREchoMacro", 
			"MREchoSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MREchoMacro success after verifying MREchoSequence" + ("success" if partial_success else "failure")) 
	if "MREchoSequence" in ds:
		MREchoSequence_data = ds.MREchoSequence
		if type(MREchoSequence_data) == Sequence:
			for i1 in range(0, len(MREchoSequence_data)):
				if verbose:
					log.append( " MREchoSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MREchoSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MREchoMacro", "EffectiveEchoTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MREchoMacro success after verifying EffectiveEchoTime --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRModifierMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRModifierMacro")

	partial_success = verifyType1(ds, 
			"MRModifierMacro", 
			"MRModifierSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRModifierMacro success after verifying MRModifierSequence" + ("success" if partial_success else "failure")) 
	if "MRModifierSequence" in ds:
		MRModifierSequence_data = ds.MRModifierSequence
		if type(MRModifierSequence_data) == Sequence:
			for i1 in range(0, len(MRModifierSequence_data)):
				if verbose:
					log.append( " MRModifierSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRModifierSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "InversionRecovery", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying InversionRecovery --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "InversionRecovery" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["InversionRecovery"], 
							StringValueTable_YesNoFull, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying string enumerated values InversionRecovery --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "InversionTimes", 
						verbose, log, ElementDictionary, 
						Condition_InversionRecoveryIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying InversionTimes --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "FlowCompensation", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying FlowCompensation --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "FlowCompensation" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["FlowCompensation"], 
							StringValueTable_FlowCompensation, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying string defined terms FlowCompensation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "FlowCompensationDirection", 
						verbose, log, ElementDictionary, 
						Condition_FlowCompensationNotNone, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying FlowCompensationDirection --> "+("success" if partial_success else "failure"))

				if Condition_FlowCompensationNotNone(ds1, parent_ds1, root_ds):
					if "FlowCompensationDirection" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["FlowCompensationDirection"], 
							StringValueTable_FlowCompensationDirection, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying string enumerated values FlowCompensationDirection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "Spoiling", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying Spoiling --> "+("success" if partial_success else "failure"))

				if "Spoiling" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["Spoiling"], 
						StringValueTable_Spoiling, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying string enumerated values Spoiling --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "T2Preparation", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying T2Preparation --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "T2Preparation" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["T2Preparation"], 
							StringValueTable_YesNoFull, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying string enumerated values T2Preparation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "SpectrallySelectedExcitation", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying SpectrallySelectedExcitation --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "SpectrallySelectedExcitation" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["SpectrallySelectedExcitation"], 
							StringValueTable_SpectrallySelectedExcitation, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying string enumerated values SpectrallySelectedExcitation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "SpatialPresaturation", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying SpatialPresaturation --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "SpatialPresaturation" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["SpatialPresaturation"], 
							StringValueTable_SpatialPresaturation, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying string enumerated values SpatialPresaturation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "PartialFourier", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying PartialFourier --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "PartialFourier" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["PartialFourier"], 
							StringValueTable_YesNoFull, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying string enumerated values PartialFourier --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "PartialFourierDirection", 
						verbose, log, ElementDictionary, 
						Condition_PartialFourierIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying PartialFourierDirection --> "+("success" if partial_success else "failure"))

				if Condition_PartialFourierIsYes(ds1, parent_ds1, root_ds):
					if "PartialFourierDirection" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["PartialFourierDirection"], 
							StringValueTable_PartialFourierDirection, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying string enumerated values PartialFourierDirection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "ParallelAcquisition", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying ParallelAcquisition --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "ParallelAcquisition" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["ParallelAcquisition"], 
							StringValueTable_YesNoFull, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying string enumerated values ParallelAcquisition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "ParallelAcquisitionTechnique", 
						verbose, log, ElementDictionary, 
						Condition_ParallelAcquisitionIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying ParallelAcquisitionTechnique --> "+("success" if partial_success else "failure"))

				if Condition_ParallelAcquisitionIsYes(ds1, parent_ds1, root_ds):
					if "ParallelAcquisitionTechnique" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["ParallelAcquisitionTechnique"], 
							StringValueTable_ParallelAcquisitionTechnique, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying string enumerated values ParallelAcquisitionTechnique --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "ParallelReductionFactorInPlane", 
						verbose, log, ElementDictionary, 
						Condition_ParallelAcquisitionIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying ParallelReductionFactorInPlane --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "ParallelReductionFactorOutOfPlane", 
						verbose, log, ElementDictionary, 
						Condition_ParallelAcquisitionIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying ParallelReductionFactorOutOfPlane --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRModifierMacro", "ParallelReductionFactorSecondInPlane", 
						verbose, log, ElementDictionary, 
						Condition_ParallelAcquisitionIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRModifierMacro success after verifying ParallelReductionFactorSecondInPlane --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRImagingModifierMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRImagingModifierMacro")

	partial_success = verifyType1(ds, 
			"MRImagingModifierMacro", 
			"MRImagingModifierSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRImagingModifierMacro success after verifying MRImagingModifierSequence" + ("success" if partial_success else "failure")) 
	if "MRImagingModifierSequence" in ds:
		MRImagingModifierSequence_data = ds.MRImagingModifierSequence
		if type(MRImagingModifierSequence_data) == Sequence:
			for i1 in range(0, len(MRImagingModifierSequence_data)):
				if verbose:
					log.append( " MRImagingModifierSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRImagingModifierSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"MRImagingModifierMacro", "MagnetizationTransfer", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying MagnetizationTransfer --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "MagnetizationTransfer" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["MagnetizationTransfer"], 
							StringValueTable_MagnetizationTransfer, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying string enumerated values MagnetizationTransfer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRImagingModifierMacro", "BloodSignalNulling", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying BloodSignalNulling --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "BloodSignalNulling" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["BloodSignalNulling"], 
							StringValueTable_YesNoFull, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying string enumerated values BloodSignalNulling --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRImagingModifierMacro", "Tagging", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying Tagging --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "Tagging" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["Tagging"], 
							StringValueTable_Tagging, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying string enumerated values Tagging --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRImagingModifierMacro", "TagSpacingFirstDimension", 
						verbose, log, ElementDictionary, 
						Condition_TaggingIsGridOrLine, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying TagSpacingFirstDimension --> "+("success" if partial_success else "failure"))

				if Condition_TaggingIsGridOrLine(ds1, parent_ds1, root_ds):
					if "TagSpacingFirstDimension" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["TagSpacingFirstDimension"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"MRImagingModifierMacro", "TagSpacingSecondDimension", 
						verbose, log, ElementDictionary, 
						Condition_TaggingIsGrid, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying TagSpacingSecondDimension --> "+("success" if partial_success else "failure"))

				if Condition_TaggingIsGrid(ds1, parent_ds1, root_ds):
					if "TagSpacingSecondDimension" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["TagSpacingSecondDimension"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"MRImagingModifierMacro", "TagAngleFirstAxis", 
						verbose, log, ElementDictionary, 
						Condition_TaggingIsGridOrLine, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying TagAngleFirstAxis --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRImagingModifierMacro", "TagAngleSecondAxis", 
						verbose, log, ElementDictionary, 
						Condition_TaggingIsGrid, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying TagAngleSecondAxis --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRImagingModifierMacro", "TagThickness", 
						verbose, log, ElementDictionary, 
						Condition_TaggingIsGridOrLine, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying TagThickness --> "+("success" if partial_success else "failure"))

				if Condition_TaggingIsGridOrLine(ds1, parent_ds1, root_ds):
					if "TagThickness" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["TagThickness"], 
							verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"MRImagingModifierMacro", "TaggingDelay", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying TaggingDelay --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRImagingModifierMacro", "TransmitterFrequency", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying TransmitterFrequency --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "TransmitterFrequency" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["TransmitterFrequency"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"MRImagingModifierMacro", "PixelBandwidth", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRImagingModifierMacro success after verifying PixelBandwidth --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "PixelBandwidth" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["PixelBandwidth"], 
							verbose, log, -1, True)

	return global_success

def Macro_MRReceiveCoilMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRReceiveCoilMacro")

	partial_success = verifyType1(ds, 
			"MRReceiveCoilMacro", 
			"MRReceiveCoilSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRReceiveCoilMacro success after verifying MRReceiveCoilSequence" + ("success" if partial_success else "failure")) 
	if "MRReceiveCoilSequence" in ds:
		MRReceiveCoilSequence_data = ds.MRReceiveCoilSequence
		if type(MRReceiveCoilSequence_data) == Sequence:
			for i1 in range(0, len(MRReceiveCoilSequence_data)):
				if verbose:
					log.append( " MRReceiveCoilSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRReceiveCoilSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MRReceiveCoilMacro", "ReceiveCoilName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRReceiveCoilMacro success after verifying ReceiveCoilName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"MRReceiveCoilMacro", "ReceiveCoilManufacturerName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRReceiveCoilMacro success after verifying ReceiveCoilManufacturerName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MRReceiveCoilMacro", "ReceiveCoilType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRReceiveCoilMacro success after verifying ReceiveCoilType --> "+("success" if partial_success else "failure"))

				if "ReceiveCoilType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ReceiveCoilType"], 
						StringValueTable_ReceiveCoilType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRReceiveCoilMacro success after verifying string defined terms ReceiveCoilType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MRReceiveCoilMacro", "QuadratureReceiveCoil", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRReceiveCoilMacro success after verifying QuadratureReceiveCoil --> "+("success" if partial_success else "failure"))

				if "QuadratureReceiveCoil" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["QuadratureReceiveCoil"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRReceiveCoilMacro success after verifying string enumerated values QuadratureReceiveCoil --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"MRReceiveCoilMacro", 
						"MultiCoilDefinitionSequence", 
						verbose, log, ElementDictionary, 
						Condition_ReceiveCoilTypeIsMultiCoil, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "MRReceiveCoilMacro success after verifying MultiCoilDefinitionSequence" + ("success" if partial_success else "failure")) 
				if "MultiCoilDefinitionSequence" in ds1:
					MultiCoilDefinitionSequence_data = ds1.MultiCoilDefinitionSequence
					if type(MultiCoilDefinitionSequence_data) == Sequence:
						for i2 in range(0, len(MultiCoilDefinitionSequence_data)):
							if verbose:
								log.append( " MultiCoilDefinitionSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MultiCoilDefinitionSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"MRReceiveCoilMacro", "MultiCoilElementName", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRReceiveCoilMacro success after verifying MultiCoilElementName --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"MRReceiveCoilMacro", "MultiCoilElementUsed", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRReceiveCoilMacro success after verifying MultiCoilElementUsed --> "+("success" if partial_success else "failure"))

							if "MultiCoilElementUsed" not in ds2: 
								partial_success = False 
							else:
								partial_success = verifyEnumValues(ds2["MultiCoilElementUsed"], 
									StringValueTable_YesNoFull, 
									verbose, log, -1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRReceiveCoilMacro success after verifying string enumerated values MultiCoilElementUsed --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"MRReceiveCoilMacro", "MultiCoilConfiguration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRReceiveCoilMacro success after verifying MultiCoilConfiguration --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRTransmitCoilMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRTransmitCoilMacro")

	partial_success = verifyType1(ds, 
			"MRTransmitCoilMacro", 
			"MRTransmitCoilSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRTransmitCoilMacro success after verifying MRTransmitCoilSequence" + ("success" if partial_success else "failure")) 
	if "MRTransmitCoilSequence" in ds:
		MRTransmitCoilSequence_data = ds.MRTransmitCoilSequence
		if type(MRTransmitCoilSequence_data) == Sequence:
			for i1 in range(0, len(MRTransmitCoilSequence_data)):
				if verbose:
					log.append( " MRTransmitCoilSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRTransmitCoilSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MRTransmitCoilMacro", "TransmitCoilName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRTransmitCoilMacro success after verifying TransmitCoilName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"MRTransmitCoilMacro", "TransmitCoilManufacturerName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRTransmitCoilMacro success after verifying TransmitCoilManufacturerName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MRTransmitCoilMacro", "TransmitCoilType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRTransmitCoilMacro success after verifying TransmitCoilType --> "+("success" if partial_success else "failure"))

				if "TransmitCoilType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["TransmitCoilType"], 
						StringValueTable_TransmitCoilType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRTransmitCoilMacro success after verifying string defined terms TransmitCoilType --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRDiffusionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRDiffusionMacro")

	partial_success = verifyType1(ds, 
			"MRDiffusionMacro", 
			"MRDiffusionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRDiffusionMacro success after verifying MRDiffusionSequence" + ("success" if partial_success else "failure")) 
	if "MRDiffusionSequence" in ds:
		MRDiffusionSequence_data = ds.MRDiffusionSequence
		if type(MRDiffusionSequence_data) == Sequence:
			for i1 in range(0, len(MRDiffusionSequence_data)):
				if verbose:
					log.append( " MRDiffusionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRDiffusionSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"MRDiffusionMacro", "DiffusionBValue", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRDiffusionMacro success after verifying DiffusionBValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRDiffusionMacro", "DiffusionDirectionality", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRDiffusionMacro success after verifying DiffusionDirectionality --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "DiffusionDirectionality" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["DiffusionDirectionality"], 
							StringValueTable_DiffusionDirectionality, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRDiffusionMacro success after verifying string defined terms DiffusionDirectionality --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"MRDiffusionMacro", 
						"DiffusionGradientDirectionSequence", 
						verbose, log, ElementDictionary, 
						Condition_DiffusionDirectionalityIsDirectional, 
						True, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "MRDiffusionMacro success after verifying DiffusionGradientDirectionSequence" + ("success" if partial_success else "failure")) 
				if "DiffusionGradientDirectionSequence" in ds1:
					DiffusionGradientDirectionSequence_data = ds1.DiffusionGradientDirectionSequence
					if type(DiffusionGradientDirectionSequence_data) == Sequence:
						for i2 in range(0, len(DiffusionGradientDirectionSequence_data)):
							if verbose:
								log.append( " DiffusionGradientDirectionSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = DiffusionGradientDirectionSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"MRDiffusionMacro", "DiffusionGradientOrientation", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRDiffusionMacro success after verifying DiffusionGradientOrientation --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"MRDiffusionMacro", 
						"DiffusionBMatrixSequence", 
						verbose, log, ElementDictionary, 
						Condition_DiffusionDirectionalityIsBMatrix, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "MRDiffusionMacro success after verifying DiffusionBMatrixSequence" + ("success" if partial_success else "failure")) 
				if "DiffusionBMatrixSequence" in ds1:
					DiffusionBMatrixSequence_data = ds1.DiffusionBMatrixSequence
					if type(DiffusionBMatrixSequence_data) == Sequence:
						for i2 in range(0, len(DiffusionBMatrixSequence_data)):
							if verbose:
								log.append( " DiffusionBMatrixSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = DiffusionBMatrixSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"MRDiffusionMacro", "DiffusionBValueXX", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRDiffusionMacro success after verifying DiffusionBValueXX --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"MRDiffusionMacro", "DiffusionBValueXY", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRDiffusionMacro success after verifying DiffusionBValueXY --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"MRDiffusionMacro", "DiffusionBValueXZ", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRDiffusionMacro success after verifying DiffusionBValueXZ --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"MRDiffusionMacro", "DiffusionBValueYY", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRDiffusionMacro success after verifying DiffusionBValueYY --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"MRDiffusionMacro", "DiffusionBValueYZ", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRDiffusionMacro success after verifying DiffusionBValueYZ --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"MRDiffusionMacro", "DiffusionBValueZZ", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRDiffusionMacro success after verifying DiffusionBValueZZ --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRDiffusionMacro", "DiffusionAnisotropyType", 
						verbose, log, ElementDictionary, 
						Condition_NeedDiffusionAnisotropyType, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRDiffusionMacro success after verifying DiffusionAnisotropyType --> "+("success" if partial_success else "failure"))

				if Condition_NeedDiffusionAnisotropyType(ds1, parent_ds1, root_ds):
					if "DiffusionAnisotropyType" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["DiffusionAnisotropyType"], 
							StringValueTable_DiffusionAnisotropyType, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " MRDiffusionMacro success after verifying string defined terms DiffusionAnisotropyType --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRAveragesMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRAveragesMacro")

	partial_success = verifyType1(ds, 
			"MRAveragesMacro", 
			"MRAveragesSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRAveragesMacro success after verifying MRAveragesSequence" + ("success" if partial_success else "failure")) 
	if "MRAveragesSequence" in ds:
		MRAveragesSequence_data = ds.MRAveragesSequence
		if type(MRAveragesSequence_data) == Sequence:
			for i1 in range(0, len(MRAveragesSequence_data)):
				if verbose:
					log.append( " MRAveragesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRAveragesSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MRAveragesMacro", "NumberOfAverages", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRAveragesMacro success after verifying NumberOfAverages --> "+("success" if partial_success else "failure"))

				if "NumberOfAverages" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["NumberOfAverages"], 
						verbose, log, -1, True)

	return global_success

def Macro_MRSpatialSaturationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRSpatialSaturationMacro")

	partial_success = verifyType2(ds, 
			"MRSpatialSaturationMacro", 
			"MRSpatialSaturationSequence", 
			verbose, log, ElementDictionary, 
			0, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRSpatialSaturationMacro success after verifying MRSpatialSaturationSequence" + ("success" if partial_success else "failure")) 
	if "MRSpatialSaturationSequence" in ds:
		MRSpatialSaturationSequence_data = ds.MRSpatialSaturationSequence
		if type(MRSpatialSaturationSequence_data) == Sequence:
			for i1 in range(0, len(MRSpatialSaturationSequence_data)):
				if verbose:
					log.append( " MRSpatialSaturationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRSpatialSaturationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MRSpatialSaturationMacro", "SlabThickness", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpatialSaturationMacro success after verifying SlabThickness --> "+("success" if partial_success else "failure"))

				if "SlabThickness" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["SlabThickness"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"MRSpatialSaturationMacro", "SlabOrientation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpatialSaturationMacro success after verifying SlabOrientation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MRSpatialSaturationMacro", "MidSlabPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpatialSaturationMacro success after verifying MidSlabPosition --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRMetaboliteMapMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRMetaboliteMapMacro")

	partial_success = verifyType1(ds, 
			"MRMetaboliteMapMacro", 
			"MRMetaboliteMapSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRMetaboliteMapMacro success after verifying MRMetaboliteMapSequence" + ("success" if partial_success else "failure")) 
	if "MRMetaboliteMapSequence" in ds:
		MRMetaboliteMapSequence_data = ds.MRMetaboliteMapSequence
		if type(MRMetaboliteMapSequence_data) == Sequence:
			for i1 in range(0, len(MRMetaboliteMapSequence_data)):
				if verbose:
					log.append( " MRMetaboliteMapSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRMetaboliteMapSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MRMetaboliteMapMacro", "MetaboliteMapDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRMetaboliteMapMacro success after verifying MetaboliteMapDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"MRMetaboliteMapMacro", 
						"MetaboliteMapCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "MRMetaboliteMapMacro success after verifying MetaboliteMapCodeSequence" + ("success" if partial_success else "failure")) 
				if "MetaboliteMapCodeSequence" in ds1:
					MetaboliteMapCodeSequence_data = ds1.MetaboliteMapCodeSequence
					if type(MetaboliteMapCodeSequence_data) == Sequence:
						for i2 in range(0, len(MetaboliteMapCodeSequence_data)):
							if verbose:
								log.append( " MetaboliteMapCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MetaboliteMapCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " MRMetaboliteMapMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"MRMetaboliteMapMacro", 
						"ChemicalShiftSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "MRMetaboliteMapMacro success after verifying ChemicalShiftSequence" + ("success" if partial_success else "failure")) 
				if "ChemicalShiftSequence" in ds1:
					ChemicalShiftSequence_data = ds1.ChemicalShiftSequence
					if type(ChemicalShiftSequence_data) == Sequence:
						for i2 in range(0, len(ChemicalShiftSequence_data)):
							if verbose:
								log.append( " ChemicalShiftSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ChemicalShiftSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"MRMetaboliteMapMacro", "ChemicalShiftMinimumIntegrationLimitInppm", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRMetaboliteMapMacro success after verifying ChemicalShiftMinimumIntegrationLimitInppm --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"MRMetaboliteMapMacro", "ChemicalShiftMaximumIntegrationLimitInppm", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRMetaboliteMapMacro success after verifying ChemicalShiftMaximumIntegrationLimitInppm --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRVelocityEncodingMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRVelocityEncodingMacro")

	partial_success = verifyType1(ds, 
			"MRVelocityEncodingMacro", 
			"MRVelocityEncodingSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRVelocityEncodingMacro success after verifying MRVelocityEncodingSequence" + ("success" if partial_success else "failure")) 
	if "MRVelocityEncodingSequence" in ds:
		MRVelocityEncodingSequence_data = ds.MRVelocityEncodingSequence
		if type(MRVelocityEncodingSequence_data) == Sequence:
			for i1 in range(0, len(MRVelocityEncodingSequence_data)):
				if verbose:
					log.append( " MRVelocityEncodingSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRVelocityEncodingSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MRVelocityEncodingMacro", "VelocityEncodingDirection", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRVelocityEncodingMacro success after verifying VelocityEncodingDirection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MRVelocityEncodingMacro", "VelocityEncodingMinimumValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRVelocityEncodingMacro success after verifying VelocityEncodingMinimumValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MRVelocityEncodingMacro", "VelocityEncodingMaximumValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRVelocityEncodingMacro success after verifying VelocityEncodingMaximumValue --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRArterialSpinLabelingMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRArterialSpinLabelingMacro")

	partial_success = verifyType1(ds, 
			"MRArterialSpinLabelingMacro", 
			"MRArterialSpinLabelingSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRArterialSpinLabelingMacro success after verifying MRArterialSpinLabelingSequence" + ("success" if partial_success else "failure")) 
	if "MRArterialSpinLabelingSequence" in ds:
		MRArterialSpinLabelingSequence_data = ds.MRArterialSpinLabelingSequence
		if type(MRArterialSpinLabelingSequence_data) == Sequence:
			for i1 in range(0, len(MRArterialSpinLabelingSequence_data)):
				if verbose:
					log.append( " MRArterialSpinLabelingSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRArterialSpinLabelingSequence_data[i1]
				partial_success =  		verifyType2(ds1, 
						"MRArterialSpinLabelingMacro", "ASLTechniqueDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRArterialSpinLabelingMacro success after verifying ASLTechniqueDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRArterialSpinLabelingMacro", "ASLContext", 
						verbose, log, ElementDictionary, 
						0, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRArterialSpinLabelingMacro success after verifying ASLContext --> "+("success" if partial_success else "failure"))

				if "ASLContext" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ASLContext"], 
						StringValueTable_ASLContext, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRArterialSpinLabelingMacro success after verifying string enumerated values ASLContext --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"MRArterialSpinLabelingMacro", 
						"ASLSlabSequence", 
						verbose, log, ElementDictionary, 
						Condition_ASLContextIsControlLOrLabel, 
						True, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "MRArterialSpinLabelingMacro success after verifying ASLSlabSequence" + ("success" if partial_success else "failure")) 
				if "ASLSlabSequence" in ds1:
					ASLSlabSequence_data = ds1.ASLSlabSequence
					if type(ASLSlabSequence_data) == Sequence:
						for i2 in range(0, len(ASLSlabSequence_data)):
							if verbose:
								log.append( " ASLSlabSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ASLSlabSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"MRArterialSpinLabelingMacro", "ASLSlabNumber", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRArterialSpinLabelingMacro success after verifying ASLSlabNumber --> "+("success" if partial_success else "failure"))

							partial_success =  Macro_GeneralAnatomyOptionalMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " MRArterialSpinLabelingMacro success after verifying GeneralAnatomyOptionalMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1(ds2, 
									"MRArterialSpinLabelingMacro", "ASLSlabThickness", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRArterialSpinLabelingMacro success after verifying ASLSlabThickness --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"MRArterialSpinLabelingMacro", "ASLSlabOrientation", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRArterialSpinLabelingMacro success after verifying ASLSlabOrientation --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"MRArterialSpinLabelingMacro", "ASLMidSlabPosition", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRArterialSpinLabelingMacro success after verifying ASLMidSlabPosition --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"MRArterialSpinLabelingMacro", "ASLPulseTrainDuration", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRArterialSpinLabelingMacro success after verifying ASLPulseTrainDuration --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MRArterialSpinLabelingMacro", "ASLCrusherFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRArterialSpinLabelingMacro success after verifying ASLCrusherFlag --> "+("success" if partial_success else "failure"))

				if "ASLCrusherFlag" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ASLCrusherFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRArterialSpinLabelingMacro success after verifying string enumerated values ASLCrusherFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRArterialSpinLabelingMacro", "ASLCrusherFlowLimit", 
						verbose, log, ElementDictionary, 
						Condition_ASLCrusherFlagIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRArterialSpinLabelingMacro success after verifying ASLCrusherFlowLimit --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MRArterialSpinLabelingMacro", "ASLCrusherDescription", 
						verbose, log, ElementDictionary, 
						Condition_ASLCrusherFlagIsYes, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRArterialSpinLabelingMacro success after verifying ASLCrusherDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MRArterialSpinLabelingMacro", "ASLBolusCutoffFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRArterialSpinLabelingMacro success after verifying ASLBolusCutoffFlag --> "+("success" if partial_success else "failure"))

				if "ASLBolusCutoffFlag" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ASLBolusCutoffFlag"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRArterialSpinLabelingMacro success after verifying string enumerated values ASLBolusCutoffFlag --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1C(ds1, 
						"MRArterialSpinLabelingMacro", 
						"ASLBolusCutoffTimingSequence", 
						verbose, log, ElementDictionary, 
						Condition_ASLBolusCutoffFlagIsYes, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "MRArterialSpinLabelingMacro success after verifying ASLBolusCutoffTimingSequence" + ("success" if partial_success else "failure")) 
				if "ASLBolusCutoffTimingSequence" in ds1:
					ASLBolusCutoffTimingSequence_data = ds1.ASLBolusCutoffTimingSequence
					if type(ASLBolusCutoffTimingSequence_data) == Sequence:
						for i2 in range(0, len(ASLBolusCutoffTimingSequence_data)):
							if verbose:
								log.append( " ASLBolusCutoffTimingSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ASLBolusCutoffTimingSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"MRArterialSpinLabelingMacro", "ASLBolusCutoffDelayTime", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRArterialSpinLabelingMacro success after verifying ASLBolusCutoffDelayTime --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType2(ds2, 
									"MRArterialSpinLabelingMacro", "ASLBolusCutoffTechnique", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MRArterialSpinLabelingMacro success after verifying ASLBolusCutoffTechnique --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MRImageAndSpectroscopyInstanceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRImageAndSpectroscopyInstanceMacro")

	partial_success =  		verifyType3(ds, 
			"MRImageAndSpectroscopyInstanceMacro", "AcquisitionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying AcquisitionNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRImageAndSpectroscopyInstanceMacro", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRImageAndSpectroscopyInstanceMacro", "AcquisitionDuration", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying AcquisitionDuration --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"MRImageAndSpectroscopyInstanceMacro", 
			"ReferencedRawDataSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRImageAndSpectroscopyInstanceMacro success after verifying ReferencedRawDataSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedRawDataSequence" in ds:
		ReferencedRawDataSequence_data = ds.ReferencedRawDataSequence
		if type(ReferencedRawDataSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedRawDataSequence_data)):
				if verbose:
					log.append( " ReferencedRawDataSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedRawDataSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"MRImageAndSpectroscopyInstanceMacro", 
			"ReferencedWaveformSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRImageAndSpectroscopyInstanceMacro success after verifying ReferencedWaveformSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedWaveformSequence" in ds:
		ReferencedWaveformSequence_data = ds.ReferencedWaveformSequence
		if type(ReferencedWaveformSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedWaveformSequence_data)):
				if verbose:
					log.append( " ReferencedWaveformSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedWaveformSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"MRImageAndSpectroscopyInstanceMacro", 
			"ReferencedImageEvidenceSequence", 
			verbose, log, ElementDictionary, 
			Condition_ReferencedImageSequenceIsPresentInFunctionalGroups, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRImageAndSpectroscopyInstanceMacro success after verifying ReferencedImageEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageEvidenceSequence" in ds:
		ReferencedImageEvidenceSequence_data = ds.ReferencedImageEvidenceSequence
		if type(ReferencedImageEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageEvidenceSequence_data)):
				if verbose:
					log.append( " ReferencedImageEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageEvidenceSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"MRImageAndSpectroscopyInstanceMacro", 
			"SourceImageEvidenceSequence", 
			verbose, log, ElementDictionary, 
			Condition_SourceImageSequenceIsPresentInFunctionalGroups, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRImageAndSpectroscopyInstanceMacro success after verifying SourceImageEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "SourceImageEvidenceSequence" in ds:
		SourceImageEvidenceSequence_data = ds.SourceImageEvidenceSequence
		if type(SourceImageEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(SourceImageEvidenceSequence_data)):
				if verbose:
					log.append( " SourceImageEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceImageEvidenceSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"MRImageAndSpectroscopyInstanceMacro", 
			"ReferencedPresentationStateSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRImageAndSpectroscopyInstanceMacro success after verifying ReferencedPresentationStateSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPresentationStateSequence" in ds:
		ReferencedPresentationStateSequence_data = ds.ReferencedPresentationStateSequence
		if type(ReferencedPresentationStateSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPresentationStateSequence_data)):
				if verbose:
					log.append( " ReferencedPresentationStateSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPresentationStateSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"MRImageAndSpectroscopyInstanceMacro", "ContentQualification", 
			verbose, log, ElementDictionary, 
			Condition_NotLegacyConvertedMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying ContentQualification --> "+("success" if partial_success else "failure"))

	if Condition_NotLegacyConvertedMR(ds, parent_ds, root_ds):
		if "ContentQualification" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ContentQualification"], 
				StringValueTable_ContentQualification, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying string enumerated values ContentQualification --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRImageAndSpectroscopyInstanceMacro", "ResonantNucleus", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying ResonantNucleus --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedMR(ds, parent_ds, root_ds):
		if "ResonantNucleus" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["ResonantNucleus"], 
				StringValueTable_ResonantNucleus, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying string defined terms ResonantNucleus --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRImageAndSpectroscopyInstanceMacro", "KSpaceFiltering", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying KSpaceFiltering --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedMR(ds, parent_ds, root_ds):
		if "KSpaceFiltering" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["KSpaceFiltering"], 
				StringValueTable_KSpaceFiltering, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying string defined terms KSpaceFiltering --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRImageAndSpectroscopyInstanceMacro", "MagneticFieldStrength", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying MagneticFieldStrength --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedMR(ds, parent_ds, root_ds):
		if "MagneticFieldStrength" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["MagneticFieldStrength"], 
				verbose, log, -1, True)

	partial_success =  		verifyType1C(ds, 
			"MRImageAndSpectroscopyInstanceMacro", "ApplicableSafetyStandardAgency", 
			verbose, log, ElementDictionary, 
			Condition_NotLegacyConvertedMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying ApplicableSafetyStandardAgency --> "+("success" if partial_success else "failure"))

	if Condition_NotLegacyConvertedMR(ds, parent_ds, root_ds):
		if "ApplicableSafetyStandardAgency" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["ApplicableSafetyStandardAgency"], 
				StringValueTable_ApplicableSafetyStandardAgency, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying string defined terms ApplicableSafetyStandardAgency --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImageAndSpectroscopyInstanceMacro", "ApplicableSafetyStandardDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying ApplicableSafetyStandardDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImageAndSpectroscopyInstanceMacro", "ImageComments", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying ImageComments --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImageAndSpectroscopyInstanceMacro", "IsocenterPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying IsocenterPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MRImageAndSpectroscopyInstanceMacro", "B1rms", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRImageAndSpectroscopyInstanceMacro success after verifying B1rms --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiFrameFunctionalGroupsForEnhancedMRImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForEnhancedMRImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForEnhancedMRImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInPerFrameFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInSharedFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedRespiratorySynchronizationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_MRImageFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRImageFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRImageFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRTimingAndRelatedParametersMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRTimingAndRelatedParametersMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRTimingAndRelatedParametersMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRFOVGeometryMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRFOVGeometryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRFOVGeometryMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMREchoMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MREchoMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MREchoMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRModifierMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRModifierMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRModifierMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRImagingModifierMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRImagingModifierMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRImagingModifierMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRReceiveCoilMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRReceiveCoilMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRReceiveCoilMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRTransmitCoilMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRTransmitCoilMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRTransmitCoilMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRDiffusionMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRDiffusionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRDiffusionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRAveragesMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRAveragesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRAveragesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRSpatialSaturationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRSpatialSaturationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRSpatialSaturationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRMetaboliteMapMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRMetaboliteMapMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRMetaboliteMapMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRVelocityEncodingMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRVelocityEncodingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRVelocityEncodingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRArterialSpinLabelingMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRArterialSpinLabelingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRArterialSpinLabelingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForEnhancedMRImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInSharedFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInPerFrameFunctionalGroupSequenceAndPhotometricInterpretationIsMonochrome2(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedRespiratorySynchronizationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_MRImageFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRImageFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRImageFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRTimingAndRelatedParametersMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRTimingAndRelatedParametersMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRTimingAndRelatedParametersMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRFOVGeometryMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRFOVGeometryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRFOVGeometryMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMREchoMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MREchoMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MREchoMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRModifierMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRModifierMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRModifierMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRImagingModifierMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRImagingModifierMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRImagingModifierMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRReceiveCoilMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRReceiveCoilMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRReceiveCoilMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRTransmitCoilMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRTransmitCoilMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRTransmitCoilMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRDiffusionMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRDiffusionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRDiffusionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRAveragesMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRAveragesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRAveragesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRSpatialSaturationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRSpatialSaturationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRSpatialSaturationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRMetaboliteMapMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRMetaboliteMapMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRMetaboliteMapMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRVelocityEncodingMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRVelocityEncodingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRVelocityEncodingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRArterialSpinLabelingMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRArterialSpinLabelingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying MRArterialSpinLabelingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedMRImage success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_MRSpectroscopyFrameTypeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRSpectroscopyFrameTypeMacro")

	partial_success = verifyType1(ds, 
			"MRSpectroscopyFrameTypeMacro", 
			"MRSpectroscopyFrameTypeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRSpectroscopyFrameTypeMacro success after verifying MRSpectroscopyFrameTypeSequence" + ("success" if partial_success else "failure")) 
	if "MRSpectroscopyFrameTypeSequence" in ds:
		MRSpectroscopyFrameTypeSequence_data = ds.MRSpectroscopyFrameTypeSequence
		if type(MRSpectroscopyFrameTypeSequence_data) == Sequence:
			for i1 in range(0, len(MRSpectroscopyFrameTypeSequence_data)):
				if verbose:
					log.append( " MRSpectroscopyFrameTypeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRSpectroscopyFrameTypeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MRSpectroscopyFrameTypeMacro", "FrameType", 
						verbose, log, ElementDictionary, 
									4, 4)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopyFrameTypeMacro success after verifying FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedFrameType1, 
						verbose, log, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopyFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageAndFrameType2, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopyFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_EnhancedMRSpectroscopyImageAndFrameType3, 
						verbose, log, 2)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopyFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_EnhancedMRSpectroscopyFrameType4, 
						verbose, log, 3)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopyFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_MRSpectroscopyDescriptionFrameLevelMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MRSpectroscopyFrameTypeMacro success after verifying MRSpectroscopyDescriptionFrameLevelMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_MRSpectroscopyFOVGeometryMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MRSpectroscopyFOVGeometryMacro")

	partial_success = verifyType1(ds, 
			"MRSpectroscopyFOVGeometryMacro", 
			"MRSpectroscopyFOVGeometrySequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRSpectroscopyFOVGeometryMacro success after verifying MRSpectroscopyFOVGeometrySequence" + ("success" if partial_success else "failure")) 
	if "MRSpectroscopyFOVGeometrySequence" in ds:
		MRSpectroscopyFOVGeometrySequence_data = ds.MRSpectroscopyFOVGeometrySequence
		if type(MRSpectroscopyFOVGeometrySequence_data) == Sequence:
			for i1 in range(0, len(MRSpectroscopyFOVGeometrySequence_data)):
				if verbose:
					log.append( " MRSpectroscopyFOVGeometrySequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MRSpectroscopyFOVGeometrySequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"MRSpectroscopyFOVGeometryMacro", "SpectroscopyAcquisitionDataColumns", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopyFOVGeometryMacro success after verifying SpectroscopyAcquisitionDataColumns --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "SpectroscopyAcquisitionDataColumns" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["SpectroscopyAcquisitionDataColumns"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"MRSpectroscopyFOVGeometryMacro", "SpectroscopyAcquisitionPhaseRows", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopyFOVGeometryMacro success after verifying SpectroscopyAcquisitionPhaseRows --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "SpectroscopyAcquisitionPhaseRows" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["SpectroscopyAcquisitionPhaseRows"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"MRSpectroscopyFOVGeometryMacro", "SpectroscopyAcquisitionPhaseColumns", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopyFOVGeometryMacro success after verifying SpectroscopyAcquisitionPhaseColumns --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "SpectroscopyAcquisitionPhaseColumns" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["SpectroscopyAcquisitionPhaseColumns"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"MRSpectroscopyFOVGeometryMacro", "SpectroscopyAcquisitionOutOfPlanePhaseSteps", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopyFOVGeometryMacro success after verifying SpectroscopyAcquisitionOutOfPlanePhaseSteps --> "+("success" if partial_success else "failure"))

				if "SpectroscopyAcquisitionOutOfPlanePhaseSteps" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["SpectroscopyAcquisitionOutOfPlanePhaseSteps"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"MRSpectroscopyFOVGeometryMacro", "PercentSampling", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopyFOVGeometryMacro success after verifying PercentSampling --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "PercentSampling" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["PercentSampling"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"MRSpectroscopyFOVGeometryMacro", "PercentPhaseFieldOfView", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopyFOVGeometryMacro success after verifying PercentPhaseFieldOfView --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "PercentPhaseFieldOfView" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["PercentPhaseFieldOfView"], 
							verbose, log, -1, True)

	return global_success

def Module_MultiFrameFunctionalGroupsForMRSpectroscopy_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForMRSpectroscopy")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForMRSpectroscopy", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedRespiratorySynchronizationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_MRSpectroscopyFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRSpectroscopyFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRSpectroscopyFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRTimingAndRelatedParametersMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRTimingAndRelatedParametersMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRTimingAndRelatedParametersMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRSpectroscopyFOVGeometryMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRSpectroscopyFOVGeometryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRSpectroscopyFOVGeometryMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMREchoMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MREchoMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MREchoMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRModifierMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRModifierMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRModifierMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRReceiveCoilMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRReceiveCoilMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRReceiveCoilMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRTransmitCoilMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRTransmitCoilMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRTransmitCoilMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRDiffusionMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRDiffusionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRDiffusionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRAveragesMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRAveragesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRAveragesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRSpatialSaturationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRSpatialSaturationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRSpatialSaturationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRVelocityEncodingMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRVelocityEncodingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRVelocityEncodingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForMRSpectroscopy", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedRespiratorySynchronizationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_MRSpectroscopyFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRSpectroscopyFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRSpectroscopyFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRTimingAndRelatedParametersMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRTimingAndRelatedParametersMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRTimingAndRelatedParametersMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRSpectroscopyFOVGeometryMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRSpectroscopyFOVGeometryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRSpectroscopyFOVGeometryMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMREchoMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MREchoMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MREchoMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRModifierMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRModifierMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRModifierMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRReceiveCoilMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRReceiveCoilMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRReceiveCoilMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRTransmitCoilMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRTransmitCoilMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRTransmitCoilMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRDiffusionMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRDiffusionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRDiffusionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRAveragesMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRAveragesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRAveragesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRSpatialSaturationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRSpatialSaturationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRSpatialSaturationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedMRVelocityEncodingMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRVelocityEncodingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying MRVelocityEncodingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForMRSpectroscopy success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_EnhancedMRImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedMRImage")

	partial_success =  Macro_MRImageAndSpectroscopyInstanceMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedMRImage success after verifying MRImageAndSpectroscopyInstanceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"EnhancedMRImage", "ImageType", 
			verbose, log, ElementDictionary, 
			4, 4)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageAndFrameType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_EnhancedMRImageAndFrameType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_EnhancedMRImageType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_CommonCTMRImageDescriptionImageLevelMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedMRImage success after verifying CommonCTMRImageDescriptionImageLevelMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_MRImageDescriptionImageLevelMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedMRImage success after verifying MRImageDescriptionImageLevelMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"EnhancedMRImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsMonochrome(ds, parent_ds, root_ds):
		if "SamplesPerPixel" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
				BinaryValueDescription_SamplesPerPixelIsOne, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsColor(ds, parent_ds, root_ds):
		if "SamplesPerPixel" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
				BinaryValueDescription_SamplesPerPixelIsThree, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMRImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))


	if Condition_EnhancedMRImageInstance(ds, parent_ds, root_ds):
		if "PhotometricInterpretation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
				StringValueTable_PhotometricInterpretationMonochrome2, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))


	if Condition_EnhancedMRColorImageInstance(ds, parent_ds, root_ds):
		if "PhotometricInterpretation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
				StringValueTable_PhotometricInterpretationRGBorYBR_FULL_422orYBR_RCTorYBR_ICTorYBR_PARTIAL_420, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMRImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsMonochrome(ds, parent_ds, root_ds):
		if "BitsAllocated" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
				BinaryValueDescription_BitsAre8Or16, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsColor(ds, parent_ds, root_ds):
		if "BitsAllocated" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
				BinaryValueDescription_BitsAre8, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMRImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsMonochrome(ds, parent_ds, root_ds):
		if "BitsStored" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
				BinaryValueDescription_BitsAre8Or12Or16, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsColor(ds, parent_ds, root_ds):
		if "BitsStored" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
				BinaryValueDescription_BitsAre8, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMRImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying HighBit --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsMonochrome(ds, parent_ds, root_ds):
		if "HighBit" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["HighBit"], 
				BinaryValueDescription_BitsAre7Or11Or15, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsColor(ds, parent_ds, root_ds):
		if "HighBit" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["HighBit"], 
				BinaryValueDescription_BitsAre7, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedMRImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsMonochrome(ds, parent_ds, root_ds):
		if "PixelRepresentation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
				BinaryValueDescription_PixelRepresentation, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsColor(ds, parent_ds, root_ds):
		if "PixelRepresentation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
				BinaryValueDescription_PixelRepresentationUnsigned, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedMRImage", "PlanarConfiguration", 
			verbose, log, ElementDictionary, 
			Condition_SamplesPerPixelGreaterThanOne, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying PlanarConfiguration --> "+("success" if partial_success else "failure"))

	if Condition_SamplesPerPixelGreaterThanOne(ds, parent_ds, root_ds):
		if "PlanarConfiguration" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["PlanarConfiguration"], 
				BinaryValueDescription_PlanarConfigurationIsColorByPixel, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying binary enumerated values PlanarConfiguration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedMRImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			Condition_NotLegacyConvertedMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if Condition_NotLegacyConvertedMR(ds, parent_ds, root_ds):
		if "BurnedInAnnotation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
				StringValueTable_NoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedMRImage", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedMRImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			Condition_NotLegacyConvertedMR, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if Condition_NotLegacyConvertedMR(ds, parent_ds, root_ds):
		if "LossyImageCompression" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["LossyImageCompression"], 
				StringValueTable_LossyImageCompression, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedMRImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionRatio" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["LossyImageCompressionRatio"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"EnhancedMRImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["LossyImageCompressionMethod"], 
				StringValueTable_LossyImageCompressionMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying string defined terms LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))


	if Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" method inconsistent with transfer syntax - attribute <LossyImageCompressionMethod>"+\
				" = <{}>".format( tag_for_keyword("LossyImageCompressionMethod")))

	partial_success =  		verifyType1(ds, 
			"EnhancedMRImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if "PresentationLUTShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
			StringValueTable_IdentityPresentationLUTShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedMRImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"EnhancedMRImage", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedMRImage success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedMRImage success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_OptionalViewAndSliceProgressionDirectionMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedMRImage success after verifying OptionalViewAndSliceProgressionDirectionMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MRPulseSequence_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MRPulseSequence")

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "PulseSequenceName", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying PulseSequenceName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "MRAcquisitionType", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying MRAcquisitionType --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "MRAcquisitionType" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["MRAcquisitionType"], 
				StringValueTable_EnhancedMRAcquisitionType, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string defined terms MRAcquisitionType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "EchoPulseSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying EchoPulseSequence --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "EchoPulseSequence" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["EchoPulseSequence"], 
				StringValueTable_EchoPulseSequence, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string enumerated values EchoPulseSequence --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "MultipleSpinEcho", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixedAndEchoPulseSequenceNotGradient, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying MultipleSpinEcho --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixedAndEchoPulseSequenceNotGradient(ds, parent_ds, root_ds):
		if "MultipleSpinEcho" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["MultipleSpinEcho"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string enumerated values MultipleSpinEcho --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "MultiPlanarExcitation", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying MultiPlanarExcitation --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "MultiPlanarExcitation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["MultiPlanarExcitation"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string enumerated values MultiPlanarExcitation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "PhaseContrast", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying PhaseContrast --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "PhaseContrast" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PhaseContrast"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string enumerated values PhaseContrast --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"MRPulseSequence", 
			"VelocityEncodingAcquisitionSequence", 
			verbose, log, ElementDictionary, 
			Condition_PhaseContrastIsYes, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRPulseSequence success after verifying VelocityEncodingAcquisitionSequence" + ("success" if partial_success else "failure")) 
	if "VelocityEncodingAcquisitionSequence" in ds:
		VelocityEncodingAcquisitionSequence_data = ds.VelocityEncodingAcquisitionSequence
		if type(VelocityEncodingAcquisitionSequence_data) == Sequence:
			for i1 in range(0, len(VelocityEncodingAcquisitionSequence_data)):
				if verbose:
					log.append( " VelocityEncodingAcquisitionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VelocityEncodingAcquisitionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MRPulseSequence", "VelocityEncodingDirection", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRPulseSequence success after verifying VelocityEncodingDirection --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "TimeOfFlightContrast", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying TimeOfFlightContrast --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "TimeOfFlightContrast" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["TimeOfFlightContrast"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string enumerated values TimeOfFlightContrast --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "ArterialSpinLabelingContrast", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue3ASL, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying ArterialSpinLabelingContrast --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue3ASL(ds, parent_ds, root_ds):
		if "ArterialSpinLabelingContrast" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ArterialSpinLabelingContrast"], 
				StringValueTable_ArterialSpinLabelingContrast, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string enumerated values ArterialSpinLabelingContrast --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "SteadyStatePulseSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying SteadyStatePulseSequence --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "SteadyStatePulseSequence" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["SteadyStatePulseSequence"], 
				StringValueTable_SteadyStatePulseSequence, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string defined terms SteadyStatePulseSequence --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "EchoPlanarPulseSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying EchoPlanarPulseSequence --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "EchoPlanarPulseSequence" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["EchoPlanarPulseSequence"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string enumerated values EchoPlanarPulseSequence --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "SaturationRecovery", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying SaturationRecovery --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "SaturationRecovery" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["SaturationRecovery"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string enumerated values SaturationRecovery --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "SpectrallySelectedSuppression", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying SpectrallySelectedSuppression --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "SpectrallySelectedSuppression" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["SpectrallySelectedSuppression"], 
				StringValueTable_SpectrallySelectedSuppression, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string defined terms SpectrallySelectedSuppression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "OversamplingPhase", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying OversamplingPhase --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "OversamplingPhase" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["OversamplingPhase"], 
				StringValueTable_OversamplingPhase, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string enumerated values OversamplingPhase --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "GeometryOfKSpaceTraversal", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying GeometryOfKSpaceTraversal --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "GeometryOfKSpaceTraversal" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["GeometryOfKSpaceTraversal"], 
				StringValueTable_GeometryOfKSpaceTraversal, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string defined terms GeometryOfKSpaceTraversal --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "RectilinearPhaseEncodeReordering", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixedAndRectilinear, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying RectilinearPhaseEncodeReordering --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixedAndRectilinear(ds, parent_ds, root_ds):
		if "RectilinearPhaseEncodeReordering" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["RectilinearPhaseEncodeReordering"], 
				StringValueTable_RectilinearPhaseEncodeReordering, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string defined terms RectilinearPhaseEncodeReordering --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "SegmentedKSpaceTraversal", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying SegmentedKSpaceTraversal --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "SegmentedKSpaceTraversal" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["SegmentedKSpaceTraversal"], 
				StringValueTable_SegmentedKSpaceTraversal, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string enumerated values SegmentedKSpaceTraversal --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "CoverageOfKSpace", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixedAnd3D, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying CoverageOfKSpace --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixedAnd3D(ds, parent_ds, root_ds):
		if "CoverageOfKSpace" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["CoverageOfKSpace"], 
				StringValueTable_CoverageOfKSpace, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying string defined terms CoverageOfKSpace --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRPulseSequence", "NumberOfKSpaceTrajectories", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRPulseSequence success after verifying NumberOfKSpaceTrajectories --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MRSpectroscopy_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MRSpectroscopy")

	partial_success =  Macro_MRImageAndSpectroscopyInstanceMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " MRSpectroscopy success after verifying MRImageAndSpectroscopyInstanceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"MRSpectroscopy", "ImageType", 
			verbose, log, ElementDictionary, 
			4, 4)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageAndFrameType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_EnhancedMRSpectroscopyImageAndFrameType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_EnhancedMRSpectroscopyImageType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_MRSpectroscopyDescriptionImageLevelMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " MRSpectroscopy success after verifying MRSpectroscopyDescriptionImageLevelMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "TransmitterFrequency", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Original, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying TransmitterFrequency --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "SpectralWidth", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying SpectralWidth --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "ChemicalShiftReference", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying ChemicalShiftReference --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "VolumeLocalizationTechnique", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying VolumeLocalizationTechnique --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "VolumeLocalizationTechnique" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["VolumeLocalizationTechnique"], 
				StringValueTable_VolumeLocalizationTechnique, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying string defined terms VolumeLocalizationTechnique --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"MRSpectroscopy", 
			"VolumeLocalizationSequence", 
			verbose, log, ElementDictionary, 
			Condition_VolumeLocalizationTechniqueNotNone, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRSpectroscopy success after verifying VolumeLocalizationSequence" + ("success" if partial_success else "failure")) 
	if "VolumeLocalizationSequence" in ds:
		VolumeLocalizationSequence_data = ds.VolumeLocalizationSequence
		if type(VolumeLocalizationSequence_data) == Sequence:
			for i1 in range(0, len(VolumeLocalizationSequence_data)):
				if verbose:
					log.append( " VolumeLocalizationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = VolumeLocalizationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MRSpectroscopy", "SlabThickness", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopy success after verifying SlabThickness --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MRSpectroscopy", "SlabOrientation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopy success after verifying SlabOrientation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MRSpectroscopy", "MidSlabPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MRSpectroscopy success after verifying MidSlabPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "Decoupling", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying Decoupling --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "Decoupling" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["Decoupling"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying string enumerated values Decoupling --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "DecoupledNucleus", 
			verbose, log, ElementDictionary, 
			Condition_DecouplingIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying DecoupledNucleus --> "+("success" if partial_success else "failure"))

	if Condition_DecouplingIsYes(ds, parent_ds, root_ds):
		if "DecoupledNucleus" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["DecoupledNucleus"], 
				StringValueTable_DecoupledNucleus, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying string defined terms DecoupledNucleus --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "DecouplingFrequency", 
			verbose, log, ElementDictionary, 
			Condition_DecouplingIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying DecouplingFrequency --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "DecouplingMethod", 
			verbose, log, ElementDictionary, 
			Condition_DecouplingIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying DecouplingMethod --> "+("success" if partial_success else "failure"))

	if Condition_DecouplingIsYes(ds, parent_ds, root_ds):
		if "DecouplingMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["DecouplingMethod"], 
				StringValueTable_DecouplingMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying string defined terms DecouplingMethod --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "DecouplingChemicalShiftReference", 
			verbose, log, ElementDictionary, 
			Condition_DecouplingIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying DecouplingChemicalShiftReference --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "TimeDomainFiltering", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying TimeDomainFiltering --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "TimeDomainFiltering" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["TimeDomainFiltering"], 
				StringValueTable_TimeDomainFiltering, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying string defined terms TimeDomainFiltering --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "NumberOfZeroFills", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying NumberOfZeroFills --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "BaselineCorrection", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying BaselineCorrection --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "BaselineCorrection" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["BaselineCorrection"], 
				StringValueTable_BaselineCorrection, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying string defined terms BaselineCorrection --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "FrequencyCorrection", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying FrequencyCorrection --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "FrequencyCorrection" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["FrequencyCorrection"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying string defined terms FrequencyCorrection --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "FirstOrderPhaseCorrection", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying FirstOrderPhaseCorrection --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "FirstOrderPhaseCorrection" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["FirstOrderPhaseCorrection"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying string defined terms FirstOrderPhaseCorrection --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopy", "WaterReferencedPhaseCorrection", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying WaterReferencedPhaseCorrection --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "WaterReferencedPhaseCorrection" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["WaterReferencedPhaseCorrection"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopy success after verifying string defined terms WaterReferencedPhaseCorrection --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MRSpectroscopyPulseSequence_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MRSpectroscopyPulseSequence")

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyPulseSequence", "PulseSequenceName", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying PulseSequenceName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyPulseSequence", "MRSpectroscopyAcquisitionType", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying MRSpectroscopyAcquisitionType --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "MRSpectroscopyAcquisitionType" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["MRSpectroscopyAcquisitionType"], 
				StringValueTable_MRSpectroscopyAcquisitionType, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying string defined terms MRSpectroscopyAcquisitionType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyPulseSequence", "EchoPulseSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying EchoPulseSequence --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "EchoPulseSequence" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["EchoPulseSequence"], 
				StringValueTable_EchoPulseSequence, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying string enumerated values EchoPulseSequence --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyPulseSequence", "MultipleSpinEcho", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixedAndEchoPulseSequenceNotGradient, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying MultipleSpinEcho --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixedAndEchoPulseSequenceNotGradient(ds, parent_ds, root_ds):
		if "MultipleSpinEcho" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["MultipleSpinEcho"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying string enumerated values MultipleSpinEcho --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyPulseSequence", "MultiPlanarExcitation", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying MultiPlanarExcitation --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "MultiPlanarExcitation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["MultiPlanarExcitation"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying string enumerated values MultiPlanarExcitation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyPulseSequence", "SteadyStatePulseSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying SteadyStatePulseSequence --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "SteadyStatePulseSequence" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["SteadyStatePulseSequence"], 
				StringValueTable_SteadyStatePulseSequence, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying string defined terms SteadyStatePulseSequence --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyPulseSequence", "EchoPlanarPulseSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying EchoPlanarPulseSequence --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "EchoPlanarPulseSequence" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["EchoPlanarPulseSequence"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying string enumerated values EchoPlanarPulseSequence --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyPulseSequence", "SpectrallySelectedSuppression", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying SpectrallySelectedSuppression --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "SpectrallySelectedSuppression" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["SpectrallySelectedSuppression"], 
				StringValueTable_SpectrallySelectedSuppression, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying string defined terms SpectrallySelectedSuppression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyPulseSequence", "GeometryOfKSpaceTraversal", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying GeometryOfKSpaceTraversal --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "GeometryOfKSpaceTraversal" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["GeometryOfKSpaceTraversal"], 
				StringValueTable_GeometryOfKSpaceTraversal, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying string defined terms GeometryOfKSpaceTraversal --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyPulseSequence", "RectilinearPhaseEncodeReordering", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixedAndRectilinear, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying RectilinearPhaseEncodeReordering --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixedAndRectilinear(ds, parent_ds, root_ds):
		if "RectilinearPhaseEncodeReordering" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["RectilinearPhaseEncodeReordering"], 
				StringValueTable_RectilinearPhaseEncodeReordering, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying string defined terms RectilinearPhaseEncodeReordering --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyPulseSequence", "SegmentedKSpaceTraversal", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying SegmentedKSpaceTraversal --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixed(ds, parent_ds, root_ds):
		if "SegmentedKSpaceTraversal" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["SegmentedKSpaceTraversal"], 
				StringValueTable_SegmentedKSpaceTraversal, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying string enumerated values SegmentedKSpaceTraversal --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyPulseSequence", "CoverageOfKSpace", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixedAndSpectroscopyVolume, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying CoverageOfKSpace --> "+("success" if partial_success else "failure"))

	if Condition_ImageTypeValue1OriginalOrMixedAndSpectroscopyVolume(ds, parent_ds, root_ds):
		if "CoverageOfKSpace" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["CoverageOfKSpace"], 
				StringValueTable_CoverageOfKSpace, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying string defined terms CoverageOfKSpace --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyPulseSequence", "NumberOfKSpaceTrajectories", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixed, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyPulseSequence success after verifying NumberOfKSpaceTrajectories --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MRSpectroscopyData_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MRSpectroscopyData")

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyData", "Rows", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyData success after verifying Rows --> "+("success" if partial_success else "failure"))

	if "Rows" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Rows"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyData", "Columns", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyData success after verifying Columns --> "+("success" if partial_success else "failure"))

	if "Columns" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["Columns"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyData", "DataPointRows", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyData success after verifying DataPointRows --> "+("success" if partial_success else "failure"))

	if "DataPointRows" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DataPointRows"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyData", "DataPointColumns", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyData success after verifying DataPointColumns --> "+("success" if partial_success else "failure"))

	if "DataPointColumns" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DataPointColumns"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyData", "DataRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyData success after verifying DataRepresentation --> "+("success" if partial_success else "failure"))

	if "DataRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["DataRepresentation"], 
			StringValueTable_MRSpectroscopyDataRepresentation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyData success after verifying string enumerated values DataRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyData", "SignalDomainColumns", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyData success after verifying SignalDomainColumns --> "+("success" if partial_success else "failure"))

	if "SignalDomainColumns" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SignalDomainColumns"], 
			StringValueTable_SpectroscopySignalDomain, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyData success after verifying string enumerated values SignalDomainColumns --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyData", "SignalDomainRows", 
			verbose, log, ElementDictionary, 
			Condition_DataPointRowsGreaterThanOne, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyData success after verifying SignalDomainRows --> "+("success" if partial_success else "failure"))

	if Condition_DataPointRowsGreaterThanOne(ds, parent_ds, root_ds):
		if "SignalDomainRows" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["SignalDomainRows"], 
				StringValueTable_SpectroscopySignalDomain, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyData success after verifying string enumerated values SignalDomainRows --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"MRSpectroscopyData", "FirstOrderPhaseCorrectionAngle", 
			verbose, log, ElementDictionary, 
			Condition_FirstOrderPhaseCorrectionIsYes, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyData success after verifying FirstOrderPhaseCorrectionAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"MRSpectroscopyData", "SpectroscopyData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSpectroscopyData success after verifying SpectroscopyData --> "+("success" if partial_success else "failure"))

	return global_success

def Module_RawData_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"RawData")

	partial_success =  		verifyType2(ds, 
			"RawData", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawData success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RawData", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawData success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RawData", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawData success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RawData", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawData success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RawData", "ContentLabel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawData success after verifying ContentLabel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"RawData", "ContentDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawData success after verifying ContentDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RawData", 
			"ConceptNameCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RawData success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
	if "ConceptNameCodeSequence" in ds:
		ConceptNameCodeSequence_data = ds.ConceptNameCodeSequence
		if type(ConceptNameCodeSequence_data) == Sequence:
			for i1 in range(0, len(ConceptNameCodeSequence_data)):
				if verbose:
					log.append( " ConceptNameCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConceptNameCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RawData success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"RawData", "ImageLaterality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawData success after verifying ImageLaterality --> "+("success" if partial_success else "failure"))

	if "ImageLaterality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageLaterality"], 
			StringValueTable_ImageLaterality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawData success after verifying string enumerated values ImageLaterality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"RawData", "CreatorVersionUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " RawData success after verifying CreatorVersionUID --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"RawData", 
			"ReferencedInstanceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "RawData success after verifying ReferencedInstanceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedInstanceSequence" in ds:
		ReferencedInstanceSequence_data = ds.ReferencedInstanceSequence
		if type(ReferencedInstanceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedInstanceSequence_data)):
				if verbose:
					log.append( " ReferencedInstanceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedInstanceSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " RawData success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"RawData", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "RawData success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " RawData success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MRSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MRSeries")

	partial_success =  		verifyType1(ds, 
			"MRSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_MRModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MRSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"MRSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MRSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MRSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomyMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_MRImageFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRImageFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying MRImageFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_UnassignedSharedConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying UnassignedSharedConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomyMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_MRImageFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRImageFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying MRImageFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_UnassignedPerFrameConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying UnassignedPerFrameConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ImageFrameConversionSourceMacroPresentInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ImageFrameConversionSourceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedMRImage success after verifying ImageFrameConversionSourceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomyMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_MRImageFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRImageFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying MRImageFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_UnassignedSharedConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying UnassignedSharedConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ConversionSourceAttributesSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ImageFrameConversionSourceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying ImageFrameConversionSourceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomyMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_MRImageFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MRImageFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying MRImageFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_UnassignedPerFrameConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying UnassignedPerFrameConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ConversionSourceAttributesSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ImageFrameConversionSourceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedMRImage success after verifying ImageFrameConversionSourceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_TractographyResultsSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"TractographyResultsSeries")

	partial_success =  		verifyType1(ds, 
			"TractographyResultsSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " TractographyResultsSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_MRModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " TractographyResultsSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"TractographyResultsSeries", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " TractographyResultsSeries success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"TractographyResultsSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "TractographyResultsSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " TractographyResultsSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_TractographyResults_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"TractographyResults")

	partial_success =  Macro_ContentIdentificationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " TractographyResults success after verifying ContentIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"TractographyResults", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " TractographyResults success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"TractographyResults", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " TractographyResults success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"TractographyResults", 
			"TrackSetSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "TractographyResults success after verifying TrackSetSequence" + ("success" if partial_success else "failure")) 
	if "TrackSetSequence" in ds:
		TrackSetSequence_data = ds.TrackSetSequence
		if type(TrackSetSequence_data) == Sequence:
			for i1 in range(0, len(TrackSetSequence_data)):
				if verbose:
					log.append( " TrackSetSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TrackSetSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"TractographyResults", "TrackSetNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " TractographyResults success after verifying TrackSetNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"TractographyResults", "TrackSetLabel", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " TractographyResults success after verifying TrackSetLabel --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"TractographyResults", "TrackSetDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " TractographyResults success after verifying TrackSetDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"TractographyResults", 
						"TrackSetAnatomicalTypeCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "TractographyResults success after verifying TrackSetAnatomicalTypeCodeSequence" + ("success" if partial_success else "failure")) 
				if "TrackSetAnatomicalTypeCodeSequence" in ds1:
					TrackSetAnatomicalTypeCodeSequence_data = ds1.TrackSetAnatomicalTypeCodeSequence
					if type(TrackSetAnatomicalTypeCodeSequence_data) == Sequence:
						for i2 in range(0, len(TrackSetAnatomicalTypeCodeSequence_data)):
							if verbose:
								log.append( " TrackSetAnatomicalTypeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = TrackSetAnatomicalTypeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " TractographyResults success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType3(ds2, 
									"TractographyResults", 
									"ModifierCodeSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "TractographyResults success after verifying ModifierCodeSequence" + ("success" if partial_success else "failure")) 
							if "ModifierCodeSequence" in ds2:
								ModifierCodeSequence_data = ds2.ModifierCodeSequence
								if type(ModifierCodeSequence_data) == Sequence:
									for i3 in range(0, len(ModifierCodeSequence_data)):
										if verbose:
											log.append( " ModifierCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ModifierCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " TractographyResults success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"TractographyResults", 
						"TrackSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "TractographyResults success after verifying TrackSequence" + ("success" if partial_success else "failure")) 
				if "TrackSequence" in ds1:
					TrackSequence_data = ds1.TrackSequence
					if type(TrackSequence_data) == Sequence:
						for i2 in range(0, len(TrackSequence_data)):
							if verbose:
								log.append( " TrackSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = TrackSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"TractographyResults", "PointCoordinatesData", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " TractographyResults success after verifying PointCoordinatesData --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"TractographyResults", "RecommendedDisplayCIELabValueList", 
									verbose, log, ElementDictionary, 
									Condition_NeedRecommendedDisplayCIELabValueListInTrackSequence, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " TractographyResults success after verifying RecommendedDisplayCIELabValueList --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"TractographyResults", "RecommendedDisplayCIELabValue", 
									verbose, log, ElementDictionary, 
									Condition_NeedRecommendedDisplayCIELabValueInTrackSequence, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " TractographyResults success after verifying RecommendedDisplayCIELabValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"TractographyResults", "RecommendedDisplayCIELabValue", 
						verbose, log, ElementDictionary, 
						Condition_NeedRecommendedDisplayCIELabValueInTrackSetSequence, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " TractographyResults success after verifying RecommendedDisplayCIELabValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"TractographyResults", "RecommendedLineThickness", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " TractographyResults success after verifying RecommendedLineThickness --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"TractographyResults", 
						"MeasurementsSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "TractographyResults success after verifying MeasurementsSequence" + ("success" if partial_success else "failure")) 
				if "MeasurementsSequence" in ds1:
					MeasurementsSequence_data = ds1.MeasurementsSequence
					if type(MeasurementsSequence_data) == Sequence:
						for i2 in range(0, len(MeasurementsSequence_data)):
							if verbose:
								log.append( " MeasurementsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MeasurementsSequence_data[i2]
							partial_success = verifyType1(ds2, 
									"TractographyResults", 
									"ConceptNameCodeSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "TractographyResults success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
							if "ConceptNameCodeSequence" in ds2:
								ConceptNameCodeSequence_data = ds2.ConceptNameCodeSequence
								if type(ConceptNameCodeSequence_data) == Sequence:
									for i3 in range(0, len(ConceptNameCodeSequence_data)):
										if verbose:
											log.append( " ConceptNameCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ConceptNameCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " TractographyResults success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1(ds2, 
									"TractographyResults", 
									"MeasurementUnitsCodeSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "TractographyResults success after verifying MeasurementUnitsCodeSequence" + ("success" if partial_success else "failure")) 
							if "MeasurementUnitsCodeSequence" in ds2:
								MeasurementUnitsCodeSequence_data = ds2.MeasurementUnitsCodeSequence
								if type(MeasurementUnitsCodeSequence_data) == Sequence:
									for i3 in range(0, len(MeasurementUnitsCodeSequence_data)):
										if verbose:
											log.append( " MeasurementUnitsCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = MeasurementUnitsCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " TractographyResults success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1(ds2, 
									"TractographyResults", 
									"MeasurementValuesSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "TractographyResults success after verifying MeasurementValuesSequence" + ("success" if partial_success else "failure")) 
							if "MeasurementValuesSequence" in ds2:
								MeasurementValuesSequence_data = ds2.MeasurementValuesSequence
								if type(MeasurementValuesSequence_data) == Sequence:
									for i3 in range(0, len(MeasurementValuesSequence_data)):
										if verbose:
											log.append( " MeasurementValuesSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = MeasurementValuesSequence_data[i3]
										partial_success =  		verifyType1(ds3, 
												"TractographyResults", "FloatingPointValues", 
												verbose, log, ElementDictionary, 
																					0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " TractographyResults success after verifying FloatingPointValues --> "+("success" if partial_success else "failure"))

										partial_success =  		verifyType1C(ds3, 
												"TractographyResults", "TrackPointIndexList", 
												verbose, log, ElementDictionary, 
												0, 
												False, 
												parent_ds3, root_ds, 
												0, 0)
										global_success = global_success and partial_success 
										if verbose:
											log.append( " TractographyResults success after verifying TrackPointIndexList --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"TractographyResults", 
						"TrackStatisticsSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "TractographyResults success after verifying TrackStatisticsSequence" + ("success" if partial_success else "failure")) 
				if "TrackStatisticsSequence" in ds1:
					TrackStatisticsSequence_data = ds1.TrackStatisticsSequence
					if type(TrackStatisticsSequence_data) == Sequence:
						for i2 in range(0, len(TrackStatisticsSequence_data)):
							if verbose:
								log.append( " TrackStatisticsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = TrackStatisticsSequence_data[i2]
							partial_success = verifyType1(ds2, 
									"TractographyResults", 
									"ConceptNameCodeSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "TractographyResults success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
							if "ConceptNameCodeSequence" in ds2:
								ConceptNameCodeSequence_data = ds2.ConceptNameCodeSequence
								if type(ConceptNameCodeSequence_data) == Sequence:
									for i3 in range(0, len(ConceptNameCodeSequence_data)):
										if verbose:
											log.append( " ConceptNameCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ConceptNameCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " TractographyResults success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1(ds2, 
									"TractographyResults", 
									"ModifierCodeSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "TractographyResults success after verifying ModifierCodeSequence" + ("success" if partial_success else "failure")) 
							if "ModifierCodeSequence" in ds2:
								ModifierCodeSequence_data = ds2.ModifierCodeSequence
								if type(ModifierCodeSequence_data) == Sequence:
									for i3 in range(0, len(ModifierCodeSequence_data)):
										if verbose:
											log.append( " ModifierCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ModifierCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " TractographyResults success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType1(ds2, 
									"TractographyResults", 
									"MeasurementUnitsCodeSequence", 
									verbose, log, ElementDictionary, 
															1, 1)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "TractographyResults success after verifying MeasurementUnitsCodeSequence" + ("success" if partial_success else "failure")) 
							if "MeasurementUnitsCodeSequence" in ds2:
								MeasurementUnitsCodeSequence_data = ds2.MeasurementUnitsCodeSequence
								if type(MeasurementUnitsCodeSequence_data) == Sequence:
									for i3 in range(0, len(MeasurementUnitsCodeSequence_data)):
										if verbose:
											log.append( " MeasurementUnitsCodeSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = MeasurementUnitsCodeSequence_data[i3]
										partial_success =  Macro_CodeSequenceMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " TractographyResults success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1(ds2, 
									"TractographyResults", "FloatingPointValues", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " TractographyResults success after verifying FloatingPointValues --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"TractographyResults", 
						"TrackSetStatisticsSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "TractographyResults success after verifying TrackSetStatisticsSequence" + ("success" if partial_success else "failure")) 
				if "TrackSetStatisticsSequence" in ds1:
					TrackSetStatisticsSequence_data = ds1.TrackSetStatisticsSequence
					if type(TrackSetStatisticsSequence_data) == Sequence:
						for i2 in range(0, len(TrackSetStatisticsSequence_data)):
							if verbose:
								log.append( " TrackSetStatisticsSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = TrackSetStatisticsSequence_data[i2]
							partial_success =  Macro_TableSummaryStatisticsMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " TractographyResults success after verifying TableSummaryStatisticsMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"TractographyResults", 
						"DiffusionAcquisitionCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "TractographyResults success after verifying DiffusionAcquisitionCodeSequence" + ("success" if partial_success else "failure")) 
				if "DiffusionAcquisitionCodeSequence" in ds1:
					DiffusionAcquisitionCodeSequence_data = ds1.DiffusionAcquisitionCodeSequence
					if type(DiffusionAcquisitionCodeSequence_data) == Sequence:
						for i2 in range(0, len(DiffusionAcquisitionCodeSequence_data)):
							if verbose:
								log.append( " DiffusionAcquisitionCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = DiffusionAcquisitionCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " TractographyResults success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"TractographyResults", 
						"DiffusionModelCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "TractographyResults success after verifying DiffusionModelCodeSequence" + ("success" if partial_success else "failure")) 
				if "DiffusionModelCodeSequence" in ds1:
					DiffusionModelCodeSequence_data = ds1.DiffusionModelCodeSequence
					if type(DiffusionModelCodeSequence_data) == Sequence:
						for i2 in range(0, len(DiffusionModelCodeSequence_data)):
							if verbose:
								log.append( " DiffusionModelCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = DiffusionModelCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " TractographyResults success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"TractographyResults", 
						"TrackingAlgorithmIdentificationSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "TractographyResults success after verifying TrackingAlgorithmIdentificationSequence" + ("success" if partial_success else "failure")) 
				if "TrackingAlgorithmIdentificationSequence" in ds1:
					TrackingAlgorithmIdentificationSequence_data = ds1.TrackingAlgorithmIdentificationSequence
					if type(TrackingAlgorithmIdentificationSequence_data) == Sequence:
						for i2 in range(0, len(TrackingAlgorithmIdentificationSequence_data)):
							if verbose:
								log.append( " TrackingAlgorithmIdentificationSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = TrackingAlgorithmIdentificationSequence_data[i2]
							partial_success =  Macro_AlgorithmIdentificationMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " TractographyResults success after verifying AlgorithmIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"TractographyResults", 
			"ReferencedInstanceSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "TractographyResults success after verifying ReferencedInstanceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedInstanceSequence" in ds:
		ReferencedInstanceSequence_data = ds.ReferencedInstanceSequence
		if type(ReferencedInstanceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedInstanceSequence_data)):
				if verbose:
					log.append( " ReferencedInstanceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedInstanceSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " TractographyResults success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_TableSummaryStatisticsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"TableSummaryStatisticsMacro")

	partial_success = verifyType1(ds, 
			"TableSummaryStatisticsMacro", 
			"ConceptNameCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "TableSummaryStatisticsMacro success after verifying ConceptNameCodeSequence" + ("success" if partial_success else "failure")) 
	if "ConceptNameCodeSequence" in ds:
		ConceptNameCodeSequence_data = ds.ConceptNameCodeSequence
		if type(ConceptNameCodeSequence_data) == Sequence:
			for i1 in range(0, len(ConceptNameCodeSequence_data)):
				if verbose:
					log.append( " ConceptNameCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConceptNameCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " TableSummaryStatisticsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"TableSummaryStatisticsMacro", 
			"ModifierCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "TableSummaryStatisticsMacro success after verifying ModifierCodeSequence" + ("success" if partial_success else "failure")) 
	if "ModifierCodeSequence" in ds:
		ModifierCodeSequence_data = ds.ModifierCodeSequence
		if type(ModifierCodeSequence_data) == Sequence:
			for i1 in range(0, len(ModifierCodeSequence_data)):
				if verbose:
					log.append( " ModifierCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ModifierCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " TableSummaryStatisticsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"TableSummaryStatisticsMacro", 
			"MeasurementUnitsCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "TableSummaryStatisticsMacro success after verifying MeasurementUnitsCodeSequence" + ("success" if partial_success else "failure")) 
	if "MeasurementUnitsCodeSequence" in ds:
		MeasurementUnitsCodeSequence_data = ds.MeasurementUnitsCodeSequence
		if type(MeasurementUnitsCodeSequence_data) == Sequence:
			for i1 in range(0, len(MeasurementUnitsCodeSequence_data)):
				if verbose:
					log.append( " MeasurementUnitsCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MeasurementUnitsCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " TableSummaryStatisticsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"TableSummaryStatisticsMacro", "FloatingPointValue", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " TableSummaryStatisticsMacro success after verifying FloatingPointValue --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_CTFrameVOILUTMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CTFrameVOILUTMacro")

	partial_success = verifyType1(ds, 
			"CTFrameVOILUTMacro", 
			"FrameVOILUTSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTFrameVOILUTMacro success after verifying FrameVOILUTSequence" + ("success" if partial_success else "failure")) 
	if "FrameVOILUTSequence" in ds:
		FrameVOILUTSequence_data = ds.FrameVOILUTSequence
		if type(FrameVOILUTSequence_data) == Sequence:
			for i1 in range(0, len(FrameVOILUTSequence_data)):
				if verbose:
					log.append( " FrameVOILUTSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FrameVOILUTSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"CTFrameVOILUTMacro", "WindowCenter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTFrameVOILUTMacro success after verifying WindowCenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"CTFrameVOILUTMacro", "WindowWidth", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTFrameVOILUTMacro success after verifying WindowWidth --> "+("success" if partial_success else "failure"))

				if "WindowWidth" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["WindowWidth"], 
						verbose, log, -1, False)


				if Condition_WindowWidthIsNegative(ds1, parent_ds1, root_ds):
						log.append( EMsgDC("Null") +" Not permitted to be negative - attribute <WindowWidth>"+\
							" = <{}>".format( tag_for_keyword("WindowWidth")))

				partial_success =  		verifyType3(ds1, 
						"CTFrameVOILUTMacro", "WindowCenterWidthExplanation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTFrameVOILUTMacro success after verifying WindowCenterWidthExplanation --> "+("success" if partial_success else "failure"))

				if "WindowCenterWidthExplanation" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["WindowCenterWidthExplanation"], 
						StringValueTable_EnhancedCTWindowCenterWidthExplanation, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTFrameVOILUTMacro success after verifying string defined terms WindowCenterWidthExplanation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"CTFrameVOILUTMacro", "VOILUTFunction", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTFrameVOILUTMacro success after verifying VOILUTFunction --> "+("success" if partial_success else "failure"))

				if "VOILUTFunction" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["VOILUTFunction"], 
						StringValueTable_VOILUTFunction, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTFrameVOILUTMacro success after verifying string defined terms VOILUTFunction --> "+("success" if partial_success else "failure"))

	return global_success

def Module_CTSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"CTSeries")

	partial_success =  		verifyType1(ds, 
			"CTSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_CTModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CTSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"CTSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " CTSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_EnhancedCTImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedCTImage")

	partial_success =  		verifyType1(ds, 
			"EnhancedCTImage", "ImageType", 
			verbose, log, ElementDictionary, 
			4, 4)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageAndFrameType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_EnhancedCTImageAndFrameType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_EnhancedCTImageType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedCTImage", "MultienergyCTAcquisition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying MultienergyCTAcquisition --> "+("success" if partial_success else "failure"))

	if "MultienergyCTAcquisition" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["MultienergyCTAcquisition"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying string enumerated values MultienergyCTAcquisition --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_CommonCTMRImageDescriptionImageLevelMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedCTImage success after verifying CommonCTMRImageDescriptionImageLevelMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"EnhancedCTImage", "AcquisitionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying AcquisitionNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedCTImage", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedCT, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"EnhancedCTImage", "AcquisitionDuration", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1OriginalOrMixedAndNotLegacyConvertedCT, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying AcquisitionDuration --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"EnhancedCTImage", 
			"ReferencedRawDataSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedCTImage success after verifying ReferencedRawDataSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedRawDataSequence" in ds:
		ReferencedRawDataSequence_data = ds.ReferencedRawDataSequence
		if type(ReferencedRawDataSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedRawDataSequence_data)):
				if verbose:
					log.append( " ReferencedRawDataSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedRawDataSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedCTImage success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"EnhancedCTImage", 
			"ReferencedWaveformSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedCTImage success after verifying ReferencedWaveformSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedWaveformSequence" in ds:
		ReferencedWaveformSequence_data = ds.ReferencedWaveformSequence
		if type(ReferencedWaveformSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedWaveformSequence_data)):
				if verbose:
					log.append( " ReferencedWaveformSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedWaveformSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedCTImage success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"EnhancedCTImage", 
			"ReferencedImageEvidenceSequence", 
			verbose, log, ElementDictionary, 
			Condition_ReferencedImageSequenceIsPresentInFunctionalGroups, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedCTImage success after verifying ReferencedImageEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageEvidenceSequence" in ds:
		ReferencedImageEvidenceSequence_data = ds.ReferencedImageEvidenceSequence
		if type(ReferencedImageEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageEvidenceSequence_data)):
				if verbose:
					log.append( " ReferencedImageEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageEvidenceSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedCTImage success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"EnhancedCTImage", 
			"SourceImageEvidenceSequence", 
			verbose, log, ElementDictionary, 
			Condition_SourceImageSequenceIsPresentInFunctionalGroups, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedCTImage success after verifying SourceImageEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "SourceImageEvidenceSequence" in ds:
		SourceImageEvidenceSequence_data = ds.SourceImageEvidenceSequence
		if type(SourceImageEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(SourceImageEvidenceSequence_data)):
				if verbose:
					log.append( " SourceImageEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceImageEvidenceSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedCTImage success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"EnhancedCTImage", 
			"ReferencedPresentationStateSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedCTImage success after verifying ReferencedPresentationStateSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPresentationStateSequence" in ds:
		ReferencedPresentationStateSequence_data = ds.ReferencedPresentationStateSequence
		if type(ReferencedPresentationStateSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPresentationStateSequence_data)):
				if verbose:
					log.append( " ReferencedPresentationStateSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPresentationStateSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedCTImage success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"EnhancedCTImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedCTImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedCTImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedCTImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre12Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedCTImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre11Or15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedCTImage", "ContentQualification", 
			verbose, log, ElementDictionary, 
			Condition_NotLegacyConvertedCT, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying ContentQualification --> "+("success" if partial_success else "failure"))

	if Condition_NotLegacyConvertedCT(ds, parent_ds, root_ds):
		if "ContentQualification" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ContentQualification"], 
				StringValueTable_ContentQualification, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying string enumerated values ContentQualification --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedCTImage", "ImageComments", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying ImageComments --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedCTImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			Condition_NotLegacyConvertedCT, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if Condition_NotLegacyConvertedCT(ds, parent_ds, root_ds):
		if "BurnedInAnnotation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
				StringValueTable_NoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedCTImage", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedCTImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			Condition_NotLegacyConvertedCT, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if Condition_NotLegacyConvertedCT(ds, parent_ds, root_ds):
		if "LossyImageCompression" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["LossyImageCompression"], 
				StringValueTable_LossyImageCompression, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedCTImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionRatio" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["LossyImageCompressionRatio"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"EnhancedCTImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["LossyImageCompressionMethod"], 
				StringValueTable_LossyImageCompressionMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying string defined terms LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))


	if Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" method inconsistent with transfer syntax - attribute <LossyImageCompressionMethod>"+\
				" = <{}>".format( tag_for_keyword("LossyImageCompressionMethod")))

	partial_success =  		verifyType1(ds, 
			"EnhancedCTImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if "PresentationLUTShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
			StringValueTable_IdentityPresentationLUTShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"EnhancedCTImage", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedCTImage success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedCTImage success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_OptionalViewAndSliceProgressionDirectionMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedCTImage success after verifying OptionalViewAndSliceProgressionDirectionMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"EnhancedCTImage", "IsocenterPosition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedCTImage success after verifying IsocenterPosition --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_RTEquipmentCorrelationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedCTImage success after verifying RTEquipmentCorrelationMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_CTImageFrameTypeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CTImageFrameTypeMacro")

	partial_success = verifyType1(ds, 
			"CTImageFrameTypeMacro", 
			"CTImageFrameTypeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTImageFrameTypeMacro success after verifying CTImageFrameTypeSequence" + ("success" if partial_success else "failure")) 
	if "CTImageFrameTypeSequence" in ds:
		CTImageFrameTypeSequence_data = ds.CTImageFrameTypeSequence
		if type(CTImageFrameTypeSequence_data) == Sequence:
			for i1 in range(0, len(CTImageFrameTypeSequence_data)):
				if verbose:
					log.append( " CTImageFrameTypeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CTImageFrameTypeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"CTImageFrameTypeMacro", "FrameType", 
						verbose, log, ElementDictionary, 
									4, 4)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTImageFrameTypeMacro success after verifying FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedFrameType1, 
						verbose, log, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTImageFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageAndFrameType2, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTImageFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_EnhancedCTImageAndFrameType3, 
						verbose, log, 2)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTImageFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_EnhancedCTFrameType4, 
						verbose, log, 3)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTImageFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_CommonCTMRImageDescriptionFrameLevelMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " CTImageFrameTypeMacro success after verifying CommonCTMRImageDescriptionFrameLevelMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_CTAcquisitionTypeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CTAcquisitionTypeMacro")

	partial_success = verifyType1(ds, 
			"CTAcquisitionTypeMacro", 
			"CTAcquisitionTypeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTAcquisitionTypeMacro success after verifying CTAcquisitionTypeSequence" + ("success" if partial_success else "failure")) 
	if "CTAcquisitionTypeSequence" in ds:
		CTAcquisitionTypeSequence_data = ds.CTAcquisitionTypeSequence
		if type(CTAcquisitionTypeSequence_data) == Sequence:
			for i1 in range(0, len(CTAcquisitionTypeSequence_data)):
				if verbose:
					log.append( " CTAcquisitionTypeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CTAcquisitionTypeSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"CTAcquisitionTypeMacro", "AcquisitionType", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAcquisitionTypeMacro success after verifying AcquisitionType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTAcquisitionTypeMacro", "TubeAngle", 
						verbose, log, ElementDictionary, 
						Condition_AcquisitionTypeConstantAngle, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAcquisitionTypeMacro success after verifying TubeAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTAcquisitionTypeMacro", "ConstantVolumeFlag", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAcquisitionTypeMacro success after verifying ConstantVolumeFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTAcquisitionTypeMacro", "FluoroscopyFlag", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAcquisitionTypeMacro success after verifying FluoroscopyFlag --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_CTAcquisitionDetailsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CTAcquisitionDetailsMacro")

	partial_success = verifyType1(ds, 
			"CTAcquisitionDetailsMacro", 
			"CTAcquisitionDetailsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTAcquisitionDetailsMacro success after verifying CTAcquisitionDetailsSequence" + ("success" if partial_success else "failure")) 
	if "CTAcquisitionDetailsSequence" in ds:
		CTAcquisitionDetailsSequence_data = ds.CTAcquisitionDetailsSequence
		if type(CTAcquisitionDetailsSequence_data) == Sequence:
			for i1 in range(0, len(CTAcquisitionDetailsSequence_data)):
				if verbose:
					log.append( " CTAcquisitionDetailsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CTAcquisitionDetailsSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"CTAcquisitionDetailsMacro", "ReferencedPathIndex", 
						verbose, log, ElementDictionary, 
						Condition_IsMultienergyCTAcquisition, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAcquisitionDetailsMacro success after verifying ReferencedPathIndex --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTAcquisitionDetailsMacro", "RotationDirection", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAcquisitionDetailsMacro success after verifying RotationDirection --> "+("success" if partial_success else "failure"))

				if "RotationDirection" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["RotationDirection"], 
						StringValueTable_RotationDirection, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAcquisitionDetailsMacro success after verifying string enumerated values RotationDirection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTAcquisitionDetailsMacro", "RevolutionTime", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAcquisitionDetailsMacro success after verifying RevolutionTime --> "+("success" if partial_success else "failure"))

				if "RevolutionTime" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["RevolutionTime"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTAcquisitionDetailsMacro", "SingleCollimationWidth", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAcquisitionDetailsMacro success after verifying SingleCollimationWidth --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "SingleCollimationWidth" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["SingleCollimationWidth"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTAcquisitionDetailsMacro", "TotalCollimationWidth", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAcquisitionDetailsMacro success after verifying TotalCollimationWidth --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "TotalCollimationWidth" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["TotalCollimationWidth"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTAcquisitionDetailsMacro", "TableHeight", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAcquisitionDetailsMacro success after verifying TableHeight --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTAcquisitionDetailsMacro", "GantryDetectorTilt", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAcquisitionDetailsMacro success after verifying GantryDetectorTilt --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTAcquisitionDetailsMacro", "DataCollectionDiameter", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAcquisitionDetailsMacro success after verifying DataCollectionDiameter --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "DataCollectionDiameter" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["DataCollectionDiameter"], 
							verbose, log, -1, True)


	if Condition_CTAcquisitionDetailsSequenceNotOneItemAndNotMultienergyAcquisition(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Only a single Item is permitted if not a multi-energy acquisition - attribute <CTAcquisitionDetailsSequence>")

	return global_success

def Macro_CTTableDynamicsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CTTableDynamicsMacro")

	partial_success = verifyType1(ds, 
			"CTTableDynamicsMacro", 
			"CTTableDynamicsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTTableDynamicsMacro success after verifying CTTableDynamicsSequence" + ("success" if partial_success else "failure")) 
	if "CTTableDynamicsSequence" in ds:
		CTTableDynamicsSequence_data = ds.CTTableDynamicsSequence
		if type(CTTableDynamicsSequence_data) == Sequence:
			for i1 in range(0, len(CTTableDynamicsSequence_data)):
				if verbose:
					log.append( " CTTableDynamicsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CTTableDynamicsSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"CTTableDynamicsMacro", "TableSpeed", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTTableDynamicsMacro success after verifying TableSpeed --> "+("success" if partial_success else "failure"))

				if "TableSpeed" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["TableSpeed"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTTableDynamicsMacro", "TableFeedPerRotation", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTTableDynamicsMacro success after verifying TableFeedPerRotation --> "+("success" if partial_success else "failure"))

				if "TableFeedPerRotation" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["TableFeedPerRotation"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTTableDynamicsMacro", "SpiralPitchFactor", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTTableDynamicsMacro success after verifying SpiralPitchFactor --> "+("success" if partial_success else "failure"))

				if "SpiralPitchFactor" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["SpiralPitchFactor"], 
						verbose, log, -1, True)

	return global_success

def Macro_CTPositionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CTPositionMacro")

	partial_success = verifyType1(ds, 
			"CTPositionMacro", 
			"CTPositionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTPositionMacro success after verifying CTPositionSequence" + ("success" if partial_success else "failure")) 
	if "CTPositionSequence" in ds:
		CTPositionSequence_data = ds.CTPositionSequence
		if type(CTPositionSequence_data) == Sequence:
			for i1 in range(0, len(CTPositionSequence_data)):
				if verbose:
					log.append( " CTPositionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CTPositionSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"CTPositionMacro", "TablePosition", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTPositionMacro success after verifying TablePosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTPositionMacro", "DataCollectionCenterPatient", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTPositionMacro success after verifying DataCollectionCenterPatient --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTPositionMacro", "ReconstructionTargetCenterPatient", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTPositionMacro success after verifying ReconstructionTargetCenterPatient --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_CTGeometryMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CTGeometryMacro")

	partial_success = verifyType1(ds, 
			"CTGeometryMacro", 
			"CTGeometrySequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTGeometryMacro success after verifying CTGeometrySequence" + ("success" if partial_success else "failure")) 
	if "CTGeometrySequence" in ds:
		CTGeometrySequence_data = ds.CTGeometrySequence
		if type(CTGeometrySequence_data) == Sequence:
			for i1 in range(0, len(CTGeometrySequence_data)):
				if verbose:
					log.append( " CTGeometrySequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CTGeometrySequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"CTGeometryMacro", "ReferencedPathIndex", 
						verbose, log, ElementDictionary, 
						Condition_IsMultienergyCTAcquisition, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTGeometryMacro success after verifying ReferencedPathIndex --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTGeometryMacro", "DistanceSourceToDetector", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTGeometryMacro success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "DistanceSourceToDetector" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["DistanceSourceToDetector"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTGeometryMacro", "DistanceSourceToDataCollectionCenter", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTGeometryMacro success after verifying DistanceSourceToDataCollectionCenter --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "DistanceSourceToDataCollectionCenter" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["DistanceSourceToDataCollectionCenter"], 
							verbose, log, -1, True)


	if Condition_CTGeometrySequenceNotOneItemAndNotMultienergyAcquisition(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Only a single Item is permitted if not a multi-energy acquisition - attribute <CTGeometrySequence>")

	return global_success

def Macro_CTReconstructionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CTReconstructionMacro")

	partial_success = verifyType1(ds, 
			"CTReconstructionMacro", 
			"CTReconstructionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTReconstructionMacro success after verifying CTReconstructionSequence" + ("success" if partial_success else "failure")) 
	if "CTReconstructionSequence" in ds:
		CTReconstructionSequence_data = ds.CTReconstructionSequence
		if type(CTReconstructionSequence_data) == Sequence:
			for i1 in range(0, len(CTReconstructionSequence_data)):
				if verbose:
					log.append( " CTReconstructionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CTReconstructionSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"CTReconstructionMacro", "ReconstructionAlgorithm", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTReconstructionMacro success after verifying ReconstructionAlgorithm --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTReconstructionMacro", "ConvolutionKernel", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTReconstructionMacro success after verifying ConvolutionKernel --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTReconstructionMacro", "ConvolutionKernelGroup", 
						verbose, log, ElementDictionary, 
						Condition_ConvolutionKernelIsPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTReconstructionMacro success after verifying ConvolutionKernelGroup --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTReconstructionMacro", "ReconstructionDiameter", 
						verbose, log, ElementDictionary, 
						Condition_ReconstructionFieldOfViewAbsent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTReconstructionMacro success after verifying ReconstructionDiameter --> "+("success" if partial_success else "failure"))

				if Condition_ReconstructionFieldOfViewAbsent(ds1, parent_ds1, root_ds):
					if "ReconstructionDiameter" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["ReconstructionDiameter"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTReconstructionMacro", "ReconstructionFieldOfView", 
						verbose, log, ElementDictionary, 
						Condition_ReconstructionDiameterAbsent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTReconstructionMacro success after verifying ReconstructionFieldOfView --> "+("success" if partial_success else "failure"))

				if Condition_ReconstructionDiameterAbsent(ds1, parent_ds1, root_ds):
					if "ReconstructionFieldOfView" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["ReconstructionFieldOfView"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTReconstructionMacro", "ReconstructionPixelSpacing", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTReconstructionMacro success after verifying ReconstructionPixelSpacing --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "ReconstructionPixelSpacing" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["ReconstructionPixelSpacing"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTReconstructionMacro", "ReconstructionAngle", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTReconstructionMacro success after verifying ReconstructionAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTReconstructionMacro", "ImageFilter", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTReconstructionMacro success after verifying ImageFilter --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_CTExposureMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CTExposureMacro")

	partial_success = verifyType1(ds, 
			"CTExposureMacro", 
			"CTExposureSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTExposureMacro success after verifying CTExposureSequence" + ("success" if partial_success else "failure")) 
	if "CTExposureSequence" in ds:
		CTExposureSequence_data = ds.CTExposureSequence
		if type(CTExposureSequence_data) == Sequence:
			for i1 in range(0, len(CTExposureSequence_data)):
				if verbose:
					log.append( " CTExposureSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CTExposureSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"CTExposureMacro", "ReferencedPathIndex", 
						verbose, log, ElementDictionary, 
						Condition_IsMultienergyCTAcquisition, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTExposureMacro success after verifying ReferencedPathIndex --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTExposureMacro", "ExposureTimeInms", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTExposureMacro success after verifying ExposureTimeInms --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "ExposureTimeInms" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["ExposureTimeInms"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTExposureMacro", "XRayTubeCurrentInmA", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTExposureMacro success after verifying XRayTubeCurrentInmA --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "XRayTubeCurrentInmA" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["XRayTubeCurrentInmA"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTExposureMacro", "ExposureInmAs", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTExposureMacro success after verifying ExposureInmAs --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "ExposureInmAs" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["ExposureInmAs"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTExposureMacro", "ExposureModulationType", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTExposureMacro success after verifying ExposureModulationType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"CTExposureMacro", "EstimatedDoseSaving", 
						verbose, log, ElementDictionary, 
						Condition_ExposureModulationTypeIsNotNone, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTExposureMacro success after verifying EstimatedDoseSaving --> "+("success" if partial_success else "failure"))

				if Condition_ExposureModulationTypeIsNotNone(ds1, parent_ds1, root_ds):
					if "EstimatedDoseSaving" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["EstimatedDoseSaving"], 
							verbose, log, -1, True)

				partial_success =  		verifyType2C(ds1, 
						"CTExposureMacro", "CTDIvol", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTExposureMacro success after verifying CTDIvol --> "+("success" if partial_success else "failure"))

				if "CTDIvol" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["CTDIvol"], 
						verbose, log, -1, True)


				if Condition_CTDIvolIsPresentButCTDIPhantomTypeCodeSequenceIsNot(ds1, parent_ds1, root_ds):
						log.append( WMsgDC("Null") +" CTDIvol is present but it is uninterpretable without CTDIPhantomTypeCodeSequence, which is absent - attribute <CTDIvol>")

				partial_success = verifyType3(ds1, 
						"CTExposureMacro", 
						"CTDIPhantomTypeCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "CTExposureMacro success after verifying CTDIPhantomTypeCodeSequence" + ("success" if partial_success else "failure")) 
				if "CTDIPhantomTypeCodeSequence" in ds1:
					CTDIPhantomTypeCodeSequence_data = ds1.CTDIPhantomTypeCodeSequence
					if type(CTDIPhantomTypeCodeSequence_data) == Sequence:
						for i2 in range(0, len(CTDIPhantomTypeCodeSequence_data)):
							if verbose:
								log.append( " CTDIPhantomTypeCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = CTDIPhantomTypeCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " CTExposureMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"CTExposureMacro", "WaterEquivalentDiameter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTExposureMacro success after verifying WaterEquivalentDiameter --> "+("success" if partial_success else "failure"))

				if "WaterEquivalentDiameter" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["WaterEquivalentDiameter"], 
						verbose, log, -1, True)

				partial_success = verifyType1C(ds1, 
						"CTExposureMacro", 
						"WaterEquivalentDiameterCalculationMethodCodeSequence", 
						verbose, log, ElementDictionary, 
						Condition_WaterEquivalentDiameterIsPresent, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "CTExposureMacro success after verifying WaterEquivalentDiameterCalculationMethodCodeSequence" + ("success" if partial_success else "failure")) 
				if "WaterEquivalentDiameterCalculationMethodCodeSequence" in ds1:
					WaterEquivalentDiameterCalculationMethodCodeSequence_data = ds1.WaterEquivalentDiameterCalculationMethodCodeSequence
					if type(WaterEquivalentDiameterCalculationMethodCodeSequence_data) == Sequence:
						for i2 in range(0, len(WaterEquivalentDiameterCalculationMethodCodeSequence_data)):
							if verbose:
								log.append( " WaterEquivalentDiameterCalculationMethodCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = WaterEquivalentDiameterCalculationMethodCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " CTExposureMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"CTExposureMacro", "ImageAndFluoroscopyAreaDoseProduct", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTExposureMacro success after verifying ImageAndFluoroscopyAreaDoseProduct --> "+("success" if partial_success else "failure"))

				if "ImageAndFluoroscopyAreaDoseProduct" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ImageAndFluoroscopyAreaDoseProduct"], 
						verbose, log, -1, True)


	if Condition_CTExposureSequenceNotOneItemAndNotMultienergyAcquisition(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Only a single Item is permitted if not a multi-energy acquisition - attribute <CTExposureSequence>")

	return global_success

def Macro_CTXRayDetailsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CTXRayDetailsMacro")

	partial_success = verifyType1(ds, 
			"CTXRayDetailsMacro", 
			"CTXRayDetailsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTXRayDetailsMacro success after verifying CTXRayDetailsSequence" + ("success" if partial_success else "failure")) 
	if "CTXRayDetailsSequence" in ds:
		CTXRayDetailsSequence_data = ds.CTXRayDetailsSequence
		if type(CTXRayDetailsSequence_data) == Sequence:
			for i1 in range(0, len(CTXRayDetailsSequence_data)):
				if verbose:
					log.append( " CTXRayDetailsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CTXRayDetailsSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"CTXRayDetailsMacro", "KVP", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTXRayDetailsMacro success after verifying KVP --> "+("success" if partial_success else "failure"))

				if Condition_Always(ds1, parent_ds1, root_ds):
					if "KVP" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["KVP"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTXRayDetailsMacro", "FocalSpots", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTXRayDetailsMacro success after verifying FocalSpots --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTXRayDetailsMacro", "FilterType", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTXRayDetailsMacro success after verifying FilterType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"CTXRayDetailsMacro", "FilterMaterial", 
						verbose, log, ElementDictionary, 
						Condition_Always, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTXRayDetailsMacro success after verifying FilterMaterial --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"CTXRayDetailsMacro", "CalciumScoringMassFactorPatient", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTXRayDetailsMacro success after verifying CalciumScoringMassFactorPatient --> "+("success" if partial_success else "failure"))

				if "CalciumScoringMassFactorPatient" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["CalciumScoringMassFactorPatient"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"CTXRayDetailsMacro", "CalciumScoringMassFactorDevice", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTXRayDetailsMacro success after verifying CalciumScoringMassFactorDevice --> "+("success" if partial_success else "failure"))

				if "CalciumScoringMassFactorDevice" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["CalciumScoringMassFactorDevice"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTXRayDetailsMacro", "EnergyWeightingFactor", 
						verbose, log, ElementDictionary, 
						0, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTXRayDetailsMacro success after verifying EnergyWeightingFactor --> "+("success" if partial_success else "failure"))

				if "EnergyWeightingFactor" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["EnergyWeightingFactor"], 
						verbose, log, -1, True)


	if Condition_CTXRayDetailsSequenceNotOneItemAndNotMultienergyAcquisition(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Only a single Item is permitted if not a multi-energy acquisition - attribute <CTXRayDetailsSequence>")

	return global_success

def Macro_CTPixelValueTransformationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CTPixelValueTransformationMacro")

	partial_success = verifyType1(ds, 
			"CTPixelValueTransformationMacro", 
			"PixelValueTransformationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTPixelValueTransformationMacro success after verifying PixelValueTransformationSequence" + ("success" if partial_success else "failure")) 
	if "PixelValueTransformationSequence" in ds:
		PixelValueTransformationSequence_data = ds.PixelValueTransformationSequence
		if type(PixelValueTransformationSequence_data) == Sequence:
			for i1 in range(0, len(PixelValueTransformationSequence_data)):
				if verbose:
					log.append( " PixelValueTransformationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PixelValueTransformationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"CTPixelValueTransformationMacro", "RescaleIntercept", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTPixelValueTransformationMacro success after verifying RescaleIntercept --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"CTPixelValueTransformationMacro", "RescaleSlope", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTPixelValueTransformationMacro success after verifying RescaleSlope --> "+("success" if partial_success else "failure"))

				if "RescaleSlope" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["RescaleSlope"], 
						verbose, log, -1, False)

				partial_success =  		verifyType1(ds1, 
						"CTPixelValueTransformationMacro", "RescaleType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTPixelValueTransformationMacro success after verifying RescaleType --> "+("success" if partial_success else "failure"))

				if "RescaleType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["RescaleType"], 
						StringValueTable_RescaleTypeHounsfieldUnits, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTPixelValueTransformationMacro success after verifying string enumerated values RescaleType --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_CTAdditionalXRaySourceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CTAdditionalXRaySourceMacro")

	partial_success = verifyType1(ds, 
			"CTAdditionalXRaySourceMacro", 
			"CTAdditionalXRaySourceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "CTAdditionalXRaySourceMacro success after verifying CTAdditionalXRaySourceSequence" + ("success" if partial_success else "failure")) 
	if "CTAdditionalXRaySourceSequence" in ds:
		CTAdditionalXRaySourceSequence_data = ds.CTAdditionalXRaySourceSequence
		if type(CTAdditionalXRaySourceSequence_data) == Sequence:
			for i1 in range(0, len(CTAdditionalXRaySourceSequence_data)):
				if verbose:
					log.append( " CTAdditionalXRaySourceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CTAdditionalXRaySourceSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"CTAdditionalXRaySourceMacro", "KVP", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAdditionalXRaySourceMacro success after verifying KVP --> "+("success" if partial_success else "failure"))

				if "KVP" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["KVP"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"CTAdditionalXRaySourceMacro", "XRayTubeCurrentInmA", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAdditionalXRaySourceMacro success after verifying XRayTubeCurrentInmA --> "+("success" if partial_success else "failure"))

				if "XRayTubeCurrentInmA" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["XRayTubeCurrentInmA"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"CTAdditionalXRaySourceMacro", "DataCollectionDiameter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAdditionalXRaySourceMacro success after verifying DataCollectionDiameter --> "+("success" if partial_success else "failure"))

				if "DataCollectionDiameter" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["DataCollectionDiameter"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"CTAdditionalXRaySourceMacro", "FocalSpots", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAdditionalXRaySourceMacro success after verifying FocalSpots --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"CTAdditionalXRaySourceMacro", "FilterType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAdditionalXRaySourceMacro success after verifying FilterType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"CTAdditionalXRaySourceMacro", "FilterMaterial", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAdditionalXRaySourceMacro success after verifying FilterMaterial --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"CTAdditionalXRaySourceMacro", "ExposureInmAs", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAdditionalXRaySourceMacro success after verifying ExposureInmAs --> "+("success" if partial_success else "failure"))

				if "ExposureInmAs" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ExposureInmAs"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"CTAdditionalXRaySourceMacro", "EnergyWeightingFactor", 
						verbose, log, ElementDictionary, 
						0, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " CTAdditionalXRaySourceMacro success after verifying EnergyWeightingFactor --> "+("success" if partial_success else "failure"))

				if "EnergyWeightingFactor" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["EnergyWeightingFactor"], 
						verbose, log, -1, True)

	return global_success

def Macro_UnassignedSharedConvertedAttributesMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"UnassignedSharedConvertedAttributesMacro")

	partial_success = verifyType2(ds, 
			"UnassignedSharedConvertedAttributesMacro", 
			"UnassignedSharedConvertedAttributesSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "UnassignedSharedConvertedAttributesMacro success after verifying UnassignedSharedConvertedAttributesSequence" + ("success" if partial_success else "failure")) 
	if "UnassignedSharedConvertedAttributesSequence" in ds:
		UnassignedSharedConvertedAttributesSequence_data = ds.UnassignedSharedConvertedAttributesSequence
		if type(UnassignedSharedConvertedAttributesSequence_data) == Sequence:
			for i1 in range(0, len(UnassignedSharedConvertedAttributesSequence_data)):
				if verbose:
					log.append( " UnassignedSharedConvertedAttributesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = UnassignedSharedConvertedAttributesSequence_data[i1]
	return global_success

def Macro_UnassignedPerFrameConvertedAttributesMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"UnassignedPerFrameConvertedAttributesMacro")

	partial_success = verifyType2(ds, 
			"UnassignedPerFrameConvertedAttributesMacro", 
			"UnassignedPerFrameConvertedAttributesSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "UnassignedPerFrameConvertedAttributesMacro success after verifying UnassignedPerFrameConvertedAttributesSequence" + ("success" if partial_success else "failure")) 
	if "UnassignedPerFrameConvertedAttributesSequence" in ds:
		UnassignedPerFrameConvertedAttributesSequence_data = ds.UnassignedPerFrameConvertedAttributesSequence
		if type(UnassignedPerFrameConvertedAttributesSequence_data) == Sequence:
			for i1 in range(0, len(UnassignedPerFrameConvertedAttributesSequence_data)):
				if verbose:
					log.append( " UnassignedPerFrameConvertedAttributesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = UnassignedPerFrameConvertedAttributesSequence_data[i1]
	return global_success

def Macro_ImageFrameConversionSourceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ImageFrameConversionSourceMacro")

	partial_success = verifyType1(ds, 
			"ImageFrameConversionSourceMacro", 
			"ConversionSourceAttributesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ImageFrameConversionSourceMacro success after verifying ConversionSourceAttributesSequence" + ("success" if partial_success else "failure")) 
	if "ConversionSourceAttributesSequence" in ds:
		ConversionSourceAttributesSequence_data = ds.ConversionSourceAttributesSequence
		if type(ConversionSourceAttributesSequence_data) == Sequence:
			for i1 in range(0, len(ConversionSourceAttributesSequence_data)):
				if verbose:
					log.append( " ConversionSourceAttributesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ConversionSourceAttributesSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " ImageFrameConversionSourceMacro success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameFunctionalGroupsForEnhancedCTImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForEnhancedCTImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForEnhancedCTImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTFrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTFrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedRealWorldValueMappingMacroInSharedFunctionalGroupSequenceIfMultienergy(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedRespiratorySynchronizationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CTImageFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTImageFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTImageFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTAcquisitionTypeMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTAcquisitionTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTAcquisitionTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTAcquisitionDetailsMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTAcquisitionDetailsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTAcquisitionDetailsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTTableDynamicsMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTTableDynamicsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTTableDynamicsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTPositionMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTPositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTGeometryMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTGeometryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTGeometryMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTReconstructionMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTReconstructionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTReconstructionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTExposureMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTExposureMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTExposureMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTXRayDetailsMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTXRayDetailsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTXRayDetailsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTPixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTPixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CTAdditionalXRaySourceMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTAdditionalXRaySourceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTAdditionalXRaySourceMacro"+ ("success" if partial_success else "failure" ))
				if Condition_MultienergyCTProcessingMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MultienergyCTProcessingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying MultienergyCTProcessingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_MultienergyCTCharacteristicsMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MultienergyCTCharacteristicsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying MultienergyCTCharacteristicsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForEnhancedCTImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTFrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTFrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedRealWorldValueMappingMacroInPerFrameFunctionalGroupSequenceIfMultienergy(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedRespiratorySynchronizationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CTImageFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTImageFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTImageFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTAcquisitionTypeMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTAcquisitionTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTAcquisitionTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTAcquisitionDetailsMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTAcquisitionDetailsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTAcquisitionDetailsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTTableDynamicsMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTTableDynamicsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTTableDynamicsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTPositionMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTPositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTGeometryMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTGeometryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTGeometryMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTReconstructionMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTReconstructionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTReconstructionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTExposureMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTExposureMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTExposureMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCTXRayDetailsMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTXRayDetailsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTXRayDetailsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTPixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTPixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CTAdditionalXRaySourceMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTAdditionalXRaySourceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying CTAdditionalXRaySourceMacro"+ ("success" if partial_success else "failure" ))
				if Condition_MultienergyCTProcessingMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MultienergyCTProcessingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying MultienergyCTProcessingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_MultienergyCTCharacteristicsMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_MultienergyCTCharacteristicsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying MultienergyCTCharacteristicsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedCTImage success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomyMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CTImageFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTImageFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying CTImageFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTPixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying CTPixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_UnassignedSharedConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying UnassignedSharedConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomyMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CTImageFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTImageFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying CTImageFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTPixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying CTPixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_UnassignedPerFrameConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying UnassignedPerFrameConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ImageFrameConversionSourceMacroPresentInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ImageFrameConversionSourceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForLegacyConvertedEnhancedCTImage success after verifying ImageFrameConversionSourceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomyMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTFrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying CTFrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CTImageFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTImageFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying CTImageFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTPixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying CTPixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_UnassignedSharedConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying UnassignedSharedConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ConversionSourceAttributesSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ImageFrameConversionSourceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying ImageFrameConversionSourceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomyMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTFrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying CTFrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CTImageFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTImageFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying CTImageFrameTypeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CTPixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying CTPixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_UnassignedPerFrameConvertedAttributesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying UnassignedPerFrameConvertedAttributesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ConversionSourceAttributesSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ImageFrameConversionSourceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForPrivatePixelMedLegacyConvertedEnhancedCTImage success after verifying ImageFrameConversionSourceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultienergyCTImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultienergyCTImage")

	partial_success = verifyType1(ds, 
			"MultienergyCTImage", 
			"MultienergyCTAcquisitionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultienergyCTImage success after verifying MultienergyCTAcquisitionSequence" + ("success" if partial_success else "failure")) 
	if "MultienergyCTAcquisitionSequence" in ds:
		MultienergyCTAcquisitionSequence_data = ds.MultienergyCTAcquisitionSequence
		if type(MultienergyCTAcquisitionSequence_data) == Sequence:
			for i1 in range(0, len(MultienergyCTAcquisitionSequence_data)):
				if verbose:
					log.append( " MultienergyCTAcquisitionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MultienergyCTAcquisitionSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"MultienergyCTImage", "MultienergyAcquisitionDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTImage success after verifying MultienergyAcquisitionDescription --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_MultienergyCTXRaySourceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultienergyCTImage success after verifying MultienergyCTXRaySourceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_MultienergyCTXRayDetectorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultienergyCTImage success after verifying MultienergyCTXRayDetectorMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_MultienergyCTPathMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultienergyCTImage success after verifying MultienergyCTPathMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_CTExposureMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultienergyCTImage success after verifying CTExposureMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_CTXRayDetailsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultienergyCTImage success after verifying CTXRayDetailsMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_CTAcquisitionDetailsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultienergyCTImage success after verifying CTAcquisitionDetailsMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_CTGeometryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultienergyCTImage success after verifying CTGeometryMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"MultienergyCTImage", 
			"MultienergyCTProcessingSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultienergyCTImage success after verifying MultienergyCTProcessingSequence" + ("success" if partial_success else "failure")) 
	if "MultienergyCTProcessingSequence" in ds:
		MultienergyCTProcessingSequence_data = ds.MultienergyCTProcessingSequence
		if type(MultienergyCTProcessingSequence_data) == Sequence:
			for i1 in range(0, len(MultienergyCTProcessingSequence_data)):
				if verbose:
					log.append( " MultienergyCTProcessingSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MultienergyCTProcessingSequence_data[i1]
				partial_success =  Macro_MultienergyCTProcessingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultienergyCTImage success after verifying MultienergyCTProcessingMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"MultienergyCTImage", 
			"MultienergyCTCharacteristicsSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue4IsVMI, 
			True, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultienergyCTImage success after verifying MultienergyCTCharacteristicsSequence" + ("success" if partial_success else "failure")) 
	if "MultienergyCTCharacteristicsSequence" in ds:
		MultienergyCTCharacteristicsSequence_data = ds.MultienergyCTCharacteristicsSequence
		if type(MultienergyCTCharacteristicsSequence_data) == Sequence:
			for i1 in range(0, len(MultienergyCTCharacteristicsSequence_data)):
				if verbose:
					log.append( " MultienergyCTCharacteristicsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MultienergyCTCharacteristicsSequence_data[i1]
				partial_success =  Macro_MultienergyCTCharacteristicsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultienergyCTImage success after verifying MultienergyCTCharacteristicsMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_MultienergyCTXRaySourceMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MultienergyCTXRaySourceMacro")

	partial_success = verifyType1(ds, 
			"MultienergyCTXRaySourceMacro", 
			"MultienergyCTXRaySourceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultienergyCTXRaySourceMacro success after verifying MultienergyCTXRaySourceSequence" + ("success" if partial_success else "failure")) 
	if "MultienergyCTXRaySourceSequence" in ds:
		MultienergyCTXRaySourceSequence_data = ds.MultienergyCTXRaySourceSequence
		if type(MultienergyCTXRaySourceSequence_data) == Sequence:
			for i1 in range(0, len(MultienergyCTXRaySourceSequence_data)):
				if verbose:
					log.append( " MultienergyCTXRaySourceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MultienergyCTXRaySourceSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MultienergyCTXRaySourceMacro", "XRaySourceIndex", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRaySourceMacro success after verifying XRaySourceIndex --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MultienergyCTXRaySourceMacro", "XRaySourceID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRaySourceMacro success after verifying XRaySourceID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MultienergyCTXRaySourceMacro", "MultienergySourceTechnique", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRaySourceMacro success after verifying MultienergySourceTechnique --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MultienergyCTXRaySourceMacro", "SourceStartDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRaySourceMacro success after verifying SourceStartDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MultienergyCTXRaySourceMacro", "SourceEndDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRaySourceMacro success after verifying SourceEndDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MultienergyCTXRaySourceMacro", "SwitchingPhaseNumber", 
						verbose, log, ElementDictionary, 
						Condition_MultienergySourceTechniqueIsSWITCHING_SOURCE, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRaySourceMacro success after verifying SwitchingPhaseNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"MultienergyCTXRaySourceMacro", "SwitchingPhaseNominalDuration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRaySourceMacro success after verifying SwitchingPhaseNominalDuration --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"MultienergyCTXRaySourceMacro", "SwitchingPhaseTransitionDuration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRaySourceMacro success after verifying SwitchingPhaseTransitionDuration --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"MultienergyCTXRaySourceMacro", "GeneratorPower", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRaySourceMacro success after verifying GeneratorPower --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MultienergyCTXRayDetectorMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MultienergyCTXRayDetectorMacro")

	partial_success = verifyType1(ds, 
			"MultienergyCTXRayDetectorMacro", 
			"MultienergyCTXRayDetectorSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultienergyCTXRayDetectorMacro success after verifying MultienergyCTXRayDetectorSequence" + ("success" if partial_success else "failure")) 
	if "MultienergyCTXRayDetectorSequence" in ds:
		MultienergyCTXRayDetectorSequence_data = ds.MultienergyCTXRayDetectorSequence
		if type(MultienergyCTXRayDetectorSequence_data) == Sequence:
			for i1 in range(0, len(MultienergyCTXRayDetectorSequence_data)):
				if verbose:
					log.append( " MultienergyCTXRayDetectorSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MultienergyCTXRayDetectorSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MultienergyCTXRayDetectorMacro", "XRayDetectorIndex", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRayDetectorMacro success after verifying XRayDetectorIndex --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MultienergyCTXRayDetectorMacro", "XRayDetectorID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRayDetectorMacro success after verifying XRayDetectorID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MultienergyCTXRayDetectorMacro", "MultienergyDetectorType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRayDetectorMacro success after verifying MultienergyDetectorType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"MultienergyCTXRayDetectorMacro", "XRayDetectorLabel", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRayDetectorMacro success after verifying XRayDetectorLabel --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MultienergyCTXRayDetectorMacro", "NominalMaxEnergy", 
						verbose, log, ElementDictionary, 
						Condition_MultienergyDetectorTypeIsPHOTON_COUNTING, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRayDetectorMacro success after verifying NominalMaxEnergy --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"MultienergyCTXRayDetectorMacro", "NominalMinEnergy", 
						verbose, log, ElementDictionary, 
						Condition_MultienergyDetectorTypeIsPHOTON_COUNTING, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRayDetectorMacro success after verifying NominalMinEnergy --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"MultienergyCTXRayDetectorMacro", "EffectiveBinEnergy", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTXRayDetectorMacro success after verifying EffectiveBinEnergy --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MultienergyCTPathMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MultienergyCTPathMacro")

	partial_success = verifyType1(ds, 
			"MultienergyCTPathMacro", 
			"MultienergyCTPathSequence", 
			verbose, log, ElementDictionary, 
			2, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultienergyCTPathMacro success after verifying MultienergyCTPathSequence" + ("success" if partial_success else "failure")) 
	if "MultienergyCTPathSequence" in ds:
		MultienergyCTPathSequence_data = ds.MultienergyCTPathSequence
		if type(MultienergyCTPathSequence_data) == Sequence:
			for i1 in range(0, len(MultienergyCTPathSequence_data)):
				if verbose:
					log.append( " MultienergyCTPathSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MultienergyCTPathSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"MultienergyCTPathMacro", "MultienergyCTPathIndex", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTPathMacro success after verifying MultienergyCTPathIndex --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MultienergyCTPathMacro", "ReferencedXRaySourceIndex", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTPathMacro success after verifying ReferencedXRaySourceIndex --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"MultienergyCTPathMacro", "ReferencedXRayDetectorIndex", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " MultienergyCTPathMacro success after verifying ReferencedXRayDetectorIndex --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_MultienergyCTCharacteristicsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MultienergyCTCharacteristicsMacro")

	partial_success =  		verifyType1C(ds, 
			"MultienergyCTCharacteristicsMacro", "MonoenergeticEnergyEquivalent", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue4IsVMI, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultienergyCTCharacteristicsMacro success after verifying MonoenergeticEnergyEquivalent --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"MultienergyCTCharacteristicsMacro", 
			"DerivationAlgorithmSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultienergyCTCharacteristicsMacro success after verifying DerivationAlgorithmSequence" + ("success" if partial_success else "failure")) 
	if "DerivationAlgorithmSequence" in ds:
		DerivationAlgorithmSequence_data = ds.DerivationAlgorithmSequence
		if type(DerivationAlgorithmSequence_data) == Sequence:
			for i1 in range(0, len(DerivationAlgorithmSequence_data)):
				if verbose:
					log.append( " DerivationAlgorithmSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DerivationAlgorithmSequence_data[i1]
				partial_success =  Macro_AlgorithmIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultienergyCTCharacteristicsMacro success after verifying AlgorithmIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"MultienergyCTCharacteristicsMacro", 
			"PerformedProcessingParametersSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultienergyCTCharacteristicsMacro success after verifying PerformedProcessingParametersSequence" + ("success" if partial_success else "failure")) 
	if "PerformedProcessingParametersSequence" in ds:
		PerformedProcessingParametersSequence_data = ds.PerformedProcessingParametersSequence
		if type(PerformedProcessingParametersSequence_data) == Sequence:
			for i1 in range(0, len(PerformedProcessingParametersSequence_data)):
				if verbose:
					log.append( " PerformedProcessingParametersSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerformedProcessingParametersSequence_data[i1]
				partial_success =  Macro_ContentItemWithModifiersMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultienergyCTCharacteristicsMacro success after verifying ContentItemWithModifiersMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_MultienergyCTProcessingMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"MultienergyCTProcessingMacro")

	partial_success =  		verifyType1(ds, 
			"MultienergyCTProcessingMacro", "DecompositionMethod", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultienergyCTProcessingMacro success after verifying DecompositionMethod --> "+("success" if partial_success else "failure"))

	if "DecompositionMethod" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["DecompositionMethod"], 
			StringValueTable_DecompositionMethod, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultienergyCTProcessingMacro success after verifying string defined terms DecompositionMethod --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"MultienergyCTProcessingMacro", "DecompositionDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " MultienergyCTProcessingMacro success after verifying DecompositionDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"MultienergyCTProcessingMacro", 
			"DecompositionAlgorithmIdentificationSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultienergyCTProcessingMacro success after verifying DecompositionAlgorithmIdentificationSequence" + ("success" if partial_success else "failure")) 
	if "DecompositionAlgorithmIdentificationSequence" in ds:
		DecompositionAlgorithmIdentificationSequence_data = ds.DecompositionAlgorithmIdentificationSequence
		if type(DecompositionAlgorithmIdentificationSequence_data) == Sequence:
			for i1 in range(0, len(DecompositionAlgorithmIdentificationSequence_data)):
				if verbose:
					log.append( " DecompositionAlgorithmIdentificationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DecompositionAlgorithmIdentificationSequence_data[i1]
				partial_success =  Macro_AlgorithmIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultienergyCTProcessingMacro success after verifying AlgorithmIdentificationMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"MultienergyCTProcessingMacro", 
			"DecompositionMaterialSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultienergyCTProcessingMacro success after verifying DecompositionMaterialSequence" + ("success" if partial_success else "failure")) 
	if "DecompositionMaterialSequence" in ds:
		DecompositionMaterialSequence_data = ds.DecompositionMaterialSequence
		if type(DecompositionMaterialSequence_data) == Sequence:
			for i1 in range(0, len(DecompositionMaterialSequence_data)):
				if verbose:
					log.append( " DecompositionMaterialSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DecompositionMaterialSequence_data[i1]
				partial_success = verifyType1(ds1, 
						"MultienergyCTProcessingMacro", 
						"MaterialCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "MultienergyCTProcessingMacro success after verifying MaterialCodeSequence" + ("success" if partial_success else "failure")) 
				if "MaterialCodeSequence" in ds1:
					MaterialCodeSequence_data = ds1.MaterialCodeSequence
					if type(MaterialCodeSequence_data) == Sequence:
						for i2 in range(0, len(MaterialCodeSequence_data)):
							if verbose:
								log.append( " MaterialCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MaterialCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " MultienergyCTProcessingMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"MultienergyCTProcessingMacro", 
						"MaterialAttenuationSequence", 
						verbose, log, ElementDictionary, 
									2, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "MultienergyCTProcessingMacro success after verifying MaterialAttenuationSequence" + ("success" if partial_success else "failure")) 
				if "MaterialAttenuationSequence" in ds1:
					MaterialAttenuationSequence_data = ds1.MaterialAttenuationSequence
					if type(MaterialAttenuationSequence_data) == Sequence:
						for i2 in range(0, len(MaterialAttenuationSequence_data)):
							if verbose:
								log.append( " MaterialAttenuationSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = MaterialAttenuationSequence_data[i2]
							partial_success =  		verifyType1(ds2, 
									"MultienergyCTProcessingMacro", "PhotonEnergy", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MultienergyCTProcessingMacro success after verifying PhotonEnergy --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1(ds2, 
									"MultienergyCTProcessingMacro", "XRayMassAttenuationCoefficient", 
									verbose, log, ElementDictionary, 
															0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " MultienergyCTProcessingMacro success after verifying XRayMassAttenuationCoefficient --> "+("success" if partial_success else "failure"))

	return global_success

def Module_EnhancedMultienergyCTAcquisition_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedMultienergyCTAcquisition")

	partial_success =  Macro_MultienergyCTXRaySourceMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedMultienergyCTAcquisition success after verifying MultienergyCTXRaySourceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_MultienergyCTXRayDetectorMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedMultienergyCTAcquisition success after verifying MultienergyCTXRayDetectorMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_MultienergyCTPathMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedMultienergyCTAcquisition success after verifying MultienergyCTPathMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_FramePointers_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"FramePointers")

	partial_success =  		verifyType3(ds, 
			"FramePointers", "RepresentativeFrameNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FramePointers success after verifying RepresentativeFrameNumber --> "+("success" if partial_success else "failure"))

	if "RepresentativeFrameNumber" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["RepresentativeFrameNumber"], 
			verbose, log, -1, False)

	partial_success =  		verifyType3(ds, 
			"FramePointers", "FrameNumbersOfInterest", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FramePointers success after verifying FrameNumbersOfInterest --> "+("success" if partial_success else "failure"))

	if "FrameNumbersOfInterest" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["FrameNumbersOfInterest"], 
			verbose, log, -1, False)

	partial_success =  		verifyType3(ds, 
			"FramePointers", "FrameOfInterestDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FramePointers success after verifying FrameOfInterestDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"FramePointers", "FrameOfInterestType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FramePointers success after verifying FrameOfInterestType --> "+("success" if partial_success else "failure"))

	if "FrameOfInterestType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["FrameOfInterestType"], 
			StringValueTable_FrameOfInterestTypeForUS, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " FramePointers success after verifying string defined terms FrameOfInterestType --> "+("success" if partial_success else "failure"))

	return global_success

def Module_Mask_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"Mask")

	partial_success = verifyType1(ds, 
			"Mask", 
			"MaskSubtractionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Mask success after verifying MaskSubtractionSequence" + ("success" if partial_success else "failure")) 
	if "MaskSubtractionSequence" in ds:
		MaskSubtractionSequence_data = ds.MaskSubtractionSequence
		if type(MaskSubtractionSequence_data) == Sequence:
			for i1 in range(0, len(MaskSubtractionSequence_data)):
				if verbose:
					log.append( " MaskSubtractionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MaskSubtractionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"Mask", "MaskOperation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Mask success after verifying MaskOperation --> "+("success" if partial_success else "failure"))

				if "MaskOperation" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["MaskOperation"], 
						StringValueTable_MaskOperation, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Mask success after verifying string defined terms MaskOperation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"Mask", "SubtractionItemID", 
						verbose, log, ElementDictionary, 
						Condition_SOPClassIsEnhancedXAXRF, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Mask success after verifying SubtractionItemID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"Mask", "ApplicableFrameRange", 
						verbose, log, ElementDictionary, 
						Condition_MaskOperationIsRevTID, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Mask success after verifying ApplicableFrameRange --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"Mask", "MaskFrameNumbers", 
						verbose, log, ElementDictionary, 
						Condition_MaskOperationIsAvgSub, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Mask success after verifying MaskFrameNumbers --> "+("success" if partial_success else "failure"))

				if Condition_MaskOperationIsAvgSub(ds1, parent_ds1, root_ds):
					if "MaskFrameNumbers" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["MaskFrameNumbers"], 
							verbose, log, -1, False)

				partial_success =  		verifyType3(ds1, 
						"Mask", "ContrastFrameAveraging", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Mask success after verifying ContrastFrameAveraging --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"Mask", "MaskSubPixelShift", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Mask success after verifying MaskSubPixelShift --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"Mask", "TIDOffset", 
						verbose, log, ElementDictionary, 
						Condition_MaskOperationIsTIDOrRevTID, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Mask success after verifying TIDOffset --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"Mask", "MaskOperationExplanation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Mask success after verifying MaskOperationExplanation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"Mask", "MaskSelectionMode", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Mask success after verifying MaskSelectionMode --> "+("success" if partial_success else "failure"))

				if "MaskSelectionMode" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["MaskSelectionMode"], 
						StringValueTable_MaskSelectionMode, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Mask success after verifying string defined terms MaskSelectionMode --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"Mask", "RecommendedViewingMode", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Mask success after verifying RecommendedViewingMode --> "+("success" if partial_success else "failure"))

	if "RecommendedViewingMode" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["RecommendedViewingMode"], 
			StringValueTable_RecommendedViewingMode, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " Mask success after verifying string defined terms RecommendedViewingMode --> "+("success" if partial_success else "failure"))

	return global_success

def Module_DisplayShutter_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"DisplayShutter")

	partial_success =  Macro_DisplayShutterMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " DisplayShutter success after verifying DisplayShutterMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_Device_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"Device")

	partial_success = verifyType3(ds, 
			"Device", 
			"DeviceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Device success after verifying DeviceSequence" + ("success" if partial_success else "failure")) 
	if "DeviceSequence" in ds:
		DeviceSequence_data = ds.DeviceSequence
		if type(DeviceSequence_data) == Sequence:
			for i1 in range(0, len(DeviceSequence_data)):
				if verbose:
					log.append( " DeviceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DeviceSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " Device success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"Device", "Manufacturer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Device success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"Device", "ManufacturerModelName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Device success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"Device", "DeviceSerialNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Device success after verifying DeviceSerialNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"Device", "DeviceID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Device success after verifying DeviceID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"Device", "DeviceLength", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Device success after verifying DeviceLength --> "+("success" if partial_success else "failure"))

				if "DeviceLength" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["DeviceLength"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"Device", "DeviceDiameter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Device success after verifying DeviceDiameter --> "+("success" if partial_success else "failure"))

				if "DeviceDiameter" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["DeviceDiameter"], 
						verbose, log, -1, True)

				partial_success =  		verifyType2C(ds1, 
						"Device", "DeviceDiameterUnits", 
						verbose, log, ElementDictionary, 
						Condition_DeviceDiameterIsPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Device success after verifying DeviceDiameterUnits --> "+("success" if partial_success else "failure"))

				if Condition_DeviceDiameterIsPresent(ds1, parent_ds1, root_ds):
					if "DeviceDiameterUnits" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["DeviceDiameterUnits"], 
							StringValueTable_DeviceDiameterUnits, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " Device success after verifying string enumerated values DeviceDiameterUnits --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"Device", "DeviceVolume", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Device success after verifying DeviceVolume --> "+("success" if partial_success else "failure"))

				if "DeviceVolume" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["DeviceVolume"], 
						verbose, log, -1, True)

				partial_success =  		verifyType3(ds1, 
						"Device", "InterMarkerDistance", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Device success after verifying InterMarkerDistance --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"Device", "DeviceDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Device success after verifying DeviceDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Module_Intervention_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"Intervention")

	partial_success = verifyType3(ds, 
			"Intervention", 
			"InterventionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "Intervention success after verifying InterventionSequence" + ("success" if partial_success else "failure")) 
	if "InterventionSequence" in ds:
		InterventionSequence_data = ds.InterventionSequence
		if type(InterventionSequence_data) == Sequence:
			for i1 in range(0, len(InterventionSequence_data)):
				if verbose:
					log.append( " InterventionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = InterventionSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " Intervention success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType2(ds1, 
						"Intervention", "InterventionStatus", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Intervention success after verifying InterventionStatus --> "+("success" if partial_success else "failure"))

				if "InterventionStatus" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["InterventionStatus"], 
						StringValueTable_InterventionStatus, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Intervention success after verifying string enumerated values InterventionStatus --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"Intervention", 
						"InterventionDrugCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "Intervention success after verifying InterventionDrugCodeSequence" + ("success" if partial_success else "failure")) 
				if "InterventionDrugCodeSequence" in ds1:
					InterventionDrugCodeSequence_data = ds1.InterventionDrugCodeSequence
					if type(InterventionDrugCodeSequence_data) == Sequence:
						for i2 in range(0, len(InterventionDrugCodeSequence_data)):
							if verbose:
								log.append( " InterventionDrugCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = InterventionDrugCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " Intervention success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"Intervention", "InterventionDrugStartTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Intervention success after verifying InterventionDrugStartTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"Intervention", "InterventionDrugStopTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Intervention success after verifying InterventionDrugStopTime --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"Intervention", 
						"AdministrationRouteCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "Intervention success after verifying AdministrationRouteCodeSequence" + ("success" if partial_success else "failure")) 
				if "AdministrationRouteCodeSequence" in ds1:
					AdministrationRouteCodeSequence_data = ds1.AdministrationRouteCodeSequence
					if type(AdministrationRouteCodeSequence_data) == Sequence:
						for i2 in range(0, len(AdministrationRouteCodeSequence_data)):
							if verbose:
								log.append( " AdministrationRouteCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = AdministrationRouteCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " Intervention success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"Intervention", "InterventionDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " Intervention success after verifying InterventionDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Module_XRayImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRayImage")

	partial_success =  		verifyType1C(ds, 
			"XRayImage", "FrameIncrementPointer", 
			verbose, log, ElementDictionary, 
			Condition_NeedModuleMultiFrame, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying FrameIncrementPointer --> "+("success" if partial_success else "failure"))

	if Condition_NeedModuleMultiFrame(ds, parent_ds, root_ds):
		if "FrameIncrementPointer" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_tag(ds["FrameIncrementPointer"], 
				TagValueDescription_XRayFrameIncrementPointerValues, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying tag enumerated values FrameIncrementPointer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRayImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRayImage", "ImageType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying ImageType --> "+("success" if partial_success else "failure"))

	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_XRayImageTypeValue3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if Condition_ImageTypeValue3MissingOrEmpty(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" A value is required for value 3 in XA/XRF Images - attribute <ImageType>")

	partial_success =  		verifyType1(ds, 
			"XRayImage", "PixelIntensityRelationship", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying PixelIntensityRelationship --> "+("success" if partial_success else "failure"))

	if "PixelIntensityRelationship" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["PixelIntensityRelationship"], 
			StringValueTable_PixelIntensityRelationship, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying string defined terms PixelIntensityRelationship --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRayImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRayImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRayImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRayImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8Or10Or12Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRayImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7Or9Or11Or15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRayImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayImage", "ScanOptions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying ScanOptions --> "+("success" if partial_success else "failure"))

	if "ScanOptions" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ScanOptions"], 
			StringValueTable_XRayImageScanOptions, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying string defined terms ScanOptions --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_GeneralAnatomyOptionalMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " XRayImage success after verifying GeneralAnatomyOptionalMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"XRayImage", "RWavePointer", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying RWavePointer --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"XRayImage", 
			"ReferencedImageSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue3BiplaneAOrB, 
			True, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayImage success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageSequence" in ds:
		ReferencedImageSequence_data = ds.ReferencedImageSequence
		if type(ReferencedImageSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageSequence_data)):
				if verbose:
					log.append( " ReferencedImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRayImage success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"XRayImage", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "XRayImage success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " XRayImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"XRayImage", "DerivationDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying DerivationDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayImage", "AcquisitionDeviceProcessingDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying AcquisitionDeviceProcessingDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayImage", "FrameLabelVector", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying FrameLabelVector --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayImage", "FrameDimensionPointer", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying FrameDimensionPointer --> "+("success" if partial_success else "failure"))

	if "FrameDimensionPointer" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_tag(ds["FrameDimensionPointer"], 
			TagValueDescription_XAFrameDimensionPointerValues, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying tag enumerated values FrameDimensionPointer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayImage", "CalibrationImage", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying CalibrationImage --> "+("success" if partial_success else "failure"))

	if "CalibrationImage" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CalibrationImage"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImage success after verifying string enumerated values CalibrationImage --> "+("success" if partial_success else "failure"))

	return global_success

def Module_XRayAcquisition_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRayAcquisition")

	partial_success =  		verifyType2(ds, 
			"XRayAcquisition", "KVP", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying KVP --> "+("success" if partial_success else "failure"))

	if "KVP" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["KVP"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"XRayAcquisition", "RadiationSetting", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying RadiationSetting --> "+("success" if partial_success else "failure"))

	if "RadiationSetting" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RadiationSetting"], 
			StringValueTable_RadiationSetting, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying string enumerated values RadiationSetting --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"XRayAcquisition", "XRayTubeCurrent", 
			verbose, log, ElementDictionary, 
			Condition_ExposureNotPresent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying XRayTubeCurrent --> "+("success" if partial_success else "failure"))

	if Condition_ExposureNotPresent(ds, parent_ds, root_ds):
		if "XRayTubeCurrent" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["XRayTubeCurrent"], 
				verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisition", "XRayTubeCurrentInuA", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying XRayTubeCurrentInuA --> "+("success" if partial_success else "failure"))

	if "XRayTubeCurrentInuA" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["XRayTubeCurrentInuA"], 
			verbose, log, -1, True)


	if Condition_XRayTubeCurrentInmAIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <XRayAcquisition> - use XRayTubeCurrent and/or XRayTubeCurrentInuA instead of - attribute <XRayTubeCurrentInmA>")

	partial_success =  		verifyType2C(ds, 
			"XRayAcquisition", "ExposureTime", 
			verbose, log, ElementDictionary, 
			Condition_ExposureNotPresent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying ExposureTime --> "+("success" if partial_success else "failure"))

	if Condition_ExposureNotPresent(ds, parent_ds, root_ds):
		if "ExposureTime" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["ExposureTime"], 
				verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisition", "ExposureTimeInuS", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying ExposureTimeInuS --> "+("success" if partial_success else "failure"))

	if "ExposureTimeInuS" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureTimeInuS"], 
			verbose, log, -1, True)


	if Condition_ExposureTimeInmsIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <XRayAcquisition> - use ExposureTime and/or ExposureTimeInuS instead of - attribute <ExposureTimeInms>")

	partial_success =  		verifyType2C(ds, 
			"XRayAcquisition", "Exposure", 
			verbose, log, ElementDictionary, 
			Condition_XRayTubeCurrentAndExposureTimeNotPresent, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying Exposure --> "+("success" if partial_success else "failure"))

	if Condition_XRayTubeCurrentAndExposureTimeNotPresent(ds, parent_ds, root_ds):
		if "Exposure" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["Exposure"], 
				verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisition", "ExposureInuAs", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying ExposureInuAs --> "+("success" if partial_success else "failure"))

	if "ExposureInuAs" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExposureInuAs"], 
			verbose, log, -1, True)


	if Condition_ExposureInmAsIsPresentAndOthersAreNot(ds, parent_ds, root_ds):
			log.append( EMsgDC("Null") +" Attribute should not be used with Module <XRayAcquisition> - use Exposure and/or ExposureInuAs instead of - attribute <ExposureInmAs>")

	partial_success =  		verifyType3(ds, 
			"XRayAcquisition", "Grid", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying Grid --> "+("success" if partial_success else "failure"))

	if "Grid" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["Grid"], 
			StringValueTable_Grid, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying string defined terms Grid --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayAcquisition", "AveragePulseWidth", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying AveragePulseWidth --> "+("success" if partial_success else "failure"))

	if "AveragePulseWidth" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["AveragePulseWidth"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisition", "RadiationMode", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying RadiationMode --> "+("success" if partial_success else "failure"))

	if "RadiationMode" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["RadiationMode"], 
			StringValueTable_RadiationMode, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying string defined terms RadiationMode --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayAcquisition", "TypeOfFilters", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying TypeOfFilters --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayAcquisition", "IntensifierSize", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying IntensifierSize --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayAcquisition", "FieldOfViewShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying FieldOfViewShape --> "+("success" if partial_success else "failure"))

	if "FieldOfViewShape" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["FieldOfViewShape"], 
			StringValueTable_XRayFieldOfViewShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying string defined terms FieldOfViewShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayAcquisition", "FieldOfViewDimensions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying FieldOfViewDimensions --> "+("success" if partial_success else "failure"))

	if "FieldOfViewDimensions" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["FieldOfViewDimensions"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRayAcquisition", "ImagerPixelSpacing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying ImagerPixelSpacing --> "+("success" if partial_success else "failure"))

	if "ImagerPixelSpacing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ImagerPixelSpacing"], 
			verbose, log, -1, False)

	partial_success =  Macro_BasicPixelSpacingCalibrationMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " XRayAcquisition success after verifying BasicPixelSpacingCalibrationMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"XRayAcquisition", "FocalSpots", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying FocalSpots --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayAcquisition", "ImageAndFluoroscopyAreaDoseProduct", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayAcquisition success after verifying ImageAndFluoroscopyAreaDoseProduct --> "+("success" if partial_success else "failure"))

	if "ImageAndFluoroscopyAreaDoseProduct" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ImageAndFluoroscopyAreaDoseProduct"], 
			verbose, log, -1, True)

	return global_success

def Macro_XRayCollimatorDimensionsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayCollimatorDimensionsMacro")

	partial_success =  		verifyType1C(ds, 
			"XRayCollimatorDimensionsMacro", "CollimatorLeftVerticalEdge", 
			verbose, log, ElementDictionary, 
			Condition_CollimatorShapeIsRectangular, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayCollimatorDimensionsMacro success after verifying CollimatorLeftVerticalEdge --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRayCollimatorDimensionsMacro", "CollimatorRightVerticalEdge", 
			verbose, log, ElementDictionary, 
			Condition_CollimatorShapeIsRectangular, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayCollimatorDimensionsMacro success after verifying CollimatorRightVerticalEdge --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRayCollimatorDimensionsMacro", "CollimatorUpperHorizontalEdge", 
			verbose, log, ElementDictionary, 
			Condition_CollimatorShapeIsRectangular, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayCollimatorDimensionsMacro success after verifying CollimatorUpperHorizontalEdge --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRayCollimatorDimensionsMacro", "CollimatorLowerHorizontalEdge", 
			verbose, log, ElementDictionary, 
			Condition_CollimatorShapeIsRectangular, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayCollimatorDimensionsMacro success after verifying CollimatorLowerHorizontalEdge --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRayCollimatorDimensionsMacro", "CenterOfCircularCollimator", 
			verbose, log, ElementDictionary, 
			Condition_CollimatorShapeIsCircular, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayCollimatorDimensionsMacro success after verifying CenterOfCircularCollimator --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRayCollimatorDimensionsMacro", "RadiusOfCircularCollimator", 
			verbose, log, ElementDictionary, 
			Condition_CollimatorShapeIsCircular, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayCollimatorDimensionsMacro success after verifying RadiusOfCircularCollimator --> "+("success" if partial_success else "failure"))

	if Condition_CollimatorShapeIsCircular(ds, parent_ds, root_ds):
		if "RadiusOfCircularCollimator" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["RadiusOfCircularCollimator"], 
				verbose, log, -1, True)

	partial_success =  		verifyType1C(ds, 
			"XRayCollimatorDimensionsMacro", "VerticesOfThePolygonalCollimator", 
			verbose, log, ElementDictionary, 
			Condition_CollimatorShapeIsPolygonal, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayCollimatorDimensionsMacro success after verifying VerticesOfThePolygonalCollimator --> "+("success" if partial_success else "failure"))

	return global_success

def Module_XRayCollimator_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRayCollimator")

	partial_success =  		verifyType1(ds, 
			"XRayCollimator", "CollimatorShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayCollimator success after verifying CollimatorShape --> "+("success" if partial_success else "failure"))

	if "CollimatorShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CollimatorShape"], 
			StringValueTable_CollimatorShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayCollimator success after verifying string enumerated values CollimatorShape --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_XRayCollimatorDimensionsMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " XRayCollimator success after verifying XRayCollimatorDimensionsMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_XRayTable_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRayTable")

	partial_success =  		verifyType2(ds, 
			"XRayTable", "TableMotion", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTable success after verifying TableMotion --> "+("success" if partial_success else "failure"))

	if "TableMotion" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["TableMotion"], 
			StringValueTable_TableMotion, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTable success after verifying string defined terms TableMotion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"XRayTable", "TableVerticalIncrement", 
			verbose, log, ElementDictionary, 
			Condition_TableMotionDynamic, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTable success after verifying TableVerticalIncrement --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"XRayTable", "TableLongitudinalIncrement", 
			verbose, log, ElementDictionary, 
			Condition_TableMotionDynamic, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTable success after verifying TableLongitudinalIncrement --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"XRayTable", "TableLateralIncrement", 
			verbose, log, ElementDictionary, 
			Condition_TableMotionDynamic, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTable success after verifying TableLateralIncrement --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayTable", "TableAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTable success after verifying TableAngle --> "+("success" if partial_success else "failure"))

	return global_success

def Module_XAPositioner_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XAPositioner")

	partial_success =  		verifyType3(ds, 
			"XAPositioner", "DistanceSourceToPatient", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAPositioner success after verifying DistanceSourceToPatient --> "+("success" if partial_success else "failure"))

	if "DistanceSourceToPatient" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceSourceToPatient"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XAPositioner", "DistanceSourceToDetector", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAPositioner success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

	if "DistanceSourceToDetector" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceSourceToDetector"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XAPositioner", "EstimatedRadiographicMagnificationFactor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAPositioner success after verifying EstimatedRadiographicMagnificationFactor --> "+("success" if partial_success else "failure"))

	if "EstimatedRadiographicMagnificationFactor" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["EstimatedRadiographicMagnificationFactor"], 
			verbose, log, -1, True)

	partial_success =  		verifyType2C(ds, 
			"XAPositioner", "PositionerMotion", 
			verbose, log, ElementDictionary, 
			Condition_NumberOfFramesGreaterThanOne, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAPositioner success after verifying PositionerMotion --> "+("success" if partial_success else "failure"))

	if Condition_NumberOfFramesGreaterThanOne(ds, parent_ds, root_ds):
		if "PositionerMotion" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["PositionerMotion"], 
				StringValueTable_PositionerMotion, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " XAPositioner success after verifying string defined terms PositionerMotion --> "+("success" if partial_success else "failure"))


	if Condition_PositionerMotionIsPresentAndNumberOfFramesIsAbsentOrOne(ds, parent_ds, root_ds):
		if "PositionerMotion" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PositionerMotion"], 
				StringValueTable_PositionerMotionStatic, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " XAPositioner success after verifying string enumerated values PositionerMotion --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"XAPositioner", "PositionerPrimaryAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAPositioner success after verifying PositionerPrimaryAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"XAPositioner", "PositionerSecondaryAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAPositioner success after verifying PositionerSecondaryAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2C(ds, 
			"XAPositioner", "PositionerPrimaryAngleIncrement", 
			verbose, log, ElementDictionary, 
			Condition_PositionerMotionDynamic, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAPositioner success after verifying PositionerPrimaryAngleIncrement --> "+("success" if partial_success else "failure"))

	if Condition_PositionerMotionDynamic(ds, parent_ds, root_ds):
		if "PositionerPrimaryAngleIncrement" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["PositionerPrimaryAngleIncrement"], 
				verbose, log, -1, True)

	partial_success =  		verifyType2C(ds, 
			"XAPositioner", "PositionerSecondaryAngleIncrement", 
			verbose, log, ElementDictionary, 
			Condition_PositionerMotionDynamic, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAPositioner success after verifying PositionerSecondaryAngleIncrement --> "+("success" if partial_success else "failure"))

	if Condition_PositionerMotionDynamic(ds, parent_ds, root_ds):
		if "PositionerSecondaryAngleIncrement" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["PositionerSecondaryAngleIncrement"], 
				verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XAPositioner", "DetectorPrimaryAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAPositioner success after verifying DetectorPrimaryAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XAPositioner", "DetectorSecondaryAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAPositioner success after verifying DetectorSecondaryAngle --> "+("success" if partial_success else "failure"))

	return global_success

def Module_XRFPositioner_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRFPositioner")

	partial_success =  		verifyType3(ds, 
			"XRFPositioner", "DistanceSourceToDetector", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRFPositioner success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

	if "DistanceSourceToDetector" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceSourceToDetector"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRFPositioner", "DistanceSourceToPatient", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRFPositioner success after verifying DistanceSourceToPatient --> "+("success" if partial_success else "failure"))

	if "DistanceSourceToPatient" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceSourceToPatient"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRFPositioner", "EstimatedRadiographicMagnificationFactor", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRFPositioner success after verifying EstimatedRadiographicMagnificationFactor --> "+("success" if partial_success else "failure"))

	if "EstimatedRadiographicMagnificationFactor" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["EstimatedRadiographicMagnificationFactor"], 
			verbose, log, -1, True)

	partial_success =  		verifyType3(ds, 
			"XRFPositioner", "ColumnAngulation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRFPositioner success after verifying ColumnAngulation --> "+("success" if partial_success else "failure"))

	return global_success

def Module_XRayTomographyAcquisition_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRayTomographyAcquisition")

	partial_success =  		verifyType1(ds, 
			"XRayTomographyAcquisition", "TomoLayerHeight", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTomographyAcquisition success after verifying TomoLayerHeight --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayTomographyAcquisition", "TomoAngle", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTomographyAcquisition success after verifying TomoAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayTomographyAcquisition", "TomoTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTomographyAcquisition success after verifying TomoTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayTomographyAcquisition", "TomoType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTomographyAcquisition success after verifying TomoType --> "+("success" if partial_success else "failure"))

	if "TomoType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["TomoType"], 
			StringValueTable_TomoType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTomographyAcquisition success after verifying string defined terms TomoType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayTomographyAcquisition", "TomoClass", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTomographyAcquisition success after verifying TomoClass --> "+("success" if partial_success else "failure"))

	if "TomoClass" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["TomoClass"], 
			StringValueTable_TomoClass, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTomographyAcquisition success after verifying string defined terms TomoClass --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRayTomographyAcquisition", "NumberOfTomosynthesisSourceImages", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayTomographyAcquisition success after verifying NumberOfTomosynthesisSourceImages --> "+("success" if partial_success else "failure"))

	return global_success

def Module_XAXRFSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XAXRFSeries")

	partial_success =  		verifyType1(ds, 
			"XAXRFSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_EnhancedXAXRFModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XAXRFSeries", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFSeries success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"XAXRFSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XAXRFSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XAXRFSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_EnhancedXAXRFImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedXAXRFImage")

	partial_success =  		verifyType1(ds, 
			"EnhancedXAXRFImage", "ImageType", 
			verbose, log, ElementDictionary, 
			4, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_EnhancedXAXRFImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_EnhancedXAXRFImageType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_EnhancedXAXRFImageType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_EnhancedXAXRFImageType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedXAXRFImage", "PlanesInAcquisition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying PlanesInAcquisition --> "+("success" if partial_success else "failure"))

	if "PlanesInAcquisition" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["PlanesInAcquisition"], 
			StringValueTable_PlaneIdentification, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string defined terms PlanesInAcquisition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedXAXRFImage", "PlaneIdentification", 
			verbose, log, ElementDictionary, 
			Condition_PlanesInAcquisitionNotUndefined, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying PlaneIdentification --> "+("success" if partial_success else "failure"))

	if Condition_PlanesInAcquisitionNotUndefined(ds, parent_ds, root_ds):
		if "PlaneIdentification" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["PlaneIdentification"], 
				StringValueTable_PlaneIdentification, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string defined terms PlaneIdentification --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedXAXRFImage", "AcquisitionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying AcquisitionNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedXAXRFImage", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedXAXRFImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedXAXRFImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8To16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))


	if Condition_BitsAllocatedIs8(ds, parent_ds, root_ds):
		if "BitsStored" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
				BinaryValueDescription_BitsAre8, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))


	if Condition_BitsAllocatedIs16(ds, parent_ds, root_ds):
		if "BitsStored" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
				BinaryValueDescription_BitsAre9To16, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedXAXRFImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7To15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))


	if Condition_BitsAllocatedIs8(ds, parent_ds, root_ds):
		if "HighBit" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["HighBit"], 
				BinaryValueDescription_BitsAre7, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))


	if Condition_BitsAllocatedIs16(ds, parent_ds, root_ds):
		if "HighBit" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues_uint16(ds["HighBit"], 
				BinaryValueDescription_BitsAre8To15, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedXAXRFImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedXAXRFImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedXAXRFImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedXAXRFImage", "AcquisitionProtocolName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying AcquisitionProtocolName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedXAXRFImage", "AcquisitionProtocolDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying AcquisitionProtocolDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedXAXRFImage", "ScanOptions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying ScanOptions --> "+("success" if partial_success else "failure"))

	if "ScanOptions" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ScanOptions"], 
			StringValueTable_EnhancedXAXRFScanOptions, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string defined terms ScanOptions --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedXAXRFImage", "ContentQualification", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying ContentQualification --> "+("success" if partial_success else "failure"))

	if "ContentQualification" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ContentQualification"], 
			StringValueTable_ContentQualification, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string enumerated values ContentQualification --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"EnhancedXAXRFImage", 
			"PatientOrientationCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_PositionerIsCArmWithTableTopRelationship, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedXAXRFImage success after verifying PatientOrientationCodeSequence" + ("success" if partial_success else "failure")) 
	if "PatientOrientationCodeSequence" in ds:
		PatientOrientationCodeSequence_data = ds.PatientOrientationCodeSequence
		if type(PatientOrientationCodeSequence_data) == Sequence:
			for i1 in range(0, len(PatientOrientationCodeSequence_data)):
				if verbose:
					log.append( " PatientOrientationCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientOrientationCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedXAXRFImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"EnhancedXAXRFImage", 
						"PatientOrientationModifierCodeSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedXAXRFImage success after verifying PatientOrientationModifierCodeSequence" + ("success" if partial_success else "failure")) 
				if "PatientOrientationModifierCodeSequence" in ds1:
					PatientOrientationModifierCodeSequence_data = ds1.PatientOrientationModifierCodeSequence
					if type(PatientOrientationModifierCodeSequence_data) == Sequence:
						for i2 in range(0, len(PatientOrientationModifierCodeSequence_data)):
							if verbose:
								log.append( " PatientOrientationModifierCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PatientOrientationModifierCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EnhancedXAXRFImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType2C(ds, 
			"EnhancedXAXRFImage", 
			"PatientGantryRelationshipCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_PositionerIsCArmWithTableTopRelationship, 
			False, 
			parent_ds, root_ds, 
			0, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedXAXRFImage success after verifying PatientGantryRelationshipCodeSequence" + ("success" if partial_success else "failure")) 
	if "PatientGantryRelationshipCodeSequence" in ds:
		PatientGantryRelationshipCodeSequence_data = ds.PatientGantryRelationshipCodeSequence
		if type(PatientGantryRelationshipCodeSequence_data) == Sequence:
			for i1 in range(0, len(PatientGantryRelationshipCodeSequence_data)):
				if verbose:
					log.append( " PatientGantryRelationshipCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PatientGantryRelationshipCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedXAXRFImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"EnhancedXAXRFImage", "ExaminedBodyThickness", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying ExaminedBodyThickness --> "+("success" if partial_success else "failure"))

	if "ExaminedBodyThickness" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["ExaminedBodyThickness"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"EnhancedXAXRFImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_NoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedXAXRFImage", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedXAXRFImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedXAXRFImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionRatio" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["LossyImageCompressionRatio"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"EnhancedXAXRFImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["LossyImageCompressionMethod"], 
				StringValueTable_LossyImageCompressionMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string defined terms LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))


	if Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" method inconsistent with transfer syntax - attribute <LossyImageCompressionMethod>"+\
				" = <{}>".format( tag_for_keyword("LossyImageCompressionMethod")))

	partial_success = verifyType1C(ds, 
			"EnhancedXAXRFImage", 
			"ReferencedOtherPlaneSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue3BiplaneAOrB, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedXAXRFImage success after verifying ReferencedOtherPlaneSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedOtherPlaneSequence" in ds:
		ReferencedOtherPlaneSequence_data = ds.ReferencedOtherPlaneSequence
		if type(ReferencedOtherPlaneSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedOtherPlaneSequence_data)):
				if verbose:
					log.append( " ReferencedOtherPlaneSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedOtherPlaneSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedXAXRFImage success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"EnhancedXAXRFImage", 
			"ReferencedImageEvidenceSequence", 
			verbose, log, ElementDictionary, 
			Condition_ReferencedImageSequenceIsPresentInFunctionalGroups, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedXAXRFImage success after verifying ReferencedImageEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageEvidenceSequence" in ds:
		ReferencedImageEvidenceSequence_data = ds.ReferencedImageEvidenceSequence
		if type(ReferencedImageEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageEvidenceSequence_data)):
				if verbose:
					log.append( " ReferencedImageEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageEvidenceSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedXAXRFImage success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"EnhancedXAXRFImage", 
			"SourceImageEvidenceSequence", 
			verbose, log, ElementDictionary, 
			Condition_SourceImageSequenceIsPresentInFunctionalGroups, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedXAXRFImage success after verifying SourceImageEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "SourceImageEvidenceSequence" in ds:
		SourceImageEvidenceSequence_data = ds.SourceImageEvidenceSequence
		if type(SourceImageEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(SourceImageEvidenceSequence_data)):
				if verbose:
					log.append( " SourceImageEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceImageEvidenceSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedXAXRFImage success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"EnhancedXAXRFImage", 
			"ReferencedInstanceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedXAXRFImage success after verifying ReferencedInstanceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedInstanceSequence" in ds:
		ReferencedInstanceSequence_data = ds.ReferencedInstanceSequence
		if type(ReferencedInstanceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedInstanceSequence_data)):
				if verbose:
					log.append( " ReferencedInstanceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedInstanceSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedXAXRFImage success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1(ds1, 
						"EnhancedXAXRFImage", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedXAXRFImage success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EnhancedXAXRFImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"EnhancedXAXRFImage", "ImageComments", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying ImageComments --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedXAXRFImage", "QualityControlImage", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying QualityControlImage --> "+("success" if partial_success else "failure"))

	if "QualityControlImage" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["QualityControlImage"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string enumerated values QualityControlImage --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"EnhancedXAXRFImage", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedXAXRFImage success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedXAXRFImage success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"EnhancedXAXRFImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if "PresentationLUTShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
			StringValueTable_IdentityOrInversePresentationLUTShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsMonochrome2(ds, parent_ds, root_ds):
		if "PresentationLUTShape" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
				StringValueTable_IdentityPresentationLUTShape, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))


	if Condition_PhotometricInterpretationIsMonochrome1(ds, parent_ds, root_ds):
		if "PresentationLUTShape" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
				StringValueTable_InversePresentationLUTShape, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedXAXRFImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	return global_success

def Module_XAXRFAcquisition_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XAXRFAcquisition")

	partial_success =  		verifyType1(ds, 
			"XAXRFAcquisition", "KVP", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying KVP --> "+("success" if partial_success else "failure"))

	if "KVP" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["KVP"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"XAXRFAcquisition", "RadiationSetting", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying RadiationSetting --> "+("success" if partial_success else "failure"))

	if "RadiationSetting" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RadiationSetting"], 
			StringValueTable_EnhancedXAXRFRadiationSetting, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying string enumerated values RadiationSetting --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XAXRFAcquisition", "XRayTubeCurrentInmA", 
			verbose, log, ElementDictionary, 
			Condition_ExposureInmAsNotPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying XRayTubeCurrentInmA --> "+("success" if partial_success else "failure"))

	if Condition_ExposureInmAsNotPresent(ds, parent_ds, root_ds):
		if "XRayTubeCurrentInmA" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["XRayTubeCurrentInmA"], 
				verbose, log, -1, True)

	partial_success =  		verifyType1C(ds, 
			"XAXRFAcquisition", "ExposureTimeInms", 
			verbose, log, ElementDictionary, 
			Condition_ExposureInmAsNotPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying ExposureTimeInms --> "+("success" if partial_success else "failure"))

	if Condition_ExposureInmAsNotPresent(ds, parent_ds, root_ds):
		if "ExposureTimeInms" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["ExposureTimeInms"], 
				verbose, log, -1, True)

	partial_success =  		verifyType1C(ds, 
			"XAXRFAcquisition", "ExposureInmAs", 
			verbose, log, ElementDictionary, 
			Condition_XRayTubeCurrentInmAOrExposureTimeInmsNotPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying ExposureInmAs --> "+("success" if partial_success else "failure"))

	if Condition_XRayTubeCurrentInmAOrExposureTimeInmsNotPresent(ds, parent_ds, root_ds):
		if "ExposureInmAs" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["ExposureInmAs"], 
				verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"XAXRFAcquisition", "AveragePulseWidth", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying AveragePulseWidth --> "+("success" if partial_success else "failure"))

	if "AveragePulseWidth" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["AveragePulseWidth"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"XAXRFAcquisition", "AcquisitionDuration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying AcquisitionDuration --> "+("success" if partial_success else "failure"))

	if "AcquisitionDuration" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["AcquisitionDuration"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"XAXRFAcquisition", "RadiationMode", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying RadiationMode --> "+("success" if partial_success else "failure"))

	if "RadiationMode" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["RadiationMode"], 
			StringValueTable_EnhancedXAXRFRadiationMode, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying string defined terms RadiationMode --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XAXRFAcquisition", "FocalSpots", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying FocalSpots --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XAXRFAcquisition", "AnodeTargetMaterial", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying AnodeTargetMaterial --> "+("success" if partial_success else "failure"))

	if "AnodeTargetMaterial" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["AnodeTargetMaterial"], 
			StringValueTable_AnodeTargetMaterial, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying string defined terms AnodeTargetMaterial --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XAXRFAcquisition", "RectificationType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying RectificationType --> "+("success" if partial_success else "failure"))

	if "RectificationType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["RectificationType"], 
			StringValueTable_RectificationType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying string defined terms RectificationType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XAXRFAcquisition", "XRayReceptorType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying XRayReceptorType --> "+("success" if partial_success else "failure"))

	if "XRayReceptorType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["XRayReceptorType"], 
			StringValueTable_XRayReceptorType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying string enumerated values XRayReceptorType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"XAXRFAcquisition", "DistanceReceptorPlaneToDetectorHousing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying DistanceReceptorPlaneToDetectorHousing --> "+("success" if partial_success else "failure"))

	if "DistanceReceptorPlaneToDetectorHousing" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["DistanceReceptorPlaneToDetectorHousing"], 
			verbose, log, -1, True)

	partial_success =  		verifyType2(ds, 
			"XAXRFAcquisition", "PositionerType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying PositionerType --> "+("success" if partial_success else "failure"))

	if "PositionerType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["PositionerType"], 
			StringValueTable_EnhancedXAXRFPositionerType, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying string defined terms PositionerType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XAXRFAcquisition", "CArmPositionerTabletopRelationship", 
			verbose, log, ElementDictionary, 
			Condition_PositionerIsCArm, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying CArmPositionerTabletopRelationship --> "+("success" if partial_success else "failure"))

	if Condition_PositionerIsCArm(ds, parent_ds, root_ds):
		if "CArmPositionerTabletopRelationship" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["CArmPositionerTabletopRelationship"], 
				StringValueTable_YesNoFull, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying string enumerated values CArmPositionerTabletopRelationship --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType2(ds, 
			"XAXRFAcquisition", "AcquiredImageAreaDoseProduct", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFAcquisition success after verifying AcquiredImageAreaDoseProduct --> "+("success" if partial_success else "failure"))

	if "AcquiredImageAreaDoseProduct" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["AcquiredImageAreaDoseProduct"], 
			verbose, log, -1, True)

	return global_success

def Module_XRayImageIntensifier_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRayImageIntensifier")

	partial_success =  		verifyType1(ds, 
			"XRayImageIntensifier", "IntensifierSize", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImageIntensifier success after verifying IntensifierSize --> "+("success" if partial_success else "failure"))

	if "IntensifierSize" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["IntensifierSize"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1(ds, 
			"XRayImageIntensifier", "IntensifierActiveShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImageIntensifier success after verifying IntensifierActiveShape --> "+("success" if partial_success else "failure"))

	if "IntensifierActiveShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["IntensifierActiveShape"], 
			StringValueTable_IntensifierActiveShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImageIntensifier success after verifying string enumerated values IntensifierActiveShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRayImageIntensifier", "IntensifierActiveDimensions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayImageIntensifier success after verifying IntensifierActiveDimensions --> "+("success" if partial_success else "failure"))

	if "IntensifierActiveDimensions" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["IntensifierActiveDimensions"], 
			verbose, log, -1, True)

	return global_success

def Module_XRayDetector_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRayDetector")

	partial_success =  Macro_DigitalXRayDetectorMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " XRayDetector success after verifying DigitalXRayDetectorMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"XRayDetector", "PhysicalDetectorSize", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayDetector success after verifying PhysicalDetectorSize --> "+("success" if partial_success else "failure"))

	if "PhysicalDetectorSize" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["PhysicalDetectorSize"], 
			verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"XRayDetector", "PositionOfIsocenterProjection", 
			verbose, log, ElementDictionary, 
			Condition_IsocenterReferenceSystemSequencePresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRayDetector success after verifying PositionOfIsocenterProjection --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayFrameCharacteristicsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayFrameCharacteristicsMacro")

	partial_success = verifyType1(ds, 
			"XRayFrameCharacteristicsMacro", 
			"XAXRFFrameCharacteristicsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayFrameCharacteristicsMacro success after verifying XAXRFFrameCharacteristicsSequence" + ("success" if partial_success else "failure")) 
	if "XAXRFFrameCharacteristicsSequence" in ds:
		XAXRFFrameCharacteristicsSequence_data = ds.XAXRFFrameCharacteristicsSequence
		if type(XAXRFFrameCharacteristicsSequence_data) == Sequence:
			for i1 in range(0, len(XAXRFFrameCharacteristicsSequence_data)):
				if verbose:
					log.append( " XAXRFFrameCharacteristicsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = XAXRFFrameCharacteristicsSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"XRayFrameCharacteristicsMacro", "DerivationDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFrameCharacteristicsMacro success after verifying DerivationDescription --> "+("success" if partial_success else "failure"))

				partial_success = verifyType3(ds1, 
						"XRayFrameCharacteristicsMacro", 
						"DerivationCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "XRayFrameCharacteristicsMacro success after verifying DerivationCodeSequence" + ("success" if partial_success else "failure")) 
				if "DerivationCodeSequence" in ds1:
					DerivationCodeSequence_data = ds1.DerivationCodeSequence
					if type(DerivationCodeSequence_data) == Sequence:
						for i2 in range(0, len(DerivationCodeSequence_data)):
							if verbose:
								log.append( " DerivationCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = DerivationCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " XRayFrameCharacteristicsMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"XRayFrameCharacteristicsMacro", "AcquisitionDeviceProcessingDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFrameCharacteristicsMacro success after verifying AcquisitionDeviceProcessingDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"XRayFrameCharacteristicsMacro", "AcquisitionDeviceProcessingCode", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFrameCharacteristicsMacro success after verifying AcquisitionDeviceProcessingCode --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayFieldOfViewMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayFieldOfViewMacro")

	partial_success = verifyType1(ds, 
			"XRayFieldOfViewMacro", 
			"FieldOfViewSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayFieldOfViewMacro success after verifying FieldOfViewSequence" + ("success" if partial_success else "failure")) 
	if "FieldOfViewSequence" in ds:
		FieldOfViewSequence_data = ds.FieldOfViewSequence
		if type(FieldOfViewSequence_data) == Sequence:
			for i1 in range(0, len(FieldOfViewSequence_data)):
				if verbose:
					log.append( " FieldOfViewSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FieldOfViewSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"XRayFieldOfViewMacro", "FieldOfViewShape", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFieldOfViewMacro success after verifying FieldOfViewShape --> "+("success" if partial_success else "failure"))

				if "FieldOfViewShape" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FieldOfViewShape"], 
						StringValueTable_FieldOfViewShape, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFieldOfViewMacro success after verifying string enumerated values FieldOfViewShape --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"XRayFieldOfViewMacro", "FieldOfViewDimensionsInFloat", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFieldOfViewMacro success after verifying FieldOfViewDimensionsInFloat --> "+("success" if partial_success else "failure"))

				if "FieldOfViewDimensionsInFloat" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["FieldOfViewDimensionsInFloat"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"XRayFieldOfViewMacro", "FieldOfViewOrigin", 
						verbose, log, ElementDictionary, 
						Condition_XRayReceptorTypeIsDigitalDetector, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFieldOfViewMacro success after verifying FieldOfViewOrigin --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayFieldOfViewMacro", "FieldOfViewRotation", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFieldOfViewMacro success after verifying FieldOfViewRotation --> "+("success" if partial_success else "failure"))

				if "FieldOfViewRotation" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FieldOfViewRotation"], 
						StringValueTable_DXFieldOfViewRotation, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFieldOfViewMacro success after verifying string enumerated values FieldOfViewRotation --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayFieldOfViewMacro", "FieldOfViewHorizontalFlip", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFieldOfViewMacro success after verifying FieldOfViewHorizontalFlip --> "+("success" if partial_success else "failure"))

				if "FieldOfViewHorizontalFlip" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FieldOfViewHorizontalFlip"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFieldOfViewMacro success after verifying string enumerated values FieldOfViewHorizontalFlip --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"XRayFieldOfViewMacro", "FieldOfViewDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFieldOfViewMacro success after verifying FieldOfViewDescription --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayExposureControlSensingRegionsMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayExposureControlSensingRegionsMacro")

	partial_success = verifyType1(ds, 
			"XRayExposureControlSensingRegionsMacro", 
			"ExposureControlSensingRegionsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayExposureControlSensingRegionsMacro success after verifying ExposureControlSensingRegionsSequence" + ("success" if partial_success else "failure")) 
	if "ExposureControlSensingRegionsSequence" in ds:
		ExposureControlSensingRegionsSequence_data = ds.ExposureControlSensingRegionsSequence
		if type(ExposureControlSensingRegionsSequence_data) == Sequence:
			for i1 in range(0, len(ExposureControlSensingRegionsSequence_data)):
				if verbose:
					log.append( " ExposureControlSensingRegionsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ExposureControlSensingRegionsSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"XRayExposureControlSensingRegionsMacro", "ExposureControlSensingRegionShape", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayExposureControlSensingRegionsMacro success after verifying ExposureControlSensingRegionShape --> "+("success" if partial_success else "failure"))

				if "ExposureControlSensingRegionShape" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["ExposureControlSensingRegionShape"], 
						StringValueTable_ExposureControlSensingRegionShape, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayExposureControlSensingRegionsMacro success after verifying string enumerated values ExposureControlSensingRegionShape --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayExposureControlSensingRegionsMacro", "ExposureControlSensingRegionLeftVerticalEdge", 
						verbose, log, ElementDictionary, 
						Condition_ExposureControlSensingRegionShapeIsRectangular, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayExposureControlSensingRegionsMacro success after verifying ExposureControlSensingRegionLeftVerticalEdge --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayExposureControlSensingRegionsMacro", "ExposureControlSensingRegionRightVerticalEdge", 
						verbose, log, ElementDictionary, 
						Condition_ExposureControlSensingRegionShapeIsRectangular, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayExposureControlSensingRegionsMacro success after verifying ExposureControlSensingRegionRightVerticalEdge --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayExposureControlSensingRegionsMacro", "ExposureControlSensingRegionUpperHorizontalEdge", 
						verbose, log, ElementDictionary, 
						Condition_ExposureControlSensingRegionShapeIsRectangular, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayExposureControlSensingRegionsMacro success after verifying ExposureControlSensingRegionUpperHorizontalEdge --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayExposureControlSensingRegionsMacro", "ExposureControlSensingRegionLowerHorizontalEdge", 
						verbose, log, ElementDictionary, 
						Condition_ExposureControlSensingRegionShapeIsRectangular, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayExposureControlSensingRegionsMacro success after verifying ExposureControlSensingRegionLowerHorizontalEdge --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayExposureControlSensingRegionsMacro", "CenterOfCircularExposureControlSensingRegion", 
						verbose, log, ElementDictionary, 
						Condition_ExposureControlSensingRegionShapeIsCircular, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayExposureControlSensingRegionsMacro success after verifying CenterOfCircularExposureControlSensingRegion --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayExposureControlSensingRegionsMacro", "RadiusOfCircularExposureControlSensingRegion", 
						verbose, log, ElementDictionary, 
						Condition_ExposureControlSensingRegionShapeIsCircular, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayExposureControlSensingRegionsMacro success after verifying RadiusOfCircularExposureControlSensingRegion --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayExposureControlSensingRegionsMacro", "VerticesOfThePolygonalExposureControlSensingRegion", 
						verbose, log, ElementDictionary, 
						Condition_ExposureControlSensingRegionShapeIsPolygonal, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayExposureControlSensingRegionsMacro success after verifying VerticesOfThePolygonalExposureControlSensingRegion --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayFramePixelDataPropertiesMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayFramePixelDataPropertiesMacro")

	partial_success = verifyType1(ds, 
			"XRayFramePixelDataPropertiesMacro", 
			"FramePixelDataPropertiesSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayFramePixelDataPropertiesMacro success after verifying FramePixelDataPropertiesSequence" + ("success" if partial_success else "failure")) 
	if "FramePixelDataPropertiesSequence" in ds:
		FramePixelDataPropertiesSequence_data = ds.FramePixelDataPropertiesSequence
		if type(FramePixelDataPropertiesSequence_data) == Sequence:
			for i1 in range(0, len(FramePixelDataPropertiesSequence_data)):
				if verbose:
					log.append( " FramePixelDataPropertiesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FramePixelDataPropertiesSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"XRayFramePixelDataPropertiesMacro", "FrameType", 
						verbose, log, ElementDictionary, 
									4, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_EnhancedXAXRFImageType1, 
						verbose, log, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_EnhancedXAXRFImageType2, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FrameType"], 
						StringValueTable_EnhancedXAXRFImageType3, 
						verbose, log, 2)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_EnhancedXAXRFImageType4, 
						verbose, log, 3)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayFramePixelDataPropertiesMacro", "PixelIntensityRelationship", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying PixelIntensityRelationship --> "+("success" if partial_success else "failure"))

				if "PixelIntensityRelationship" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["PixelIntensityRelationship"], 
						StringValueTable_XAXRFPixelIntensityRelationship, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying string defined terms PixelIntensityRelationship --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayFramePixelDataPropertiesMacro", "PixelIntensityRelationshipSign", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying PixelIntensityRelationshipSign --> "+("success" if partial_success else "failure"))

				if "PixelIntensityRelationshipSign" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["PixelIntensityRelationshipSign"], 
						BinaryValueDescription_PixelIntensityRelationshipSign, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying binary enumerated values PixelIntensityRelationshipSign --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayFramePixelDataPropertiesMacro", "ImagerPixelSpacing", 
						verbose, log, ElementDictionary, 
						Condition_ImageTypeValue1IsOriginal, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying ImagerPixelSpacing --> "+("success" if partial_success else "failure"))

				if Condition_ImageTypeValue1IsOriginal(ds1, parent_ds1, root_ds):
					if "ImagerPixelSpacing" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["ImagerPixelSpacing"], 
							verbose, log, -1, False)

				partial_success =  		verifyType1(ds1, 
						"XRayFramePixelDataPropertiesMacro", "GeometricalProperties", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying GeometricalProperties --> "+("success" if partial_success else "failure"))

				if "GeometricalProperties" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["GeometricalProperties"], 
						StringValueTable_XAXRFGeometricalProperties, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying string enumerated values GeometricalProperties --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2C(ds1, 
						"XRayFramePixelDataPropertiesMacro", "GeometricMaximumDistortion", 
						verbose, log, ElementDictionary, 
						Condition_GeometricalPropertiesIsNonUniform, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying GeometricMaximumDistortion --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayFramePixelDataPropertiesMacro", "ImageProcessingApplied", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying ImageProcessingApplied --> "+("success" if partial_success else "failure"))

				if "ImageProcessingApplied" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["ImageProcessingApplied"], 
						StringValueTable_XAXRFImageProcessingApplied, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFramePixelDataPropertiesMacro success after verifying string defined terms ImageProcessingApplied --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayFrameDetectorParametersMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayFrameDetectorParametersMacro")

	partial_success = verifyType1(ds, 
			"XRayFrameDetectorParametersMacro", 
			"FrameDetectorParametersSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayFrameDetectorParametersMacro success after verifying FrameDetectorParametersSequence" + ("success" if partial_success else "failure")) 
	if "FrameDetectorParametersSequence" in ds:
		FrameDetectorParametersSequence_data = ds.FrameDetectorParametersSequence
		if type(FrameDetectorParametersSequence_data) == Sequence:
			for i1 in range(0, len(FrameDetectorParametersSequence_data)):
				if verbose:
					log.append( " FrameDetectorParametersSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FrameDetectorParametersSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"XRayFrameDetectorParametersMacro", "DetectorActiveTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFrameDetectorParametersMacro success after verifying DetectorActiveTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"XRayFrameDetectorParametersMacro", "DetectorActivationOffsetFromExposure", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFrameDetectorParametersMacro success after verifying DetectorActivationOffsetFromExposure --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayCalibrationDeviceUsageMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayCalibrationDeviceUsageMacro")

	partial_success = verifyType1(ds, 
			"XRayCalibrationDeviceUsageMacro", 
			"CalibrationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayCalibrationDeviceUsageMacro success after verifying CalibrationSequence" + ("success" if partial_success else "failure")) 
	if "CalibrationSequence" in ds:
		CalibrationSequence_data = ds.CalibrationSequence
		if type(CalibrationSequence_data) == Sequence:
			for i1 in range(0, len(CalibrationSequence_data)):
				if verbose:
					log.append( " CalibrationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CalibrationSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"XRayCalibrationDeviceUsageMacro", "CalibrationImage", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayCalibrationDeviceUsageMacro success after verifying CalibrationImage --> "+("success" if partial_success else "failure"))

				if "CalibrationImage" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CalibrationImage"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayCalibrationDeviceUsageMacro success after verifying string enumerated values CalibrationImage --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayObjectThicknessMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayObjectThicknessMacro")

	partial_success = verifyType1(ds, 
			"XRayObjectThicknessMacro", 
			"ObjectThicknessSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayObjectThicknessMacro success after verifying ObjectThicknessSequence" + ("success" if partial_success else "failure")) 
	if "ObjectThicknessSequence" in ds:
		ObjectThicknessSequence_data = ds.ObjectThicknessSequence
		if type(ObjectThicknessSequence_data) == Sequence:
			for i1 in range(0, len(ObjectThicknessSequence_data)):
				if verbose:
					log.append( " ObjectThicknessSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ObjectThicknessSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"XRayObjectThicknessMacro", "CalculatedAnatomyThickness", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayObjectThicknessMacro success after verifying CalculatedAnatomyThickness --> "+("success" if partial_success else "failure"))

				if "CalculatedAnatomyThickness" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["CalculatedAnatomyThickness"], 
						verbose, log, -1, True)

	return global_success

def Macro_XRayFrameAcquisitionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayFrameAcquisitionMacro")

	partial_success = verifyType1(ds, 
			"XRayFrameAcquisitionMacro", 
			"FrameAcquisitionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayFrameAcquisitionMacro success after verifying FrameAcquisitionSequence" + ("success" if partial_success else "failure")) 
	if "FrameAcquisitionSequence" in ds:
		FrameAcquisitionSequence_data = ds.FrameAcquisitionSequence
		if type(FrameAcquisitionSequence_data) == Sequence:
			for i1 in range(0, len(FrameAcquisitionSequence_data)):
				if verbose:
					log.append( " FrameAcquisitionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FrameAcquisitionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"XRayFrameAcquisitionMacro", "KVP", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFrameAcquisitionMacro success after verifying KVP --> "+("success" if partial_success else "failure"))

				if "KVP" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["KVP"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"XRayFrameAcquisitionMacro", "XRayTubeCurrentInmA", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayFrameAcquisitionMacro success after verifying XRayTubeCurrentInmA --> "+("success" if partial_success else "failure"))

				if "XRayTubeCurrentInmA" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["XRayTubeCurrentInmA"], 
						verbose, log, -1, True)

	return global_success

def Macro_XRayProjectionPixelCalibrationMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayProjectionPixelCalibrationMacro")

	partial_success = verifyType1(ds, 
			"XRayProjectionPixelCalibrationMacro", 
			"ProjectionPixelCalibrationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayProjectionPixelCalibrationMacro success after verifying ProjectionPixelCalibrationSequence" + ("success" if partial_success else "failure")) 
	if "ProjectionPixelCalibrationSequence" in ds:
		ProjectionPixelCalibrationSequence_data = ds.ProjectionPixelCalibrationSequence
		if type(ProjectionPixelCalibrationSequence_data) == Sequence:
			for i1 in range(0, len(ProjectionPixelCalibrationSequence_data)):
				if verbose:
					log.append( " ProjectionPixelCalibrationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ProjectionPixelCalibrationSequence_data[i1]
				partial_success =  		verifyType2(ds1, 
						"XRayProjectionPixelCalibrationMacro", "DistanceObjectToTableTop", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayProjectionPixelCalibrationMacro success after verifying DistanceObjectToTableTop --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayProjectionPixelCalibrationMacro", "ObjectPixelSpacingInCenterOfBeam", 
						verbose, log, ElementDictionary, 
						Condition_DistanceObjectToTableTopNotEmpty, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayProjectionPixelCalibrationMacro success after verifying ObjectPixelSpacingInCenterOfBeam --> "+("success" if partial_success else "failure"))

				if Condition_DistanceObjectToTableTopNotEmpty(ds1, parent_ds1, root_ds):
					if "ObjectPixelSpacingInCenterOfBeam" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["ObjectPixelSpacingInCenterOfBeam"], 
							verbose, log, -1, False)

				partial_success =  		verifyType1C(ds1, 
						"XRayProjectionPixelCalibrationMacro", "TableHeight", 
						verbose, log, ElementDictionary, 
						Condition_ImageTypeValue1Original, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayProjectionPixelCalibrationMacro success after verifying TableHeight --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayProjectionPixelCalibrationMacro", "BeamAngle", 
						verbose, log, ElementDictionary, 
						Condition_ImageTypeValue1Original, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayProjectionPixelCalibrationMacro success after verifying BeamAngle --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayPositionerMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayPositionerMacro")

	partial_success = verifyType1(ds, 
			"XRayPositionerMacro", 
			"PositionerPositionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayPositionerMacro success after verifying PositionerPositionSequence" + ("success" if partial_success else "failure")) 
	if "PositionerPositionSequence" in ds:
		PositionerPositionSequence_data = ds.PositionerPositionSequence
		if type(PositionerPositionSequence_data) == Sequence:
			for i1 in range(0, len(PositionerPositionSequence_data)):
				if verbose:
					log.append( " PositionerPositionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PositionerPositionSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"XRayPositionerMacro", "PositionerPrimaryAngle", 
						verbose, log, ElementDictionary, 
						Condition_PositionerIsCArm, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayPositionerMacro success after verifying PositionerPrimaryAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayPositionerMacro", "PositionerSecondaryAngle", 
						verbose, log, ElementDictionary, 
						Condition_PositionerIsCArm, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayPositionerMacro success after verifying PositionerSecondaryAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayPositionerMacro", "ColumnAngulationPatient", 
						verbose, log, ElementDictionary, 
						Condition_PositionerIsColumn, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayPositionerMacro success after verifying ColumnAngulationPatient --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayTablePositionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayTablePositionMacro")

	partial_success = verifyType1(ds, 
			"XRayTablePositionMacro", 
			"TablePositionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayTablePositionMacro success after verifying TablePositionSequence" + ("success" if partial_success else "failure")) 
	if "TablePositionSequence" in ds:
		TablePositionSequence_data = ds.TablePositionSequence
		if type(TablePositionSequence_data) == Sequence:
			for i1 in range(0, len(TablePositionSequence_data)):
				if verbose:
					log.append( " TablePositionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TablePositionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"XRayTablePositionMacro", "TableTopVerticalPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayTablePositionMacro success after verifying TableTopVerticalPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayTablePositionMacro", "TableTopLongitudinalPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayTablePositionMacro success after verifying TableTopLongitudinalPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayTablePositionMacro", "TableTopLateralPosition", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayTablePositionMacro success after verifying TableTopLateralPosition --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayTablePositionMacro", "TableHorizontalRotationAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayTablePositionMacro success after verifying TableHorizontalRotationAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayTablePositionMacro", "TableHeadTiltAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayTablePositionMacro success after verifying TableHeadTiltAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayTablePositionMacro", "TableCradleTiltAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayTablePositionMacro success after verifying TableCradleTiltAngle --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayCollimatorMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayCollimatorMacro")

	partial_success = verifyType1(ds, 
			"XRayCollimatorMacro", 
			"CollimatorShapeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayCollimatorMacro success after verifying CollimatorShapeSequence" + ("success" if partial_success else "failure")) 
	if "CollimatorShapeSequence" in ds:
		CollimatorShapeSequence_data = ds.CollimatorShapeSequence
		if type(CollimatorShapeSequence_data) == Sequence:
			for i1 in range(0, len(CollimatorShapeSequence_data)):
				if verbose:
					log.append( " CollimatorShapeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = CollimatorShapeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"XRayCollimatorMacro", "CollimatorShape", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayCollimatorMacro success after verifying CollimatorShape --> "+("success" if partial_success else "failure"))

				if "CollimatorShape" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CollimatorShape"], 
						StringValueTable_CollimatorShape, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayCollimatorMacro success after verifying string enumerated values CollimatorShape --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayCollimatorMacro", "CollimatorLeftVerticalEdge", 
						verbose, log, ElementDictionary, 
						Condition_CollimatorShapeIsRectangular, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayCollimatorMacro success after verifying CollimatorLeftVerticalEdge --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayCollimatorMacro", "CollimatorRightVerticalEdge", 
						verbose, log, ElementDictionary, 
						Condition_CollimatorShapeIsRectangular, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayCollimatorMacro success after verifying CollimatorRightVerticalEdge --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayCollimatorMacro", "CollimatorUpperHorizontalEdge", 
						verbose, log, ElementDictionary, 
						Condition_CollimatorShapeIsRectangular, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayCollimatorMacro success after verifying CollimatorUpperHorizontalEdge --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayCollimatorMacro", "CollimatorLowerHorizontalEdge", 
						verbose, log, ElementDictionary, 
						Condition_CollimatorShapeIsRectangular, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayCollimatorMacro success after verifying CollimatorLowerHorizontalEdge --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRayCollimatorMacro", "CenterOfCircularCollimator", 
						verbose, log, ElementDictionary, 
						Condition_CollimatorShapeIsCircular, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayCollimatorMacro success after verifying CenterOfCircularCollimator --> "+("success" if partial_success else "failure"))

				if Condition_CollimatorShapeIsCircular(ds1, parent_ds1, root_ds):
					if "CenterOfCircularCollimator" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["CenterOfCircularCollimator"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"XRayCollimatorMacro", "RadiusOfCircularCollimator", 
						verbose, log, ElementDictionary, 
						Condition_CollimatorShapeIsCircular, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayCollimatorMacro success after verifying RadiusOfCircularCollimator --> "+("success" if partial_success else "failure"))

				if Condition_CollimatorShapeIsCircular(ds1, parent_ds1, root_ds):
					if "RadiusOfCircularCollimator" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyNotZero(ds1["RadiusOfCircularCollimator"], 
							verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"XRayCollimatorMacro", "VerticesOfThePolygonalCollimator", 
						verbose, log, ElementDictionary, 
						Condition_CollimatorShapeIsPolygonal, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayCollimatorMacro success after verifying VerticesOfThePolygonalCollimator --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayIsocenterReferenceSystemMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayIsocenterReferenceSystemMacro")

	partial_success = verifyType1(ds, 
			"XRayIsocenterReferenceSystemMacro", 
			"IsocenterReferenceSystemSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayIsocenterReferenceSystemMacro success after verifying IsocenterReferenceSystemSequence" + ("success" if partial_success else "failure")) 
	if "IsocenterReferenceSystemSequence" in ds:
		IsocenterReferenceSystemSequence_data = ds.IsocenterReferenceSystemSequence
		if type(IsocenterReferenceSystemSequence_data) == Sequence:
			for i1 in range(0, len(IsocenterReferenceSystemSequence_data)):
				if verbose:
					log.append( " IsocenterReferenceSystemSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IsocenterReferenceSystemSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"XRayIsocenterReferenceSystemMacro", "PositionerIsocenterPrimaryAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayIsocenterReferenceSystemMacro success after verifying PositionerIsocenterPrimaryAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayIsocenterReferenceSystemMacro", "PositionerIsocenterSecondaryAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayIsocenterReferenceSystemMacro success after verifying PositionerIsocenterSecondaryAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayIsocenterReferenceSystemMacro", "PositionerIsocenterDetectorRotationAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayIsocenterReferenceSystemMacro success after verifying PositionerIsocenterDetectorRotationAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayIsocenterReferenceSystemMacro", "TableXPositionToIsocenter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayIsocenterReferenceSystemMacro success after verifying TableXPositionToIsocenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayIsocenterReferenceSystemMacro", "TableYPositionToIsocenter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayIsocenterReferenceSystemMacro success after verifying TableYPositionToIsocenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayIsocenterReferenceSystemMacro", "TableZPositionToIsocenter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayIsocenterReferenceSystemMacro success after verifying TableZPositionToIsocenter --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayIsocenterReferenceSystemMacro", "TableHorizontalRotationAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayIsocenterReferenceSystemMacro success after verifying TableHorizontalRotationAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayIsocenterReferenceSystemMacro", "TableHeadTiltAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayIsocenterReferenceSystemMacro success after verifying TableHeadTiltAngle --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRayIsocenterReferenceSystemMacro", "TableCradleTiltAngle", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayIsocenterReferenceSystemMacro success after verifying TableCradleTiltAngle --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRayGeometryMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRayGeometryMacro")

	partial_success = verifyType1(ds, 
			"XRayGeometryMacro", 
			"XRayGeometrySequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRayGeometryMacro success after verifying XRayGeometrySequence" + ("success" if partial_success else "failure")) 
	if "XRayGeometrySequence" in ds:
		XRayGeometrySequence_data = ds.XRayGeometrySequence
		if type(XRayGeometrySequence_data) == Sequence:
			for i1 in range(0, len(XRayGeometrySequence_data)):
				if verbose:
					log.append( " XRayGeometrySequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = XRayGeometrySequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"XRayGeometryMacro", "DistanceSourceToIsocenter", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayGeometryMacro success after verifying DistanceSourceToIsocenter --> "+("success" if partial_success else "failure"))

				if "DistanceSourceToIsocenter" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["DistanceSourceToIsocenter"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1(ds1, 
						"XRayGeometryMacro", "DistanceSourceToDetector", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRayGeometryMacro success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

				if "DistanceSourceToDetector" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["DistanceSourceToDetector"], 
						verbose, log, -1, True)

	return global_success

def Module_XAXRFMultiFramePresentation_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XAXRFMultiFramePresentation")

	partial_success =  		verifyType3(ds, 
			"XAXRFMultiFramePresentation", "PreferredPlaybackSequencing", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFMultiFramePresentation success after verifying PreferredPlaybackSequencing --> "+("success" if partial_success else "failure"))

	if "PreferredPlaybackSequencing" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PreferredPlaybackSequencing"], 
			BinaryValueDescription_PreferredPlaybackSequencing, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XAXRFMultiFramePresentation success after verifying binary enumerated values PreferredPlaybackSequencing --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"XAXRFMultiFramePresentation", 
			"FrameDisplaySequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XAXRFMultiFramePresentation success after verifying FrameDisplaySequence" + ("success" if partial_success else "failure")) 
	if "FrameDisplaySequence" in ds:
		FrameDisplaySequence_data = ds.FrameDisplaySequence
		if type(FrameDisplaySequence_data) == Sequence:
			for i1 in range(0, len(FrameDisplaySequence_data)):
				if verbose:
					log.append( " FrameDisplaySequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FrameDisplaySequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"XAXRFMultiFramePresentation", "StartTrim", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XAXRFMultiFramePresentation success after verifying StartTrim --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XAXRFMultiFramePresentation", "StopTrim", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XAXRFMultiFramePresentation success after verifying StopTrim --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XAXRFMultiFramePresentation", "SkipFrameRangeFlag", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XAXRFMultiFramePresentation success after verifying SkipFrameRangeFlag --> "+("success" if partial_success else "failure"))

				if "SkipFrameRangeFlag" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["SkipFrameRangeFlag"], 
						StringValueTable_SkipFrameRangeFlag, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XAXRFMultiFramePresentation success after verifying string defined terms SkipFrameRangeFlag --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XAXRFMultiFramePresentation", "RecommendedDisplayFrameRateInFloat", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XAXRFMultiFramePresentation success after verifying RecommendedDisplayFrameRateInFloat --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"XAXRFMultiFramePresentation", "RecommendedViewingMode", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XAXRFMultiFramePresentation success after verifying RecommendedViewingMode --> "+("success" if partial_success else "failure"))

				if "RecommendedViewingMode" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["RecommendedViewingMode"], 
						StringValueTable_RecommendedViewingMode, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XAXRFMultiFramePresentation success after verifying string defined terms RecommendedViewingMode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType2(ds1, 
						"XAXRFMultiFramePresentation", "DisplayFilterPercentage", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XAXRFMultiFramePresentation success after verifying DisplayFilterPercentage --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XAXRFMultiFramePresentation", "MaskVisibilityPercentage", 
						verbose, log, ElementDictionary, 
						Condition_RecommendedViewingModeIsSUB, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XAXRFMultiFramePresentation success after verifying MaskVisibilityPercentage --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiFrameFunctionalGroupsForEnhancedXAImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForEnhancedXAImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForEnhancedXAImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPixelIntensityRelationshipLUTMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelIntensityRelationshipLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying PixelIntensityRelationshipLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FramePixelShiftMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FramePixelShiftMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying FramePixelShiftMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPatientOrientationInFrameMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PatientOrientationInFrameMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying PatientOrientationInFrameMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameDisplayShutterMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameDisplayShutterMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying FrameDisplayShutterMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameCharacteristicsMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameCharacteristicsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayFrameCharacteristicsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayFieldOfViewMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFieldOfViewMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayFieldOfViewMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayExposureControlSensingRegionsMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayExposureControlSensingRegionsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayExposureControlSensingRegionsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FramePixelDataPropertiesSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFramePixelDataPropertiesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayFramePixelDataPropertiesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayFrameDetectorParametersMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameDetectorParametersMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayFrameDetectorParametersMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayCalibrationDeviceUsageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayCalibrationDeviceUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayCalibrationDeviceUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayObjectThicknessMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayObjectThicknessMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayObjectThicknessMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameAcquisitionMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameAcquisitionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayFrameAcquisitionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayProjectionPixelCalibrationMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayProjectionPixelCalibrationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayProjectionPixelCalibrationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayPositionerMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayPositionerMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayPositionerMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayTablePositionMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayTablePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayTablePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayCollimatorMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayCollimatorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayCollimatorMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayIsocenterReferenceSystemMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayIsocenterReferenceSystemMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayIsocenterReferenceSystemMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayGeometryMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayGeometryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayGeometryMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForEnhancedXAImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPixelIntensityRelationshipLUTMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelIntensityRelationshipLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying PixelIntensityRelationshipLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FramePixelShiftMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FramePixelShiftMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying FramePixelShiftMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPatientOrientationInFrameMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PatientOrientationInFrameMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying PatientOrientationInFrameMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameDisplayShutterMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameDisplayShutterMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying FrameDisplayShutterMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameCharacteristicsMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameCharacteristicsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayFrameCharacteristicsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayFieldOfViewMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFieldOfViewMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayFieldOfViewMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayExposureControlSensingRegionsMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayExposureControlSensingRegionsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayExposureControlSensingRegionsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FramePixelDataPropertiesSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFramePixelDataPropertiesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayFramePixelDataPropertiesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayFrameDetectorParametersMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameDetectorParametersMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayFrameDetectorParametersMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayCalibrationDeviceUsageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayCalibrationDeviceUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayCalibrationDeviceUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayObjectThicknessMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayObjectThicknessMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayObjectThicknessMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameAcquisitionMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameAcquisitionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayFrameAcquisitionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayProjectionPixelCalibrationMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayProjectionPixelCalibrationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayProjectionPixelCalibrationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayPositionerMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayPositionerMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayPositionerMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayTablePositionMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayTablePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayTablePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayCollimatorMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayCollimatorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayCollimatorMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayIsocenterReferenceSystemMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayIsocenterReferenceSystemMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayIsocenterReferenceSystemMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayGeometryMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayGeometryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXAImage success after verifying XRayGeometryMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameFunctionalGroupsForEnhancedXRFImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForEnhancedXRFImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForEnhancedXRFImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPixelIntensityRelationshipLUTMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelIntensityRelationshipLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying PixelIntensityRelationshipLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FramePixelShiftMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FramePixelShiftMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying FramePixelShiftMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPatientOrientationInFrameMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PatientOrientationInFrameMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying PatientOrientationInFrameMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameDisplayShutterMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameDisplayShutterMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying FrameDisplayShutterMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameCharacteristicsMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameCharacteristicsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayFrameCharacteristicsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayFieldOfViewMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFieldOfViewMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayFieldOfViewMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayExposureControlSensingRegionsMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayExposureControlSensingRegionsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayExposureControlSensingRegionsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FramePixelDataPropertiesSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFramePixelDataPropertiesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayFramePixelDataPropertiesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayFrameDetectorParametersMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameDetectorParametersMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayFrameDetectorParametersMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayCalibrationDeviceUsageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayCalibrationDeviceUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayCalibrationDeviceUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayObjectThicknessMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayObjectThicknessMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayObjectThicknessMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameAcquisitionMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameAcquisitionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayFrameAcquisitionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayPositionerMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayPositionerMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayPositionerMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayTablePositionMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayTablePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayTablePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayCollimatorMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayCollimatorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayCollimatorMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayGeometryMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayGeometryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayGeometryMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForEnhancedXRFImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPixelIntensityRelationshipLUTMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelIntensityRelationshipLUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying PixelIntensityRelationshipLUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FramePixelShiftMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FramePixelShiftMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying FramePixelShiftMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedPatientOrientationInFrameMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PatientOrientationInFrameMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying PatientOrientationInFrameMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameDisplayShutterMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameDisplayShutterMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying FrameDisplayShutterMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_IrradiationEventIdentificationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_IrradiationEventIdentificationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying IrradiationEventIdentificationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameCharacteristicsMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameCharacteristicsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayFrameCharacteristicsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayFieldOfViewMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFieldOfViewMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayFieldOfViewMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayExposureControlSensingRegionsMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayExposureControlSensingRegionsMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayExposureControlSensingRegionsMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FramePixelDataPropertiesSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFramePixelDataPropertiesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayFramePixelDataPropertiesMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayFrameDetectorParametersMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameDetectorParametersMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayFrameDetectorParametersMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayCalibrationDeviceUsageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayCalibrationDeviceUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayCalibrationDeviceUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayObjectThicknessMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayObjectThicknessMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayObjectThicknessMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRayFrameAcquisitionMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayFrameAcquisitionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayFrameAcquisitionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayPositionerMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayPositionerMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayPositionerMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayTablePositionMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayTablePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayTablePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayCollimatorMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayCollimatorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayCollimatorMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedXRayGeometryMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRayGeometryMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedXRFImage success after verifying XRayGeometryMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameFunctionalGroupsForXRay3DAngiographicImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForXRay3DAngiographicImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForXRay3DAngiographicImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRay3DFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRay3DFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying XRay3DFrameTypeMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForXRay3DAngiographicImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_CardiacSynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RespiratorySynchronizationMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRay3DFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRay3DFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DAngiographicImage success after verifying XRay3DFrameTypeMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_MultiFrameFunctionalGroupsForXRay3DCraniofacialImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForXRay3DCraniofacialImage")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForXRay3DCraniofacialImage", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRay3DFrameTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRay3DFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying XRay3DFrameTypeMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForXRay3DCraniofacialImage", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameAnatomySequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameAnatomyMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying FrameAnatomyMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelValueTransformationSequenceOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelValueTransformationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying PixelValueTransformationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_XRay3DFrameTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_XRay3DFrameTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForXRay3DCraniofacialImage success after verifying XRay3DFrameTypeMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage")

	partial_success =  		verifyType1(ds, 
			"CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage", "PixelPresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage success after verifying PixelPresentation --> "+("success" if partial_success else "failure"))

	if "PixelPresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PixelPresentation"], 
			StringValueTable_CommonCTMRPixelPresentationImageLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage success after verifying string enumerated values PixelPresentation --> "+("success" if partial_success else "failure"))


	if Condition_EnhancedMRColorImageInstance(ds, parent_ds, root_ds):
		if "PixelPresentation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PixelPresentation"], 
				StringValueTable_PixelPresentationTrueColor, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage success after verifying string enumerated values PixelPresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage", "VolumetricProperties", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage success after verifying VolumetricProperties --> "+("success" if partial_success else "failure"))

	if "VolumetricProperties" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VolumetricProperties"], 
			StringValueTable_CommonCTMRVolumetricPropertiesImageLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage success after verifying string enumerated values VolumetricProperties --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage", "VolumeBasedCalculationTechnique", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage success after verifying VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	if "VolumeBasedCalculationTechnique" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["VolumeBasedCalculationTechnique"], 
			StringValueTable_XRay3DImageVolumeBasedCalculationTechniqueImageLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage success after verifying string defined terms VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage")

	partial_success =  		verifyType1(ds, 
			"CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage", "PixelPresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage success after verifying PixelPresentation --> "+("success" if partial_success else "failure"))

	if "PixelPresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PixelPresentation"], 
			StringValueTable_CommonCTMRPixelPresentationFrameLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage success after verifying string enumerated values PixelPresentation --> "+("success" if partial_success else "failure"))


	if Condition_EnhancedMRColorImageInstance(ds, parent_ds, root_ds):
		if "PixelPresentation" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PixelPresentation"], 
				StringValueTable_PixelPresentationTrueColor, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage success after verifying string enumerated values PixelPresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage", "VolumetricProperties", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage success after verifying VolumetricProperties --> "+("success" if partial_success else "failure"))

	if "VolumetricProperties" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VolumetricProperties"], 
			StringValueTable_CommonCTMRVolumetricPropertiesFrameLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage success after verifying string enumerated values VolumetricProperties --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage", "VolumeBasedCalculationTechnique", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage success after verifying VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	if "VolumeBasedCalculationTechnique" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["VolumeBasedCalculationTechnique"], 
			StringValueTable_XRay3DImageVolumeBasedCalculationTechniqueFrameLevel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage success after verifying string defined terms VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	return global_success

def Module_XRay3DImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRay3DImage")

	partial_success =  		verifyType1(ds, 
			"XRay3DImage", "ImageType", 
			verbose, log, ElementDictionary, 
			4, 4)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageAndFrameType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if Condition_NotBreastTomosynthesisInstance(ds, parent_ds, root_ds):
		if "ImageType" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["ImageType"], 
				StringValueTable_CommonEnhancedImageAndFrameType3, 
				verbose, log, 2)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if Condition_NotBreastTomosynthesisInstance(ds, parent_ds, root_ds):
		if "ImageType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["ImageType"], 
				StringValueTable_XRay3DImageAndFrameType4, 
				verbose, log, 3)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " XRay3DImage success after verifying CommonCTMRImageDescriptionImageLevelMacroForXRay3DImage"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"XRay3DImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRay3DImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8To16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRay3DImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7To15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRay3DImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRay3DImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRay3DImage", "ContentQualification", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying ContentQualification --> "+("success" if partial_success else "failure"))

	if "ContentQualification" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ContentQualification"], 
			StringValueTable_ContentQualification, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying string enumerated values ContentQualification --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRay3DImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_NoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRay3DImage", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"XRay3DImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRay3DImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionRatio" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["LossyImageCompressionRatio"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"XRay3DImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["LossyImageCompressionMethod"], 
				StringValueTable_LossyImageCompressionMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying string defined terms LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))


	if Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" method inconsistent with transfer syntax - attribute <LossyImageCompressionMethod>"+\
				" = <{}>".format( tag_for_keyword("LossyImageCompressionMethod")))

	partial_success = verifyType1C(ds, 
			"XRay3DImage", 
			"ReferencedImageEvidenceSequence", 
			verbose, log, ElementDictionary, 
			Condition_ReferencedImageSequenceIsPresentInFunctionalGroups, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRay3DImage success after verifying ReferencedImageEvidenceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageEvidenceSequence" in ds:
		ReferencedImageEvidenceSequence_data = ds.ReferencedImageEvidenceSequence
		if type(ReferencedImageEvidenceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageEvidenceSequence_data)):
				if verbose:
					log.append( " ReferencedImageEvidenceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageEvidenceSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DImage success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"XRay3DImage", "ImageComments", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying ImageComments --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"XRay3DImage", "QualityControlImage", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying QualityControlImage --> "+("success" if partial_success else "failure"))

	if "QualityControlImage" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["QualityControlImage"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying string enumerated values QualityControlImage --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"XRay3DImage", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRay3DImage success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DImage success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"XRay3DImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if "PresentationLUTShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
			StringValueTable_IdentityPresentationLUTShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"XRay3DImage", 
			"SourceIrradiationEventSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRay3DImage success after verifying SourceIrradiationEventSequence" + ("success" if partial_success else "failure")) 
	if "SourceIrradiationEventSequence" in ds:
		SourceIrradiationEventSequence_data = ds.SourceIrradiationEventSequence
		if type(SourceIrradiationEventSequence_data) == Sequence:
			for i1 in range(0, len(SourceIrradiationEventSequence_data)):
				if verbose:
					log.append( " SourceIrradiationEventSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceIrradiationEventSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"XRay3DImage", "IrradiationEventUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DImage success after verifying IrradiationEventUID --> "+("success" if partial_success else "failure"))

	return global_success

def Module_XRay3DAngiographicImageContributingSources_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRay3DAngiographicImageContributingSources")

	partial_success = verifyType1(ds, 
			"XRay3DAngiographicImageContributingSources", 
			"ContributingSourcesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRay3DAngiographicImageContributingSources success after verifying ContributingSourcesSequence" + ("success" if partial_success else "failure")) 
	if "ContributingSourcesSequence" in ds:
		ContributingSourcesSequence_data = ds.ContributingSourcesSequence
		if type(ContributingSourcesSequence_data) == Sequence:
			for i1 in range(0, len(ContributingSourcesSequence_data)):
				if verbose:
					log.append( " ContributingSourcesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContributingSourcesSequence_data[i1]
				partial_success =  Macro_GeneralContributingSourcesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DAngiographicImageContributingSources success after verifying GeneralContributingSourcesMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_ContributingImageSourcesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DAngiographicImageContributingSources success after verifying ContributingImageSourcesMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicImageContributingSources", "AcquisitionDeviceProcessingDescription", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicImageContributingSources success after verifying AcquisitionDeviceProcessingDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicImageContributingSources", "AcquisitionDeviceProcessingCode", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicImageContributingSources success after verifying AcquisitionDeviceProcessingCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicImageContributingSources", "PlaneIdentification", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicImageContributingSources success after verifying PlaneIdentification --> "+("success" if partial_success else "failure"))

				if "PlaneIdentification" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["PlaneIdentification"], 
						StringValueTable_PlaneIdentification, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicImageContributingSources success after verifying string enumerated values PlaneIdentification --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicImageContributingSources", "ImagerPixelSpacing", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicImageContributingSources success after verifying ImagerPixelSpacing --> "+("success" if partial_success else "failure"))

				if "ImagerPixelSpacing" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ImagerPixelSpacing"], 
						verbose, log, -1, False)

	return global_success

def Module_XRay3DCraniofacialImageContributingSources_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRay3DCraniofacialImageContributingSources")

	partial_success = verifyType1(ds, 
			"XRay3DCraniofacialImageContributingSources", 
			"ContributingSourcesSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRay3DCraniofacialImageContributingSources success after verifying ContributingSourcesSequence" + ("success" if partial_success else "failure")) 
	if "ContributingSourcesSequence" in ds:
		ContributingSourcesSequence_data = ds.ContributingSourcesSequence
		if type(ContributingSourcesSequence_data) == Sequence:
			for i1 in range(0, len(ContributingSourcesSequence_data)):
				if verbose:
					log.append( " ContributingSourcesSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContributingSourcesSequence_data[i1]
				partial_success =  Macro_GeneralContributingSourcesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DCraniofacialImageContributingSources success after verifying GeneralContributingSourcesMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_ContributingImageSourcesMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DCraniofacialImageContributingSources success after verifying ContributingImageSourcesMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"XRay3DCraniofacialImageContributingSources", "AcquisitionDeviceProcessingDescription", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DCraniofacialImageContributingSources success after verifying AcquisitionDeviceProcessingDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRay3DCraniofacialImageContributingSources", "AcquisitionDeviceProcessingCode", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DCraniofacialImageContributingSources success after verifying AcquisitionDeviceProcessingCode --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRay3DCraniofacialImageContributingSources", "ImagerPixelSpacing", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DCraniofacialImageContributingSources success after verifying ImagerPixelSpacing --> "+("success" if partial_success else "failure"))

				if "ImagerPixelSpacing" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["ImagerPixelSpacing"], 
						verbose, log, -1, False)

	return global_success

def Macro_XRay3DGeneralSharedAcquisitionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRay3DGeneralSharedAcquisitionMacro")

	partial_success = verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", 
			"SourceImageSequence", 
			verbose, log, ElementDictionary, 
			Condition_SourceImageSequenceIsPresent, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRay3DGeneralSharedAcquisitionMacro success after verifying SourceImageSequence" + ("success" if partial_success else "failure")) 
	if "SourceImageSequence" in ds:
		SourceImageSequence_data = ds.SourceImageSequence
		if type(SourceImageSequence_data) == Sequence:
			for i1 in range(0, len(SourceImageSequence_data)):
				if verbose:
					log.append( " SourceImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceImageSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", "FieldOfViewDimensionsInFloat", 
			verbose, log, ElementDictionary, 
			Condition_ModalityIsMG, 
			True, 
			parent_ds, root_ds, 
			1, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying FieldOfViewDimensionsInFloat --> "+("success" if partial_success else "failure"))

	if Condition_ModalityIsMG(ds, parent_ds, root_ds):
		if "FieldOfViewDimensionsInFloat" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["FieldOfViewDimensionsInFloat"], 
				verbose, log, -1, True)


	if not Condition_FieldOfViewDimensionsInFloatPresentAndFieldOfViewShapeIsRectangle(ds, parent_ds, root_ds):
		if "FieldOfViewDimensionsInFloat" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyVM(ds["name"], 
				"XRay3DGeneralSharedAcquisitionMacro", "FieldOfViewDimensionsInFloat", log, ElementDictionary, 2, 2, "FieldOfViewDimensionsInFloatPresentAndFieldOfViewShapeIsRectangle")


	if not Condition_FieldOfViewDimensionsInFloatPresentAndFieldOfViewShapeIsRound(ds, parent_ds, root_ds):
		if "FieldOfViewDimensionsInFloat" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyVM(ds["name"], 
				"XRay3DGeneralSharedAcquisitionMacro", "FieldOfViewDimensionsInFloat", log, ElementDictionary, 1, 1, "FieldOfViewDimensionsInFloatPresentAndFieldOfViewShapeIsRound")


	if not Condition_FieldOfViewDimensionsInFloatPresentAndFieldOfViewShapeIsHexagon(ds, parent_ds, root_ds):
		if "FieldOfViewDimensionsInFloat" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyVM(ds["name"], 
				"XRay3DGeneralSharedAcquisitionMacro", "FieldOfViewDimensionsInFloat", log, ElementDictionary, 1, 1, "FieldOfViewDimensionsInFloatPresentAndFieldOfViewShapeIsHexagon")

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", "FieldOfViewOrigin", 
			verbose, log, ElementDictionary, 
			Condition_XRayReceptorTypeIsDigitalDetector, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying FieldOfViewOrigin --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", "FieldOfViewRotation", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying FieldOfViewRotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", "FieldOfViewHorizontalFlip", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying FieldOfViewHorizontalFlip --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", "Grid", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying Grid --> "+("success" if partial_success else "failure"))

	if "Grid" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["Grid"], 
			StringValueTable_XRayGrid, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying string defined terms Grid --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_XRayGridDescriptionMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying XRayGridDescriptionMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", "KVP", 
			verbose, log, ElementDictionary, 
			Condition_ModalityIsMG, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying KVP --> "+("success" if partial_success else "failure"))

	if Condition_ModalityIsMG(ds, parent_ds, root_ds):
		if "KVP" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["KVP"], 
				verbose, log, -1, True)

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", "XRayTubeCurrentInmA", 
			verbose, log, ElementDictionary, 
			Condition_ModalityIsMG, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying XRayTubeCurrentInmA --> "+("success" if partial_success else "failure"))

	if Condition_ModalityIsMG(ds, parent_ds, root_ds):
		if "XRayTubeCurrentInmA" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["XRayTubeCurrentInmA"], 
				verbose, log, -1, True)

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", "ExposureTimeInms", 
			verbose, log, ElementDictionary, 
			Condition_ModalityIsMG, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying ExposureTimeInms --> "+("success" if partial_success else "failure"))

	if Condition_ModalityIsMG(ds, parent_ds, root_ds):
		if "ExposureTimeInms" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["ExposureTimeInms"], 
				verbose, log, -1, True)

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", "ExposureInmAs", 
			verbose, log, ElementDictionary, 
			Condition_ModalityIsMG, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying ExposureInmAs --> "+("success" if partial_success else "failure"))

	if Condition_ModalityIsMG(ds, parent_ds, root_ds):
		if "ExposureInmAs" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["ExposureInmAs"], 
				verbose, log, -1, True)

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", "ContrastBolusAgent", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying ContrastBolusAgent --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", 
			"ContrastBolusAgentSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRay3DGeneralSharedAcquisitionMacro success after verifying ContrastBolusAgentSequence" + ("success" if partial_success else "failure")) 
	if "ContrastBolusAgentSequence" in ds:
		ContrastBolusAgentSequence_data = ds.ContrastBolusAgentSequence
		if type(ContrastBolusAgentSequence_data) == Sequence:
			for i1 in range(0, len(ContrastBolusAgentSequence_data)):
				if verbose:
					log.append( " ContrastBolusAgentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ContrastBolusAgentSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", "StartAcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying StartAcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralSharedAcquisitionMacro", "EndAcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralSharedAcquisitionMacro success after verifying EndAcquisitionDateTime --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRay3DGeneralPerProjectionAcquisitionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRay3DGeneralPerProjectionAcquisitionMacro")

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralPerProjectionAcquisitionMacro", "KVP", 
			verbose, log, ElementDictionary, 
			Condition_ModalityIsMG, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralPerProjectionAcquisitionMacro success after verifying KVP --> "+("success" if partial_success else "failure"))

	if Condition_ModalityIsMG(ds, parent_ds, root_ds):
		if "KVP" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["KVP"], 
				verbose, log, -1, True)

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralPerProjectionAcquisitionMacro", "XRayTubeCurrentInmA", 
			verbose, log, ElementDictionary, 
			Condition_ModalityIsMG, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralPerProjectionAcquisitionMacro success after verifying XRayTubeCurrentInmA --> "+("success" if partial_success else "failure"))

	if Condition_ModalityIsMG(ds, parent_ds, root_ds):
		if "XRayTubeCurrentInmA" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["XRayTubeCurrentInmA"], 
				verbose, log, -1, True)

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralPerProjectionAcquisitionMacro", "FrameAcquisitionDuration", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralPerProjectionAcquisitionMacro success after verifying FrameAcquisitionDuration --> "+("success" if partial_success else "failure"))

	if "FrameAcquisitionDuration" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyNotZero(ds["FrameAcquisitionDuration"], 
			verbose, log, -1, True)

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralPerProjectionAcquisitionMacro", "CollimatorShape", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralPerProjectionAcquisitionMacro success after verifying CollimatorShape --> "+("success" if partial_success else "failure"))

	if "CollimatorShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["CollimatorShape"], 
			StringValueTable_CollimatorShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralPerProjectionAcquisitionMacro success after verifying string enumerated values CollimatorShape --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_XRayCollimatorDimensionsMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " XRay3DGeneralPerProjectionAcquisitionMacro success after verifying XRayCollimatorDimensionsMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_XRay3DGeneralPositionerMovementMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRay3DGeneralPositionerMovementMacro")

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralPositionerMovementMacro", "PrimaryPositionerScanArc", 
			verbose, log, ElementDictionary, 
			Condition_ModalityIsMG, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralPositionerMovementMacro success after verifying PrimaryPositionerScanArc --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralPositionerMovementMacro", "PrimaryPositionerScanStartAngle", 
			verbose, log, ElementDictionary, 
			Condition_ModalityIsMG, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralPositionerMovementMacro success after verifying PrimaryPositionerScanStartAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralPositionerMovementMacro", "PrimaryPositionerIncrement", 
			verbose, log, ElementDictionary, 
			Condition_ModalityIsMG, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralPositionerMovementMacro success after verifying PrimaryPositionerIncrement --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralPositionerMovementMacro", "SecondaryPositionerScanArc", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralPositionerMovementMacro success after verifying SecondaryPositionerScanArc --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralPositionerMovementMacro", "SecondaryPositionerScanStartAngle", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralPositionerMovementMacro success after verifying SecondaryPositionerScanStartAngle --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"XRay3DGeneralPositionerMovementMacro", "SecondaryPositionerIncrement", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " XRay3DGeneralPositionerMovementMacro success after verifying SecondaryPositionerIncrement --> "+("success" if partial_success else "failure"))

	return global_success

def Module_XRay3DAngiographicAcquisition_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRay3DAngiographicAcquisition")

	partial_success = verifyType1(ds, 
			"XRay3DAngiographicAcquisition", 
			"XRay3DAcquisitionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRay3DAngiographicAcquisition success after verifying XRay3DAcquisitionSequence" + ("success" if partial_success else "failure")) 
	if "XRay3DAcquisitionSequence" in ds:
		XRay3DAcquisitionSequence_data = ds.XRay3DAcquisitionSequence
		if type(XRay3DAcquisitionSequence_data) == Sequence:
			for i1 in range(0, len(XRay3DAcquisitionSequence_data)):
				if verbose:
					log.append( " XRay3DAcquisitionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = XRay3DAcquisitionSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicAcquisition", "FieldOfViewShape", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying FieldOfViewShape --> "+("success" if partial_success else "failure"))

				if "FieldOfViewShape" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FieldOfViewShape"], 
						StringValueTable_FieldOfViewShape, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying string defined terms FieldOfViewShape --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicAcquisition", "XRayReceptorType", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying XRayReceptorType --> "+("success" if partial_success else "failure"))

				if "XRayReceptorType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["XRayReceptorType"], 
						StringValueTable_XRayReceptorTypeAngio, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying string enumerated values XRayReceptorType --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_XRay3DGeneralSharedAcquisitionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying XRay3DGeneralSharedAcquisitionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_DigitalXRayDetectorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying DigitalXRayDetectorMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicAcquisition", "PhysicalDetectorSize", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying PhysicalDetectorSize --> "+("success" if partial_success else "failure"))

				if "PhysicalDetectorSize" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["PhysicalDetectorSize"], 
						verbose, log, -1, False)

				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicAcquisition", "PositionOfIsocenterProjection", 
						verbose, log, ElementDictionary, 
						Condition_IsocenterReferenceSystemSequencePresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying PositionOfIsocenterProjection --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicAcquisition", "DistanceSourceToPatient", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying DistanceSourceToPatient --> "+("success" if partial_success else "failure"))

				if "DistanceSourceToPatient" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["DistanceSourceToPatient"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicAcquisition", "DistanceSourceToDetector", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying DistanceSourceToDetector --> "+("success" if partial_success else "failure"))

				if "DistanceSourceToDetector" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["DistanceSourceToDetector"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicAcquisition", "FocalSpots", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying FocalSpots --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicAcquisition", "FilterType", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying FilterType --> "+("success" if partial_success else "failure"))

				if "FilterType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FilterType"], 
						StringValueTable_DXFilterType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying string defined terms FilterType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicAcquisition", "FilterMaterial", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying FilterMaterial --> "+("success" if partial_success else "failure"))

				if "FilterMaterial" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FilterMaterial"], 
						StringValueTable_DXFilterMaterial, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying string defined terms FilterMaterial --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicAcquisition", "FilterThicknessMaximum", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying FilterThicknessMaximum --> "+("success" if partial_success else "failure"))

				if "FilterThicknessMaximum" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["FilterThicknessMaximum"], 
						verbose, log, -1, True)

				partial_success =  		verifyType1C(ds1, 
						"XRay3DAngiographicAcquisition", "FilterThicknessMinimum", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying FilterThicknessMinimum --> "+("success" if partial_success else "failure"))

				if "FilterThicknessMinimum" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["FilterThicknessMinimum"], 
						verbose, log, -1, True)

				partial_success =  Macro_XRay3DGeneralPositionerMovementMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DAngiographicAcquisition success after verifying XRay3DGeneralPositionerMovementMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"XRay3DAngiographicAcquisition", 
						"PerProjectionAcquisitionSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "XRay3DAngiographicAcquisition success after verifying PerProjectionAcquisitionSequence" + ("success" if partial_success else "failure")) 
				if "PerProjectionAcquisitionSequence" in ds1:
					PerProjectionAcquisitionSequence_data = ds1.PerProjectionAcquisitionSequence
					if type(PerProjectionAcquisitionSequence_data) == Sequence:
						for i2 in range(0, len(PerProjectionAcquisitionSequence_data)):
							if verbose:
								log.append( " PerProjectionAcquisitionSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PerProjectionAcquisitionSequence_data[i2]
							partial_success =  Macro_XRay3DGeneralPerProjectionAcquisitionMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " XRay3DAngiographicAcquisition success after verifying XRay3DGeneralPerProjectionAcquisitionMacro"+ ("success" if partial_success else "failure" ))
							partial_success =  		verifyType1C(ds2, 
									"XRay3DAngiographicAcquisition", "PositionerIsocenterPrimaryAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " XRay3DAngiographicAcquisition success after verifying PositionerIsocenterPrimaryAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"XRay3DAngiographicAcquisition", "PositionerIsocenterSecondaryAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " XRay3DAngiographicAcquisition success after verifying PositionerIsocenterSecondaryAngle --> "+("success" if partial_success else "failure"))

							partial_success =  		verifyType1C(ds2, 
									"XRay3DAngiographicAcquisition", "PositionerIsocenterDetectorRotationAngle", 
									verbose, log, ElementDictionary, 
									0, 
									False, 
									parent_ds2, root_ds, 
									0, 0)
							global_success = global_success and partial_success 
							if verbose:
								log.append( " XRay3DAngiographicAcquisition success after verifying PositionerIsocenterDetectorRotationAngle --> "+("success" if partial_success else "failure"))

	return global_success

def Module_XRay3DCraniofacialAcquisition_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRay3DCraniofacialAcquisition")

	partial_success = verifyType1(ds, 
			"XRay3DCraniofacialAcquisition", 
			"XRay3DAcquisitionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRay3DCraniofacialAcquisition success after verifying XRay3DAcquisitionSequence" + ("success" if partial_success else "failure")) 
	if "XRay3DAcquisitionSequence" in ds:
		XRay3DAcquisitionSequence_data = ds.XRay3DAcquisitionSequence
		if type(XRay3DAcquisitionSequence_data) == Sequence:
			for i1 in range(0, len(XRay3DAcquisitionSequence_data)):
				if verbose:
					log.append( " XRay3DAcquisitionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = XRay3DAcquisitionSequence_data[i1]
				partial_success =  		verifyType1C(ds1, 
						"XRay3DCraniofacialAcquisition", "FieldOfViewShape", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DCraniofacialAcquisition success after verifying FieldOfViewShape --> "+("success" if partial_success else "failure"))

				if "FieldOfViewShape" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["FieldOfViewShape"], 
						StringValueTable_FieldOfViewShape, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DCraniofacialAcquisition success after verifying string defined terms FieldOfViewShape --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"XRay3DCraniofacialAcquisition", "XRayReceptorType", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DCraniofacialAcquisition success after verifying XRayReceptorType --> "+("success" if partial_success else "failure"))

				if "XRayReceptorType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["XRayReceptorType"], 
						StringValueTable_XRayReceptorTypeCranio, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DCraniofacialAcquisition success after verifying string enumerated values XRayReceptorType --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_XRay3DGeneralSharedAcquisitionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DCraniofacialAcquisition success after verifying XRay3DGeneralSharedAcquisitionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_DigitalXRayDetectorMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DCraniofacialAcquisition success after verifying DigitalXRayDetectorMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType1C(ds1, 
						"XRay3DCraniofacialAcquisition", 
						"PerProjectionAcquisitionSequence", 
						verbose, log, ElementDictionary, 
						0, 
						False, 
						parent_ds1, root_ds1, 
						1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "XRay3DCraniofacialAcquisition success after verifying PerProjectionAcquisitionSequence" + ("success" if partial_success else "failure")) 
				if "PerProjectionAcquisitionSequence" in ds1:
					PerProjectionAcquisitionSequence_data = ds1.PerProjectionAcquisitionSequence
					if type(PerProjectionAcquisitionSequence_data) == Sequence:
						for i2 in range(0, len(PerProjectionAcquisitionSequence_data)):
							if verbose:
								log.append( " PerProjectionAcquisitionSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PerProjectionAcquisitionSequence_data[i2]
							partial_success =  Macro_XRay3DGeneralPerProjectionAcquisitionMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " XRay3DCraniofacialAcquisition success after verifying XRay3DGeneralPerProjectionAcquisitionMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_XRay3DReconstruction_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"XRay3DReconstruction")

	partial_success = verifyType1(ds, 
			"XRay3DReconstruction", 
			"XRay3DReconstructionSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRay3DReconstruction success after verifying XRay3DReconstructionSequence" + ("success" if partial_success else "failure")) 
	if "XRay3DReconstructionSequence" in ds:
		XRay3DReconstructionSequence_data = ds.XRay3DReconstructionSequence
		if type(XRay3DReconstructionSequence_data) == Sequence:
			for i1 in range(0, len(XRay3DReconstructionSequence_data)):
				if verbose:
					log.append( " XRay3DReconstructionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = XRay3DReconstructionSequence_data[i1]
				partial_success =  		verifyType3(ds1, 
						"XRay3DReconstruction", "ReconstructionDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DReconstruction success after verifying ReconstructionDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRay3DReconstruction", "ApplicationName", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DReconstruction success after verifying ApplicationName --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRay3DReconstruction", "ApplicationVersion", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DReconstruction success after verifying ApplicationVersion --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRay3DReconstruction", "ApplicationManufacturer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DReconstruction success after verifying ApplicationManufacturer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRay3DReconstruction", "AlgorithmType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DReconstruction success after verifying AlgorithmType --> "+("success" if partial_success else "failure"))

				if "AlgorithmType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["AlgorithmType"], 
						StringValueTable_XRay3DReconstructionAlgorithmType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DReconstruction success after verifying string defined terms AlgorithmType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"XRay3DReconstruction", "AlgorithmDescription", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DReconstruction success after verifying AlgorithmDescription --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"XRay3DReconstruction", "AcquisitionIndex ", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DReconstruction success after verifying AcquisitionIndex  --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_XRay3DFrameTypeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"XRay3DFrameTypeMacro")

	partial_success = verifyType1(ds, 
			"XRay3DFrameTypeMacro", 
			"XRay3DFrameTypeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "XRay3DFrameTypeMacro success after verifying XRay3DFrameTypeSequence" + ("success" if partial_success else "failure")) 
	if "XRay3DFrameTypeSequence" in ds:
		XRay3DFrameTypeSequence_data = ds.XRay3DFrameTypeSequence
		if type(XRay3DFrameTypeSequence_data) == Sequence:
			for i1 in range(0, len(XRay3DFrameTypeSequence_data)):
				if verbose:
					log.append( " XRay3DFrameTypeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = XRay3DFrameTypeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"XRay3DFrameTypeMacro", "FrameType", 
						verbose, log, ElementDictionary, 
									4, 4)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DFrameTypeMacro success after verifying FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedFrameType1, 
						verbose, log, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageAndFrameType2, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if Condition_NotBreastTomosynthesisInstance(ds1, parent_ds1, root_ds):
					if "FrameType" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["FrameType"], 
							StringValueTable_CommonEnhancedImageAndFrameType3, 
							verbose, log, 2)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))


				if Condition_BreastTomosynthesisInstance(ds1, parent_ds1, root_ds):
					if "FrameType" not in ds1: 
						partial_success = False 
					else: 
						partial_success = verifyDefinedTerms(ds1["FrameType"], 
							StringValueTable_CommonEnhancedImageAndFrameType3AndBreastTomoImageAndFrameType3, 
							verbose, log, 2)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DFrameTypeMacro success after verifying string defined terms FrameType --> "+("success" if partial_success else "failure"))


				if Condition_NotBreastTomosynthesisInstance(ds1, parent_ds1, root_ds):
					if "FrameType" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["FrameType"], 
							StringValueTable_XRay3DImageAndFrameType4, 
							verbose, log, 3)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if Condition_BreastTomosynthesisInstance(ds1, parent_ds1, root_ds):
					if "FrameType" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["FrameType"], 
							StringValueTable_BreastTomoImageAndFrameType4, 
							verbose, log, 3)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if Condition_BreastTomosynthesisInstance(ds1, parent_ds1, root_ds):
					if "FrameType" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["FrameType"], 
							StringValueTable_BreastTomoImageAndFrameType5, 
							verbose, log, 4)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DFrameTypeMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " XRay3DFrameTypeMacro success after verifying CommonCTMRImageDescriptionFrameLevelMacroForXRay3DImage"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType1C(ds1, 
						"XRay3DFrameTypeMacro", "ReconstructionIndex", 
						verbose, log, ElementDictionary, 
						Condition_XRay3DReconstructionSequenceIsPresent, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " XRay3DFrameTypeMacro success after verifying ReconstructionIndex --> "+("success" if partial_success else "failure"))

	return global_success

def Module_EnhancedPaletteColorLookupTable_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedPaletteColorLookupTable")

	partial_success = verifyType1(ds, 
			"EnhancedPaletteColorLookupTable", 
			"DataFrameAssignmentSequence", 
			verbose, log, ElementDictionary, 
			1, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedPaletteColorLookupTable success after verifying DataFrameAssignmentSequence" + ("success" if partial_success else "failure")) 
	if "DataFrameAssignmentSequence" in ds:
		DataFrameAssignmentSequence_data = ds.DataFrameAssignmentSequence
		if type(DataFrameAssignmentSequence_data) == Sequence:
			for i1 in range(0, len(DataFrameAssignmentSequence_data)):
				if verbose:
					log.append( " DataFrameAssignmentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DataFrameAssignmentSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"EnhancedPaletteColorLookupTable", "DataType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying DataType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"EnhancedPaletteColorLookupTable", "DataPathAssignment", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying DataPathAssignment --> "+("success" if partial_success else "failure"))

				if "DataPathAssignment" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["DataPathAssignment"], 
						StringValueTable_DataPathAssignment, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying string enumerated values DataPathAssignment --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType3(ds1, 
						"EnhancedPaletteColorLookupTable", "BitsMappedToColorLookupTable", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying BitsMappedToColorLookupTable --> "+("success" if partial_success else "failure"))

				partial_success =  Macro_VOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying VOILUTMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"EnhancedPaletteColorLookupTable", 
			"BlendingLUT1Sequence", 
			verbose, log, ElementDictionary, 
			Condition_AnyDataPathAssignmentIsOtherThanPrimaryPValues, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedPaletteColorLookupTable success after verifying BlendingLUT1Sequence" + ("success" if partial_success else "failure")) 
	if "BlendingLUT1Sequence" in ds:
		BlendingLUT1Sequence_data = ds.BlendingLUT1Sequence
		if type(BlendingLUT1Sequence_data) == Sequence:
			for i1 in range(0, len(BlendingLUT1Sequence_data)):
				if verbose:
					log.append( " BlendingLUT1Sequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = BlendingLUT1Sequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"EnhancedPaletteColorLookupTable", "BlendingLUT1TransferFunction", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying BlendingLUT1TransferFunction --> "+("success" if partial_success else "failure"))

				if "BlendingLUT1TransferFunction" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["BlendingLUT1TransferFunction"], 
						StringValueTable_BlendingLUT1TransferFunction, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying string enumerated values BlendingLUT1TransferFunction --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "BlendingWeightConstant", 
						verbose, log, ElementDictionary, 
						Condition_BlendingLUT1TransferFunctionIsConstant, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying BlendingWeightConstant --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "BlendingLookupTableDescriptor", 
						verbose, log, ElementDictionary, 
						Condition_BlendingLUT1TransferFunctionIsTable, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying BlendingLookupTableDescriptor --> "+("success" if partial_success else "failure"))


				if "BlendingLookupTableDescriptor" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["BlendingLookupTableDescriptor"], 
						BinaryValueDescription_Zero, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying binary enumerated values BlendingLookupTableDescriptor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "BlendingLookupTableData", 
						verbose, log, ElementDictionary, 
						Condition_BlendingLUT1TransferFunctionIsTable, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying BlendingLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"EnhancedPaletteColorLookupTable", 
			"BlendingLUT2Sequence", 
			verbose, log, ElementDictionary, 
			Condition_AnyDataPathAssignmentIsOtherThanPrimaryPValues, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedPaletteColorLookupTable success after verifying BlendingLUT2Sequence" + ("success" if partial_success else "failure")) 
	if "BlendingLUT2Sequence" in ds:
		BlendingLUT2Sequence_data = ds.BlendingLUT2Sequence
		if type(BlendingLUT2Sequence_data) == Sequence:
			for i1 in range(0, len(BlendingLUT2Sequence_data)):
				if verbose:
					log.append( " BlendingLUT2Sequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = BlendingLUT2Sequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"EnhancedPaletteColorLookupTable", "BlendingLUT2TransferFunction", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying BlendingLUT2TransferFunction --> "+("success" if partial_success else "failure"))

				if "BlendingLUT2TransferFunction" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["BlendingLUT2TransferFunction"], 
						StringValueTable_BlendingLUT2TransferFunction, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying string enumerated values BlendingLUT2TransferFunction --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "BlendingWeightConstant", 
						verbose, log, ElementDictionary, 
						Condition_BlendingLUT2TransferFunctionIsConstant, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying BlendingWeightConstant --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "BlendingLookupTableDescriptor", 
						verbose, log, ElementDictionary, 
						Condition_BlendingLUT1TransferFunctionIsTable, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying BlendingLookupTableDescriptor --> "+("success" if partial_success else "failure"))


				if "BlendingLookupTableDescriptor" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["BlendingLookupTableDescriptor"], 
						BinaryValueDescription_Zero, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying binary enumerated values BlendingLookupTableDescriptor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "BlendingLookupTableData", 
						verbose, log, ElementDictionary, 
						Condition_BlendingLUT1TransferFunctionIsTable, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying BlendingLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"EnhancedPaletteColorLookupTable", 
			"EnhancedPaletteColorLookupTableSequence", 
			verbose, log, ElementDictionary, 
			Condition_AnyDataPathAssignmentIsOtherThanPrimaryPValues, 
			False, 
			parent_ds, root_ds, 
			1, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedPaletteColorLookupTable success after verifying EnhancedPaletteColorLookupTableSequence" + ("success" if partial_success else "failure")) 
	if "EnhancedPaletteColorLookupTableSequence" in ds:
		EnhancedPaletteColorLookupTableSequence_data = ds.EnhancedPaletteColorLookupTableSequence
		if type(EnhancedPaletteColorLookupTableSequence_data) == Sequence:
			for i1 in range(0, len(EnhancedPaletteColorLookupTableSequence_data)):
				if verbose:
					log.append( " EnhancedPaletteColorLookupTableSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = EnhancedPaletteColorLookupTableSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"EnhancedPaletteColorLookupTable", "DataPathID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying DataPathID --> "+("success" if partial_success else "failure"))

				if "DataPathID" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["DataPathID"], 
						StringValueTable_DataPathID, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying string enumerated values DataPathID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"EnhancedPaletteColorLookupTable", "RGBLUTTransferFunction", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying RGBLUTTransferFunction --> "+("success" if partial_success else "failure"))

				if "RGBLUTTransferFunction" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["RGBLUTTransferFunction"], 
						StringValueTable_RGBLUTTransferFunction, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying string enumerated values RGBLUTTransferFunction --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"EnhancedPaletteColorLookupTable", "AlphaLUTTransferFunction", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying AlphaLUTTransferFunction --> "+("success" if partial_success else "failure"))

				if "AlphaLUTTransferFunction" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["AlphaLUTTransferFunction"], 
						StringValueTable_AlphaLUTTransferFunction, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying string enumerated values AlphaLUTTransferFunction --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "RedPaletteColorLookupTableDescriptor", 
						verbose, log, ElementDictionary, 
						Condition_RGBLUTTransferFunctionIsTable, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying RedPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


				if "RedPaletteColorLookupTableDescriptor" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["RedPaletteColorLookupTableDescriptor"], 
						BinaryValueDescription_Zero, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying binary enumerated values RedPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "GreenPaletteColorLookupTableDescriptor", 
						verbose, log, ElementDictionary, 
						Condition_RGBLUTTransferFunctionIsTable, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying GreenPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


				if "GreenPaletteColorLookupTableDescriptor" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["GreenPaletteColorLookupTableDescriptor"], 
						BinaryValueDescription_Zero, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying binary enumerated values GreenPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "BluePaletteColorLookupTableDescriptor", 
						verbose, log, ElementDictionary, 
						Condition_RGBLUTTransferFunctionIsTable, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying BluePaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


				if "BluePaletteColorLookupTableDescriptor" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["BluePaletteColorLookupTableDescriptor"], 
						BinaryValueDescription_Zero, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying binary enumerated values BluePaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "AlphaPaletteColorLookupTableDescriptor", 
						verbose, log, ElementDictionary, 
						Condition_RGBLUTTransferFunctionIsTable, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying AlphaPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))


				if "AlphaPaletteColorLookupTableDescriptor" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["AlphaPaletteColorLookupTableDescriptor"], 
						BinaryValueDescription_Zero, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying binary enumerated values AlphaPaletteColorLookupTableDescriptor --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "RedPaletteColorLookupTableData", 
						verbose, log, ElementDictionary, 
						Condition_RGBLUTTransferFunctionIsTable, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying RedPaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "GreenPaletteColorLookupTableData", 
						verbose, log, ElementDictionary, 
						Condition_RGBLUTTransferFunctionIsTable, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying GreenPaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "BluePaletteColorLookupTableData", 
						verbose, log, ElementDictionary, 
						Condition_RGBLUTTransferFunctionIsTable, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying BluePaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"EnhancedPaletteColorLookupTable", "AlphaPaletteColorLookupTableData", 
						verbose, log, ElementDictionary, 
						Condition_RGBLUTTransferFunctionIsTable, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedPaletteColorLookupTable success after verifying AlphaPaletteColorLookupTableData --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedPaletteColorLookupTable", "ICCProfile", 
			verbose, log, ElementDictionary, 
			Condition_AnyDataPathAssignmentIsOtherThanPrimaryPValues, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPaletteColorLookupTable success after verifying ICCProfile --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedPaletteColorLookupTable", "ColorSpace", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedPaletteColorLookupTable success after verifying ColorSpace --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PlanePositionVolumeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PlanePositionVolumeMacro")

	partial_success = verifyType1(ds, 
			"PlanePositionVolumeMacro", 
			"PlanePositionVolumeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PlanePositionVolumeMacro success after verifying PlanePositionVolumeSequence" + ("success" if partial_success else "failure")) 
	if "PlanePositionVolumeSequence" in ds:
		PlanePositionVolumeSequence_data = ds.PlanePositionVolumeSequence
		if type(PlanePositionVolumeSequence_data) == Sequence:
			for i1 in range(0, len(PlanePositionVolumeSequence_data)):
				if verbose:
					log.append( " PlanePositionVolumeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PlanePositionVolumeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PlanePositionVolumeMacro", "ImagePositionVolume", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PlanePositionVolumeMacro success after verifying ImagePositionVolume --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_PlaneOrientationVolumeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"PlaneOrientationVolumeMacro")

	partial_success = verifyType1(ds, 
			"PlaneOrientationVolumeMacro", 
			"PlaneOrientationVolumeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "PlaneOrientationVolumeMacro success after verifying PlaneOrientationVolumeSequence" + ("success" if partial_success else "failure")) 
	if "PlaneOrientationVolumeSequence" in ds:
		PlaneOrientationVolumeSequence_data = ds.PlaneOrientationVolumeSequence
		if type(PlaneOrientationVolumeSequence_data) == Sequence:
			for i1 in range(0, len(PlaneOrientationVolumeSequence_data)):
				if verbose:
					log.append( " PlaneOrientationVolumeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PlaneOrientationVolumeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"PlaneOrientationVolumeMacro", "ImageOrientationVolume", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " PlaneOrientationVolumeMacro success after verifying ImageOrientationVolume --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_TemporalPositionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"TemporalPositionMacro")

	partial_success = verifyType1(ds, 
			"TemporalPositionMacro", 
			"TemporalPositionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "TemporalPositionMacro success after verifying TemporalPositionSequence" + ("success" if partial_success else "failure")) 
	if "TemporalPositionSequence" in ds:
		TemporalPositionSequence_data = ds.TemporalPositionSequence
		if type(TemporalPositionSequence_data) == Sequence:
			for i1 in range(0, len(TemporalPositionSequence_data)):
				if verbose:
					log.append( " TemporalPositionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TemporalPositionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"TemporalPositionMacro", "TemporalPositionTimeOffset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " TemporalPositionMacro success after verifying TemporalPositionTimeOffset --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_ImageDataTypeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"ImageDataTypeMacro")

	partial_success = verifyType1(ds, 
			"ImageDataTypeMacro", 
			"ImageDataTypeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ImageDataTypeMacro success after verifying ImageDataTypeSequence" + ("success" if partial_success else "failure")) 
	if "ImageDataTypeSequence" in ds:
		ImageDataTypeSequence_data = ds.ImageDataTypeSequence
		if type(ImageDataTypeSequence_data) == Sequence:
			for i1 in range(0, len(ImageDataTypeSequence_data)):
				if verbose:
					log.append( " ImageDataTypeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ImageDataTypeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"ImageDataTypeMacro", "DataType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ImageDataTypeMacro success after verifying DataType --> "+("success" if partial_success else "failure"))

				if "DataType" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["DataType"], 
						StringValueTable_EnhancedUSVolumeDataType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ImageDataTypeMacro success after verifying string defined terms DataType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"ImageDataTypeMacro", "AliasedDataType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ImageDataTypeMacro success after verifying AliasedDataType --> "+("success" if partial_success else "failure"))

				if "AliasedDataType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["AliasedDataType"], 
						StringValueTable_YesNoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ImageDataTypeMacro success after verifying string enumerated values AliasedDataType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"ImageDataTypeMacro", "ZeroVelocityPixelValue", 
						verbose, log, ElementDictionary, 
						Condition_NeedZeroVelocityPixelValue, 
						True, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ImageDataTypeMacro success after verifying ZeroVelocityPixelValue --> "+("success" if partial_success else "failure"))

	return global_success

def Module_EnhancedUSSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedUSSeries")

	partial_success =  		verifyType1(ds, 
			"EnhancedUSSeries", "Modality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSSeries success after verifying Modality --> "+("success" if partial_success else "failure"))

	if "Modality" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["Modality"], 
			StringValueTable_USOrIVUSModality, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSSeries success after verifying string enumerated values Modality --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"EnhancedUSSeries", 
			"ReferencedPerformedProcedureStepSequence", 
			verbose, log, ElementDictionary, 
			Condition_SeriesNeedReferencedPerformedProcedureStepSequence, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedUSSeries success after verifying ReferencedPerformedProcedureStepSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedPerformedProcedureStepSequence" in ds:
		ReferencedPerformedProcedureStepSequence_data = ds.ReferencedPerformedProcedureStepSequence
		if type(ReferencedPerformedProcedureStepSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedPerformedProcedureStepSequence_data)):
				if verbose:
					log.append( " ReferencedPerformedProcedureStepSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedPerformedProcedureStepSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedUSSeries success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1C(ds, 
			"EnhancedUSSeries", 
			"PerformedProtocolCodeSequence", 
			verbose, log, ElementDictionary, 
			0, 
			True, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedUSSeries success after verifying PerformedProtocolCodeSequence" + ("success" if partial_success else "failure")) 
	if "PerformedProtocolCodeSequence" in ds:
		PerformedProtocolCodeSequence_data = ds.PerformedProtocolCodeSequence
		if type(PerformedProtocolCodeSequence_data) == Sequence:
			for i1 in range(0, len(PerformedProtocolCodeSequence_data)):
				if verbose:
					log.append( " PerformedProtocolCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerformedProtocolCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedUSSeries success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"EnhancedUSSeries", 
						"ProtocolContextSequence", 
						verbose, log, ElementDictionary, 
									1, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedUSSeries success after verifying ProtocolContextSequence" + ("success" if partial_success else "failure")) 
				if "ProtocolContextSequence" in ds1:
					ProtocolContextSequence_data = ds1.ProtocolContextSequence
					if type(ProtocolContextSequence_data) == Sequence:
						for i2 in range(0, len(ProtocolContextSequence_data)):
							if verbose:
								log.append( " ProtocolContextSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = ProtocolContextSequence_data[i2]
							partial_success =  Macro_ContentItemMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EnhancedUSSeries success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
							partial_success = verifyType3(ds2, 
									"EnhancedUSSeries", 
									"ContentItemModifierSequence", 
									verbose, log, ElementDictionary, 
															1, 0xFFFFFFFF)
							global_success = global_success and partial_success 
							if verbose:
								log.append( "EnhancedUSSeries success after verifying ContentItemModifierSequence" + ("success" if partial_success else "failure")) 
							if "ContentItemModifierSequence" in ds2:
								ContentItemModifierSequence_data = ds2.ContentItemModifierSequence
								if type(ContentItemModifierSequence_data) == Sequence:
									for i3 in range(0, len(ContentItemModifierSequence_data)):
										if verbose:
											log.append( " ContentItemModifierSequence item [{}]".format(i3+1))
										parent_ds3 = ds2
										ds3 = ContentItemModifierSequence_data[i3]
										partial_success =  Macro_ContentItemMacro_verify(ds3, parent_ds3, root_ds, verbose, log, ElementDictionary)

										if verbose:
											log.append( " EnhancedUSSeries success after verifying ContentItemMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"EnhancedUSSeries", "PerformedProtocolType", 
			verbose, log, ElementDictionary, 
			Condition_PerformedProtocolCodeSequenceIsPresent, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSSeries success after verifying PerformedProtocolType --> "+("success" if partial_success else "failure"))

	if Condition_PerformedProtocolCodeSequenceIsPresent(ds, parent_ds, root_ds):
		if "PerformedProtocolType" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PerformedProtocolType"], 
				StringValueTable_PerformedProtocolType, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSSeries success after verifying string enumerated values PerformedProtocolType --> "+("success" if partial_success else "failure"))

	return global_success

def Module_UltrasoundFrameOfReference_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"UltrasoundFrameOfReference")

	partial_success =  		verifyType1(ds, 
			"UltrasoundFrameOfReference", "VolumeFrameOfReferenceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " UltrasoundFrameOfReference success after verifying VolumeFrameOfReferenceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"UltrasoundFrameOfReference", "UltrasoundAcquisitionGeometry", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " UltrasoundFrameOfReference success after verifying UltrasoundAcquisitionGeometry --> "+("success" if partial_success else "failure"))

	if "UltrasoundAcquisitionGeometry" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["UltrasoundAcquisitionGeometry"], 
			StringValueTable_UltrasoundAcquisitionGeometry, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " UltrasoundFrameOfReference success after verifying string defined terms UltrasoundAcquisitionGeometry --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"UltrasoundFrameOfReference", "ApexPosition", 
			verbose, log, ElementDictionary, 
			Condition_UltrasoundAcquisitionGeometryIsApex, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " UltrasoundFrameOfReference success after verifying ApexPosition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"UltrasoundFrameOfReference", "VolumeToTransducerRelationship", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " UltrasoundFrameOfReference success after verifying VolumeToTransducerRelationship --> "+("success" if partial_success else "failure"))

	if "VolumeToTransducerRelationship" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VolumeToTransducerRelationship"], 
			StringValueTable_VolumeToTransducerRelationship, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " UltrasoundFrameOfReference success after verifying string enumerated values VolumeToTransducerRelationship --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"UltrasoundFrameOfReference", "VolumeToTransducerMappingMatrix", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " UltrasoundFrameOfReference success after verifying VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"UltrasoundFrameOfReference", "PatientFrameOfReferenceSource", 
			verbose, log, ElementDictionary, 
			Condition_NeedPatientFrameOfReferenceSource, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " UltrasoundFrameOfReference success after verifying PatientFrameOfReferenceSource --> "+("success" if partial_success else "failure"))

	if Condition_NeedPatientFrameOfReferenceSource(ds, parent_ds, root_ds):
		if "PatientFrameOfReferenceSource" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PatientFrameOfReferenceSource"], 
				StringValueTable_PatientFrameOfReferenceSource, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " UltrasoundFrameOfReference success after verifying string enumerated values PatientFrameOfReferenceSource --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"UltrasoundFrameOfReference", "TableFrameOfReferenceUID", 
			verbose, log, ElementDictionary, 
			Condition_PatientFrameOfReferenceSourceIsTable, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " UltrasoundFrameOfReference success after verifying TableFrameOfReferenceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"UltrasoundFrameOfReference", "VolumeToTableMappingMatrix", 
			verbose, log, ElementDictionary, 
			Condition_PatientFrameOfReferenceSourceIsTable, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " UltrasoundFrameOfReference success after verifying VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))

	return global_success

def Module_EnhancedUSImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"EnhancedUSImage")

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "ImageType", 
			verbose, log, ElementDictionary, 
			4, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageType1, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageAndFrameType2, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageAndFrameType3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["ImageType"], 
			StringValueTable_CommonEnhancedImageType4, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying string defined terms ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "SamplesPerPixel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying SamplesPerPixel --> "+("success" if partial_success else "failure"))

	if "SamplesPerPixel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["SamplesPerPixel"], 
			BinaryValueDescription_SamplesPerPixelIsOne, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying binary enumerated values SamplesPerPixel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "PhotometricInterpretation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	if "PhotometricInterpretation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PhotometricInterpretation"], 
			StringValueTable_PhotometricInterpretationMonochrome2, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying string enumerated values PhotometricInterpretation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre8Or16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre7Or15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "DimensionOrganizationType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying DimensionOrganizationType --> "+("success" if partial_success else "failure"))

	if "DimensionOrganizationType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["DimensionOrganizationType"], 
			StringValueTable_DimensionOrganizationType3DOr3DTemporal, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying string enumerated values DimensionOrganizationType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "AcquisitionDuration", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying AcquisitionDuration --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedUSImage", "PositionMeasuringDeviceUsed", 
			verbose, log, ElementDictionary, 
			Condition_NeedPositionMeasuringDeviceUsed, 
			True, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying PositionMeasuringDeviceUsed --> "+("success" if partial_success else "failure"))

	if Condition_NeedPositionMeasuringDeviceUsed(ds, parent_ds, root_ds):
		if "PositionMeasuringDeviceUsed" not in ds: 
			partial_success = False 
		else:
			partial_success = verifyEnumValues(ds["PositionMeasuringDeviceUsed"], 
				StringValueTable_PositionMeasuringDeviceUsed, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying string enumerated values PositionMeasuringDeviceUsed --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	if "LossyImageCompression" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LossyImageCompression"], 
			StringValueTable_LossyImageCompression, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying string enumerated values LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedUSImage", "LossyImageCompressionRatio", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying LossyImageCompressionRatio --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionRatio" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["LossyImageCompressionRatio"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"EnhancedUSImage", "LossyImageCompressionMethod", 
			verbose, log, ElementDictionary, 
			Condition_LossyImageCompressionIs01, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))

	if Condition_LossyImageCompressionIs01(ds, parent_ds, root_ds):
		if "LossyImageCompressionMethod" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyDefinedTerms(ds["LossyImageCompressionMethod"], 
				StringValueTable_LossyImageCompressionMethod, 
				verbose, log, -1)
		global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying string defined terms LossyImageCompressionMethod --> "+("success" if partial_success else "failure"))


	if Condition_LossyImageCompressionMethodInconsistentWithTransferSyntax(ds, parent_ds, root_ds):
			log.append( WMsgDC("Null") +" method inconsistent with transfer syntax - attribute <LossyImageCompressionMethod>"+\
				" = <{}>".format( tag_for_keyword("LossyImageCompressionMethod")))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if "PresentationLUTShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
			StringValueTable_IdentityPresentationLUTShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "RescaleIntercept", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying RescaleIntercept --> "+("success" if partial_success else "failure"))

	if "RescaleIntercept" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["RescaleIntercept"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying binary enumerated values RescaleIntercept --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "RescaleSlope", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying RescaleSlope --> "+("success" if partial_success else "failure"))

	if "RescaleSlope" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["RescaleSlope"], 
			BinaryValueDescription_One, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying binary enumerated values RescaleSlope --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"EnhancedUSImage", 
			"SourceImageSequence", 
			verbose, log, ElementDictionary, 
			Condition_ImageTypeValue1Derived, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedUSImage success after verifying SourceImageSequence" + ("success" if partial_success else "failure")) 
	if "SourceImageSequence" in ds:
		SourceImageSequence_data = ds.SourceImageSequence
		if type(SourceImageSequence_data) == Sequence:
			for i1 in range(0, len(SourceImageSequence_data)):
				if verbose:
					log.append( " SourceImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SourceImageSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedUSImage success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"EnhancedUSImage", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedUSImage success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EnhancedUSImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"EnhancedUSImage", 
			"ReferencedImageSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedUSImage success after verifying ReferencedImageSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedImageSequence" in ds:
		ReferencedImageSequence_data = ds.ReferencedImageSequence
		if type(ReferencedImageSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedImageSequence_data)):
				if verbose:
					log.append( " ReferencedImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedImageSequence_data[i1]
				partial_success =  Macro_ImageSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedUSImage success after verifying ImageSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"EnhancedUSImage", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedUSImage success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EnhancedUSImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"EnhancedUSImage", 
			"ReferencedRawDataSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedUSImage success after verifying ReferencedRawDataSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedRawDataSequence" in ds:
		ReferencedRawDataSequence_data = ds.ReferencedRawDataSequence
		if type(ReferencedRawDataSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedRawDataSequence_data)):
				if verbose:
					log.append( " ReferencedRawDataSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedRawDataSequence_data[i1]
				partial_success =  Macro_HierarchicalSOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedUSImage success after verifying HierarchicalSOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"EnhancedUSImage", 
			"ReferencedInstanceSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedUSImage success after verifying ReferencedInstanceSequence" + ("success" if partial_success else "failure")) 
	if "ReferencedInstanceSequence" in ds:
		ReferencedInstanceSequence_data = ds.ReferencedInstanceSequence
		if type(ReferencedInstanceSequence_data) == Sequence:
			for i1 in range(0, len(ReferencedInstanceSequence_data)):
				if verbose:
					log.append( " ReferencedInstanceSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ReferencedInstanceSequence_data[i1]
				partial_success =  Macro_SOPInstanceReferenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedUSImage success after verifying SOPInstanceReferenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success = verifyType3(ds1, 
						"EnhancedUSImage", 
						"PurposeOfReferenceCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedUSImage success after verifying PurposeOfReferenceCodeSequence" + ("success" if partial_success else "failure")) 
				if "PurposeOfReferenceCodeSequence" in ds1:
					PurposeOfReferenceCodeSequence_data = ds1.PurposeOfReferenceCodeSequence
					if type(PurposeOfReferenceCodeSequence_data) == Sequence:
						for i2 in range(0, len(PurposeOfReferenceCodeSequence_data)):
							if verbose:
								log.append( " PurposeOfReferenceCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = PurposeOfReferenceCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EnhancedUSImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1C(ds, 
			"EnhancedUSImage", "NumberOfStages", 
			verbose, log, ElementDictionary, 
			Condition_PerformedProtocolTypeIsStaged, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying NumberOfStages --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"EnhancedUSImage", "StageNumber", 
			verbose, log, ElementDictionary, 
			Condition_PerformedProtocolTypeIsStaged, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying StageNumber --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1C(ds, 
			"EnhancedUSImage", 
			"StageCodeSequence", 
			verbose, log, ElementDictionary, 
			Condition_PerformedProtocolTypeIsStaged, 
			False, 
			parent_ds, root_ds, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedUSImage success after verifying StageCodeSequence" + ("success" if partial_success else "failure")) 
	if "StageCodeSequence" in ds:
		StageCodeSequence_data = ds.StageCodeSequence
		if type(StageCodeSequence_data) == Sequence:
			for i1 in range(0, len(StageCodeSequence_data)):
				if verbose:
					log.append( " StageCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = StageCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedUSImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  Macro_MandatoryViewAndSliceProgressionDirectionMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedUSImage success after verifying MandatoryViewAndSliceProgressionDirectionMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType3(ds, 
			"EnhancedUSImage", 
			"EventTimerSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedUSImage success after verifying EventTimerSequence" + ("success" if partial_success else "failure")) 
	if "EventTimerSequence" in ds:
		EventTimerSequence_data = ds.EventTimerSequence
		if type(EventTimerSequence_data) == Sequence:
			for i1 in range(0, len(EventTimerSequence_data)):
				if verbose:
					log.append( " EventTimerSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = EventTimerSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"EnhancedUSImage", "EventTimeOffset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedUSImage success after verifying EventTimeOffset --> "+("success" if partial_success else "failure"))

				partial_success = verifyType1(ds1, 
						"EnhancedUSImage", 
						"EventCodeSequence", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( "EnhancedUSImage success after verifying EventCodeSequence" + ("success" if partial_success else "failure")) 
				if "EventCodeSequence" in ds1:
					EventCodeSequence_data = ds1.EventCodeSequence
					if type(EventCodeSequence_data) == Sequence:
						for i2 in range(0, len(EventCodeSequence_data)):
							if verbose:
								log.append( " EventCodeSequence item [{}]".format(i2+1))
							parent_ds2 = ds1
							ds2 = EventCodeSequence_data[i2]
							partial_success =  Macro_CodeSequenceMacro_verify(ds2, parent_ds2, root_ds, verbose, log, ElementDictionary)

							if verbose:
								log.append( " EnhancedUSImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  		verifyType3(ds1, 
						"EnhancedUSImage", "EventTimerNames", 
						verbose, log, ElementDictionary, 
									1, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " EnhancedUSImage success after verifying EventTimerNames --> "+("success" if partial_success else "failure"))

	partial_success =  Macro_GeneralAnatomyMandatoryMacro_verify(ds, parent_ds, root_ds, verbose, log, ElementDictionary)

	if verbose:
		log.append( " EnhancedUSImage success after verifying GeneralAnatomyMandatoryMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	if "BurnedInAnnotation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BurnedInAnnotation"], 
			StringValueTable_NoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying string enumerated values BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType3(ds, 
			"EnhancedUSImage", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	if "RecognizableVisualFeatures" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["RecognizableVisualFeatures"], 
			StringValueTable_YesNoFull, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying string enumerated values RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success = verifyType3(ds, 
			"EnhancedUSImage", 
			"IconImageSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedUSImage success after verifying IconImageSequence" + ("success" if partial_success else "failure")) 
	if "IconImageSequence" in ds:
		IconImageSequence_data = ds.IconImageSequence
		if type(IconImageSequence_data) == Sequence:
			for i1 in range(0, len(IconImageSequence_data)):
				if verbose:
					log.append( " IconImageSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = IconImageSequence_data[i1]
				partial_success =  Macro_IconImageSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedUSImage success after verifying IconImageSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"EnhancedUSImage", "TransducerData", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying TransducerData --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"EnhancedUSImage", 
			"TransducerScanPatternCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedUSImage success after verifying TransducerScanPatternCodeSequence" + ("success" if partial_success else "failure")) 
	if "TransducerScanPatternCodeSequence" in ds:
		TransducerScanPatternCodeSequence_data = ds.TransducerScanPatternCodeSequence
		if type(TransducerScanPatternCodeSequence_data) == Sequence:
			for i1 in range(0, len(TransducerScanPatternCodeSequence_data)):
				if verbose:
					log.append( " TransducerScanPatternCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TransducerScanPatternCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedUSImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"EnhancedUSImage", 
			"TransducerGeometryCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedUSImage success after verifying TransducerGeometryCodeSequence" + ("success" if partial_success else "failure")) 
	if "TransducerGeometryCodeSequence" in ds:
		TransducerGeometryCodeSequence_data = ds.TransducerGeometryCodeSequence
		if type(TransducerGeometryCodeSequence_data) == Sequence:
			for i1 in range(0, len(TransducerGeometryCodeSequence_data)):
				if verbose:
					log.append( " TransducerGeometryCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TransducerGeometryCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedUSImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"EnhancedUSImage", 
			"TransducerBeamSteeringCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedUSImage success after verifying TransducerBeamSteeringCodeSequence" + ("success" if partial_success else "failure")) 
	if "TransducerBeamSteeringCodeSequence" in ds:
		TransducerBeamSteeringCodeSequence_data = ds.TransducerBeamSteeringCodeSequence
		if type(TransducerBeamSteeringCodeSequence_data) == Sequence:
			for i1 in range(0, len(TransducerBeamSteeringCodeSequence_data)):
				if verbose:
					log.append( " TransducerBeamSteeringCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TransducerBeamSteeringCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedUSImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"EnhancedUSImage", 
			"TransducerApplicationCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "EnhancedUSImage success after verifying TransducerApplicationCodeSequence" + ("success" if partial_success else "failure")) 
	if "TransducerApplicationCodeSequence" in ds:
		TransducerApplicationCodeSequence_data = ds.TransducerApplicationCodeSequence
		if type(TransducerApplicationCodeSequence_data) == Sequence:
			for i1 in range(0, len(TransducerApplicationCodeSequence_data)):
				if verbose:
					log.append( " TransducerApplicationCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TransducerApplicationCodeSequence_data[i1]
				partial_success =  Macro_CodeSequenceMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " EnhancedUSImage success after verifying CodeSequenceMacro"+ ("success" if partial_success else "failure" ))
	partial_success =  		verifyType3(ds, 
			"EnhancedUSImage", "ProcessingFunction", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying ProcessingFunction --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "MechanicalIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying MechanicalIndex --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "BoneThermalIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying BoneThermalIndex --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "CranialThermalIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying CranialThermalIndex --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "SoftTissueThermalIndex", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying SoftTissueThermalIndex --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "DepthsOfFocus", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying DepthsOfFocus --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"EnhancedUSImage", "DepthOfScanField", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " EnhancedUSImage success after verifying DepthOfScanField --> "+("success" if partial_success else "failure"))

	return global_success

def Module_IVUSImage_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"IVUSImage")

	partial_success =  		verifyType1(ds, 
			"IVUSImage", "IVUSAcquisition", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IVUSImage success after verifying IVUSAcquisition --> "+("success" if partial_success else "failure"))

	if "IVUSAcquisition" not in ds: 
		partial_success = False 
	else: 
		partial_success = verifyDefinedTerms(ds["IVUSAcquisition"], 
			StringValueTable_IVUSAcquisition, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IVUSImage success after verifying string defined terms IVUSAcquisition --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IVUSImage", "IVUSPullbackRate", 
			verbose, log, ElementDictionary, 
			Condition_IVUSAcquisitionIsMotor, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IVUSImage success after verifying IVUSPullbackRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IVUSImage", "IVUSGatedRate", 
			verbose, log, ElementDictionary, 
			Condition_IVUSAcquisitionIsGated, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IVUSImage success after verifying IVUSGatedRate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1C(ds, 
			"IVUSImage", "IVUSPullbackStartFrameNumber", 
			verbose, log, ElementDictionary, 
			Condition_IVUSAcquisitionIsMotorOrGated, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IVUSImage success after verifying IVUSPullbackStartFrameNumber --> "+("success" if partial_success else "failure"))

	if Condition_IVUSAcquisitionIsMotorOrGated(ds, parent_ds, root_ds):
		if "IVUSPullbackStartFrameNumber" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["IVUSPullbackStartFrameNumber"], 
				verbose, log, -1, False)

	partial_success =  		verifyType1C(ds, 
			"IVUSImage", "IVUSPullbackStopFrameNumber", 
			verbose, log, ElementDictionary, 
			Condition_IVUSAcquisitionIsMotorOrGated, 
			False, 
			parent_ds, root_ds, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " IVUSImage success after verifying IVUSPullbackStopFrameNumber --> "+("success" if partial_success else "failure"))

	if Condition_IVUSAcquisitionIsMotorOrGated(ds, parent_ds, root_ds):
		if "IVUSPullbackStopFrameNumber" not in ds: 
			partial_success = False 
		else: 
			partial_success = verifyNotZero(ds["IVUSPullbackStopFrameNumber"], 
				verbose, log, -1, False)

	return global_success

def Module_ExcludedIntervals_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"ExcludedIntervals")

	partial_success = verifyType1C(ds, 
			"ExcludedIntervals", 
			"ExcludedIntervalsSequence", 
			verbose, log, ElementDictionary, 
			0, 
			False, 
			parent_ds, root_ds, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "ExcludedIntervals success after verifying ExcludedIntervalsSequence" + ("success" if partial_success else "failure")) 
	if "ExcludedIntervalsSequence" in ds:
		ExcludedIntervalsSequence_data = ds.ExcludedIntervalsSequence
		if type(ExcludedIntervalsSequence_data) == Sequence:
			for i1 in range(0, len(ExcludedIntervalsSequence_data)):
				if verbose:
					log.append( " ExcludedIntervalsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ExcludedIntervalsSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"ExcludedIntervals", "ExclusionStartDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ExcludedIntervals success after verifying ExclusionStartDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"ExcludedIntervals", "ExclusionDuration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " ExcludedIntervals success after verifying ExclusionDuration --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_USImageDescriptionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"USImageDescriptionMacro")

	partial_success = verifyType1(ds, 
			"USImageDescriptionMacro", 
			"USImageDescriptionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "USImageDescriptionMacro success after verifying USImageDescriptionSequence" + ("success" if partial_success else "failure")) 
	if "USImageDescriptionSequence" in ds:
		USImageDescriptionSequence_data = ds.USImageDescriptionSequence
		if type(USImageDescriptionSequence_data) == Sequence:
			for i1 in range(0, len(USImageDescriptionSequence_data)):
				if verbose:
					log.append( " USImageDescriptionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = USImageDescriptionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"USImageDescriptionMacro", "FrameType", 
						verbose, log, ElementDictionary, 
									4, 0xFFFFFFFF)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USImageDescriptionMacro success after verifying FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedFrameType1, 
						verbose, log, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USImageDescriptionMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageAndFrameType2, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USImageDescriptionMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedImageAndFrameType3, 
						verbose, log, 2)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USImageDescriptionMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_CommonEnhancedFrameType4, 
						verbose, log, 3)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USImageDescriptionMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"USImageDescriptionMacro", "VolumetricProperties", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USImageDescriptionMacro success after verifying VolumetricProperties --> "+("success" if partial_success else "failure"))

				if "VolumetricProperties" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["VolumetricProperties"], 
						StringValueTable_CommonCTMRVolumetricPropertiesImageLevel, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USImageDescriptionMacro success after verifying string enumerated values VolumetricProperties --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"USImageDescriptionMacro", "VolumeBasedCalculationTechnique", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USImageDescriptionMacro success after verifying VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

				if "VolumeBasedCalculationTechnique" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyDefinedTerms(ds1["VolumeBasedCalculationTechnique"], 
						StringValueTable_CommonCTMRVolumeBasedCalculationTechniqueImageLevel, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USImageDescriptionMacro success after verifying string defined terms VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_USImageDescriptionMacroForEnhancedUSVolume_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"USImageDescriptionMacroForEnhancedUSVolume")

	partial_success = verifyType1(ds, 
			"USImageDescriptionMacroForEnhancedUSVolume", 
			"USImageDescriptionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "USImageDescriptionMacroForEnhancedUSVolume success after verifying USImageDescriptionSequence" + ("success" if partial_success else "failure")) 
	if "USImageDescriptionSequence" in ds:
		USImageDescriptionSequence_data = ds.USImageDescriptionSequence
		if type(USImageDescriptionSequence_data) == Sequence:
			for i1 in range(0, len(USImageDescriptionSequence_data)):
				if verbose:
					log.append( " USImageDescriptionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = USImageDescriptionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"USImageDescriptionMacroForEnhancedUSVolume", "VolumetricProperties", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USImageDescriptionMacroForEnhancedUSVolume success after verifying VolumetricProperties --> "+("success" if partial_success else "failure"))

				if "VolumetricProperties" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["VolumetricProperties"], 
						StringValueTable_Volume, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USImageDescriptionMacroForEnhancedUSVolume success after verifying string enumerated values VolumetricProperties --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"USImageDescriptionMacroForEnhancedUSVolume", "VolumeBasedCalculationTechnique", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USImageDescriptionMacroForEnhancedUSVolume success after verifying VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

				if "VolumeBasedCalculationTechnique" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["VolumeBasedCalculationTechnique"], 
						StringValueTable_None, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " USImageDescriptionMacroForEnhancedUSVolume success after verifying string enumerated values VolumeBasedCalculationTechnique --> "+("success" if partial_success else "failure"))

	return global_success

def Module_MultiFrameFunctionalGroupsForEnhancedUSVolume_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"MultiFrameFunctionalGroupsForEnhancedUSVolume")

	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForEnhancedUSVolume", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				if Condition_PixelMeasuresSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInSharedFunctionalGroupSequenceRegardlessOfImageType(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PatientOrientationInFrameMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PatientOrientationInFrameMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying PatientOrientationInFrameMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameDisplayShutterMacroOKInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameDisplayShutterMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying FrameDisplayShutterMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedRespiratorySynchronizationMacroInSharedFunctionalGroupSequenceRegardlessOfImageType(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_PlaneOrientationVolumeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying PlaneOrientationVolumeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInSharedFunctionalGroupSequenceAndNotCardiacOrRespiratoryEvent(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ImageDataTypeSequenceNotInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ImageDataTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying ImageDataTypeMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_USImageDescriptionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying USImageDescriptionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_USImageDescriptionMacroForEnhancedUSVolume_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying USImageDescriptionMacroForEnhancedUSVolume"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"MultiFrameFunctionalGroupsForEnhancedUSVolume", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				partial_success =  Macro_FrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying FrameContentMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PixelMeasuresSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying PixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlanePositionSequenceOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PlaneOrientationSequenceOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ReferencedImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ReferencedImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying ReferencedImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_DerivationImageMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_DerivationImageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying DerivationImageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedCardiacSynchronizationMacroInPerFrameFunctionalGroupSequenceRegardlessOfImageType(ds1, parent_ds1, root_ds):
					partial_success =  Macro_CardiacSynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying CardiacSynchronizationMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameVOILUTSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				if Condition_RealWorldValueMappingMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying RealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedContrastBolusUsageMacroInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ContrastBolusUsageMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying ContrastBolusUsageMacro"+ ("success" if partial_success else "failure" ))
				if Condition_PatientOrientationInFrameMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_PatientOrientationInFrameMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying PatientOrientationInFrameMacro"+ ("success" if partial_success else "failure" ))
				if Condition_FrameDisplayShutterMacroOKInPerFrameFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_FrameDisplayShutterMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying FrameDisplayShutterMacro"+ ("success" if partial_success else "failure" ))
				if Condition_NeedRespiratorySynchronizationMacroInPerFrameFunctionalGroupSequenceRegardlessOfImageType(ds1, parent_ds1, root_ds):
					partial_success =  Macro_RespiratorySynchronizationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying RespiratorySynchronizationMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_PlanePositionVolumeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying PlanePositionVolumeMacro"+ ("success" if partial_success else "failure" ))
				if Condition_TemporalPositionMacroOKInPerFrameFunctionalGroupSequenceAndNotCardiacOrRespiratoryEvent(ds1, parent_ds1, root_ds):
					partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
				if Condition_ImageDataTypeSequenceNotInSharedFunctionalGroupSequence(ds1, parent_ds1, root_ds):
					partial_success =  Macro_ImageDataTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " MultiFrameFunctionalGroupsForEnhancedUSVolume success after verifying ImageDataTypeMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Module_QTUSEnhancedUltrasoundVolumeProfilePatient_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"QTUSEnhancedUltrasoundVolumeProfilePatient")

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfilePatient", "IssuerOfPatientID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfilePatient success after verifying IssuerOfPatientID --> "+("success" if partial_success else "failure"))

	return global_success

def Module_QTUSEnhancedUltrasoundVolumeProfileStudy_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"QTUSEnhancedUltrasoundVolumeProfileStudy")

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileStudy", "StudyDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying StudyDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileStudy", "StudyTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying StudyTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileStudy", "StudyID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying StudyID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileStudy", "AccessionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying AccessionNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileStudy", "StudyDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying StudyDescription --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileStudy", 
			"ProcedureCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying ProcedureCodeSequence" + ("success" if partial_success else "failure")) 
	if "ProcedureCodeSequence" in ds:
		ProcedureCodeSequence_data = ds.ProcedureCodeSequence
		if type(ProcedureCodeSequence_data) == Sequence:
			for i1 in range(0, len(ProcedureCodeSequence_data)):
				if verbose:
					log.append( " ProcedureCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ProcedureCodeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileStudy", "CodeValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying CodeValue --> "+("success" if partial_success else "failure"))

				if "CodeValue" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeValue"], 
						StringValueTable_CodeValueForLOINCBreastUltrasound, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying string enumerated values CodeValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileStudy", "CodingSchemeDesignator", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				if "CodingSchemeDesignator" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodingSchemeDesignator"], 
						StringValueTable_CodingSchemeDesignatorLOINC, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying string enumerated values CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileStudy", "CodeMeaning", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying CodeMeaning --> "+("success" if partial_success else "failure"))

				if "CodeMeaning" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeMeaning"], 
						StringValueTable_CodeMeaningForLOINCBreastUltrasound, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying string enumerated values CodeMeaning --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileStudy", "PatientSize", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying PatientSize --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileStudy", "PatientWeight", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileStudy success after verifying PatientWeight --> "+("success" if partial_success else "failure"))

	return global_success

def Module_QTUSEnhancedUltrasoundVolumeProfileSeries_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"QTUSEnhancedUltrasoundVolumeProfileSeries")

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileSeries", "SeriesNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileSeries success after verifying SeriesNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileSeries", "Laterality", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileSeries success after verifying Laterality --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileSeries", "SeriesDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileSeries success after verifying SeriesDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileSeries", "SeriesTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileSeries success after verifying SeriesTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileSeries", "SeriesDescription", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileSeries success after verifying SeriesDescription --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileSeries", "OperatorsName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileSeries success after verifying OperatorsName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileSeries", "BodyPartExamined", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileSeries success after verifying BodyPartExamined --> "+("success" if partial_success else "failure"))

	if "BodyPartExamined" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["BodyPartExamined"], 
			StringValueTable_BodyPartExaminedBreast, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileSeries success after verifying string enumerated values BodyPartExamined --> "+("success" if partial_success else "failure"))

	return global_success

def Module_QTUSEnhancedUltrasoundVolumeProfileFrameOfReference_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"QTUSEnhancedUltrasoundVolumeProfileFrameOfReference")

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileFrameOfReference", "UltrasoundAcquisitionGeometry", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying UltrasoundAcquisitionGeometry --> "+("success" if partial_success else "failure"))

	if "UltrasoundAcquisitionGeometry" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["UltrasoundAcquisitionGeometry"], 
			StringValueTable_UltrasoundAcquisitionGeometryPatient, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying string enumerated values UltrasoundAcquisitionGeometry --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileFrameOfReference", "VolumeToTransducerRelationship", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying VolumeToTransducerRelationship --> "+("success" if partial_success else "failure"))

	if "VolumeToTransducerRelationship" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["VolumeToTransducerRelationship"], 
			StringValueTable_VolumeToTransducerRelationshipFixed, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying string enumerated values VolumeToTransducerRelationship --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileFrameOfReference", "VolumeToTransducerMappingMatrix", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_One, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 4)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_One, 
			verbose, log, 5)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 6)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 7)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 8)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 9)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_One, 
			verbose, log, 10)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 11)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 12)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 13)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 14)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTransducerMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTransducerMappingMatrix"], 
			BinaryValueDescription_One, 
			verbose, log, 15)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTransducerMappingMatrix --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileFrameOfReference", "PatientFrameOfReferenceSource", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying PatientFrameOfReferenceSource --> "+("success" if partial_success else "failure"))

	if "PatientFrameOfReferenceSource" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PatientFrameOfReferenceSource"], 
			StringValueTable_PatientFrameOfReferenceSourceTable, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying string enumerated values PatientFrameOfReferenceSource --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileFrameOfReference", "TableFrameOfReferenceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying TableFrameOfReferenceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileFrameOfReference", "VolumeToTableMappingMatrix", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_One, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 4)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_One, 
			verbose, log, 5)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 6)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 7)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 8)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 9)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_One, 
			verbose, log, 10)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 11)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 12)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 13)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_Zero, 
			verbose, log, 14)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))


	if "VolumeToTableMappingMatrix" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["VolumeToTableMappingMatrix"], 
			BinaryValueDescription_One, 
			verbose, log, 15)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying binary enumerated values VolumeToTableMappingMatrix --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileFrameOfReference", "SynchronizationFrameOfReferenceUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying SynchronizationFrameOfReferenceUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileFrameOfReference", "SynchronizationTrigger", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying SynchronizationTrigger --> "+("success" if partial_success else "failure"))

	if "SynchronizationTrigger" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SynchronizationTrigger"], 
			StringValueTable_SynchronizationTriggerNoTrigger, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying string enumerated values SynchronizationTrigger --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileFrameOfReference", "AcquisitionTimeSynchronized", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying AcquisitionTimeSynchronized --> "+("success" if partial_success else "failure"))

	if "AcquisitionTimeSynchronized" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["AcquisitionTimeSynchronized"], 
			StringValueTable_NoLetter, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileFrameOfReference success after verifying string enumerated values AcquisitionTimeSynchronized --> "+("success" if partial_success else "failure"))

	return global_success

def Module_QTUSEnhancedUltrasoundVolumeProfileEquipment_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"QTUSEnhancedUltrasoundVolumeProfileEquipment")

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileEquipment", "Manufacturer", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileEquipment success after verifying Manufacturer --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileEquipment", "InstitutionName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileEquipment success after verifying InstitutionName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileEquipment", "InstitutionAddress", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileEquipment success after verifying InstitutionAddress --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileEquipment", "StationName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileEquipment success after verifying StationName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileEquipment", "InstitutionalDepartmentName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileEquipment success after verifying InstitutionalDepartmentName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileEquipment", "ManufacturerModelName", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileEquipment success after verifying ManufacturerModelName --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileEquipment", "DeviceSerialNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileEquipment success after verifying DeviceSerialNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileEquipment", "SoftwareVersions", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileEquipment success after verifying SoftwareVersions --> "+("success" if partial_success else "failure"))

	return global_success

def Module_QTUSEnhancedUltrasoundVolumeProfileInstance_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Module") +"QTUSEnhancedUltrasoundVolumeProfileInstance")

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "InstanceNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying InstanceNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "ContentDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying ContentDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "ContentTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying ContentTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "ImageType", 
			verbose, log, ElementDictionary, 
			4, 4)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType1OriginalOnly, 
			verbose, log, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_ImageType2PrimaryOnly, 
			verbose, log, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_QTUSImageAndFrameTypeValue3, 
			verbose, log, 2)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))


	if "ImageType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["ImageType"], 
			StringValueTable_EmptyValue, 
			verbose, log, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values ImageType --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "AcquisitionNumber", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying AcquisitionNumber --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "AcquisitionDateTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying AcquisitionDateTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "BurnedInAnnotation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying BurnedInAnnotation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "RecognizableVisualFeatures", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying RecognizableVisualFeatures --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "LossyImageCompression", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying LossyImageCompression --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "PresentationLUTShape", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying PresentationLUTShape --> "+("success" if partial_success else "failure"))

	if "PresentationLUTShape" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PresentationLUTShape"], 
			StringValueTable_IdentityPresentationLUTShape, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values PresentationLUTShape --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "BitsAllocated", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying BitsAllocated --> "+("success" if partial_success else "failure"))

	if "BitsAllocated" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsAllocated"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying binary enumerated values BitsAllocated --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "BitsStored", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying BitsStored --> "+("success" if partial_success else "failure"))

	if "BitsStored" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["BitsStored"], 
			BinaryValueDescription_BitsAre16, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying binary enumerated values BitsStored --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "HighBit", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying HighBit --> "+("success" if partial_success else "failure"))

	if "HighBit" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["HighBit"], 
			BinaryValueDescription_BitsAre15, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying binary enumerated values HighBit --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "PixelRepresentation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying PixelRepresentation --> "+("success" if partial_success else "failure"))

	if "PixelRepresentation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["PixelRepresentation"], 
			BinaryValueDescription_PixelRepresentationUnsigned, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying binary enumerated values PixelRepresentation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "PositionMeasuringDeviceUsed", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying PositionMeasuringDeviceUsed --> "+("success" if partial_success else "failure"))

	if "PositionMeasuringDeviceUsed" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["PositionMeasuringDeviceUsed"], 
			StringValueTable_PositionMeasuringDeviceUsedRigid, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values PositionMeasuringDeviceUsed --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", 
			"ViewCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying ViewCodeSequence" + ("success" if partial_success else "failure")) 
	if "ViewCodeSequence" in ds:
		ViewCodeSequence_data = ds.ViewCodeSequence
		if type(ViewCodeSequence_data) == Sequence:
			for i1 in range(0, len(ViewCodeSequence_data)):
				if verbose:
					log.append( " ViewCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ViewCodeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodeValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodeValue --> "+("success" if partial_success else "failure"))

				if "CodeValue" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeValue"], 
						StringValueTable_CoronalCodeValue, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodingSchemeDesignator", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				if "CodingSchemeDesignator" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodingSchemeDesignator"], 
						StringValueTable_CoronalCodingSchemeDesignator, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodeMeaning", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodeMeaning --> "+("success" if partial_success else "failure"))

				if "CodeMeaning" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeMeaning"], 
						StringValueTable_CoronalCodeMeaning, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeMeaning --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", 
			"AnatomicRegionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying AnatomicRegionSequence" + ("success" if partial_success else "failure")) 
	if "AnatomicRegionSequence" in ds:
		AnatomicRegionSequence_data = ds.AnatomicRegionSequence
		if type(AnatomicRegionSequence_data) == Sequence:
			for i1 in range(0, len(AnatomicRegionSequence_data)):
				if verbose:
					log.append( " AnatomicRegionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = AnatomicRegionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodeValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodeValue --> "+("success" if partial_success else "failure"))

				if "CodeValue" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeValue"], 
						StringValueTable_BreastCodeValue, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodingSchemeDesignator", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				if "CodingSchemeDesignator" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodingSchemeDesignator"], 
						StringValueTable_BreastCodingSchemeDesignator, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodeMeaning", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodeMeaning --> "+("success" if partial_success else "failure"))

				if "CodeMeaning" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeMeaning"], 
						StringValueTable_BreastCodeMeaning, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeMeaning --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", 
			"TransducerScanPatternCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying TransducerScanPatternCodeSequence" + ("success" if partial_success else "failure")) 
	if "TransducerScanPatternCodeSequence" in ds:
		TransducerScanPatternCodeSequence_data = ds.TransducerScanPatternCodeSequence
		if type(TransducerScanPatternCodeSequence_data) == Sequence:
			for i1 in range(0, len(TransducerScanPatternCodeSequence_data)):
				if verbose:
					log.append( " TransducerScanPatternCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TransducerScanPatternCodeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodeValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodeValue --> "+("success" if partial_success else "failure"))

				if "CodeValue" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeValue"], 
						StringValueTable_TransducerScanPatternCodeSequenceCodeValue, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodingSchemeDesignator", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				if "CodingSchemeDesignator" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodingSchemeDesignator"], 
						StringValueTable_TransducerScanPatternCodeSequenceCodingSchemeDesignator, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodeMeaning", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodeMeaning --> "+("success" if partial_success else "failure"))

				if "CodeMeaning" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeMeaning"], 
						StringValueTable_TransducerScanPatternCodeSequenceCodeMeaning, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeMeaning --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", 
			"TransducerGeometryCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying TransducerGeometryCodeSequence" + ("success" if partial_success else "failure")) 
	if "TransducerGeometryCodeSequence" in ds:
		TransducerGeometryCodeSequence_data = ds.TransducerGeometryCodeSequence
		if type(TransducerGeometryCodeSequence_data) == Sequence:
			for i1 in range(0, len(TransducerGeometryCodeSequence_data)):
				if verbose:
					log.append( " TransducerGeometryCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TransducerGeometryCodeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodeValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodeValue --> "+("success" if partial_success else "failure"))


				if Condition_ImageTypeValue3IsSoundSpeedOrAttenuation(ds1, parent_ds1, root_ds):
					if "CodeValue" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodeValue"], 
							StringValueTable_TransducerGeometryCodeSequenceCodeValueForTransmission, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeValue --> "+("success" if partial_success else "failure"))


				if Condition_ImageTypeValue3IsTissueIntensity(ds1, parent_ds1, root_ds):
					if "CodeValue" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodeValue"], 
							StringValueTable_TransducerGeometryCodeSequenceCodeValueForReflection, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodingSchemeDesignator", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				if "CodingSchemeDesignator" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodingSchemeDesignator"], 
						StringValueTable_TransducerGeometryCodeSequenceCodingSchemeDesignator, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodeMeaning", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodeMeaning --> "+("success" if partial_success else "failure"))


				if Condition_ImageTypeValue3IsSoundSpeedOrAttenuation(ds1, parent_ds1, root_ds):
					if "CodeMeaning" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodeMeaning"], 
							StringValueTable_TransducerGeometryCodeSequenceCodeMeaningForTransmission, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeMeaning --> "+("success" if partial_success else "failure"))


				if Condition_ImageTypeValue3IsTissueIntensity(ds1, parent_ds1, root_ds):
					if "CodeMeaning" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["CodeMeaning"], 
							StringValueTable_TransducerGeometryCodeSequenceCodeMeaningForReflection, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeMeaning --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", 
			"TransducerBeamSteeringCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying TransducerBeamSteeringCodeSequence" + ("success" if partial_success else "failure")) 
	if "TransducerBeamSteeringCodeSequence" in ds:
		TransducerBeamSteeringCodeSequence_data = ds.TransducerBeamSteeringCodeSequence
		if type(TransducerBeamSteeringCodeSequence_data) == Sequence:
			for i1 in range(0, len(TransducerBeamSteeringCodeSequence_data)):
				if verbose:
					log.append( " TransducerBeamSteeringCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TransducerBeamSteeringCodeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodeValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodeValue --> "+("success" if partial_success else "failure"))

				if "CodeValue" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeValue"], 
						StringValueTable_TransducerBeamSteeringCodeSequenceCodeValue, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodingSchemeDesignator", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				if "CodingSchemeDesignator" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodingSchemeDesignator"], 
						StringValueTable_TransducerBeamSteeringCodeSequenceCodingSchemeDesignator, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodeMeaning", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodeMeaning --> "+("success" if partial_success else "failure"))

				if "CodeMeaning" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeMeaning"], 
						StringValueTable_TransducerBeamSteeringCodeSequenceCodeMeaning, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeMeaning --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", 
			"TransducerApplicationCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying TransducerApplicationCodeSequence" + ("success" if partial_success else "failure")) 
	if "TransducerApplicationCodeSequence" in ds:
		TransducerApplicationCodeSequence_data = ds.TransducerApplicationCodeSequence
		if type(TransducerApplicationCodeSequence_data) == Sequence:
			for i1 in range(0, len(TransducerApplicationCodeSequence_data)):
				if verbose:
					log.append( " TransducerApplicationCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TransducerApplicationCodeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodeValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodeValue --> "+("success" if partial_success else "failure"))

				if "CodeValue" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeValue"], 
						StringValueTable_TransducerApplicationCodeSequenceCodeValue, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodingSchemeDesignator", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				if "CodingSchemeDesignator" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodingSchemeDesignator"], 
						StringValueTable_TransducerApplicationCodeSequenceCodingSchemeDesignator, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "CodeMeaning", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying CodeMeaning --> "+("success" if partial_success else "failure"))

				if "CodeMeaning" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeMeaning"], 
						StringValueTable_TransducerApplicationCodeSequenceCodeMeaning, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values CodeMeaning --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", 
			"DimensionOrganizationSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying DimensionOrganizationSequence" + ("success" if partial_success else "failure")) 
	if "DimensionOrganizationSequence" in ds:
		DimensionOrganizationSequence_data = ds.DimensionOrganizationSequence
		if type(DimensionOrganizationSequence_data) == Sequence:
			for i1 in range(0, len(DimensionOrganizationSequence_data)):
				if verbose:
					log.append( " DimensionOrganizationSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DimensionOrganizationSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "DimensionOrganizationUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying DimensionOrganizationUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "DimensionOrganizationType", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying DimensionOrganizationType --> "+("success" if partial_success else "failure"))

	if "DimensionOrganizationType" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["DimensionOrganizationType"], 
			StringValueTable_DimensionOrganizationType3D, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values DimensionOrganizationType --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", 
			"DimensionIndexSequence", 
			verbose, log, ElementDictionary, 
			3, 3)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying DimensionIndexSequence" + ("success" if partial_success else "failure")) 
	if "DimensionIndexSequence" in ds:
		DimensionIndexSequence_data = ds.DimensionIndexSequence
		if type(DimensionIndexSequence_data) == Sequence:
			for i1 in range(0, len(DimensionIndexSequence_data)):
				if verbose:
					log.append( " DimensionIndexSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = DimensionIndexSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "DimensionIndexPointer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying DimensionIndexPointer --> "+("success" if partial_success else "failure"))

				if "DimensionIndexPointer" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_tag(ds1["DimensionIndexPointer"], 
						TagValueDescription_QTUSDimensionOrganization3DDimensionIndexPointerValues, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying tag enumerated values DimensionIndexPointer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "FunctionalGroupPointer", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying FunctionalGroupPointer --> "+("success" if partial_success else "failure"))

				if "FunctionalGroupPointer" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_tag(ds1["FunctionalGroupPointer"], 
						TagValueDescription_QTUSDimensionOrganization3DFunctionalGroupPointerValues, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying tag enumerated values FunctionalGroupPointer --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "DimensionOrganizationUID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying DimensionOrganizationUID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSEnhancedUltrasoundVolumeProfileInstance", "DimensionDescriptionLabel", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying DimensionDescriptionLabel --> "+("success" if partial_success else "failure"))

				if "DimensionDescriptionLabel" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["DimensionDescriptionLabel"], 
						StringValueTable_QTUSDimensionDescriptionLabel, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values DimensionDescriptionLabel --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "SpecificCharacterSet", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	if "SpecificCharacterSet" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["SpecificCharacterSet"], 
			StringValueTable_SpecificCharacterSetISOIR100, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying string enumerated values SpecificCharacterSet --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "InstanceCreationDate", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying InstanceCreationDate --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "InstanceCreationTime", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying InstanceCreationTime --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "InstanceCreatorUID", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying InstanceCreatorUID --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", "TimezoneOffsetFromUTC", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying TimezoneOffsetFromUTC --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", 
			"SharedFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying SharedFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "SharedFunctionalGroupsSequence" in ds:
		SharedFunctionalGroupsSequence_data = ds.SharedFunctionalGroupsSequence
		if type(SharedFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(SharedFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " SharedFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = SharedFunctionalGroupsSequence_data[i1]
				partial_success =  Macro_QTUSPixelMeasuresMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying QTUSPixelMeasuresMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_PlaneOrientationMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying PlaneOrientationMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_FrameVOILUTMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying FrameVOILUTMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_QTUSRealWorldValueMappingMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying QTUSRealWorldValueMappingMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_PlaneOrientationVolumeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying PlaneOrientationVolumeMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_TemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying TemporalPositionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_QTUSTemporalPositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying QTUSTemporalPositionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_QTUSImageDataTypeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying QTUSImageDataTypeMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_QTUSUSImageDescriptionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying QTUSUSImageDescriptionMacro"+ ("success" if partial_success else "failure" ))
	partial_success = verifyType1(ds, 
			"QTUSEnhancedUltrasoundVolumeProfileInstance", 
			"PerFrameFunctionalGroupsSequence", 
			verbose, log, ElementDictionary, 
			1, 0xFFFFFFFF)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying PerFrameFunctionalGroupsSequence" + ("success" if partial_success else "failure")) 
	if "PerFrameFunctionalGroupsSequence" in ds:
		PerFrameFunctionalGroupsSequence_data = ds.PerFrameFunctionalGroupsSequence
		if type(PerFrameFunctionalGroupsSequence_data) == Sequence:
			for i1 in range(0, len(PerFrameFunctionalGroupsSequence_data)):
				if verbose:
					log.append( " PerFrameFunctionalGroupsSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PerFrameFunctionalGroupsSequence_data[i1]
				partial_success =  Macro_QTUSFrameContentMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying QTUSFrameContentMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_PlanePositionMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying PlanePositionMacro"+ ("success" if partial_success else "failure" ))
				partial_success =  Macro_PlanePositionVolumeMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " QTUSEnhancedUltrasoundVolumeProfileInstance success after verifying PlanePositionVolumeMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_QTUSFrameContentMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"QTUSFrameContentMacro")

	partial_success = verifyType1(ds, 
			"QTUSFrameContentMacro", 
			"FrameContentSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSFrameContentMacro success after verifying FrameContentSequence" + ("success" if partial_success else "failure")) 
	if "FrameContentSequence" in ds:
		FrameContentSequence_data = ds.FrameContentSequence
		if type(FrameContentSequence_data) == Sequence:
			for i1 in range(0, len(FrameContentSequence_data)):
				if verbose:
					log.append( " FrameContentSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = FrameContentSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSFrameContentMacro", "FrameAcquisitionNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSFrameContentMacro success after verifying FrameAcquisitionNumber --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSFrameContentMacro", "FrameReferenceDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSFrameContentMacro success after verifying FrameReferenceDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSFrameContentMacro", "FrameAcquisitionDateTime", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSFrameContentMacro success after verifying FrameAcquisitionDateTime --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSFrameContentMacro", "FrameAcquisitionDuration", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSFrameContentMacro success after verifying FrameAcquisitionDuration --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSFrameContentMacro", "DimensionIndexValues", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSFrameContentMacro success after verifying DimensionIndexValues --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSFrameContentMacro", "TemporalPositionIndex", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSFrameContentMacro success after verifying TemporalPositionIndex --> "+("success" if partial_success else "failure"))

				if "TemporalPositionIndex" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["TemporalPositionIndex"], 
						BinaryValueDescription_One, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSFrameContentMacro success after verifying binary enumerated values TemporalPositionIndex --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSFrameContentMacro", "StackID", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSFrameContentMacro success after verifying StackID --> "+("success" if partial_success else "failure"))

				if "StackID" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["StackID"], 
						StringValueTable_DigitOne, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSFrameContentMacro success after verifying string enumerated values StackID --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSFrameContentMacro", "InStackPositionNumber", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSFrameContentMacro success after verifying InStackPositionNumber --> "+("success" if partial_success else "failure"))

				if "InStackPositionNumber" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["InStackPositionNumber"], 
						verbose, log, -1, False)

	return global_success

def Macro_QTUSPixelMeasuresMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"QTUSPixelMeasuresMacro")

	partial_success = verifyType1(ds, 
			"QTUSPixelMeasuresMacro", 
			"PixelMeasuresSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSPixelMeasuresMacro success after verifying PixelMeasuresSequence" + ("success" if partial_success else "failure")) 
	if "PixelMeasuresSequence" in ds:
		PixelMeasuresSequence_data = ds.PixelMeasuresSequence
		if type(PixelMeasuresSequence_data) == Sequence:
			for i1 in range(0, len(PixelMeasuresSequence_data)):
				if verbose:
					log.append( " PixelMeasuresSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = PixelMeasuresSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSPixelMeasuresMacro", "PixelSpacing", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSPixelMeasuresMacro success after verifying PixelSpacing --> "+("success" if partial_success else "failure"))

				if "PixelSpacing" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["PixelSpacing"], 
						verbose, log, -1, False)

				partial_success =  		verifyType1(ds1, 
						"QTUSPixelMeasuresMacro", "SliceThickness", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSPixelMeasuresMacro success after verifying SliceThickness --> "+("success" if partial_success else "failure"))

				if "SliceThickness" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["SliceThickness"], 
						verbose, log, -1, False)

				partial_success =  		verifyType1(ds1, 
						"QTUSPixelMeasuresMacro", "SpacingBetweenSlices", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSPixelMeasuresMacro success after verifying SpacingBetweenSlices --> "+("success" if partial_success else "failure"))

				if "SpacingBetweenSlices" not in ds1: 
					partial_success = False 
				else: 
					partial_success = verifyNotZero(ds1["SpacingBetweenSlices"], 
						verbose, log, -1, False)

	return global_success

def Macro_QTUSRealWorldValueMappingMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"QTUSRealWorldValueMappingMacro")

	partial_success = verifyType1(ds, 
			"QTUSRealWorldValueMappingMacro", 
			"RealWorldValueMappingSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSRealWorldValueMappingMacro success after verifying RealWorldValueMappingSequence" + ("success" if partial_success else "failure")) 
	if "RealWorldValueMappingSequence" in ds:
		RealWorldValueMappingSequence_data = ds.RealWorldValueMappingSequence
		if type(RealWorldValueMappingSequence_data) == Sequence:
			for i1 in range(0, len(RealWorldValueMappingSequence_data)):
				if verbose:
					log.append( " RealWorldValueMappingSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = RealWorldValueMappingSequence_data[i1]
				partial_success =  Macro_QTUSRealWorldValueMappingItemMacro_verify(ds1, parent_ds1, root_ds, verbose, log, ElementDictionary)

				if verbose:
					log.append( " QTUSRealWorldValueMappingMacro success after verifying QTUSRealWorldValueMappingItemMacro"+ ("success" if partial_success else "failure" ))
	return global_success

def Macro_QTUSRealWorldValueMappingItemMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"QTUSRealWorldValueMappingItemMacro")

	partial_success =  		verifyType1(ds, 
			"QTUSRealWorldValueMappingItemMacro", "RealWorldValueFirstValueMapped", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSRealWorldValueMappingItemMacro success after verifying RealWorldValueFirstValueMapped --> "+("success" if partial_success else "failure"))

	if "RealWorldValueFirstValueMapped" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["RealWorldValueFirstValueMapped"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSRealWorldValueMappingItemMacro success after verifying binary enumerated values RealWorldValueFirstValueMapped --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSRealWorldValueMappingItemMacro", "RealWorldValueLastValueMapped", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSRealWorldValueMappingItemMacro success after verifying RealWorldValueLastValueMapped --> "+("success" if partial_success else "failure"))

	if "RealWorldValueLastValueMapped" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["RealWorldValueLastValueMapped"], 
			BinaryValueDescription_FFFF, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSRealWorldValueMappingItemMacro success after verifying binary enumerated values RealWorldValueLastValueMapped --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSRealWorldValueMappingItemMacro", "RealWorldValueIntercept", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSRealWorldValueMappingItemMacro success after verifying RealWorldValueIntercept --> "+("success" if partial_success else "failure"))

	if "RealWorldValueIntercept" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues_uint16(ds["RealWorldValueIntercept"], 
			BinaryValueDescription_Zero, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSRealWorldValueMappingItemMacro success after verifying binary enumerated values RealWorldValueIntercept --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSRealWorldValueMappingItemMacro", "RealWorldValueSlope", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSRealWorldValueMappingItemMacro success after verifying RealWorldValueSlope --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSRealWorldValueMappingItemMacro", "LUTExplanation", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSRealWorldValueMappingItemMacro success after verifying LUTExplanation --> "+("success" if partial_success else "failure"))

	if "LUTExplanation" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LUTExplanation"], 
			StringValueTable_QTUSRealWorldValueMappingLUTExplanation, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSRealWorldValueMappingItemMacro success after verifying string enumerated values LUTExplanation --> "+("success" if partial_success else "failure"))

	partial_success =  		verifyType1(ds, 
			"QTUSRealWorldValueMappingItemMacro", "LUTLabel", 
			verbose, log, ElementDictionary, 
			0, 0)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSRealWorldValueMappingItemMacro success after verifying LUTLabel --> "+("success" if partial_success else "failure"))

	if "LUTLabel" not in ds: 
		partial_success = False 
	else:
		partial_success = verifyEnumValues(ds["LUTLabel"], 
			StringValueTable_QTUSRealWorldValueMappingLUTLabel, 
			verbose, log, -1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( " QTUSRealWorldValueMappingItemMacro success after verifying string enumerated values LUTLabel --> "+("success" if partial_success else "failure"))

	partial_success = verifyType1(ds, 
			"QTUSRealWorldValueMappingItemMacro", 
			"MeasurementUnitsCodeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSRealWorldValueMappingItemMacro success after verifying MeasurementUnitsCodeSequence" + ("success" if partial_success else "failure")) 
	if "MeasurementUnitsCodeSequence" in ds:
		MeasurementUnitsCodeSequence_data = ds.MeasurementUnitsCodeSequence
		if type(MeasurementUnitsCodeSequence_data) == Sequence:
			for i1 in range(0, len(MeasurementUnitsCodeSequence_data)):
				if verbose:
					log.append( " MeasurementUnitsCodeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = MeasurementUnitsCodeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSRealWorldValueMappingItemMacro", "CodeValue", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSRealWorldValueMappingItemMacro success after verifying CodeValue --> "+("success" if partial_success else "failure"))

				if "CodeValue" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeValue"], 
						StringValueTable_QTUSRealWorldValueMappingMeasurementUnitsCodeValue, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSRealWorldValueMappingItemMacro success after verifying string enumerated values CodeValue --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSRealWorldValueMappingItemMacro", "CodingSchemeDesignator", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSRealWorldValueMappingItemMacro success after verifying CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				if "CodingSchemeDesignator" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodingSchemeDesignator"], 
						StringValueTable_CodingSchemeDesignatorUCUM, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSRealWorldValueMappingItemMacro success after verifying string enumerated values CodingSchemeDesignator --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSRealWorldValueMappingItemMacro", "CodeMeaning", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSRealWorldValueMappingItemMacro success after verifying CodeMeaning --> "+("success" if partial_success else "failure"))

				if "CodeMeaning" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["CodeMeaning"], 
						StringValueTable_QTUSRealWorldValueMappingMeasurementUnitsCodeMeaning, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSRealWorldValueMappingItemMacro success after verifying string enumerated values CodeMeaning --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_QTUSImageDataTypeMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"QTUSImageDataTypeMacro")

	partial_success = verifyType1(ds, 
			"QTUSImageDataTypeMacro", 
			"ImageDataTypeSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSImageDataTypeMacro success after verifying ImageDataTypeSequence" + ("success" if partial_success else "failure")) 
	if "ImageDataTypeSequence" in ds:
		ImageDataTypeSequence_data = ds.ImageDataTypeSequence
		if type(ImageDataTypeSequence_data) == Sequence:
			for i1 in range(0, len(ImageDataTypeSequence_data)):
				if verbose:
					log.append( " ImageDataTypeSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = ImageDataTypeSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSImageDataTypeMacro", "DataType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSImageDataTypeMacro success after verifying DataType --> "+("success" if partial_success else "failure"))

				if "DataType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["DataType"], 
						StringValueTable_QTUSEnhancedUSVolumeDataType, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSImageDataTypeMacro success after verifying string enumerated values DataType --> "+("success" if partial_success else "failure"))


				if Condition_ImageTypeValue3IsSoundSpeed(ds1, parent_ds1, root_ds):
					if "DataType" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["DataType"], 
							StringValueTable_EnhancedUSVolumeDataTypeSoundSpeed, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSImageDataTypeMacro success after verifying string enumerated values DataType --> "+("success" if partial_success else "failure"))


				if Condition_ImageTypeValue3IsAttenuation(ds1, parent_ds1, root_ds):
					if "DataType" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["DataType"], 
							StringValueTable_EnhancedUSVolumeDataTypeAttenuation, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSImageDataTypeMacro success after verifying string enumerated values DataType --> "+("success" if partial_success else "failure"))


				if Condition_ImageTypeValue3IsTissueIntensity(ds1, parent_ds1, root_ds):
					if "DataType" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["DataType"], 
							StringValueTable_EnhancedUSVolumeDataTypeTissueIntensity, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSImageDataTypeMacro success after verifying string enumerated values DataType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1(ds1, 
						"QTUSImageDataTypeMacro", "AliasedDataType", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSImageDataTypeMacro success after verifying AliasedDataType --> "+("success" if partial_success else "failure"))

				if "AliasedDataType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["AliasedDataType"], 
						StringValueTable_NoFull, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSImageDataTypeMacro success after verifying string enumerated values AliasedDataType --> "+("success" if partial_success else "failure"))

				partial_success =  		verifyType1C(ds1, 
						"QTUSImageDataTypeMacro", "ZeroVelocityPixelValue", 
						verbose, log, ElementDictionary, 
						Condition_ImageTypeValue3IsSoundSpeed, 
						False, 
						parent_ds1, root_ds, 
						0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSImageDataTypeMacro success after verifying ZeroVelocityPixelValue --> "+("success" if partial_success else "failure"))

				if Condition_ImageTypeValue3IsSoundSpeed(ds1, parent_ds1, root_ds):
					if "ZeroVelocityPixelValue" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues_uint16(ds1["ZeroVelocityPixelValue"], 
							BinaryValueDescription_Zero, 
							verbose, log, -1)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSImageDataTypeMacro success after verifying binary enumerated values ZeroVelocityPixelValue --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_QTUSTemporalPositionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"QTUSTemporalPositionMacro")

	partial_success = verifyType1(ds, 
			"QTUSTemporalPositionMacro", 
			"TemporalPositionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSTemporalPositionMacro success after verifying TemporalPositionSequence" + ("success" if partial_success else "failure")) 
	if "TemporalPositionSequence" in ds:
		TemporalPositionSequence_data = ds.TemporalPositionSequence
		if type(TemporalPositionSequence_data) == Sequence:
			for i1 in range(0, len(TemporalPositionSequence_data)):
				if verbose:
					log.append( " TemporalPositionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = TemporalPositionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSTemporalPositionMacro", "TemporalPositionTimeOffset", 
						verbose, log, ElementDictionary, 
									0, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSTemporalPositionMacro success after verifying TemporalPositionTimeOffset --> "+("success" if partial_success else "failure"))

				if "TemporalPositionTimeOffset" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues_uint16(ds1["TemporalPositionTimeOffset"], 
						BinaryValueDescription_Zero, 
						verbose, log, -1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSTemporalPositionMacro success after verifying binary enumerated values TemporalPositionTimeOffset --> "+("success" if partial_success else "failure"))

	return global_success

def Macro_QTUSUSImageDescriptionMacro_verify(ds:Dataset , parent_ds:Dataset, root_ds:Dataset, verbose:bool, log:list, ElementDictionary:dict)->bool:
	partial_success = True
	global_success = True

	if verbose:
		log.append( MMsgDC("Verifying") + MMsgDC("Macro") +"QTUSUSImageDescriptionMacro")

	partial_success = verifyType1(ds, 
			"QTUSUSImageDescriptionMacro", 
			"USImageDescriptionSequence", 
			verbose, log, ElementDictionary, 
			1, 1)
	global_success = global_success and partial_success 
	if verbose:
		log.append( "QTUSUSImageDescriptionMacro success after verifying USImageDescriptionSequence" + ("success" if partial_success else "failure")) 
	if "USImageDescriptionSequence" in ds:
		USImageDescriptionSequence_data = ds.USImageDescriptionSequence
		if type(USImageDescriptionSequence_data) == Sequence:
			for i1 in range(0, len(USImageDescriptionSequence_data)):
				if verbose:
					log.append( " USImageDescriptionSequence item [{}]".format(i1+1))
				parent_ds1 = ds
				ds1 = USImageDescriptionSequence_data[i1]
				partial_success =  		verifyType1(ds1, 
						"QTUSUSImageDescriptionMacro", "FrameType", 
						verbose, log, ElementDictionary, 
									4, 4)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSUSImageDescriptionMacro success after verifying FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_ImageType1OriginalOnly, 
						verbose, log, 0)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSUSImageDescriptionMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_ImageType2PrimaryOnly, 
						verbose, log, 1)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSUSImageDescriptionMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_QTUSImageAndFrameTypeValue3, 
						verbose, log, 2)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSUSImageDescriptionMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if Condition_ImageTypeValue3IsSoundSpeed(ds1, parent_ds1, root_ds):
					if "FrameType" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["FrameType"], 
							StringValueTable_QTUSImageAndFrameTypeValue3SoundSpeed, 
							verbose, log, 2)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSUSImageDescriptionMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if Condition_ImageTypeValue3IsAttenuation(ds1, parent_ds1, root_ds):
					if "FrameType" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["FrameType"], 
							StringValueTable_QTUSImageAndFrameTypeValue3Attenuation, 
							verbose, log, 2)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSUSImageDescriptionMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if Condition_ImageTypeValue3IsTissueIntensity(ds1, parent_ds1, root_ds):
					if "FrameType" not in ds1: 
						partial_success = False 
					else:
						partial_success = verifyEnumValues(ds1["FrameType"], 
							StringValueTable_QTUSImageAndFrameTypeValue3SoundSpeed, 
							verbose, log, 2)
					global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSUSImageDescriptionMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))


				if "FrameType" not in ds1: 
					partial_success = False 
				else:
					partial_success = verifyEnumValues(ds1["FrameType"], 
						StringValueTable_EmptyValue, 
						verbose, log, 3)
				global_success = global_success and partial_success 
				if verbose:
					log.append( " QTUSUSImageDescriptionMacro success after verifying string enumerated values FrameType --> "+("success" if partial_success else "failure"))

	return global_success

