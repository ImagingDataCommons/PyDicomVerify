# Automatically generated from template - EDITS WILL BE LOST

# Generated by binval.awk with options  

from numpy import *
def BinaryValueDescription_Zero(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "0x0000" 
		return ost
	else:
		return ""

def BinaryValueDescription_One(value:uint16)->str:
	ost = ""
	if value == 0x0001:
		ost += "0x0001" 
		return ost
	else:
		return ""

def BinaryValueDescription_Three(value:uint16)->str:
	ost = ""
	if value == 0x0003:
		ost += "0x0003" 
		return ost
	else:
		return ""

def BinaryValueDescription_FFFF(value:uint16)->str:
	ost = ""
	if value == 0xffff:
		ost += "Inconsistencies may be present" 
		return ost
	else:
		return ""

def BinaryValueDescription_PregnancyStatus(value:uint16)->str:
	ost = ""
	if value == 0x0001:
		ost += "Not Pregnant" 
		return ost
	elif value == 0x0002:
		ost += "Possibly Pregnant" 
		return ost
	elif value == 0x0003:
		ost += "Definitely Pregnant" 
		return ost
	elif value == 0x0004:
		ost += "Unknown" 
		return ost
	else:
		return ""

def BinaryValueDescription_RegionSpatialFormat(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "None" 
		return ost
	elif value == 0x0001:
		ost += "2D (Tissue or Flow)" 
		return ost
	elif value == 0x0002:
		ost += "M-Mode (Tissue or Flow)" 
		return ost
	elif value == 0x0003:
		ost += "Spectral (Tissue or Flow)" 
		return ost
	elif value == 0x0004:
		ost += "Wave Form" 
		return ost
	elif value == 0x0005:
		ost += "Graphics" 
		return ost
	else:
		return ""

def BinaryValueDescription_RegionDataType(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "None" 
		return ost
	elif value == 0x0001:
		ost += "Tissue" 
		return ost
	elif value == 0x0002:
		ost += "Color Flow" 
		return ost
	elif value == 0x0003:
		ost += "PW Spectral Doppler" 
		return ost
	elif value == 0x0004:
		ost += "CW Spectral Doppler" 
		return ost
	elif value == 0x0005:
		ost += "Doppler Mean Trace" 
		return ost
	elif value == 0x0006:
		ost += "Doppler Mode Trace" 
		return ost
	elif value == 0x0007:
		ost += "Doppler Max Trace" 
		return ost
	elif value == 0x0008:
		ost += "Volume Trace" 
		return ost
	elif value == 0x0009:
		ost += "d(volume)/dt Trace" 
		return ost
	elif value == 0x000a:
		ost += "ECG Trace" 
		return ost
	elif value == 0x000b:
		ost += "Pulse Trace" 
		return ost
	elif value == 0x000c:
		ost += "Phonocardiogram Trace" 
		return ost
	elif value == 0x000d:
		ost += "Gray Bar" 
		return ost
	elif value == 0x000e:
		ost += "Color Bar" 
		return ost
	elif value == 0x000f:
		ost += "Integrated Backscatter" 
		return ost
	elif value == 0x0010:
		ost += "Area Trace" 
		return ost
	elif value == 0x0011:
		ost += "d(area)/dt" 
		return ost
	elif value == 0x0012:
		ost += "Other Physiological Amplitude vs. Time Input" 
		return ost
	else:
		return ""

def BinaryBitMapDescription_RegionFlags(value:uint16)->str:
	validmask=uint16(0)
	ost = ""
	validmask = validmask | (1<<0)
	bitvalue=value & uint16(1<<0)
	ost =+ "Priority({}) ".format("Low" if  bitvalue else "High")
	validmask = validmask | (1<<1)
	bitvalue=value & uint16(1<<1)
	ost =+ "Scaling Protection({}) ".format("Protected" if  bitvalue else "Not Protected")
	validmask = validmask | (1<<2)
	bitvalue=value & uint16(1<<2)
	ost =+ "Doppler Scale Type({}) ".format("Frequency" if  bitvalue else "Velocity")
	validmask = validmask | (1<<3)
	bitvalue=value & uint16(1<<3)
	ost =+ "Scrolling Region({}) ".format("Scrolling" if  bitvalue else "Not Scrolling")
	validmask = validmask | (1<<4)
	bitvalue=value & uint16(1<<4)
	ost =+ "Sweeping Region({}) ".format("Sweeping" if  bitvalue else "Not Sweeping")
	if value & ~validmask :
		return ""
	else:
		return ost

def BinaryValueDescription_PixelComponentOrganization(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "Bit Aligned Positions" 
		return ost
	elif value == 0x0001:
		ost += "Ranges" 
		return ost
	elif value == 0x0002:
		ost += "Table Look Up" 
		return ost
	elif value == 0x0003:
		ost += "Code Sequence Look Up" 
		return ost
	else:
		return ""

def BinaryValueDescription_PixelComponentPhysicalUnits(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "None" 
		return ost
	elif value == 0x0001:
		ost += "Percent" 
		return ost
	elif value == 0x0002:
		ost += "dB" 
		return ost
	elif value == 0x0003:
		ost += "cm" 
		return ost
	elif value == 0x0004:
		ost += "seconds" 
		return ost
	elif value == 0x0005:
		ost += "hertz(seconds-1)" 
		return ost
	elif value == 0x0006:
		ost += "dB/seconds" 
		return ost
	elif value == 0x0007:
		ost += "cm/sec" 
		return ost
	elif value == 0x0008:
		ost += "cm2" 
		return ost
	elif value == 0x0009:
		ost += "cm2/sec" 
		return ost
	elif value == 0x000a:
		ost += "cm3" 
		return ost
	elif value == 0x000b:
		ost += "cm3/sec" 
		return ost
	elif value == 0x000c:
		ost += "degrees" 
		return ost
	else:
		return ""

def BinaryValueDescription_PixelComponentDataType(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "None" 
		return ost
	elif value == 0x0001:
		ost += "Tissue" 
		return ost
	elif value == 0x0002:
		ost += "Spectral Doppler" 
		return ost
	elif value == 0x0003:
		ost += "Color Flow Velocity" 
		return ost
	elif value == 0x0004:
		ost += "Color Flow Variance" 
		return ost
	elif value == 0x0005:
		ost += "Color Flow Intensity" 
		return ost
	elif value == 0x0006:
		ost += "Gray Bar" 
		return ost
	elif value == 0x0007:
		ost += "Color Bar" 
		return ost
	elif value == 0x0008:
		ost += "Integrated Backscatter" 
		return ost
	elif value == 0x0009:
		ost += "Computed Border" 
		return ost
	elif value == 0x000A:
		ost += "Tissue Classification" 
		return ost
	else:
		return ""

def BinaryValueDescription_PixelRepresentation(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "unsigned" 
		return ost
	elif value == 0x0001:
		ost += "signed" 
		return ost
	else:
		return ""

def BinaryValueDescription_PixelRepresentationUnsigned(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "unsigned" 
		return ost
	else:
		return ""

def BinaryValueDescription_PlanarConfiguration(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "sequential planes" 
		return ost
	elif value == 0x0001:
		ost += "contiguous planes" 
		return ost
	else:
		return ""

def BinaryValueDescription_USPlanarConfiguration(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "sequential planes" 
		return ost
	elif value == 0x0001:
		ost += "contiguous planes" 
		return ost
	else:
		return ""

def BinaryValueDescription_SamplesPerPixelIsOne(value:uint16)->str:
	ost = ""
	if value == 0x0001:
		ost += "0x0001" 
		return ost
	else:
		return ""

def BinaryValueDescription_SamplesPerPixelIsThree(value:uint16)->str:
	ost = ""
	if value == 0x0003:
		ost += "0x0003" 
		return ost
	else:
		return ""

def BinaryValueDescription_SamplesPerPixelIsOneOrThree(value:uint16)->str:
	ost = ""
	if value == 0x0001:
		ost += "0x0001" 
		return ost
	elif value == 0x0003:
		ost += "0x0003" 
		return ost
	else:
		return ""

def BinaryValueDescription_SamplesPerPixelUsedIsTwo(value:uint16)->str:
	ost = ""
	if value == 0x0002:
		ost += "0x0002" 
		return ost
	else:
		return ""

def BinaryValueDescription_PlanarConfigurationIsColorByPlane(value:uint16)->str:
	ost = ""
	if value == 0x0001:
		ost += "0x0001" 
		return ost
	else:
		return ""

def BinaryValueDescription_PlanarConfigurationIsColorByPixel(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "0x0000" 
		return ost
	else:
		return ""

def BinaryValueDescription_PlanarConfigurationIsColorByPlaneOrPixel(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "0x0000" 
		return ost
	elif value == 0x0001:
		ost += "0x0001" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre32(value:uint16)->str:
	ost = ""
	if value == 32:
		ost += "32" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre64(value:uint16)->str:
	ost = ""
	if value == 64:
		ost += "64" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre16(value:uint16)->str:
	ost = ""
	if value == 0x0010:
		ost += "0x0010" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre15(value:uint16)->str:
	ost = ""
	if value == 0x000f:
		ost += "0x000f" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre8(value:uint16)->str:
	ost = ""
	if value == 0x0008:
		ost += "0x0008" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre7(value:uint16)->str:
	ost = ""
	if value == 0x0007:
		ost += "0x0007" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre12Or16(value:uint16)->str:
	ost = ""
	if value == 0x000c:
		ost += "0x000c" 
		return ost
	elif value == 0x0010:
		ost += "0x0010" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre11Or15(value:uint16)->str:
	ost = ""
	if value == 0x000b:
		ost += "0x000b" 
		return ost
	elif value == 0x000f:
		ost += "0x000f" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre8Or16(value:uint16)->str:
	ost = ""
	if value == 0x0008:
		ost += "0x0008" 
		return ost
	elif value == 0x0010:
		ost += "0x0010" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre16Or32(value:uint16)->str:
	ost = ""
	if value == 0x0010:
		ost += "0x0010" 
		return ost
	elif value == 0x0020:
		ost += "0x0020" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre7Or15(value:uint16)->str:
	ost = ""
	if value == 0x0007:
		ost += "0x0007" 
		return ost
	elif value == 0x000f:
		ost += "0x000f" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre15Or31(value:uint16)->str:
	ost = ""
	if value == 0x000f:
		ost += "0x000f" 
		return ost
	elif value == 0x001f:
		ost += "0x001f" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre8Or10Or12Or16(value:uint16)->str:
	ost = ""
	if value == 0x0008:
		ost += "0x0008" 
		return ost
	elif value == 0x000a:
		ost += "0x000a" 
		return ost
	elif value == 0x000c:
		ost += "0x000c" 
		return ost
	elif value == 0x0010:
		ost += "0x0010" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre7Or9Or11Or15(value:uint16)->str:
	ost = ""
	if value == 0x0007:
		ost += "0x0007" 
		return ost
	elif value == 0x0009:
		ost += "0x0009" 
		return ost
	elif value == 0x000b:
		ost += "0x000b" 
		return ost
	elif value == 0x000f:
		ost += "0x000f" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre8Or12To16(value:uint16)->str:
	ost = ""
	if value == 0x0008:
		ost += "0x0008" 
		return ost
	elif value == 0x000c:
		ost += "0x000c" 
		return ost
	elif value == 0x000d:
		ost += "0x000d" 
		return ost
	elif value == 0x000e:
		ost += "0x000e" 
		return ost
	elif value == 0x000f:
		ost += "0x000f" 
		return ost
	elif value == 0x0010:
		ost += "0x0010" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre7Or11To15(value:uint16)->str:
	ost = ""
	if value == 0x0007:
		ost += "0x0007" 
		return ost
	elif value == 0x000a:
		ost += "0x000a" 
		return ost
	elif value == 0x000b:
		ost += "0x000b" 
		return ost
	elif value == 0x000c:
		ost += "0x000c" 
		return ost
	elif value == 0x000d:
		ost += "0x000d" 
		return ost
	elif value == 0x000e:
		ost += "0x000e" 
		return ost
	elif value == 0x000f:
		ost += "0x000f" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre8Or12Or16(value:uint16)->str:
	ost = ""
	if value == 0x0008:
		ost += "0x0008" 
		return ost
	elif value == 0x000c:
		ost += "0x000c" 
		return ost
	elif value == 0x0010:
		ost += "0x0010" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre7Or11Or15(value:uint16)->str:
	ost = ""
	if value == 0x0007:
		ost += "0x0007" 
		return ost
	elif value == 0x000b:
		ost += "0x000b" 
		return ost
	elif value == 0x000f:
		ost += "0x000f" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre6To16(value:uint16)->str:
	ost = ""
	if value == 0x0006:
		ost += "0x0006" 
		return ost
	elif value == 0x0007:
		ost += "0x0007" 
		return ost
	elif value == 0x0008:
		ost += "0x0008" 
		return ost
	elif value == 0x0009:
		ost += "0x0009" 
		return ost
	elif value == 0x000a:
		ost += "0x000a" 
		return ost
	elif value == 0x000b:
		ost += "0x000b" 
		return ost
	elif value == 0x000c:
		ost += "0x000c" 
		return ost
	elif value == 0x000d:
		ost += "0x000d" 
		return ost
	elif value == 0x000e:
		ost += "0x000e" 
		return ost
	elif value == 0x000f:
		ost += "0x000f" 
		return ost
	elif value == 0x0010:
		ost += "0x0010" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre5To15(value:uint16)->str:
	ost = ""
	if value == 0x0005:
		ost += "0x0005" 
		return ost
	elif value == 0x0006:
		ost += "0x0006" 
		return ost
	elif value == 0x0007:
		ost += "0x0007" 
		return ost
	elif value == 0x0008:
		ost += "0x0008" 
		return ost
	elif value == 0x0009:
		ost += "0x0009" 
		return ost
	elif value == 0x000a:
		ost += "0x000a" 
		return ost
	elif value == 0x000b:
		ost += "0x000b" 
		return ost
	elif value == 0x000c:
		ost += "0x000c" 
		return ost
	elif value == 0x000d:
		ost += "0x000d" 
		return ost
	elif value == 0x000e:
		ost += "0x000e" 
		return ost
	elif value == 0x000f:
		ost += "0x000f" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre8To15(value:uint16)->str:
	ost = ""
	if value == 0x0008:
		ost += "0x0008" 
		return ost
	elif value == 0x0009:
		ost += "0x0009" 
		return ost
	elif value == 0x000A:
		ost += "0x000A" 
		return ost
	elif value == 0x000B:
		ost += "0x000B" 
		return ost
	elif value == 0x000C:
		ost += "0x000C" 
		return ost
	elif value == 0x000D:
		ost += "0x000D" 
		return ost
	elif value == 0x000E:
		ost += "0x000E" 
		return ost
	elif value == 0x000F:
		ost += "0x000F" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre7To15(value:uint16)->str:
	ost = ""
	if value == 0x0007:
		ost += "0x0007" 
		return ost
	elif value == 0x0008:
		ost += "0x0008" 
		return ost
	elif value == 0x0009:
		ost += "0x0009" 
		return ost
	elif value == 0x000A:
		ost += "0x000A" 
		return ost
	elif value == 0x000B:
		ost += "0x000B" 
		return ost
	elif value == 0x000C:
		ost += "0x000C" 
		return ost
	elif value == 0x000D:
		ost += "0x000D" 
		return ost
	elif value == 0x000E:
		ost += "0x000E" 
		return ost
	elif value == 0x000F:
		ost += "0x000F" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre8To16(value:uint16)->str:
	ost = ""
	if value == 0x0008:
		ost += "0x0008" 
		return ost
	elif value == 0x0009:
		ost += "0x0009" 
		return ost
	elif value == 0x000A:
		ost += "0x000A" 
		return ost
	elif value == 0x000B:
		ost += "0x000B" 
		return ost
	elif value == 0x000C:
		ost += "0x000C" 
		return ost
	elif value == 0x000D:
		ost += "0x000D" 
		return ost
	elif value == 0x000E:
		ost += "0x000E" 
		return ost
	elif value == 0x000F:
		ost += "0x000F" 
		return ost
	elif value == 0x0010:
		ost += "0x0010" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre9To16(value:uint16)->str:
	ost = ""
	if value == 0x0009:
		ost += "0x0009" 
		return ost
	elif value == 0x000A:
		ost += "0x000A" 
		return ost
	elif value == 0x000B:
		ost += "0x000B" 
		return ost
	elif value == 0x000C:
		ost += "0x000C" 
		return ost
	elif value == 0x000D:
		ost += "0x000D" 
		return ost
	elif value == 0x000E:
		ost += "0x000E" 
		return ost
	elif value == 0x000F:
		ost += "0x000F" 
		return ost
	elif value == 0x0010:
		ost += "0x0010" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre10To16(value:uint16)->str:
	ost = ""
	if value == 0x000A:
		ost += "0x000A" 
		return ost
	elif value == 0x000B:
		ost += "0x000B" 
		return ost
	elif value == 0x000C:
		ost += "0x000C" 
		return ost
	elif value == 0x000D:
		ost += "0x000D" 
		return ost
	elif value == 0x000E:
		ost += "0x000E" 
		return ost
	elif value == 0x000F:
		ost += "0x000F" 
		return ost
	elif value == 0x0010:
		ost += "0x0010" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre12To16(value:uint16)->str:
	ost = ""
	if value == 0x000C:
		ost += "0x000C" 
		return ost
	elif value == 0x000D:
		ost += "0x000D" 
		return ost
	elif value == 0x000E:
		ost += "0x000E" 
		return ost
	elif value == 0x000F:
		ost += "0x000F" 
		return ost
	elif value == 0x0010:
		ost += "0x0010" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre11To15(value:uint16)->str:
	ost = ""
	if value == 0x000B:
		ost += "0x000B" 
		return ost
	elif value == 0x000C:
		ost += "0x000C" 
		return ost
	elif value == 0x000D:
		ost += "0x000D" 
		return ost
	elif value == 0x000E:
		ost += "0x000E" 
		return ost
	elif value == 0x000F:
		ost += "0x000F" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre1Or8(value:uint16)->str:
	ost = ""
	if value == 0x0001:
		ost += "0x0001" 
		return ost
	elif value == 0x0008:
		ost += "0x0008" 
		return ost
	else:
		return ""

def BinaryValueDescription_BitsAre0Or7(value:uint16)->str:
	ost = ""
	if value == 0x0001:
		ost += "0x0001" 
		return ost
	elif value == 0x0007:
		ost += "0x0007" 
		return ost
	else:
		return ""

def BinaryValueDescription_CurveDataValueRepresentation(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "Unsigned Short(US)" 
		return ost
	elif value == 0x0001:
		ost += "Signed Short(SS)" 
		return ost
	elif value == 0x0002:
		ost += "Floating Point Single(FL)" 
		return ost
	elif value == 0x0003:
		ost += "Floating Point Double(FD)" 
		return ost
	elif value == 0x0004:
		ost += "Signed Long(SL)" 
		return ost
	else:
		return ""

def BinaryValueDescription_CurveDataDescriptor(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "Interval Spacing" 
		return ost
	elif value == 0x0001:
		ost += "Values" 
		return ost
	else:
		return ""

def BinaryValueDescription_AudioType(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "None" 
		return ost
	elif value == 0x0001:
		ost += "Doppler Audio" 
		return ost
	elif value == 0x0002:
		ost += "Voice Audio" 
		return ost
	elif value == 0x0003:
		ost += "Phono Audio" 
		return ost
	else:
		return ""

def BinaryValueDescription_AudioSampleFormat(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "16 Bit Signed LSB First Interleaved Per Channel" 
		return ost
	elif value == 0x0001:
		ost += "8 bit Signed Interleaved Per Channel" 
		return ost
	else:
		return ""

def BinaryValueDescription_NumberOfChannels(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "Mono" 
		return ost
	elif value == 0x0001:
		ost += "Stereo" 
		return ost
	else:
		return ""

def BinaryValueDescription_UltrasoundColorDataPresent(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "Ultrasound color data not present in image" 
		return ost
	elif value == 0x0001:
		ost += "Ultrasound color data is present in image" 
		return ost
	else:
		return ""

def BinaryValueDescription_PreferredPlaybackSequencing(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "Looping" 
		return ost
	elif value == 0x0001:
		ost += "Sweeping" 
		return ost
	else:
		return ""

def BinaryValueDescription_PreferredPlaybackSequencingForHangingProtocol(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "Looping" 
		return ost
	elif value == 0x0001:
		ost += "Sweeping" 
		return ost
	elif value == 0x0002:
		ost += "Stop" 
		return ost
	else:
		return ""

def BinaryValueDescription_PreferredPlaybackSequencingForStructuredDisplay(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "Looping" 
		return ost
	elif value == 0x0001:
		ost += "Sweeping" 
		return ost
	elif value == 0x0002:
		ost += "Stop" 
		return ost
	else:
		return ""

def BinaryValueDescription_FileSetConsistencyFlag(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "No known inconsistencies" 
		return ost
	elif value == 0xffff:
		ost += "Inconsistencies may be present" 
		return ost
	else:
		return ""

def BinaryValueDescription_RecordInUseFlag(value:uint16)->str:
	ost = ""
	if value == 0x0000:
		ost += "Record is inactive" 
		return ost
	elif value == 0xffff:
		ost += "Record is in use" 
		return ost
	else:
		return ""

def BinaryValueDescription_PixelIntensityRelationshipSign(value:uint16)->str:
	ost = ""
	if value == 0x0001:
		ost += "Lower pixel values correspond to lower X-Ray intensity" 
		return ost
	elif value == 0xffff:
		ost += "Higher pixel values correspond to lower X-Ray intensity" 
		return ost
	else:
		return ""

def BinaryValueDescription_AllPossibleOverlayGroups(value:uint16)->str:
	ost = ""
	if value == 0x6000:
		ost += "0x6000" 
		return ost
	elif value == 0x6002:
		ost += "0x6002" 
		return ost
	elif value == 0x6004:
		ost += "0x6004" 
		return ost
	elif value == 0x6006:
		ost += "0x6006" 
		return ost
	elif value == 0x6008:
		ost += "0x6008" 
		return ost
	elif value == 0x600a:
		ost += "0x600a" 
		return ost
	elif value == 0x600c:
		ost += "0x600c" 
		return ost
	elif value == 0x600e:
		ost += "0x600e" 
		return ost
	elif value == 0x6010:
		ost += "0x6010" 
		return ost
	elif value == 0x6012:
		ost += "0x6012" 
		return ost
	elif value == 0x6014:
		ost += "0x6014" 
		return ost
	elif value == 0x6016:
		ost += "0x6016" 
		return ost
	elif value == 0x6018:
		ost += "0x6018" 
		return ost
	elif value == 0x601a:
		ost += "0x601a" 
		return ost
	elif value == 0x601c:
		ost += "0x601c" 
		return ost
	elif value == 0x601e:
		ost += "0x601e" 
		return ost
	else:
		return ""

def BinaryValueDescription_Two(value:uint16)->str:
	ost = ""
	if value == 2:
		ost += "2" 
		return ost
	else:
		return ""

def BinaryValueDescription_ImageRotationValues(value:uint16)->str:
	ost = ""
	if value == 0:
		ost += "0" 
		return ost
	elif value == 90:
		ost += "90" 
		return ost
	elif value == 180:
		ost += "180" 
		return ost
	elif value == 270:
		ost += "270" 
		return ost
	else:
		return ""

