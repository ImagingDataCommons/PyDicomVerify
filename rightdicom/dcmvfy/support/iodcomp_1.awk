#  iodcomp.awk Copyright (c) 1993-2018, David A. Clunie DBA PixelMed Publishing. All rights reserved.
# create C++ headers from composite iod template

# can set these values on the command line:
#


NR==1	{
	print "# Automatically generated from template - EDITS WILL BE LOST"
	print ""
	print "# Generated by iodcomp.awk with options " role " " outname
	print ""
	print "from rightdicom.dcmvfy.module_h import *"
	print "from pydicom.dataset import Dataset"


	iodcomp=""
	ie=""
	}

/^[ 	]*CompositeIOD=/ {

	iodcomp=""
	if (match($0,"CompositeIOD=\"[^\"]*\""))
		iodcomp=substr($0,RSTART+length("CompositeIOD=\""),
			RLENGTH-length("CompositeIOD=\"")-1);

	condition=""
	if (match($0,"Condition=\"[^\"]*\""))
		condition=substr($0,RSTART+length("Condition=\""),
			RLENGTH-length("Condition=\"")-1);

	profile=""
	if (match($0,"Profile=\"[^\"]*\""))
		profile=substr($0,RSTART+length("Profile=\""),
			RLENGTH-length("Profile=\"")-1);

	retired="false"
	if (match($0,"[Rr]etired=\"[^\"]*\""))
		retired=substr($0,RSTART+length("retired=\""),
			RLENGTH-length("retired=\"")-1);
	print "def CompositeIOD_" iodcomp "_verify(ds:Dataset, verbose:bool, log:list, fix_trivials:bool)->bool: "
	print "\tglobal_success = True"
	print "\tpartial_success = True"
	print ""
	print ""
	print "\tif verbose:"
	print "\t\tlog.append(\"MMsgDC(Verifying) MMsgDC(CompositeInformationObject)"  iodcomp "\")"
	print ""
}

/^[ 	]*CompositeIODEnd/ {

	print "\treturn global_success"
	print ""
	iodcomp=""

	}

/^[ 	]*Module/ {

	module=""
	if (match($0,"Module=\"[^\"]*\""))
		module=substr($0,RSTART+length("Module=\""),
			RLENGTH-length("Module=\"")-1);

	usage=""
	if (match($0,"Usage=\"[^\"]*\""))
		usage=substr($0,RSTART+length("Usage=\""),
			RLENGTH-length("Usage=\"")-1);

	condition=""
	if (match($0,"Condition=\"[^\"]*\""))
		condition=substr($0,RSTART+length("Condition=\""),
			RLENGTH-length("Condition=\"")-1);
			
			
			
	indent = "";
	if (length(condition) > 0) {
		print "\tif Condition_" condition "(ds,0,ds) :"
		indent = "\t";
	}
	print indent"\tpartial_success = Module_" module "_verify(ds, ds, ds, verbose, log, fix_trivials)"
	print indent"\tglobal_success = global_success and partial_success"
	print indent"\tif verbose:"
	print indent"\t\tlog.append( \"" iodcomp " success after verifying " module " \" + (\"success\" if partial_success else \"failure\")) ";
	print ""
			



	# should put in required module checking here ?
	

}

/^[ 	]*InformationEntity=/ {
	ie=""
	if (match($0,"InformationEntity=\"[^\"]*\""))
		ie=substr($0,RSTART+length("InformationEntity=\""),
			RLENGTH-length("InformationEntity=\"")-1);
}



